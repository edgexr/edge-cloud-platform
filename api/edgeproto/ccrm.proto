// Copyright 2024 EdgeXR, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "tools/protogen/protogen.proto";
import "cloudletkey.proto";
import "cloudlet.proto";
import "flavor.proto";
import "refs.proto";
import "metric.proto";
import "result.proto";
import "exec.proto";
import "clusterinst.proto";
import "appinst.proto";
import "trustpolicyexception.proto";
import "infraresources.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;


message StreamStatus {
    // Cache update type
    int32 cache_update_type = 3;
    // Status value
    string status = 4;
    option (protogen.notify_message) = true;
}
  
message InfraResourceMap {
    // Infra resources map
    map<string, InfraResource> infra_resources = 1 [(gogoproto.nullable) = false];
}

message ClusterResourcesReq {
    // Cloudlet
    CloudletKey cloudlet_key = 1;
    // VM Resources
    repeated VMResource vm_resources = 2 [(gogoproto.nullable) = false];
    // Infra Resources Map
    map<string, InfraResource> infra_resources = 3 [(gogoproto.nullable) = false];
}

message ClusterResourceMetricReq {
    // Cloudlet
    CloudletKey cloudlet_key = 1;
    // Resource Metric
    Metric res_metric = 2;
    // VM Resources
    repeated VMResource vm_resources = 3 [(gogoproto.nullable) = false];
}

message NameSanitizeReq {
    // Cloudlet
    CloudletKey cloudlet_key = 1;
    // String value
    string message = 2;
}

message CloudletExecReq {
    // Cloudlet
    CloudletKey cloudlet_key = 1;
    // ExecRequest
    ExecRequest exec_req = 2;
}

service CloudletPlatformAPI {
    rpc GetCloudletManifest(CloudletKey) returns (CloudletManifest) {}
    rpc GetClusterAdditionalResources(ClusterResourcesReq) returns (InfraResourceMap) {}
    rpc GetClusterAdditionalResourceMetric(ClusterResourceMetricReq) returns (Metric) {}
    rpc GetRestrictedCloudletStatus(CloudletKey) returns (stream StreamStatus) {}
    rpc GetRootLbFlavor(CloudletKey) returns (Flavor) {}
    rpc ProcessExecRequest(CloudletExecReq) returns (ExecRequest) {}
    rpc NameSanitize(NameSanitizeReq) returns(Result) {}
    rpc ApplyCloudlet(Cloudlet) returns (stream CloudletInfo) {}
    rpc RefreshCerts(Cloudlet) returns (Result) {}
    rpc GetCloudletResources(Cloudlet) returns (InfraResourceMap) {}
    option (protogen.internal_api) = true;
}

service ClusterPlatformAPI {
    rpc ApplyClusterInst(ClusterInst) returns (stream ClusterInstInfo) {}
    rpc NameSanitize(NameSanitizeReq) returns(Result) {}
    option (protogen.internal_api) = true;
}

service AppInstPlatformAPI {
    rpc ApplyAppInst(AppInst) returns (stream AppInstInfo) {}
    rpc ApplyTrustPolicyException(TPEInstanceState) returns (Result) {}
    rpc NameSanitize(NameSanitizeReq) returns(Result) {}
    option (protogen.internal_api) = true;
}