// Copyright 2022 MobiledgeX, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Application proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "result.proto";
import "cloudletkey.proto";
import "trustpolicy.proto";
import "tools/protogen/protogen.proto";
import "flavor.proto";
import "resources.proto";
import "decimal.proto";
import "gogoproto/gogo.proto";
import "dme/loc.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// It is important that embedded key structs are not referenced by a
// pointer, otherwise the enclosing struct cannot properly function
// as the key to a hash table. Thus embedded key structs have nullable false.

// Application unique key
//
// AppKey uniquely identifies an App
message AppKey {
  // App developer organization
  string organization = 1 [(protogen.keytag) = "apporg"];
  // App name
  string name = 2 [(protogen.keytag) = "app"];
  // App version
  string version = 3 [(protogen.keytag) = "appver"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// ImageType
//
// ImageType specifies image type of an App
//
// 0: `IMAGE_TYPE_UNKNOWN`
// 1: `IMAGE_TYPE_DOCKER`
// 2: `IMAGE_TYPE_QCOW`
// 3: `IMAGE_TYPE_HELM`
// 4: `IMAGE_TYPE_OVF`

enum ImageType {
  // Unknown image type
  IMAGE_TYPE_UNKNOWN = 0;
  // Docker container image type compatible either with Docker or Kubernetes
  IMAGE_TYPE_DOCKER = 1;
  // QCOW2 virtual machine image type
  IMAGE_TYPE_QCOW = 2;
  // Helm chart is a separate image type
  IMAGE_TYPE_HELM = 3;
  // OVF is for VMWare VCloud Director. A VMDK and optional MF file should also be present
  IMAGE_TYPE_OVF = 4;
  // OVA is for VMWare VCloud Director.
  IMAGE_TYPE_OVA = 5;
}

// The selected profile name will be included 
// as the "qos" value in the qos-senf/v1/sessions POST.
enum QosSessionProfile {
  // Specifies that no priority session should be created
  QOS_NO_PRIORITY = 0;
  // Corresponds to a specific set of network parameters for low latency that will be 
  // negotiated with the network provider in advance
  QOS_LOW_LATENCY = 1;
  // Downlink traffic from AppInst to client is prioritized up to 20Mbps
  QOS_THROUGHPUT_DOWN_S = 2;
  // Downlink traffic from AppInst to client is prioritized up to 50Mbps
  QOS_THROUGHPUT_DOWN_M = 3;
  // Downlink traffic from AppInst to client is prioritized up to 100Mbps
  QOS_THROUGHPUT_DOWN_L = 4;
}

// VmAppOsType
//
// VmAppOsType specifies the Operating System for VM based Apps
//
// 0: 'VM_APP_OS_UNKNOWN'
// 1: 'VM_APP_OS_LINUX'
// 2: 'VM_APP_OS_WINDOWS_10'
// 3: 'VM_APP_OS_WINDOWS_2012'
// 4: 'VM_APP_OS_WINDOWS_2016'
// 5: 'VM_APP_OS_WINDOWS_2019'

enum VmAppOsType {
  // Unknown OS type
  VM_APP_OS_UNKNOWN = 0;
  // All Linux 64 bit varieties
  VM_APP_OS_LINUX = 1;
  // Windows 10
  VM_APP_OS_WINDOWS_10 = 2;
  // Windows 2012 Server
  VM_APP_OS_WINDOWS_2012 = 3;
  // Windows 2016 Server
  VM_APP_OS_WINDOWS_2016 = 4;
  // Windows 2019 Server
  VM_APP_OS_WINDOWS_2019 = 5;
}
// DeleteType
//
// DeleteType specifies if AppInst can be auto deleted or not
//
// 0: `NO_AUTO_DELETE`
// 1: `AUTO_DELETE`
enum DeleteType {
  // No autodelete
  NO_AUTO_DELETE = 0;
  // Autodelete
  AUTO_DELETE = 1;
}

// (Deprecated) AccessType
//
// AccessType indicates how to access the app
//
// 0: `ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT`
// 1: `ACCESS_TYPE_DIRECT`
// 2: `ACCESS_TYPE_LOAD_BALANCER`
enum AccessType {
  // Default load balancer or direct based on deployment
  ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT = 0;
  // Direct access with no load balancer
  ACCESS_TYPE_DIRECT = 1;
    // Access via a load balancer
  ACCESS_TYPE_LOAD_BALANCER = 2;
}

// ConfigFile
message ConfigFile {
  // Kind (type) of config, i.e. envVarsYaml, helmCustomizationYaml
  string kind = 1;
  // Config file contents or URI reference
  string config = 2;
}

// Application
//
// App belongs to developer organizations and is used to provide information about their application.
message App {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  // required: true
  AppKey key = 2 [(gogoproto.nullable) = false];
  // URI of where image resides. For container images, this may be a path
  // on docker hub, i.e. "nginx:latest" or "nginx/nginx-ingress:5.2-alpine",
  // or a full path like "ghcr.io/cloudnative-pg/postgresql:14.9".
  // For helm charts, the format is either "https://<helm-repo>:<repo-name>/<chart-name>", i.e. "https://charts.bitnami.com/bitnami:bitnami/redis",
  // or an OCI path, i.e. "oci://ghcr.io/company/chart". Note for Helm
  // the chart version goes on the App Annotations field, i.e.
  // "version=1.2.3,wait=true,timeout=60". For VM images, this should be
  // an http(s) URL to the image file.
  string image_path = 4 [(protogen.backend) = true];
  // Image type
  ImageType image_type = 5;
  // Comma separated list of protocol:port pairs that the App listens on.
  // Ex: "tcp:80,udp:10002".
  // Also supports additional configurations per port:
  // (1) tls (tcp-only) - Enables TLS on specified port. Ex: "tcp:443:tls".
  // (2) nginx (udp-only) - Use NGINX LB instead of envoy for specified port. Ex: "udp:10001:nginx".
  // (3) maxpktsize (udp-only) - Configures maximum UDP datagram size allowed on port for both upstream/downstream traffic. Ex: "udp:10001:maxpktsize=8000".
  // (4) intvis (internal-visibility)- Port is not externally accessible. Ex: "tcp:9000:intvis"
  // (5) id - Port ID. Ex: "tcp:9000:id=p9000"
  // (6) pathprefix (http-only) - Specifies the path prefix to use in the kubernetes ingress, required if multiple http ports are present, defaults to "/"
  // (7) svcname - For Kubernetes apps, if there are multiple of the same port on different services, this denotes the service name. Ex: "tcp:9000:tls:svcname=svc1"
  string access_ports = 7;
  // Default flavor for the App, which may be overridden by the AppInst
  FlavorKey default_flavor = 9 [(gogoproto.nullable) = false, (protogen.refers_to) = "Flavor"];
  // Username for authenticating to a private image registry
  string username = 57;
  // Credentials for authenticating to a private image registry, saved in encrypted storage
  string credentials = 58 [(protogen.backend) = true];
  // Public key used for authentication
  string auth_public_key = 12 [(protogen.hidetag) = "nocmp"];
  // Command that the container runs to start service, separate multiple commands by a space
  string command = 13;
  // Command args to append to command, on cli specify multiple times in order
  repeated string command_args = 46;
  // Annotations is a comma separated map of arbitrary key value pairs,
  // for example: key1=val1,key2=val2,key3="val 3"
  string annotations = 14;
  // Deployment type (kubernetes, docker, or vm)
  string deployment = 15 [(protogen.backend) = true];
  // Deployment manifest is the deployment specific manifest file/config.
  // For docker deployment, this can be a docker-compose or docker run file.
  // For kubernetes deployment, this can be a kubernetes yaml or helm chart file.
  string deployment_manifest = 16 [(protogen.backend) = true];
  // Deployment generator target to generate a basic deployment manifest
  string deployment_generator = 17 [(protogen.backend) = true];
  // Android package name used to match the App name from the Android package
  string android_package_name = 18;
  // Override actions to Controller
  DeleteType del_opt = 20;
  // Customization files passed through to implementing services
  repeated ConfigFile configs = 21;
  // True indicates App runs on all nodes of the cluster as it scales
  bool scale_with_cluster = 22;
  // True indicates App is used internally with other Apps only, and no ports are exposed externally
  bool internal_ports = 23;
  // Revision can be specified or defaults to current timestamp when app is updated
  string revision = 24 [(protogen.hidetag) = "nocmp"];
  // Official FQDN is the FQDN that the app uses to connect by default
  string official_fqdn = 25;
  // MD5Sum of the VM-based app image
  string md5sum = 26;
  // (removed) shared volume size when creating auto cluster
  reserved "default_shared_volume_size";
  reserved 27;
  // (_deprecated_) Auto provisioning policy name
  string auto_prov_policy = 28;
  // (_deprecated_) Access type
  AccessType access_type = 29; 
  // Preparing to be deleted
  bool delete_prepare = 31 [(protogen.backend) = true];
  // Auto provisioning policy names, may be specified multiple times
  repeated string auto_prov_policies = 32 [(protogen.refers_to) = "AutoProvPolicy"];
  // Delimiter to be used for template parsing, defaults to "[[ ]]"
  string template_delimiter = 33;
  // Comma separated list of protocol:port pairs that we should not run health check on.
  // Should be configured in case app does not always listen on these ports.
  // "all" can be specified if no health check to be run for this app.
  // Numerical values must be decimal format.
  // i.e. tcp:80,udp:10002
  string skip_hc_ports = 34;
  // Created at time
  distributed_match_engine.Timestamp created_at = 35 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // Updated at time
  distributed_match_engine.Timestamp updated_at = 36 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // Indicates that an instance of this app can be started on a trusted cloudlet
  bool trusted = 37;
  // Connections this app require to determine if the app is compatible with a trust policy
  repeated SecurityRule required_outbound_connections = 38 [(gogoproto.nullable) = false];
  // App is allowed to deploy as serverless containers
  bool allow_serverless = 39;
  // (_deprecated_) Replaced by KubernetesResources
  ServerlessConfig serverless_config = 40;
  // OS Type for VM Apps
  VmAppOsType vm_app_os_type = 41;
  // Alert Policies
  repeated string alert_policies = 42 [(protogen.refers_to) = "AlertPolicy"];

  // Qualifier for the requested latency profile
  QosSessionProfile qos_session_profile = 43;
  // Session duration in seconds. Maximal value of 24 hours is used if not set
  int64 qos_session_duration = 44 [(gogoproto.casttype) = "Duration"];
  // A globally unique id for the App to be used with federation
  string global_id = 45 [(protogen.backend) = true];
  // Environment variables
  map<string, string> env_vars = 47;
  // Environment variables with sensitive information, stored in encrypted storage
  map<string, string> secret_env_vars = 48;
  // For updating list and map fields, set to 'add', 'remove', or 'replace' to define how to resolve specified entries against existing entries
  string update_list_action = 49;
  // Required resources for kubernetes deployments
  KubernetesResources kubernetes_resources = 50;
  // Required resources for VM/Docker deployments
  NodeResources node_resources = 51;
  // Universally unique object ID
  string obj_id = 52 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Internal Annotations
  map<string, string> app_annotations = 53;
  // A standalone App will not share a cluster with another App unless explicitly targeted to the same cluster
  bool is_standalone = 54;
  // Specifies if the kubernetes application manages creating and deleting its own namespaces. If true, it is disallowed from deployment to multi-tenant clusters, and it is up to the application developer to manage namespace conflicts if they deploy multiple applications to the same cluster. If false, each application instance is deployed to its own namespace set by the platform.
  bool manages_own_namespaces = 55;
  // Internal compatibility version
  uint32 compatibility_version = 56 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Vendor-specific data
  map<string, string> tags = 100;

  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_custom_update) = true;
  option (protogen.alias) = "appname=Key.Name,appvers=Key.Version,apporg=Key.Organization,defaultflavor=DefaultFlavor.Name";
  option (protogen.noconfig) = "DeletePrepare,CreatedAt,UpdatedAt,DelOpt,AutoProvPolicy,CompatibilityVersion";
  option (protogen.uses_org) = "key=Organization";
  option (protogen.generate_lookup_by_sublist) = "PolicyKey:AutoProvPolicy";
}

message ServerlessConfig {
  // Virtual CPUs allocation per container when serverless, may be decimal in increments of 0.001
  Udec64 vcpus = 1 [(gogoproto.nullable) = false];
  // RAM allocation in megabytes per container when serverless
  uint64 ram = 2;
  // Minimum number of replicas when serverless
  uint32 min_replicas = 3;
  // GPU config
  GpuConfig gpu_config = 4 [(gogoproto.nullable) = false];
}

message GpuConfig {
  // GPU Type
  GpuType type = 1;
  // Model name or vgpu type
  string model = 2;
  // Number of instances
  int32 num_gpu = 3;
  // required memory in megabytes
  uint64 ram = 4;
}

enum GpuType {
  // None
  GPU_TYPE_NONE = 0;
  // Any type
  GPU_TYPE_ANY = 1;
  // VGPU type
  GPU_TYPE_VGPU = 2;
  // PCI passthrough
  GPU_TYPE_PCI = 3;
}

// AutoProvPolicy belonging to an app
message AppAutoProvPolicy {
  // App key
  AppKey app_key = 1 [(gogoproto.nullable) = false, (protogen.refers_to) = "App"];
  // Auto provisioning policy name
  string auto_prov_policy = 2 [(protogen.refers_to) = "AutoProvPolicy"];
  option (protogen.alias) = "appname=AppKey.Name,appvers=AppKey.Version,apporg=AppKey.Organization";
  option (protogen.also_required) = "AppKey.Name,AppKey.Version,AppKey.Organization,AutoProvPolicy";
}

message AppAlertPolicy {
  // App key
  AppKey app_key = 1 [(gogoproto.nullable) = false, (protogen.refers_to) = "App"];
  // Alert name 
  string alert_policy = 2 [(protogen.refers_to) = "AlertPolicy"];
  option (protogen.alias) = "appname=AppKey.Name,appvers=AppKey.Version,apporg=AppKey.Organization,alertpolicyname=AlertPolicy";
  option (protogen.also_required) = "AppKey.Name,AppKey.Version,AppKey.Organization,AlertPolicy";
}

message DeploymentZoneRequest {
   // Discover potential App Zones
   App app = 1;
   // Attempt to qualify zones resources for deployment
   bool dry_run_deploy = 2;
   // Optional number of worker VMs in dry run K8s Cluster, default = 2
   uint32 num_nodes = 3;
   option (protogen.alias) = "appname=App.Key.Name,appvers=App.Key.Version,apporg=Key.Organization,defaultflavor=DefaultFlavor.Name";
   option (protogen.noconfig) = "App.DeletePrepare,App.CreatedAt,App.UpdatedAt,App.DelOpt,App.AutoProvPolicy";
}

service AppApi {
  // Create Application. Creates a definition for an application for Cloudlet deployment.
  rpc CreateApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/create/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
    option (protogen.method_noconfig) = "UpdateListAction";
  }
  // Delete Application. Deletes a definition of an application. Instances of the application must be deleted first.
  rpc DeleteApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/delete/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
    option (protogen.method_noconfig) = "UpdateListAction";
  }
  // Update Application. Updates the definition of an application.
  rpc UpdateApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/update/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Show Applications. Lists all application definitions. Any fields specified will be used to filter results.
  rpc ShowApp(App) returns (stream App) {
    option (google.api.http) = {
      post: "/show/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionView,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
    option (protogen.method_noconfig) = "UpdateListAction";
  }
  // Add an AutoProvPolicy to the application definition
  rpc AddAppAutoProvPolicy(AppAutoProvPolicy) returns (Result) {
    option (google.api.http) = {
      post: "/add/appautoprovpolicy"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,AppKey.Organization";
    option (protogen.input_required) = true;
  }
  // Remove an AutoProvPolicy from the application definition
  rpc RemoveAppAutoProvPolicy(AppAutoProvPolicy) returns (Result) {
    option (google.api.http) = {
      post: "/remove/appautoprovpolicy"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,AppKey.Organization";
    option (protogen.input_required) = true;
  }
  // Add an AlertPolicy to the application definition
  rpc AddAppAlertPolicy(AppAlertPolicy) returns (Result) {
    option (google.api.http) = {
      post: "/add/appalertpolicy"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,AppKey.Organization";
    option (protogen.input_required) = true;
  }
  // Remove an AlertPolicy from the application definition
  rpc RemoveAppAlertPolicy(AppAlertPolicy) returns (Result) {
    option (google.api.http) = {
      post: "/remove/appalertpolicy"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,AppKey.Organization";
    option (protogen.input_required) = true;
  }
  // Discover zones supporting deployments of App.DefaultFlavor
  rpc ShowZonesForAppDeployment(DeploymentZoneRequest) returns (stream ZoneKey) {
   option (google.api.http) =  {
     post: "/showmapping/deploymentzones"
     body: "*"
    };
    option (protogen.mc2_api) = "ResourceZones,ActionView,";
    option (protogen.mc2_custom_authz) = true;
    option (protogen.stream_out_incremental) = true;
  }

  // Show Public Applications. Lists all public application definitions.
  rpc ShowPublicApp(App) returns (stream App) {
    option (google.api.http) = {
      post: "/show/publicapps"
      body: "*"
    };
    option (protogen.non_standard_show) = true;
    option (protogen.mc2_api) = "ResourceApps,ActionView,Key.Organization";
    option (protogen.mc2_show_custom_authz) = true;
    option (protogen.method_noconfig) = "UpdateListAction";
    option (protogen.method_not_required) = "Key.Name,Key.Organization,Key.Version";
  }

}
