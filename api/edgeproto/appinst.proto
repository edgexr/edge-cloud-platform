// Copyright 2022 MobiledgeX, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Application instance on a Cloudlet

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "result.proto";
import "tools/protogen/protogen.proto";
import "app.proto";
import "flavor.proto";
import "resources.proto";
import "common.proto";
import "cloudletkey.proto";
import "autoscalepolicy.proto";
import "cluster.proto";
import "dme/loc.proto";
import "dme/appcommon.proto";
import "gogoproto/gogo.proto";
import "edgeprotogen.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// Virtual ClusterInstKey
message VirtualClusterInstKeyV1 {
  // Name of Cluster
  ClusterKeyV1 cluster_key = 1 [(gogoproto.nullable) = false];
  // Name of Cloudlet on which the Cluster is instantiated
  CloudletKey cloudlet_key = 2 [(gogoproto.nullable) = false];
  // Name of Developer organization that this cluster belongs to
  string organization = 3 [(protogen.keytag) = "clusterorg", (protogen.skip_keytag_conflict_check) = true];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// (_deprecated_) App Instance Unique Key V1
//
// AppInstKey uniquely identifies an Application Instance (AppInst) or Application Instance state (AppInstInfo).
message AppInstKeyV1 {
  // App key
  AppKey app_key = 1 [(gogoproto.nullable) = false];
  // Cluster instance on which this is instantiated
  VirtualClusterInstKeyV1 cluster_inst_key = 4 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.refers_to) = "ClusterInst"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// (_deprecated_) App Instance Unique Key V2
//
// AppInstKey uniquely identifies an Application Instance (AppInst) or Application Instance state (AppInstInfo).
message AppInstKeyV2 {
  // App Instance name
  string name = 1 [(protogen.keytag) = "appinstv2"];
  // App Instance organization
  string organization = 2 [(protogen.keytag) = "appinstv2org"];
  // Name of Cloudlet on which to deploy the App Instance
  CloudletKey cloudlet_key = 3 [(gogoproto.nullable) = false, (protogen.refers_to) = "Cloudlet"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// App Instance Unique Key
//
// AppInstKey uniquely identifies an Application Instance (AppInst) or Application Instance state (AppInstInfo).
message AppInstKey {
  // App Instance name
  string name = 1 [(protogen.keytag) = "appinst"];
  // App Instance organization
  string organization = 2 [(protogen.keytag) = "appinstorg"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// Power State
//
// Power State of the AppInst
//
// 0: `POWER_STATE_UNKNOWN`
// 1: `POWER_ON_REQUESTED`
// 2: `POWERING_ON`
// 3: `POWER_ON`
// 4: `POWER_OFF_REQUESTED`
// 5: `POWERING_OFF`
// 6: `POWER_OFF`
// 7: `REBOOT_REQUESTED`
// 8: `REBOOTING`
// 9: `REBOOT`
// 10: `POWER_STATE_ERROR`
enum PowerState {
  // Unknown
  POWER_STATE_UNKNOWN = 0 [(edgeprotogen.enum_backend) = true];
  // Power On Requested
  POWER_ON_REQUESTED = 1 [(edgeprotogen.enum_backend) = true];
  // Powering On
  POWERING_ON = 2 [(edgeprotogen.enum_backend) = true];
  // Power On
  POWER_ON = 3;
  // Power Off Requested
  POWER_OFF_REQUESTED = 4 [(edgeprotogen.enum_backend) = true];
  // Powering Off
  POWERING_OFF = 5 [(edgeprotogen.enum_backend) = true];
  // Power Off
  POWER_OFF = 6;
  // Reboot Requested
  REBOOT_REQUESTED = 7 [(edgeprotogen.enum_backend) = true];
  // Rebooting
  REBOOTING = 8 [(edgeprotogen.enum_backend) = true];
  // Reboot
  REBOOT = 9;
  // Error
  POWER_STATE_ERROR = 10 [(edgeprotogen.enum_backend) = true];
}

// Application Instance
//
// AppInst is an instance of an App on a Cloudlet where it is defined by an App plus a ClusterInst key. 
// Many of the fields here are inherited from the App definition. 
message AppInst {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  // required: true
  AppInstKey key = 2 [(gogoproto.nullable) = false];
  // App key
  AppKey app_key = 44 [(gogoproto.nullable) = false, (protogen.refers_to) = "App"];
  // Cluster on which to deploy App Instance, may be left blank for auto-placement
  ClusterKey cluster_key = 45 [(gogoproto.nullable) = false, (protogen.refers_to) = "ClusterInst"];
  // Cloudlet on which the instance is deployed
  CloudletKey cloudlet_key = 51 [(gogoproto.nullable) = false, (protogen.refers_to) = "Cloudlet"];
  // Zone on which the instance is deployed
  ZoneKey zone_key = 53 [(gogoproto.nullable) = false];
  // Cached location of the cloudlet
  distributed_match_engine.Loc cloudlet_loc = 3 [(gogoproto.nullable) = false];
  // Base FQDN (not really URI) for the App. See Service FQDN for endpoint access.
  string uri = 4 [(protogen.backend) = true];
  // Static startup FQDN gets set when the object is created and cannot be changed
  string static_uri = 50 [(protogen.backend) = true];
  // Liveness of instance (see Liveness)
  Liveness liveness = 6 [(protogen.backend) = true];
  // For instances accessible via a shared load balancer, defines the external
  // ports on the shared load balancer that map to the internal ports
  // External ports should be appended to the Uri for L4 access.
  repeated distributed_match_engine.AppPort mapped_ports = 9 [(gogoproto.nullable) = false, (protogen.backend) = true];
  // Flavor defining resource requirements
  FlavorKey flavor = 12 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.refers_to) = "Flavor"];
  // (_deprecated_) Cloudlet-specific flavor instead of regional flavor, replaced by NodeResources/KubernetesResources CloudletNodeFlavor.
  string cloudlet_flavor = 42;
  // Current state of the AppInst on the Cloudlet
  TrackedState state = 14 [(protogen.backend) = true];
  // Any errors trying to create, update, or delete the AppInst on the Cloudlet
  repeated string errors = 15 [(protogen.backend) = true];
  // Override actions to CRM
  CRMOverride crm_override = 16;
  // AppInst runtime information
  AppInstRuntime runtime_info = 17 [(gogoproto.nullable) = false];
  // Created at time
  distributed_match_engine.Timestamp created_at = 21 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // (Deprecated) IpAccess for auto-clusters. Ignored otherwise.
  IpAccess auto_cluster_ip_access = 22 [(protogen.backend) = true];
  // StatusInfo (23) (Deprecated) status is used to reflect progress of creation or other events

  // Revision changes each time the App is updated.  Refreshing the App Instance will sync the revision with that of the App
  string revision = 24 [(protogen.hidetag) = "nocmp"];
  // Force Appinst refresh even if revision number matches App revision number.
  bool force_update = 25 [(protogen.hidetag) = "nocmp"];
  // Allow multiple instances to be updated at once
  bool update_multiple = 26 [(protogen.hidetag) = "nocmp"];
  // Customization files passed through to implementing services
  repeated ConfigFile configs = 27;
  // (removed) shared volume size when creating auto cluster
  reserved "shared_volume_size";
  reserved 28;
  // Health Check status
  distributed_match_engine.HealthCheck health_check = 29 [(protogen.backend) = true];  
  reserved "privacy_policy";
  reserved 30;
  // Power State of the AppInst
  PowerState power_state = 31;
  // Size of external volume to be attached to nodes.  This is for the root partition
  uint64 external_volume_size = 32 [(protogen.backend) = true];
  // Optional Availability Zone if any
  string availability_zone = 33 [(protogen.backend) = true];
  // (_deprecated_) Replaced by NodeResources.CloudletNodeFlavor; OS node flavor to use
  string vm_flavor = 34 [(protogen.backend) = true];
  // (_deprecated_) Optional Resources required by OS flavor if any
  string opt_res = 35 [(protogen.backend) = true];
  // Updated at time
  distributed_match_engine.Timestamp updated_at = 36 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // (_deprecated_) Real ClusterInst name
  string real_cluster_name = 37 [(protogen.backend) = true];
  // mapping of ports to load balancer IPs
  map <string, string> internal_port_to_lb_ip = 38 [(protogen.backend) = true];
  // Dedicated IP assigns an IP for this AppInst but requires platform support
  bool dedicated_ip = 39;
  // A unique id for the AppInst within the region to be used by platforms
  string unique_id = 40 [(protogen.backend) = true];
  // DNS label that is unique within the cloudlet and among other AppInsts/ClusterInsts
  string dns_label = 41 [(protogen.backend) = true];
  // Federated ID if federated AppInst
  FedAppInstKey fed_key = 43 [(gogoproto.nullable) = false, (protogen.backend) = true];
  // Internal compatibility version
  uint32 compatibility_version = 46 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Older deprecated virtual cluster
  ClusterKey virtual_cluster_key = 47 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Enable IPv6 addressing, requires platform and cloudlet support, defaults to platform setting for VM Apps and auto-clusters, otherwise defaults to target cluster instance setting.
  bool enable_ipv6 = 48;
  // Universally unique object ID
  string obj_id = 49 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Annotations
  map<string, string> annotations = 52;
  // database version model ID
  int32 db_model_id = 54 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Required resources for kubernetes deployments
  KubernetesResources kubernetes_resources = 55;
  // Required node resources for VM/Docker deployments
  NodeResources node_resources = 56;

  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_streamout) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_stream_key) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_custom_update) = true;
  option (protogen.notify_filter_cloudlet_key) = true;
  option (protogen.noconfig) = "CloudletLoc,Uri,StaticUri,MappedPorts,Liveness,CreatedAt,Revision,Errors,RuntimeInfo,VmFlavor,ExternalVolumeSize,AvailabilityZone,State,UpdatedAt,OptRes,SharedVolumeSize,AutoClusterIpAccess,InternalPortToLbIp,UniqueId,DnsLabel,FedKey,AppKey.Organization,CompatibilityVersion,VirtualClusterKey,CloudletKey";
  option (protogen.alias) = "appinstname=Key.Name,appinstorg=Key.Organization,appname=AppKey.Name,appvers=AppKey.Version,apporg=AppKey.Organization,cloudlet=CloudletKey.Name,cloudletorg=CloudletKey.Organization,federatedorg=CloudletKey.FederatedOrganization,cluster=ClusterKey.Name,clusterorg=ClusterKey.Organization,flavor=Flavor.Name";
  option (protogen.mc2_target_zone) = "ZoneKey";
  option (protogen.uses_org) = "key=Organization,val=CloudletKey.Organization";
}

// AppInst Runtime Info
//
// Runtime information of active AppInsts
message AppInstRuntime {
  // List of container names
  repeated string container_ids = 1 [(protogen.backend) = true];
}

service AppInstApi {
  // Create Application Instance. Creates an instance of an App on a Cloudlet where it is
  // defined by an App plus a ClusterInst key. Many of the fields here are inherited from
  // the App definition.
  rpc CreateAppInst(AppInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/create/appinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceAppInsts,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
    // add in UpdateMultiple for noconfig
    option (protogen.method_noconfig) = "UpdateMultiple,ForceUpdate,PowerState";
  }
  // Delete Application Instance. Deletes an instance of the App from the Cloudlet.
  rpc DeleteAppInst(AppInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/delete/appinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceAppInsts,ActionManage,Key.Organization";
    option (protogen.method_noconfig) = "PowerState";
    option (protogen.mc2_custom_authz) = true;
  }
  // Refresh Application Instance. Restarts an App instance with new App settings or image.
  rpc RefreshAppInst(AppInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/refresh/appinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceAppInsts,ActionManage,Key.Organization";
    option (protogen.method_not_required) = "Key.ClusterInstKey";
    option (protogen.method_noconfig) = "Flavor,AutoClusterIpAccess,Configs,PowerState,HealthCheck,SharedVolumeSize,VmFlavor";
  }
  // Update Application Instance. Updates an Application instance and then refreshes it.
  rpc UpdateAppInst(AppInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/update/appinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceAppInsts,ActionManage,Key.Organization";
    option (protogen.method_noconfig) = "AutoClusterIpAccess,UpdateMultiple,ForceUpdate,HealthCheck,SharedVolumeSize,VmFlavor,AppKey,ClusterKey,CloudletKey";
  }
  // Show Application Instances. Lists all the Application instances managed by the Edge Controller.
  // Any fields specified will be used to filter results.
  rpc ShowAppInst(AppInst) returns (stream AppInst) {
    option (google.api.http) = {
      post: "/show/appinst"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceAppInsts,ActionView,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  rpc HandleFedAppInstEvent(FedAppInstEvent) returns (Result) {
    option (google.api.http) = {
      post: "/fedevent/appinstinfo"
      body: "*"
    };
  }
}

// AppInstInfo provides information from the Cloudlet Resource Manager about the state of the AppInst on the Cloudlet. Whereas the AppInst defines the intent of instantiating an App on a Cloudlet, the AppInstInfo defines the current state of trying to apply that intent on the physical resources of the Cloudlet.
message AppInstInfo {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  AppInstKey key = 2 [(gogoproto.nullable) = false];
  // Id of client assigned by server (internal use only)
  int64 notify_id = 3 [(protogen.hidetag) = "nocmp"];
  // Current state of the AppInst on the Cloudlet
  TrackedState state = 4;
  // Any errors trying to create, update, or delete the AppInst on the Cloudlet
  repeated string errors = 5;
  // AppInst runtime information
  AppInstRuntime runtime_info = 6 [(gogoproto.nullable) = false];
  // status is used to reflect progress of creation or other events
  StatusInfo status = 7 [(protogen.backend) = true, (gogoproto.nullable) = false];
  // Power State of the AppInst
  PowerState power_state = 8;
  // Base FQDN for the App based on the cloudlet platform
  string uri = 9 [(protogen.backend) = true];
  // Federation AppInst Key, if any
  FedAppInstKey fed_key = 10 [(protogen.backend) = true, (gogoproto.nullable) = false];
  // Federation Port info if any
  repeated distributed_match_engine.AppPort fed_ports = 11 [(gogoproto.nullable) = false];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.parent_obj_name) = "AppInst";
  option (protogen.generate_wait_for_state) = "TrackedState";
  option (protogen.notify_cache) = true;
  option (protogen.notify_flush) = true;
  option (protogen.uses_org) = "none";
  option (protogen.ignore_refers_to) = true;
}

service AppInstInfoApi {
  // Show application instances state.
  rpc ShowAppInstInfo(AppInstInfo) returns (stream AppInstInfo) {
    option (google.api.http) = {
      post: "/show/appinstinfo"
      body: "*"
    };
  }
}

// (TODO) AppInstMetrics provide metrics collected about the application instance on the Cloudlet. They are sent to a metrics collector for analytics. They are not stored in the persistent distributed database, but are stored as a time series in some other database or files.
message AppInstMetrics {
  // what goes here?
  // Note that metrics for grpc calls can be done by a prometheus
  // interceptor in grpc, so adding call metrics here may be
  // redundant unless they're needed for billing.
  uint64 something = 5;
}

service AppInstMetricsApi {
  // Show application instance metrics.
  rpc ShowAppInstMetrics(AppInstMetrics) returns (stream AppInstMetrics) {
    option (google.api.http) = {
      post: "/show/appinstmetrics"
      body: "*"
    };
  }
}

// AppInstLookup is used to generate reverse lookup caches
message AppInstLookup {
  // unique key
  AppInstKey key = 1 [(gogoproto.nullable) = false];
  // lookup by AutoProvPolicy
  PolicyKey policy_key = 2 [(gogoproto.nullable) = false];
  option (protogen.generate_lookup_by_subfield) = "PolicyKey";
}

// AppInstLookup2 is used to generate reverse lookup caches
message AppInstLookup2 {
  // unique key
  AppInstKey key = 1 [(gogoproto.nullable) = false];
  // lookup by AutoProvPolicy
  CloudletKey cloudlet_key = 2 [(gogoproto.nullable) = false];
  option (protogen.generate_lookup_by_subfield) = "CloudletKey";
}

message AppInstLatency {
  // Unique identifier key
  AppInstKey key = 1 [(gogoproto.nullable) = false];
  option (protogen.alias) = "appinstname=Key.Name,appinstorg=Key.Organization,cloudlet=Key.CloudletKey.Name,cloudletorg=Key.CloudletKey.Organization,cloudletfedorg=Key.CloudletKey.FederatedOrganization";
}

service AppInstLatencyApi {
  // Request Latency measurements for clients connected to AppInst
  rpc RequestAppInstLatency(AppInstLatency) returns (Result) {
    option (google.api.http) = {
      post: "/request/appinstlatency"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceAppInsts,ActionManage,Key.Organization";
  }
}

// Federation AppInst Key
message FedAppInstKey {
  // Federation name
  string federation_name = 1 [(protogen.keytag) = "federationname", (protogen.skip_keytag_conflict_check) = true];
  // Federated AppInst ID
  string app_inst_id = 2 [(protogen.keytag) = "appinstid", (protogen.skip_keytag_conflict_check) = true];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// FedAppInst associates a Federated AppInst Id with the AppInst Key
message FedAppInst {
  // FedAppInst Key
  FedAppInstKey key = 1 [(gogoproto.nullable) = false];
  // AppInst Key
  AppInstKey app_inst_key = 2 [(gogoproto.nullable) = false];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.uses_org) = "none";
  option (protogen.ignore_refers_to) = true;
}

// FedAppInstEvent is received from a partner Federation
message FedAppInstEvent {
  // FedAppInst Key
  FedAppInstKey key = 1 [(gogoproto.nullable) = false];
  // Updated State if any
  TrackedState state = 2;
  // Event message or error message
  string message = 3;
  // Port info if any
  repeated distributed_match_engine.AppPort ports = 4 [(gogoproto.nullable) = false];
  // Unique Id, matches AppInst.UniqueId
  string unique_id = 5;
  option (protogen.notify_message) = true;
}
