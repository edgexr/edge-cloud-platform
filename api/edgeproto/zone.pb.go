// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zone.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	fmt "fmt"
	distributed_match_engine "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	"github.com/edgexr/edge-cloud-platform/pkg/objstore"
	"github.com/edgexr/edge-cloud-platform/pkg/util"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"go.etcd.io/etcd/client/v3/concurrency"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Zone
//
// Zone is a collection of edge sites for deploying
// applications, analagous to an availability zone.
type Zone struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key ZoneKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// Description of Zone
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Zone-specific flavors
	InfraFlavors []*FlavorInfo `protobuf:"bytes,4,rep,name=infra_flavors,json=infraFlavors,proto3" json:"infra_flavors,omitempty"`
	// Geo location, used for Federation and UI display
	Location distributed_match_engine.Loc `protobuf:"bytes,5,opt,name=location,proto3" json:"location"`
	// Universally unique object ID
	ObjId string `protobuf:"bytes,89,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// Preparing to be deleted
	DeletePrepare bool `protobuf:"varint,90,opt,name=delete_prepare,json=deletePrepare,proto3" json:"delete_prepare,omitempty"`
	// Created at time
	CreatedAt distributed_match_engine.Timestamp `protobuf:"bytes,91,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// Updated at time
	UpdatedAt distributed_match_engine.Timestamp `protobuf:"bytes,92,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (m *Zone) Reset()         { *m = Zone{} }
func (m *Zone) String() string { return proto.CompactTextString(m) }
func (*Zone) ProtoMessage()    {}
func (*Zone) Descriptor() ([]byte, []int) {
	return fileDescriptor_b71619a26b0a679a, []int{0}
}
func (m *Zone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Zone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Zone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Zone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Zone.Merge(m, src)
}
func (m *Zone) XXX_Size() int {
	return m.Size()
}
func (m *Zone) XXX_DiscardUnknown() {
	xxx_messageInfo_Zone.DiscardUnknown(m)
}

var xxx_messageInfo_Zone proto.InternalMessageInfo

type ZoneGPUs struct {
	// Zone key
	ZoneKey ZoneKey `protobuf:"bytes,1,opt,name=zone_key,json=zoneKey,proto3" json:"zone_key"`
	// List of GPUs. Note the count will either be 1 or 0, to indicate if such a GPU is available or not. The actual count present is not displayed.
	Gpus []*GPUResource `protobuf:"bytes,2,rep,name=gpus,proto3" json:"gpus,omitempty"`
}

func (m *ZoneGPUs) Reset()         { *m = ZoneGPUs{} }
func (m *ZoneGPUs) String() string { return proto.CompactTextString(m) }
func (*ZoneGPUs) ProtoMessage()    {}
func (*ZoneGPUs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b71619a26b0a679a, []int{1}
}
func (m *ZoneGPUs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZoneGPUs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZoneGPUs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZoneGPUs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneGPUs.Merge(m, src)
}
func (m *ZoneGPUs) XXX_Size() int {
	return m.Size()
}
func (m *ZoneGPUs) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneGPUs.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneGPUs proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Zone)(nil), "edgeproto.Zone")
	proto.RegisterType((*ZoneGPUs)(nil), "edgeproto.ZoneGPUs")
}

func init() { proto.RegisterFile("zone.proto", fileDescriptor_b71619a26b0a679a) }

var fileDescriptor_b71619a26b0a679a = []byte{
	// 799 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcf, 0x6b, 0x2b, 0x55,
	0x14, 0xc7, 0x73, 0x9b, 0xa4, 0x2f, 0xb9, 0x4d, 0xda, 0xd7, 0x79, 0xbe, 0xc7, 0x7d, 0xe5, 0xbd,
	0x18, 0x46, 0x17, 0xa1, 0x6f, 0xc8, 0x48, 0x1f, 0xb8, 0x28, 0x3c, 0x34, 0xa9, 0xb4, 0x94, 0x56,
	0x2d, 0xa3, 0x11, 0x5a, 0x85, 0x30, 0x99, 0x39, 0x99, 0x4e, 0x33, 0xb9, 0x77, 0x98, 0x99, 0x58,
	0xd3, 0x95, 0xb8, 0x76, 0x51, 0x74, 0x23, 0xfe, 0x05, 0x22, 0x08, 0xd2, 0xbf, 0xa2, 0xcb, 0x82,
	0x1b, 0x71, 0x21, 0xda, 0xba, 0x28, 0x5d, 0x09, 0x4d, 0xba, 0x96, 0x7b, 0xe7, 0x4e, 0x1c, 0x62,
	0xc5, 0x8a, 0xb8, 0x9b, 0xf3, 0xf3, 0x73, 0xce, 0x99, 0xef, 0xc5, 0xf8, 0x88, 0x51, 0xa8, 0xfb,
	0x01, 0x8b, 0x98, 0x52, 0x04, 0xdb, 0x01, 0xf1, 0xb9, 0xf4, 0xc4, 0x61, 0xcc, 0xf1, 0x40, 0x37,
	0x7d, 0x57, 0x37, 0x29, 0x65, 0x91, 0x19, 0xb9, 0x8c, 0x86, 0x71, 0xe2, 0xd2, 0xd3, 0x88, 0x31,
	0x2f, 0xd4, 0x85, 0xe1, 0x00, 0x9d, 0x7c, 0xc8, 0xf0, 0xa2, 0xe5, 0xb1, 0x81, 0xed, 0x41, 0xd4,
	0x83, 0xa1, 0x74, 0x95, 0x02, 0x08, 0x07, 0x5e, 0x24, 0xad, 0xf9, 0x24, 0x41, 0xda, 0x2f, 0x39,
	0xcc, 0x61, 0xe2, 0x53, 0xe7, 0x5f, 0xd2, 0x5b, 0xb6, 0xfb, 0xa0, 0x7b, 0xcc, 0x92, 0xe6, 0x42,
	0x00, 0x21, 0x1b, 0x04, 0x16, 0xc8, 0x29, 0xd4, 0xef, 0xf2, 0x38, 0xb7, 0xc7, 0x28, 0x28, 0x8f,
	0xf0, 0x6c, 0xd7, 0x05, 0xcf, 0x0e, 0x09, 0xaa, 0x66, 0x6b, 0x45, 0x43, 0x5a, 0xca, 0x32, 0xce,
	0xf6, 0x60, 0x48, 0x66, 0xaa, 0xa8, 0x36, 0xb7, 0xa2, 0xd4, 0x27, 0xdb, 0xd5, 0x79, 0xd5, 0x16,
	0x0c, 0x9b, 0xb9, 0xd3, 0x9f, 0x5f, 0xce, 0x18, 0x3c, 0x49, 0xa9, 0xe2, 0x39, 0x1b, 0x42, 0x2b,
	0x70, 0x7d, 0xbe, 0x28, 0xc9, 0x56, 0x51, 0xad, 0x68, 0xa4, 0x5d, 0xca, 0x9b, 0xb8, 0xec, 0xd2,
	0x6e, 0x60, 0xb6, 0xbb, 0x9e, 0xf9, 0x31, 0x0b, 0x42, 0x92, 0xab, 0x66, 0x6b, 0x73, 0x2b, 0x0f,
	0x53, 0x7d, 0xd7, 0x45, 0x64, 0x93, 0x76, 0x59, 0x33, 0xf7, 0xcd, 0x88, 0x20, 0xa3, 0x24, 0x2a,
	0x62, 0x77, 0xa8, 0xbc, 0x81, 0x0b, 0x1e, 0xb3, 0xc4, 0x25, 0x49, 0x5e, 0x0c, 0xf5, 0xb4, 0x6e,
	0xbb, 0x61, 0x14, 0xb8, 0x9d, 0x41, 0x04, 0x76, 0xbb, 0x6f, 0x46, 0xd6, 0x7e, 0x1b, 0xa8, 0xe3,
	0x52, 0xa8, 0x6f, 0x33, 0x4b, 0xce, 0x37, 0x29, 0x52, 0x5e, 0xc5, 0xb3, 0xac, 0x73, 0xd0, 0x76,
	0x6d, 0xb2, 0xcb, 0xe7, 0x6b, 0x96, 0x39, 0xe4, 0x8b, 0x93, 0xc7, 0x79, 0xca, 0xac, 0xbe, 0x6f,
	0xe4, 0x59, 0xe7, 0x60, 0xd3, 0x56, 0x9e, 0xe1, 0x79, 0x1b, 0x3c, 0x88, 0xa0, 0xed, 0x07, 0xe0,
	0x9b, 0x01, 0x90, 0xbd, 0x2a, 0xaa, 0x15, 0xe4, 0x48, 0xe5, 0x38, 0xb6, 0x13, 0x87, 0x94, 0x5d,
	0x8c, 0xad, 0x00, 0x4c, 0x8e, 0x37, 0x23, 0xf2, 0xa1, 0x98, 0xea, 0x95, 0xbf, 0x9f, 0xea, 0x7d,
	0xb7, 0x0f, 0x61, 0x64, 0xf6, 0xfd, 0xe6, 0x43, 0xc9, 0x2e, 0x46, 0x89, 0x4b, 0x0c, 0x5b, 0x94,
	0xdd, 0x1a, 0x11, 0x6f, 0x3d, 0xf0, 0xed, 0xa4, 0xf5, 0x47, 0xff, 0xbd, 0xb5, 0xec, 0xd6, 0x88,
	0x56, 0x4f, 0xd0, 0xe5, 0x35, 0x41, 0xbf, 0x5f, 0x13, 0xf4, 0xe9, 0x88, 0xa0, 0xe3, 0x11, 0x41,
	0x5f, 0xf1, 0x92, 0x31, 0x69, 0xad, 0x25, 0x78, 0xad, 0x95, 0x64, 0x6b, 0x6f, 0xa5, 0x37, 0xd6,
	0xb6, 0x60, 0x58, 0x5f, 0x07, 0x1b, 0x02, 0x1e, 0x7d, 0x37, 0x70, 0x4c, 0xea, 0x1e, 0x89, 0xf3,
	0x6a, 0xdb, 0xf2, 0xce, 0x9a, 0x0c, 0xbb, 0x8c, 0xae, 0x31, 0xda, 0x75, 0x9d, 0xaf, 0xc7, 0x44,
	0xa5, 0x66, 0x1f, 0x5e, 0xf0, 0xda, 0x77, 0xcc, 0x3e, 0x68, 0x2c, 0x70, 0x84, 0x91, 0xae, 0xff,
	0x7e, 0x4c, 0x32, 0x3f, 0x8d, 0x49, 0x76, 0x0b, 0x86, 0x27, 0x37, 0xe4, 0x7e, 0x0f, 0x86, 0x2f,
	0xd2, 0x61, 0xb5, 0x87, 0x0b, 0x5c, 0x78, 0x1b, 0x3b, 0xad, 0x50, 0x79, 0x8e, 0x0b, 0xfc, 0xe1,
	0xb5, 0xb9, 0x3e, 0xd1, 0x3f, 0xe8, 0xf3, 0xde, 0x51, 0x6c, 0x2a, 0xcb, 0x38, 0xe7, 0xf8, 0x83,
	0x90, 0xcc, 0x08, 0xe1, 0x3d, 0x4a, 0x15, 0x6c, 0xec, 0xb4, 0x0c, 0xf9, 0x3a, 0x0c, 0x91, 0xb3,
	0x72, 0x99, 0xc3, 0xf7, 0x78, 0x9b, 0x86, 0xef, 0x2a, 0x9f, 0x23, 0x8c, 0xe3, 0xbb, 0x88, 0xe7,
	0xb2, 0x30, 0x45, 0x5a, 0x5a, 0x4c, 0x39, 0x0c, 0xf1, 0x4e, 0xd5, 0xbd, 0xab, 0x11, 0x79, 0x96,
	0xb4, 0xe4, 0x49, 0xa1, 0xd6, 0xb0, 0xf8, 0x16, 0x6f, 0x9b, 0xd4, 0x74, 0xe2, 0x23, 0xa6, 0x97,
	0xfb, 0xf6, 0x86, 0xdc, 0x9f, 0xf6, 0x7d, 0xf6, 0xc3, 0x6f, 0x5f, 0xce, 0x2c, 0xaa, 0x25, 0x3d,
	0x96, 0x84, 0xce, 0xd7, 0x58, 0x45, 0xcb, 0xca, 0x27, 0x18, 0xc7, 0x7f, 0xe4, 0xce, 0xd3, 0xac,
	0xff, 0xcb, 0x69, 0x26, 0xe4, 0x58, 0xeb, 0x69, 0x72, 0xac, 0x8a, 0xff, 0x9f, 0x1c, 0x6b, 0x75,
	0x42, 0xee, 0xe2, 0xc2, 0x7b, 0xfb, 0xec, 0xf0, 0x76, 0xee, 0xb4, 0x43, 0x7d, 0xfd, 0x6a, 0x44,
	0x1e, 0xdf, 0x46, 0xfd, 0xc0, 0x85, 0x43, 0xed, 0x6c, 0x4c, 0x90, 0xe0, 0x2c, 0xa8, 0x58, 0x0f,
	0xf7, 0xd9, 0x61, 0x42, 0x79, 0x0d, 0x29, 0x01, 0x2e, 0x25, 0x1c, 0xa1, 0xb3, 0xbf, 0xb0, 0x1e,
	0x4c, 0x39, 0x78, 0x96, 0xba, 0x7a, 0x37, 0xde, 0x03, 0x75, 0xfe, 0x4f, 0x1e, 0x57, 0x99, 0x60,
	0x36, 0x9f, 0x9c, 0xfe, 0x5a, 0xc9, 0x9c, 0x9e, 0x57, 0xd0, 0xd9, 0x79, 0x05, 0xfd, 0x72, 0x5e,
	0x41, 0xc7, 0x17, 0x95, 0xcc, 0xd9, 0x45, 0x25, 0xf3, 0xe3, 0x45, 0x25, 0xd3, 0x99, 0x15, 0xac,
	0xe7, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x95, 0xae, 0xc5, 0x69, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ZoneApiClient is the client API for ZoneApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZoneApiClient interface {
	// Create a Zone
	CreateZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Result, error)
	// Delete a Zone
	DeleteZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Result, error)
	// Update a Zone
	UpdateZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Result, error)
	// Show Zones
	ShowZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (ZoneApi_ShowZoneClient, error)
	// Show zone GPU information
	ShowZoneGPUs(ctx context.Context, in *Zone, opts ...grpc.CallOption) (ZoneApi_ShowZoneGPUsClient, error)
}

type zoneApiClient struct {
	cc *grpc.ClientConn
}

func NewZoneApiClient(cc *grpc.ClientConn) ZoneApiClient {
	return &zoneApiClient{cc}
}

func (c *zoneApiClient) CreateZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.ZoneApi/CreateZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneApiClient) DeleteZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.ZoneApi/DeleteZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneApiClient) UpdateZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.ZoneApi/UpdateZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneApiClient) ShowZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (ZoneApi_ShowZoneClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZoneApi_serviceDesc.Streams[0], "/edgeproto.ZoneApi/ShowZone", opts...)
	if err != nil {
		return nil, err
	}
	x := &zoneApiShowZoneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZoneApi_ShowZoneClient interface {
	Recv() (*Zone, error)
	grpc.ClientStream
}

type zoneApiShowZoneClient struct {
	grpc.ClientStream
}

func (x *zoneApiShowZoneClient) Recv() (*Zone, error) {
	m := new(Zone)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zoneApiClient) ShowZoneGPUs(ctx context.Context, in *Zone, opts ...grpc.CallOption) (ZoneApi_ShowZoneGPUsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZoneApi_serviceDesc.Streams[1], "/edgeproto.ZoneApi/ShowZoneGPUs", opts...)
	if err != nil {
		return nil, err
	}
	x := &zoneApiShowZoneGPUsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZoneApi_ShowZoneGPUsClient interface {
	Recv() (*ZoneGPUs, error)
	grpc.ClientStream
}

type zoneApiShowZoneGPUsClient struct {
	grpc.ClientStream
}

func (x *zoneApiShowZoneGPUsClient) Recv() (*ZoneGPUs, error) {
	m := new(ZoneGPUs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZoneApiServer is the server API for ZoneApi service.
type ZoneApiServer interface {
	// Create a Zone
	CreateZone(context.Context, *Zone) (*Result, error)
	// Delete a Zone
	DeleteZone(context.Context, *Zone) (*Result, error)
	// Update a Zone
	UpdateZone(context.Context, *Zone) (*Result, error)
	// Show Zones
	ShowZone(*Zone, ZoneApi_ShowZoneServer) error
	// Show zone GPU information
	ShowZoneGPUs(*Zone, ZoneApi_ShowZoneGPUsServer) error
}

// UnimplementedZoneApiServer can be embedded to have forward compatible implementations.
type UnimplementedZoneApiServer struct {
}

func (*UnimplementedZoneApiServer) CreateZone(ctx context.Context, req *Zone) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZone not implemented")
}
func (*UnimplementedZoneApiServer) DeleteZone(ctx context.Context, req *Zone) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZone not implemented")
}
func (*UnimplementedZoneApiServer) UpdateZone(ctx context.Context, req *Zone) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZone not implemented")
}
func (*UnimplementedZoneApiServer) ShowZone(req *Zone, srv ZoneApi_ShowZoneServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowZone not implemented")
}
func (*UnimplementedZoneApiServer) ShowZoneGPUs(req *Zone, srv ZoneApi_ShowZoneGPUsServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowZoneGPUs not implemented")
}

func RegisterZoneApiServer(s *grpc.Server, srv ZoneApiServer) {
	s.RegisterService(&_ZoneApi_serviceDesc, srv)
}

func _ZoneApi_CreateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Zone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneApiServer).CreateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ZoneApi/CreateZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneApiServer).CreateZone(ctx, req.(*Zone))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneApi_DeleteZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Zone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneApiServer).DeleteZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ZoneApi/DeleteZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneApiServer).DeleteZone(ctx, req.(*Zone))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneApi_UpdateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Zone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneApiServer).UpdateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ZoneApi/UpdateZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneApiServer).UpdateZone(ctx, req.(*Zone))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneApi_ShowZone_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Zone)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZoneApiServer).ShowZone(m, &zoneApiShowZoneServer{stream})
}

type ZoneApi_ShowZoneServer interface {
	Send(*Zone) error
	grpc.ServerStream
}

type zoneApiShowZoneServer struct {
	grpc.ServerStream
}

func (x *zoneApiShowZoneServer) Send(m *Zone) error {
	return x.ServerStream.SendMsg(m)
}

func _ZoneApi_ShowZoneGPUs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Zone)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZoneApiServer).ShowZoneGPUs(m, &zoneApiShowZoneGPUsServer{stream})
}

type ZoneApi_ShowZoneGPUsServer interface {
	Send(*ZoneGPUs) error
	grpc.ServerStream
}

type zoneApiShowZoneGPUsServer struct {
	grpc.ServerStream
}

func (x *zoneApiShowZoneGPUsServer) Send(m *ZoneGPUs) error {
	return x.ServerStream.SendMsg(m)
}

var _ZoneApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.ZoneApi",
	HandlerType: (*ZoneApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateZone",
			Handler:    _ZoneApi_CreateZone_Handler,
		},
		{
			MethodName: "DeleteZone",
			Handler:    _ZoneApi_DeleteZone_Handler,
		},
		{
			MethodName: "UpdateZone",
			Handler:    _ZoneApi_UpdateZone_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowZone",
			Handler:       _ZoneApi_ShowZone_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowZoneGPUs",
			Handler:       _ZoneApi_ShowZoneGPUs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zone.proto",
}

func (m *Zone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Zone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Zone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintZone(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xe2
	{
		size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintZone(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xda
	if m.DeletePrepare {
		i--
		if m.DeletePrepare {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd0
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintZone(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	{
		size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintZone(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.InfraFlavors) > 0 {
		for iNdEx := len(m.InfraFlavors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InfraFlavors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintZone(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintZone(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintZone(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ZoneGPUs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneGPUs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneGPUs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gpus) > 0 {
		for iNdEx := len(m.Gpus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gpus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ZoneKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintZone(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintZone(dAtA []byte, offset int, v uint64) int {
	offset -= sovZone(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Zone) Matches(o *Zone, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Description != "" {
		if o.Description != m.Description {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.InfraFlavors != nil {
			if len(m.InfraFlavors) == 0 && len(o.InfraFlavors) > 0 || len(m.InfraFlavors) > 0 && len(o.InfraFlavors) == 0 {
				return false
			} else if m.InfraFlavors != nil && o.InfraFlavors != nil {
				if !opts.Filter && len(m.InfraFlavors) != len(o.InfraFlavors) {
					return false
				}
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.ObjId != "" {
			if o.ObjId != m.ObjId {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeletePrepare != false {
			if o.DeletePrepare != m.DeletePrepare {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
	}
	if !opts.IgnoreBackend {
	}
	return true
}

const ZoneFieldKey = "2"
const ZoneFieldKeyOrganization = "2.1"
const ZoneFieldKeyName = "2.2"
const ZoneFieldKeyFederatedOrganization = "2.3"
const ZoneFieldDescription = "3"
const ZoneFieldInfraFlavors = "4"
const ZoneFieldInfraFlavorsName = "4.1"
const ZoneFieldInfraFlavorsVcpus = "4.2"
const ZoneFieldInfraFlavorsRam = "4.3"
const ZoneFieldInfraFlavorsDisk = "4.4"
const ZoneFieldInfraFlavorsPropMap = "4.5"
const ZoneFieldInfraFlavorsPropMapKey = "4.5.1"
const ZoneFieldInfraFlavorsPropMapValue = "4.5.2"
const ZoneFieldInfraFlavorsGpus = "4.6"
const ZoneFieldInfraFlavorsGpusModelId = "4.6.1"
const ZoneFieldInfraFlavorsGpusCount = "4.6.2"
const ZoneFieldInfraFlavorsGpusVendor = "4.6.3"
const ZoneFieldInfraFlavorsGpusMemory = "4.6.4"
const ZoneFieldInfraFlavorsGpusInUse = "4.6.5"
const ZoneFieldLocation = "5"
const ZoneFieldLocationLatitude = "5.1"
const ZoneFieldLocationLongitude = "5.2"
const ZoneFieldLocationHorizontalAccuracy = "5.3"
const ZoneFieldLocationVerticalAccuracy = "5.4"
const ZoneFieldLocationAltitude = "5.5"
const ZoneFieldLocationCourse = "5.6"
const ZoneFieldLocationSpeed = "5.7"
const ZoneFieldLocationTimestamp = "5.8"
const ZoneFieldLocationTimestampSeconds = "5.8.1"
const ZoneFieldLocationTimestampNanos = "5.8.2"
const ZoneFieldObjId = "89"
const ZoneFieldDeletePrepare = "90"
const ZoneFieldCreatedAt = "91"
const ZoneFieldCreatedAtSeconds = "91.1"
const ZoneFieldCreatedAtNanos = "91.2"
const ZoneFieldUpdatedAt = "92"
const ZoneFieldUpdatedAtSeconds = "92.1"
const ZoneFieldUpdatedAtNanos = "92.2"

var ZoneAllFields = []string{
	ZoneFieldKeyOrganization,
	ZoneFieldKeyName,
	ZoneFieldKeyFederatedOrganization,
	ZoneFieldDescription,
	ZoneFieldInfraFlavorsName,
	ZoneFieldInfraFlavorsVcpus,
	ZoneFieldInfraFlavorsRam,
	ZoneFieldInfraFlavorsDisk,
	ZoneFieldInfraFlavorsPropMapKey,
	ZoneFieldInfraFlavorsPropMapValue,
	ZoneFieldInfraFlavorsGpusModelId,
	ZoneFieldInfraFlavorsGpusCount,
	ZoneFieldInfraFlavorsGpusVendor,
	ZoneFieldInfraFlavorsGpusMemory,
	ZoneFieldInfraFlavorsGpusInUse,
	ZoneFieldLocationLatitude,
	ZoneFieldLocationLongitude,
	ZoneFieldLocationHorizontalAccuracy,
	ZoneFieldLocationVerticalAccuracy,
	ZoneFieldLocationAltitude,
	ZoneFieldLocationCourse,
	ZoneFieldLocationSpeed,
	ZoneFieldLocationTimestampSeconds,
	ZoneFieldLocationTimestampNanos,
	ZoneFieldObjId,
	ZoneFieldDeletePrepare,
	ZoneFieldCreatedAtSeconds,
	ZoneFieldCreatedAtNanos,
	ZoneFieldUpdatedAtSeconds,
	ZoneFieldUpdatedAtNanos,
}

var ZoneAllFieldsMap = NewFieldMap(map[string]struct{}{
	ZoneFieldKeyOrganization:            struct{}{},
	ZoneFieldKeyName:                    struct{}{},
	ZoneFieldKeyFederatedOrganization:   struct{}{},
	ZoneFieldDescription:                struct{}{},
	ZoneFieldInfraFlavorsName:           struct{}{},
	ZoneFieldInfraFlavorsVcpus:          struct{}{},
	ZoneFieldInfraFlavorsRam:            struct{}{},
	ZoneFieldInfraFlavorsDisk:           struct{}{},
	ZoneFieldInfraFlavorsPropMapKey:     struct{}{},
	ZoneFieldInfraFlavorsPropMapValue:   struct{}{},
	ZoneFieldInfraFlavorsGpusModelId:    struct{}{},
	ZoneFieldInfraFlavorsGpusCount:      struct{}{},
	ZoneFieldInfraFlavorsGpusVendor:     struct{}{},
	ZoneFieldInfraFlavorsGpusMemory:     struct{}{},
	ZoneFieldInfraFlavorsGpusInUse:      struct{}{},
	ZoneFieldLocationLatitude:           struct{}{},
	ZoneFieldLocationLongitude:          struct{}{},
	ZoneFieldLocationHorizontalAccuracy: struct{}{},
	ZoneFieldLocationVerticalAccuracy:   struct{}{},
	ZoneFieldLocationAltitude:           struct{}{},
	ZoneFieldLocationCourse:             struct{}{},
	ZoneFieldLocationSpeed:              struct{}{},
	ZoneFieldLocationTimestampSeconds:   struct{}{},
	ZoneFieldLocationTimestampNanos:     struct{}{},
	ZoneFieldObjId:                      struct{}{},
	ZoneFieldDeletePrepare:              struct{}{},
	ZoneFieldCreatedAtSeconds:           struct{}{},
	ZoneFieldCreatedAtNanos:             struct{}{},
	ZoneFieldUpdatedAtSeconds:           struct{}{},
	ZoneFieldUpdatedAtNanos:             struct{}{},
})

var ZoneAllFieldsStringMap = map[string]string{
	ZoneFieldKeyOrganization:            "Key Organization",
	ZoneFieldKeyName:                    "Key Name",
	ZoneFieldKeyFederatedOrganization:   "Key Federated Organization",
	ZoneFieldDescription:                "Description",
	ZoneFieldInfraFlavorsName:           "Infra Flavors Name",
	ZoneFieldInfraFlavorsVcpus:          "Infra Flavors Vcpus",
	ZoneFieldInfraFlavorsRam:            "Infra Flavors Ram",
	ZoneFieldInfraFlavorsDisk:           "Infra Flavors Disk",
	ZoneFieldInfraFlavorsPropMapKey:     "Infra Flavors Prop Map Key",
	ZoneFieldInfraFlavorsPropMapValue:   "Infra Flavors Prop Map Value",
	ZoneFieldInfraFlavorsGpusModelId:    "Infra Flavors Gpus Model Id",
	ZoneFieldInfraFlavorsGpusCount:      "Infra Flavors Gpus Count",
	ZoneFieldInfraFlavorsGpusVendor:     "Infra Flavors Gpus Vendor",
	ZoneFieldInfraFlavorsGpusMemory:     "Infra Flavors Gpus Memory",
	ZoneFieldInfraFlavorsGpusInUse:      "Infra Flavors Gpus In Use",
	ZoneFieldLocationLatitude:           "Location Latitude",
	ZoneFieldLocationLongitude:          "Location Longitude",
	ZoneFieldLocationHorizontalAccuracy: "Location Horizontal Accuracy",
	ZoneFieldLocationVerticalAccuracy:   "Location Vertical Accuracy",
	ZoneFieldLocationAltitude:           "Location Altitude",
	ZoneFieldLocationCourse:             "Location Course",
	ZoneFieldLocationSpeed:              "Location Speed",
	ZoneFieldLocationTimestampSeconds:   "Location Timestamp Seconds",
	ZoneFieldLocationTimestampNanos:     "Location Timestamp Nanos",
	ZoneFieldObjId:                      "Obj Id",
	ZoneFieldDeletePrepare:              "Delete Prepare",
	ZoneFieldCreatedAtSeconds:           "Created At Seconds",
	ZoneFieldCreatedAtNanos:             "Created At Nanos",
	ZoneFieldUpdatedAtSeconds:           "Updated At Seconds",
	ZoneFieldUpdatedAtNanos:             "Updated At Nanos",
}

func (m *Zone) IsKeyField(s string) bool {
	return strings.HasPrefix(s, ZoneFieldKey+".") || s == ZoneFieldKey
}

func (m *Zone) DiffFields(o *Zone, fields *FieldMap) {
	if m.Key.Organization != o.Key.Organization {
		fields.Set(ZoneFieldKeyOrganization)
		fields.Set(ZoneFieldKey)
	}
	if m.Key.Name != o.Key.Name {
		fields.Set(ZoneFieldKeyName)
		fields.Set(ZoneFieldKey)
	}
	if m.Key.FederatedOrganization != o.Key.FederatedOrganization {
		fields.Set(ZoneFieldKeyFederatedOrganization)
		fields.Set(ZoneFieldKey)
	}
	if m.Description != o.Description {
		fields.Set(ZoneFieldDescription)
	}
	if m.InfraFlavors != nil && o.InfraFlavors != nil {
		if len(m.InfraFlavors) != len(o.InfraFlavors) {
			fields.Set(ZoneFieldInfraFlavors)
		} else {
			for i0 := 0; i0 < len(m.InfraFlavors); i0++ {
				if m.InfraFlavors[i0].Name != o.InfraFlavors[i0].Name {
					fields.Set(ZoneFieldInfraFlavorsName)
					fields.Set(ZoneFieldInfraFlavors)
				}
				if m.InfraFlavors[i0].Vcpus != o.InfraFlavors[i0].Vcpus {
					fields.Set(ZoneFieldInfraFlavorsVcpus)
					fields.Set(ZoneFieldInfraFlavors)
				}
				if m.InfraFlavors[i0].Ram != o.InfraFlavors[i0].Ram {
					fields.Set(ZoneFieldInfraFlavorsRam)
					fields.Set(ZoneFieldInfraFlavors)
				}
				if m.InfraFlavors[i0].Disk != o.InfraFlavors[i0].Disk {
					fields.Set(ZoneFieldInfraFlavorsDisk)
					fields.Set(ZoneFieldInfraFlavors)
				}
				if m.InfraFlavors[i0].PropMap != nil && o.InfraFlavors[i0].PropMap != nil {
					if len(m.InfraFlavors[i0].PropMap) != len(o.InfraFlavors[i0].PropMap) {
						fields.Set(ZoneFieldInfraFlavorsPropMap)
						fields.Set(ZoneFieldInfraFlavors)
					} else {
						for k1, _ := range m.InfraFlavors[i0].PropMap {
							_, vok1 := o.InfraFlavors[i0].PropMap[k1]
							if !vok1 {
								fields.Set(ZoneFieldInfraFlavorsPropMap)
								fields.Set(ZoneFieldInfraFlavors)
							} else {
								if m.InfraFlavors[i0].PropMap[k1] != o.InfraFlavors[i0].PropMap[k1] {
									fields.Set(ZoneFieldInfraFlavorsPropMap)
									fields.Set(ZoneFieldInfraFlavors)
									break
								}
							}
						}
					}
				} else if (m.InfraFlavors[i0].PropMap != nil && o.InfraFlavors[i0].PropMap == nil) || (m.InfraFlavors[i0].PropMap == nil && o.InfraFlavors[i0].PropMap != nil) {
					fields.Set(ZoneFieldInfraFlavorsPropMap)
					fields.Set(ZoneFieldInfraFlavors)
				}
				if m.InfraFlavors[i0].Gpus != nil && o.InfraFlavors[i0].Gpus != nil {
					if len(m.InfraFlavors[i0].Gpus) != len(o.InfraFlavors[i0].Gpus) {
						fields.Set(ZoneFieldInfraFlavorsGpus)
						fields.Set(ZoneFieldInfraFlavors)
					} else {
						for i1 := 0; i1 < len(m.InfraFlavors[i0].Gpus); i1++ {
							if m.InfraFlavors[i0].Gpus[i1].ModelId != o.InfraFlavors[i0].Gpus[i1].ModelId {
								fields.Set(ZoneFieldInfraFlavorsGpusModelId)
								fields.Set(ZoneFieldInfraFlavorsGpus)
								fields.Set(ZoneFieldInfraFlavors)
							}
							if m.InfraFlavors[i0].Gpus[i1].Count != o.InfraFlavors[i0].Gpus[i1].Count {
								fields.Set(ZoneFieldInfraFlavorsGpusCount)
								fields.Set(ZoneFieldInfraFlavorsGpus)
								fields.Set(ZoneFieldInfraFlavors)
							}
							if m.InfraFlavors[i0].Gpus[i1].Vendor != o.InfraFlavors[i0].Gpus[i1].Vendor {
								fields.Set(ZoneFieldInfraFlavorsGpusVendor)
								fields.Set(ZoneFieldInfraFlavorsGpus)
								fields.Set(ZoneFieldInfraFlavors)
							}
							if m.InfraFlavors[i0].Gpus[i1].Memory != o.InfraFlavors[i0].Gpus[i1].Memory {
								fields.Set(ZoneFieldInfraFlavorsGpusMemory)
								fields.Set(ZoneFieldInfraFlavorsGpus)
								fields.Set(ZoneFieldInfraFlavors)
							}
							if m.InfraFlavors[i0].Gpus[i1].InUse != o.InfraFlavors[i0].Gpus[i1].InUse {
								fields.Set(ZoneFieldInfraFlavorsGpusInUse)
								fields.Set(ZoneFieldInfraFlavorsGpus)
								fields.Set(ZoneFieldInfraFlavors)
							}
						}
					}
				} else if (m.InfraFlavors[i0].Gpus != nil && o.InfraFlavors[i0].Gpus == nil) || (m.InfraFlavors[i0].Gpus == nil && o.InfraFlavors[i0].Gpus != nil) {
					fields.Set(ZoneFieldInfraFlavorsGpus)
					fields.Set(ZoneFieldInfraFlavors)
				}
			}
		}
	} else if (m.InfraFlavors != nil && o.InfraFlavors == nil) || (m.InfraFlavors == nil && o.InfraFlavors != nil) {
		fields.Set(ZoneFieldInfraFlavors)
	}
	if m.Location.Latitude != o.Location.Latitude {
		fields.Set(ZoneFieldLocationLatitude)
		fields.Set(ZoneFieldLocation)
	}
	if m.Location.Longitude != o.Location.Longitude {
		fields.Set(ZoneFieldLocationLongitude)
		fields.Set(ZoneFieldLocation)
	}
	if m.Location.HorizontalAccuracy != o.Location.HorizontalAccuracy {
		fields.Set(ZoneFieldLocationHorizontalAccuracy)
		fields.Set(ZoneFieldLocation)
	}
	if m.Location.VerticalAccuracy != o.Location.VerticalAccuracy {
		fields.Set(ZoneFieldLocationVerticalAccuracy)
		fields.Set(ZoneFieldLocation)
	}
	if m.Location.Altitude != o.Location.Altitude {
		fields.Set(ZoneFieldLocationAltitude)
		fields.Set(ZoneFieldLocation)
	}
	if m.Location.Course != o.Location.Course {
		fields.Set(ZoneFieldLocationCourse)
		fields.Set(ZoneFieldLocation)
	}
	if m.Location.Speed != o.Location.Speed {
		fields.Set(ZoneFieldLocationSpeed)
		fields.Set(ZoneFieldLocation)
	}
	if m.Location.Timestamp != nil && o.Location.Timestamp != nil {
		if m.Location.Timestamp.Seconds != o.Location.Timestamp.Seconds {
			fields.Set(ZoneFieldLocationTimestampSeconds)
			fields.Set(ZoneFieldLocationTimestamp)
			fields.Set(ZoneFieldLocation)
		}
		if m.Location.Timestamp.Nanos != o.Location.Timestamp.Nanos {
			fields.Set(ZoneFieldLocationTimestampNanos)
			fields.Set(ZoneFieldLocationTimestamp)
			fields.Set(ZoneFieldLocation)
		}
	} else if (m.Location.Timestamp != nil && o.Location.Timestamp == nil) || (m.Location.Timestamp == nil && o.Location.Timestamp != nil) {
		fields.Set(ZoneFieldLocationTimestamp)
		fields.Set(ZoneFieldLocation)
	}
	if m.ObjId != o.ObjId {
		fields.Set(ZoneFieldObjId)
	}
	if m.DeletePrepare != o.DeletePrepare {
		fields.Set(ZoneFieldDeletePrepare)
	}
	if m.CreatedAt.Seconds != o.CreatedAt.Seconds {
		fields.Set(ZoneFieldCreatedAtSeconds)
		fields.Set(ZoneFieldCreatedAt)
	}
	if m.CreatedAt.Nanos != o.CreatedAt.Nanos {
		fields.Set(ZoneFieldCreatedAtNanos)
		fields.Set(ZoneFieldCreatedAt)
	}
	if m.UpdatedAt.Seconds != o.UpdatedAt.Seconds {
		fields.Set(ZoneFieldUpdatedAtSeconds)
		fields.Set(ZoneFieldUpdatedAt)
	}
	if m.UpdatedAt.Nanos != o.UpdatedAt.Nanos {
		fields.Set(ZoneFieldUpdatedAtNanos)
		fields.Set(ZoneFieldUpdatedAt)
	}
}

func (m *Zone) GetDiffFields(o *Zone) *FieldMap {
	diffFields := NewFieldMap(nil)
	m.DiffFields(o, diffFields)
	return diffFields
}

var UpdateZoneFieldsMap = NewFieldMap(map[string]struct{}{
	ZoneFieldDescription:              struct{}{},
	ZoneFieldInfraFlavors:             struct{}{},
	ZoneFieldInfraFlavorsName:         struct{}{},
	ZoneFieldInfraFlavorsVcpus:        struct{}{},
	ZoneFieldInfraFlavorsRam:          struct{}{},
	ZoneFieldInfraFlavorsDisk:         struct{}{},
	ZoneFieldInfraFlavorsPropMap:      struct{}{},
	ZoneFieldInfraFlavorsPropMapKey:   struct{}{},
	ZoneFieldInfraFlavorsPropMapValue: struct{}{},
	ZoneFieldInfraFlavorsGpus:         struct{}{},
	ZoneFieldInfraFlavorsGpusModelId:  struct{}{},
	ZoneFieldInfraFlavorsGpusCount:    struct{}{},
	ZoneFieldInfraFlavorsGpusVendor:   struct{}{},
	ZoneFieldInfraFlavorsGpusMemory:   struct{}{},
	ZoneFieldInfraFlavorsGpusInUse:    struct{}{},
	ZoneFieldObjId:                    struct{}{},
})

func (m *Zone) ValidateUpdateFields() error {
	return m.ValidateUpdateFieldsCustom(UpdateZoneFieldsMap)
}

func (m *Zone) ValidateUpdateFieldsCustom(allowedFields *FieldMap) error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for _, field := range fmap.Fields() {
		if m.IsKeyField(field) {
			continue
		}
		if !allowedFields.Has(field) {
			if _, ok := ZoneAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, ZoneAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *Zone) Clone() *Zone {
	cp := &Zone{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *Zone) AddInfraFlavors(vals ...*FlavorInfo) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.InfraFlavors {
		cur[v.String()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.String()]; found {
			continue // duplicate
		}
		m.InfraFlavors = append(m.InfraFlavors, v)
		changes++
	}
	return changes
}

func (m *Zone) RemoveInfraFlavors(vals ...*FlavorInfo) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.String()] = struct{}{}
	}
	for i := len(m.InfraFlavors); i >= 0; i-- {
		if _, found := remove[m.InfraFlavors[i].String()]; found {
			m.InfraFlavors = append(m.InfraFlavors[:i], m.InfraFlavors[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *Zone) CopyInFields(src *Zone) int {
	updateListAction := "replace"
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if fmap.HasOrHasChild("2") {
		if fmap.Has("2.1") {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if fmap.Has("2.2") {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
		if fmap.Has("2.3") {
			if m.Key.FederatedOrganization != src.Key.FederatedOrganization {
				m.Key.FederatedOrganization = src.Key.FederatedOrganization
				changed++
			}
		}
	}
	if fmap.Has("3") {
		if m.Description != src.Description {
			m.Description = src.Description
			changed++
		}
	}
	if fmap.HasOrHasChild("4") {
		if src.InfraFlavors != nil {
			if updateListAction == "add" {
				changed += m.AddInfraFlavors(src.InfraFlavors...)
			} else if updateListAction == "remove" {
				changed += m.RemoveInfraFlavors(src.InfraFlavors...)
			} else {
				m.InfraFlavors = make([]*FlavorInfo, 0)
				for k0, _ := range src.InfraFlavors {
					m.InfraFlavors = append(m.InfraFlavors, src.InfraFlavors[k0].Clone())
				}
				changed++
			}
		} else if m.InfraFlavors != nil {
			m.InfraFlavors = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("5") {
		if fmap.Has("5.1") {
			if m.Location.Latitude != src.Location.Latitude {
				m.Location.Latitude = src.Location.Latitude
				changed++
			}
		}
		if fmap.Has("5.2") {
			if m.Location.Longitude != src.Location.Longitude {
				m.Location.Longitude = src.Location.Longitude
				changed++
			}
		}
		if fmap.Has("5.3") {
			if m.Location.HorizontalAccuracy != src.Location.HorizontalAccuracy {
				m.Location.HorizontalAccuracy = src.Location.HorizontalAccuracy
				changed++
			}
		}
		if fmap.Has("5.4") {
			if m.Location.VerticalAccuracy != src.Location.VerticalAccuracy {
				m.Location.VerticalAccuracy = src.Location.VerticalAccuracy
				changed++
			}
		}
		if fmap.Has("5.5") {
			if m.Location.Altitude != src.Location.Altitude {
				m.Location.Altitude = src.Location.Altitude
				changed++
			}
		}
		if fmap.Has("5.6") {
			if m.Location.Course != src.Location.Course {
				m.Location.Course = src.Location.Course
				changed++
			}
		}
		if fmap.Has("5.7") {
			if m.Location.Speed != src.Location.Speed {
				m.Location.Speed = src.Location.Speed
				changed++
			}
		}
		if fmap.HasOrHasChild("5.8") {
			if src.Location.Timestamp != nil {
				if m.Location.Timestamp == nil {
					m.Location.Timestamp = &distributed_match_engine.Timestamp{}
				}
				if fmap.Has("5.8.1") {
					if m.Location.Timestamp.Seconds != src.Location.Timestamp.Seconds {
						m.Location.Timestamp.Seconds = src.Location.Timestamp.Seconds
						changed++
					}
				}
				if fmap.Has("5.8.2") {
					if m.Location.Timestamp.Nanos != src.Location.Timestamp.Nanos {
						m.Location.Timestamp.Nanos = src.Location.Timestamp.Nanos
						changed++
					}
				}
			} else if m.Location.Timestamp != nil {
				m.Location.Timestamp = nil
				changed++
			}
		}
	}
	if fmap.Has("89") {
		if m.ObjId != src.ObjId {
			m.ObjId = src.ObjId
			changed++
		}
	}
	if fmap.Has("90") {
		if m.DeletePrepare != src.DeletePrepare {
			m.DeletePrepare = src.DeletePrepare
			changed++
		}
	}
	if fmap.HasOrHasChild("91") {
		if fmap.Has("91.1") {
			if m.CreatedAt.Seconds != src.CreatedAt.Seconds {
				m.CreatedAt.Seconds = src.CreatedAt.Seconds
				changed++
			}
		}
		if fmap.Has("91.2") {
			if m.CreatedAt.Nanos != src.CreatedAt.Nanos {
				m.CreatedAt.Nanos = src.CreatedAt.Nanos
				changed++
			}
		}
	}
	if fmap.HasOrHasChild("92") {
		if fmap.Has("92.1") {
			if m.UpdatedAt.Seconds != src.UpdatedAt.Seconds {
				m.UpdatedAt.Seconds = src.UpdatedAt.Seconds
				changed++
			}
		}
		if fmap.Has("92.2") {
			if m.UpdatedAt.Nanos != src.UpdatedAt.Nanos {
				m.UpdatedAt.Nanos = src.UpdatedAt.Nanos
				changed++
			}
		}
	}
	return changed
}

func (m *Zone) DeepCopyIn(src *Zone) {
	m.Key.DeepCopyIn(&src.Key)
	m.Description = src.Description
	if src.InfraFlavors != nil {
		m.InfraFlavors = make([]*FlavorInfo, len(src.InfraFlavors), len(src.InfraFlavors))
		for ii, s := range src.InfraFlavors {
			var tmp_s FlavorInfo
			tmp_s.DeepCopyIn(s)
			m.InfraFlavors[ii] = &tmp_s
		}
	} else {
		m.InfraFlavors = nil
	}
	m.Location = src.Location
	m.ObjId = src.ObjId
	m.DeletePrepare = src.DeletePrepare
	m.CreatedAt = src.CreatedAt
	m.UpdatedAt = src.UpdatedAt
}

func (s *Zone) HasFields() bool {
	return true
}

type ZoneStore interface {
	Create(ctx context.Context, m *Zone, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *Zone, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *Zone, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *Zone, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*Zone, int64, error)
	Get(ctx context.Context, key *ZoneKey, buf *Zone) bool
	STMGet(stm concurrency.STM, key *ZoneKey, buf *Zone) bool
	STMPut(stm concurrency.STM, obj *Zone, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *ZoneKey)
	STMHas(stm concurrency.STM, key *ZoneKey) bool
}

type ZoneStoreImpl struct {
	kvstore objstore.KVStore
}

func NewZoneStore(kvstore objstore.KVStore) *ZoneStoreImpl {
	return &ZoneStoreImpl{kvstore: kvstore}
}

func (s *ZoneStoreImpl) Create(ctx context.Context, m *Zone, wait func(int64)) (*Result, error) {
	err := m.Validate(ZoneAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Zone", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ZoneStoreImpl) Update(ctx context.Context, m *Zone, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Zone", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur Zone
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ZoneStoreImpl) Put(ctx context.Context, m *Zone, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(ZoneAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Zone", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ZoneStoreImpl) Delete(ctx context.Context, m *Zone, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Zone", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ZoneStoreImpl) LoadOne(key string) (*Zone, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj Zone
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse Zone data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *ZoneStoreImpl) Get(ctx context.Context, key *ZoneKey, buf *Zone) bool {
	keystr := objstore.DbKeyString("Zone", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *ZoneStoreImpl) STMGet(stm concurrency.STM, key *ZoneKey, buf *Zone) bool {
	keystr := objstore.DbKeyString("Zone", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *ZoneStoreImpl) STMHas(stm concurrency.STM, key *ZoneKey) bool {
	keystr := objstore.DbKeyString("Zone", key)
	return stm.Get(keystr) != ""
}

func (s *ZoneStoreImpl) parseGetData(val []byte, buf *Zone) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = Zone{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *ZoneStoreImpl) STMPut(stm concurrency.STM, obj *Zone, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("Zone", obj.GetKey())

	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("Zone json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *ZoneStoreImpl) STMDel(stm concurrency.STM, key *ZoneKey) {
	keystr := objstore.DbKeyString("Zone", key)
	stm.Del(keystr)
}

func StoreListZone(ctx context.Context, kvstore objstore.KVStore) ([]Zone, error) {
	keyPrefix := objstore.DbKeyPrefixString("Zone") + "/"
	objs := []Zone{}
	err := kvstore.List(keyPrefix, func(key, val []byte, rev, modRev int64) error {
		obj := Zone{}
		err := json.Unmarshal(val, &obj)
		if err != nil {
			return fmt.Errorf("failed to unmarshal Zone json %s, %s", string(val), err)
		}
		objs = append(objs, obj)
		return nil
	})
	return objs, err
}

type ZoneKeyWatcher struct {
	cb func(ctx context.Context)
}

type ZoneCacheData struct {
	Obj    *Zone
	ModRev int64
}

func (s *ZoneCacheData) Clone() *ZoneCacheData {
	cp := ZoneCacheData{}
	if s.Obj != nil {
		cp.Obj = &Zone{}
		cp.Obj.DeepCopyIn(s.Obj)
	}
	cp.ModRev = s.ModRev
	return &cp
}

// ZoneCache caches Zone objects in memory in a hash table
// and keeps them in sync with the database.
type ZoneCache struct {
	Objs          map[ZoneKey]*ZoneCacheData
	Mux           util.Mutex
	List          map[ZoneKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *Zone, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *Zone, new *Zone)
	DeletedCbs    []func(ctx context.Context, old *Zone)
	KeyWatchers   map[ZoneKey][]*ZoneKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *ZoneKey)
	DeletedKeyCbs []func(ctx context.Context, key *ZoneKey)
	Store         ZoneStore
}

func NewZoneCache() *ZoneCache {
	cache := ZoneCache{}
	InitZoneCache(&cache)
	return &cache
}

func InitZoneCache(cache *ZoneCache) {
	cache.Objs = make(map[ZoneKey]*ZoneCacheData)
	cache.KeyWatchers = make(map[ZoneKey][]*ZoneKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *ZoneCache) GetTypeString() string {
	return "Zone"
}

func (c *ZoneCache) Get(key *ZoneKey, valbuf *Zone) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

// STMGet gets from the store if STM is set, otherwise gets from cache
func (c *ZoneCache) STMGet(ostm *OptionalSTM, key *ZoneKey, valbuf *Zone) bool {
	if ostm.stm != nil {
		if c.Store == nil {
			// panic, otherwise if we fallback to cache, we may silently
			// introduce race conditions and intermittent failures due to
			// reading from cache during a transaction.
			panic("ZoneCache store not set, cannot read via STM")
		}
		return c.Store.STMGet(ostm.stm, key, valbuf)
	}
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *ZoneCache) GetWithRev(key *ZoneKey, valbuf *Zone, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *ZoneCache) HasKey(key *ZoneKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *ZoneCache) GetAllKeys(ctx context.Context, cb func(key *ZoneKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *ZoneCache) GetAllLocked(ctx context.Context, cb func(obj *Zone, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		cb(data.Obj, data.ModRev)
	}
}

func (c *ZoneCache) Update(ctx context.Context, in *Zone, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *Zone) (*Zone, bool) {
		return in, true
	})
}

func (c *ZoneCache) UpdateModFunc(ctx context.Context, key *ZoneKey, modRev int64, modFunc func(old *Zone) (new *Zone, changed bool)) {
	c.Mux.Lock()
	var old *Zone
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if len(c.UpdatedCbs) > 0 || len(c.NotifyCbs) > 0 {
		newCopy := &Zone{}
		newCopy.DeepCopyIn(new)
		for _, cb := range c.UpdatedCbs {
			defer cb(ctx, old, newCopy)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				defer cb(ctx, newCopy, modRev)
			}
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &Zone{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &ZoneCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *ZoneCache) Delete(ctx context.Context, in *Zone, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *Zone) bool {
		return true
	})
}

func (c *ZoneCache) DeleteCondFunc(ctx context.Context, in *Zone, modRev int64, condFunc func(old *Zone) bool) {
	c.Mux.Lock()
	var old *Zone
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete", "key", in.GetKeyVal())
	c.Mux.Unlock()
	obj := old
	if obj == nil {
		obj = in
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, obj, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *ZoneCache) Prune(ctx context.Context, validKeys map[ZoneKey]struct{}) {
	log.SpanLog(ctx, log.DebugLevelApi, "Prune Zone", "numValidKeys", len(validKeys))
	notify := make(map[ZoneKey]*ZoneCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		obj := old.Obj
		if obj == nil {
			obj = &Zone{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *ZoneCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *ZoneCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *ZoneCache) Show(filter *Zone, cb func(ret *Zone) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func ZoneGenericNotifyCb(fn func(key *ZoneKey, old *Zone)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*ZoneKey), obj.(*Zone))
	}
}

func (c *ZoneCache) SetNotifyCb(fn func(ctx context.Context, obj *Zone, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *Zone, modRev int64){fn}
}

func (c *ZoneCache) SetUpdatedCb(fn func(ctx context.Context, old *Zone, new *Zone)) {
	c.UpdatedCbs = []func(ctx context.Context, old *Zone, new *Zone){fn}
}

func (c *ZoneCache) SetDeletedCb(fn func(ctx context.Context, old *Zone)) {
	c.DeletedCbs = []func(ctx context.Context, old *Zone){fn}
}

func (c *ZoneCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *ZoneKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *ZoneKey){fn}
}

func (c *ZoneCache) SetDeletedKeyCb(fn func(ctx context.Context, key *ZoneKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *ZoneKey){fn}
}

func (c *ZoneCache) AddUpdatedCb(fn func(ctx context.Context, old *Zone, new *Zone)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *ZoneCache) AddDeletedCb(fn func(ctx context.Context, old *Zone)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *ZoneCache) AddNotifyCb(fn func(ctx context.Context, obj *Zone, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *ZoneCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *ZoneKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *ZoneCache) AddDeletedKeyCb(fn func(ctx context.Context, key *ZoneKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *ZoneCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *ZoneCache) WatchKey(key *ZoneKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*ZoneKeyWatcher, 0)
	}
	watcher := ZoneKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching Zone", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *ZoneCache) TriggerKeyWatchers(ctx context.Context, key *ZoneKey) {
	watchers := make([]*ZoneKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *ZoneCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := Zone{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse Zone data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *ZoneCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := Zone{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	ZoneKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *ZoneCache) SyncListStart(ctx context.Context) {
	c.List = make(map[ZoneKey]struct{})
}

func (c *ZoneCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[ZoneKey]*ZoneCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		obj := val.Obj
		if obj == nil {
			obj = &Zone{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (s *ZoneCache) InitCacheWithSync(sync DataSync) {
	InitZoneCache(s)
	s.InitSync(sync)
}

func (s *ZoneCache) InitSync(sync DataSync) {
	if sync != nil {
		s.Store = NewZoneStore(sync.GetKVStore())
		sync.RegisterCache(s)
	}
}

func InitZoneCacheWithStore(cache *ZoneCache, store ZoneStore) {
	InitZoneCache(cache)
	cache.Store = store
}

func (c *ZoneCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

func (m *Zone) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *Zone) GetKey() *ZoneKey {
	return &m.Key
}

func (m *Zone) GetKeyVal() ZoneKey {
	return m.Key
}

func (m *Zone) SetKey(key *ZoneKey) {
	m.Key = *key
}

func CmpSortZone(a Zone, b Zone) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *Zone) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.InfraFlavors {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *Zone) ClearTagged(tags map[string]struct{}) {
	s.Key.ClearTagged(tags)
	if s.InfraFlavors != nil {
		for ii := 0; ii < len(s.InfraFlavors); ii++ {
			s.InfraFlavors[ii].ClearTagged(tags)
		}
	}
	if _, found := tags["nocmp"]; found {
		s.ObjId = ""
	}
	if _, found := tags["timestamp"]; found {
		s.CreatedAt = distributed_match_engine.Timestamp{}
	}
	if _, found := tags["timestamp"]; found {
		s.UpdatedAt = distributed_match_engine.Timestamp{}
	}
}

func IgnoreZoneFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ObjId")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CreatedAt")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "UpdatedAt")
	}
	return cmpopts.IgnoreFields(Zone{}, names...)
}

func (m *ZoneGPUs) Clone() *ZoneGPUs {
	cp := &ZoneGPUs{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *ZoneGPUs) AddGpus(vals ...*GPUResource) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.Gpus {
		cur[v.GetKey().GetKeyString()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.GetKey().GetKeyString()]; found {
			continue // duplicate
		}
		m.Gpus = append(m.Gpus, v)
		changes++
	}
	return changes
}

func (m *ZoneGPUs) RemoveGpus(vals ...*GPUResource) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.GetKey().GetKeyString()] = struct{}{}
	}
	for i := len(m.Gpus); i >= 0; i-- {
		if _, found := remove[m.Gpus[i].GetKey().GetKeyString()]; found {
			m.Gpus = append(m.Gpus[:i], m.Gpus[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *ZoneGPUs) CopyInFields(src *ZoneGPUs) int {
	updateListAction := "replace"
	changed := 0
	if m.ZoneKey.Organization != src.ZoneKey.Organization {
		m.ZoneKey.Organization = src.ZoneKey.Organization
		changed++
	}
	if m.ZoneKey.Name != src.ZoneKey.Name {
		m.ZoneKey.Name = src.ZoneKey.Name
		changed++
	}
	if m.ZoneKey.FederatedOrganization != src.ZoneKey.FederatedOrganization {
		m.ZoneKey.FederatedOrganization = src.ZoneKey.FederatedOrganization
		changed++
	}
	if src.Gpus != nil {
		if updateListAction == "add" {
			changed += m.AddGpus(src.Gpus...)
		} else if updateListAction == "remove" {
			changed += m.RemoveGpus(src.Gpus...)
		} else {
			m.Gpus = make([]*GPUResource, 0)
			for k0, _ := range src.Gpus {
				m.Gpus = append(m.Gpus, src.Gpus[k0].Clone())
			}
			changed++
		}
	} else if m.Gpus != nil {
		m.Gpus = nil
		changed++
	}
	return changed
}

func (m *ZoneGPUs) DeepCopyIn(src *ZoneGPUs) {
	m.ZoneKey.DeepCopyIn(&src.ZoneKey)
	if src.Gpus != nil {
		m.Gpus = make([]*GPUResource, len(src.Gpus), len(src.Gpus))
		for ii, s := range src.Gpus {
			var tmp_s GPUResource
			tmp_s.DeepCopyIn(s)
			m.Gpus[ii] = &tmp_s
		}
	} else {
		m.Gpus = nil
	}
}

// Helper method to check that enums have valid values
func (m *ZoneGPUs) ValidateEnums() error {
	if err := m.ZoneKey.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.Gpus {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *ZoneGPUs) ClearTagged(tags map[string]struct{}) {
	s.ZoneKey.ClearTagged(tags)
	if s.Gpus != nil {
		for ii := 0; ii < len(s.Gpus); ii++ {
			s.Gpus[ii].ClearTagged(tags)
		}
	}
}

func (m *Zone) IsValidArgsForCreateZone() error {
	if m.Location.Latitude != 0 {
		return fmt.Errorf("Invalid field specified: Location.Latitude, this field is only for internal use")
	}
	if m.Location.Longitude != 0 {
		return fmt.Errorf("Invalid field specified: Location.Longitude, this field is only for internal use")
	}
	if m.Location.HorizontalAccuracy != 0 {
		return fmt.Errorf("Invalid field specified: Location.HorizontalAccuracy, this field is only for internal use")
	}
	if m.Location.VerticalAccuracy != 0 {
		return fmt.Errorf("Invalid field specified: Location.VerticalAccuracy, this field is only for internal use")
	}
	if m.Location.Altitude != 0 {
		return fmt.Errorf("Invalid field specified: Location.Altitude, this field is only for internal use")
	}
	if m.Location.Course != 0 {
		return fmt.Errorf("Invalid field specified: Location.Course, this field is only for internal use")
	}
	if m.Location.Speed != 0 {
		return fmt.Errorf("Invalid field specified: Location.Speed, this field is only for internal use")
	}
	if m.Location.Timestamp != nil {
		return fmt.Errorf("Invalid field specified: Location.Timestamp, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	return nil
}

func (m *Zone) IsValidArgsForDeleteZone() error {
	if m.Location.Latitude != 0 {
		return fmt.Errorf("Invalid field specified: Location.Latitude, this field is only for internal use")
	}
	if m.Location.Longitude != 0 {
		return fmt.Errorf("Invalid field specified: Location.Longitude, this field is only for internal use")
	}
	if m.Location.HorizontalAccuracy != 0 {
		return fmt.Errorf("Invalid field specified: Location.HorizontalAccuracy, this field is only for internal use")
	}
	if m.Location.VerticalAccuracy != 0 {
		return fmt.Errorf("Invalid field specified: Location.VerticalAccuracy, this field is only for internal use")
	}
	if m.Location.Altitude != 0 {
		return fmt.Errorf("Invalid field specified: Location.Altitude, this field is only for internal use")
	}
	if m.Location.Course != 0 {
		return fmt.Errorf("Invalid field specified: Location.Course, this field is only for internal use")
	}
	if m.Location.Speed != 0 {
		return fmt.Errorf("Invalid field specified: Location.Speed, this field is only for internal use")
	}
	if m.Location.Timestamp != nil {
		return fmt.Errorf("Invalid field specified: Location.Timestamp, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	return nil
}

func (m *Zone) IsValidArgsForUpdateZone() error {
	if m.Location.Latitude != 0 {
		return fmt.Errorf("Invalid field specified: Location.Latitude, this field is only for internal use")
	}
	if m.Location.Longitude != 0 {
		return fmt.Errorf("Invalid field specified: Location.Longitude, this field is only for internal use")
	}
	if m.Location.HorizontalAccuracy != 0 {
		return fmt.Errorf("Invalid field specified: Location.HorizontalAccuracy, this field is only for internal use")
	}
	if m.Location.VerticalAccuracy != 0 {
		return fmt.Errorf("Invalid field specified: Location.VerticalAccuracy, this field is only for internal use")
	}
	if m.Location.Altitude != 0 {
		return fmt.Errorf("Invalid field specified: Location.Altitude, this field is only for internal use")
	}
	if m.Location.Course != 0 {
		return fmt.Errorf("Invalid field specified: Location.Course, this field is only for internal use")
	}
	if m.Location.Speed != 0 {
		return fmt.Errorf("Invalid field specified: Location.Speed, this field is only for internal use")
	}
	if m.Location.Timestamp != nil {
		return fmt.Errorf("Invalid field specified: Location.Timestamp, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	return nil
}

func (m *Zone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovZone(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovZone(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovZone(uint64(l))
	}
	if len(m.InfraFlavors) > 0 {
		for _, e := range m.InfraFlavors {
			l = e.Size()
			n += 1 + l + sovZone(uint64(l))
		}
	}
	l = m.Location.Size()
	n += 1 + l + sovZone(uint64(l))
	l = len(m.ObjId)
	if l > 0 {
		n += 2 + l + sovZone(uint64(l))
	}
	if m.DeletePrepare {
		n += 3
	}
	l = m.CreatedAt.Size()
	n += 2 + l + sovZone(uint64(l))
	l = m.UpdatedAt.Size()
	n += 2 + l + sovZone(uint64(l))
	return n
}

func (m *ZoneGPUs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ZoneKey.Size()
	n += 1 + l + sovZone(uint64(l))
	if len(m.Gpus) > 0 {
		for _, e := range m.Gpus {
			l = e.Size()
			n += 1 + l + sovZone(uint64(l))
		}
	}
	return n
}

func sovZone(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZone(x uint64) (n int) {
	return sovZone(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Zone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Zone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Zone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfraFlavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfraFlavors = append(m.InfraFlavors, &FlavorInfo{})
			if err := m.InfraFlavors[len(m.InfraFlavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 90:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletePrepare", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeletePrepare = bool(v != 0)
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZoneGPUs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZoneGPUs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZoneGPUs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZoneKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gpus = append(m.Gpus, &GPUResource{})
			if err := m.Gpus[len(m.Gpus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZone(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZone
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZone
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZone
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZone
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZone        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZone          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZone = fmt.Errorf("proto: unexpected end of group")
)
