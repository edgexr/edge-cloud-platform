// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletnode.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	fmt "fmt"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	"github.com/edgexr/edge-cloud-platform/pkg/objstore"
	"github.com/edgexr/edge-cloud-platform/pkg/util"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"go.etcd.io/etcd/client/v3/concurrency"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Cloudlet Node unique key
//
// CloudletNodeKey uniquely identifies a node (VM or machine) on a cloudlet
type CloudletNodeKey struct {
	// Node name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cloudlet key
	CloudletKey CloudletKey `protobuf:"bytes,2,opt,name=cloudlet_key,json=cloudletKey,proto3" json:"cloudlet_key"`
}

func (m *CloudletNodeKey) Reset()         { *m = CloudletNodeKey{} }
func (m *CloudletNodeKey) String() string { return proto.CompactTextString(m) }
func (*CloudletNodeKey) ProtoMessage()    {}
func (*CloudletNodeKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_da776be2bb92276e, []int{0}
}
func (m *CloudletNodeKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudletNodeKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudletNodeKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudletNodeKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudletNodeKey.Merge(m, src)
}
func (m *CloudletNodeKey) XXX_Size() int {
	return m.Size()
}
func (m *CloudletNodeKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudletNodeKey.DiscardUnknown(m)
}

var xxx_messageInfo_CloudletNodeKey proto.InternalMessageInfo

// CloudletNode
//
// CloudletNode keeps information about a node (VM or machine) on a cloudlet
type CloudletNode struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Unique key
	// required: true
	Key CloudletNodeKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// Type of node
	NodeType string `protobuf:"bytes,3,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	// Node role for provisioning
	NodeRole string `protobuf:"bytes,4,opt,name=node_role,json=nodeRole,proto3" json:"node_role,omitempty"`
	// Password hash
	PasswordHash string `protobuf:"bytes,5,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
	// Salt of password
	Salt string `protobuf:"bytes,6,opt,name=salt,proto3" json:"salt,omitempty"`
	// Iterations of password
	Iter int32 `protobuf:"varint,7,opt,name=iter,proto3" json:"iter,omitempty"`
	// Owner (ClusterInst, etc) tags
	OwnerTags map[string]string `protobuf:"bytes,8,rep,name=owner_tags,json=ownerTags,proto3" json:"owner_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Attributes of node set by platform
	Attributes map[string]string `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CloudletNode) Reset()         { *m = CloudletNode{} }
func (m *CloudletNode) String() string { return proto.CompactTextString(m) }
func (*CloudletNode) ProtoMessage()    {}
func (*CloudletNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_da776be2bb92276e, []int{1}
}
func (m *CloudletNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudletNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudletNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudletNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudletNode.Merge(m, src)
}
func (m *CloudletNode) XXX_Size() int {
	return m.Size()
}
func (m *CloudletNode) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudletNode.DiscardUnknown(m)
}

var xxx_messageInfo_CloudletNode proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CloudletNodeKey)(nil), "edgeproto.CloudletNodeKey")
	proto.RegisterType((*CloudletNode)(nil), "edgeproto.CloudletNode")
	proto.RegisterMapType((map[string]string)(nil), "edgeproto.CloudletNode.AttributesEntry")
	proto.RegisterMapType((map[string]string)(nil), "edgeproto.CloudletNode.OwnerTagsEntry")
}

func init() { proto.RegisterFile("cloudletnode.proto", fileDescriptor_da776be2bb92276e) }

var fileDescriptor_da776be2bb92276e = []byte{
	// 766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xcf, 0x4f, 0x1b, 0x47,
	0x14, 0xc7, 0x3d, 0xfe, 0x55, 0x3c, 0xb8, 0x05, 0xa6, 0x08, 0xa6, 0xae, 0x31, 0x96, 0xfb, 0xcb,
	0xaa, 0x2c, 0x6f, 0xe5, 0x5e, 0x5a, 0xb7, 0xa8, 0x02, 0x4a, 0x7f, 0x08, 0x15, 0xaa, 0x85, 0xe4,
	0x10, 0x29, 0x72, 0x06, 0xef, 0x63, 0xbd, 0x62, 0xd9, 0xb1, 0x76, 0xc7, 0xb1, 0x36, 0xa7, 0x28,
	0x8a, 0x72, 0x0d, 0x0a, 0x97, 0x28, 0x97, 0x44, 0x1c, 0x73, 0x8a, 0x72, 0xcc, 0x5f, 0xc0, 0x11,
	0x29, 0x17, 0x4e, 0x51, 0x02, 0x39, 0x44, 0x9c, 0x22, 0x61, 0x48, 0x8e, 0xd1, 0x8e, 0x7f, 0xb0,
	0x26, 0x18, 0x88, 0x72, 0xc9, 0xed, 0xcd, 0xf7, 0xfb, 0xe6, 0xbd, 0xcf, 0xbc, 0xd9, 0x59, 0x4c,
	0xca, 0x26, 0xaf, 0x69, 0x26, 0x08, 0x8b, 0x6b, 0x90, 0xaf, 0xda, 0x5c, 0x70, 0x12, 0x03, 0x4d,
	0x07, 0x19, 0x26, 0x92, 0x3a, 0xe7, 0xba, 0x09, 0x0a, 0xab, 0x1a, 0x0a, 0xb3, 0x2c, 0x2e, 0x98,
	0x30, 0xb8, 0xe5, 0x34, 0x13, 0x13, 0x63, 0x82, 0x73, 0xd3, 0x51, 0xe4, 0x42, 0x07, 0xab, 0x13,
	0xb4, 0xec, 0xa1, 0x76, 0xed, 0x15, 0x70, 0x5b, 0x52, 0xdc, 0x06, 0xa7, 0x66, 0x8a, 0xd6, 0x6a,
	0x58, 0xe7, 0x3a, 0x97, 0xa1, 0xe2, 0x45, 0x4d, 0x35, 0x73, 0x0b, 0xe1, 0x81, 0xe9, 0xd6, 0xce,
	0x39, 0xae, 0xc1, 0x2c, 0xb8, 0xe4, 0x5b, 0x1c, 0xb6, 0xd8, 0x2a, 0x50, 0x94, 0x46, 0xd9, 0xd8,
	0xd4, 0xe0, 0x93, 0x43, 0x1a, 0xf7, 0x83, 0xab, 0xd2, 0x25, 0x7f, 0xe0, 0x8e, 0x5a, 0x5a, 0x01,
	0x97, 0x06, 0xd3, 0x28, 0xdb, 0x5f, 0x18, 0xc9, 0x77, 0xce, 0x93, 0x6f, 0xd7, 0x9d, 0x05, 0x77,
	0x2a, 0xbc, 0xf9, 0x6c, 0x3c, 0xa0, 0xf6, 0x97, 0x8f, 0xa4, 0x62, 0xfc, 0xd5, 0x3e, 0x45, 0x6f,
	0xf7, 0x29, 0x7a, 0xf4, 0x60, 0x1c, 0x65, 0x6e, 0x46, 0x71, 0xdc, 0x0f, 0x42, 0x46, 0x70, 0x74,
	0xd9, 0x00, 0x53, 0x73, 0x28, 0x4a, 0x87, 0xb2, 0x31, 0xb5, 0xb5, 0x22, 0x05, 0x1c, 0x3a, 0x6a,
	0x97, 0x38, 0xa1, 0x5d, 0xeb, 0x18, 0xad, 0x96, 0x5e, 0x32, 0xf9, 0x1a, 0xc7, 0x3c, 0xf2, 0x92,
	0x70, 0xab, 0x40, 0x43, 0xde, 0xb1, 0xd4, 0x3e, 0x4f, 0x58, 0x74, 0xab, 0xd0, 0x31, 0x6d, 0x6e,
	0x02, 0x0d, 0x1f, 0x99, 0x2a, 0x37, 0x81, 0x7c, 0x83, 0x3f, 0xaf, 0x32, 0xc7, 0xa9, 0x73, 0x5b,
	0x2b, 0x55, 0x98, 0x53, 0xa1, 0x11, 0x99, 0x10, 0x6f, 0x8b, 0xff, 0x30, 0xa7, 0x42, 0x08, 0x0e,
	0x3b, 0xcc, 0x14, 0x34, 0x2a, 0x3d, 0x19, 0x7b, 0x9a, 0x21, 0xc0, 0xa6, 0x9f, 0xa5, 0x51, 0x36,
	0xa2, 0xca, 0x98, 0xcc, 0x60, 0xcc, 0xeb, 0x16, 0xd8, 0x25, 0xc1, 0x74, 0x87, 0xf6, 0xa5, 0x43,
	0xd9, 0xfe, 0xc2, 0xf7, 0x3d, 0x4e, 0x90, 0x9f, 0xf7, 0x32, 0x17, 0x99, 0xee, 0xcc, 0x58, 0xc2,
	0x76, 0xd5, 0x18, 0x6f, 0xaf, 0xc9, 0xdf, 0x18, 0x33, 0x21, 0x6c, 0x63, 0xa9, 0x26, 0xc0, 0xa1,
	0x31, 0x59, 0xe6, 0x87, 0x5e, 0x65, 0x26, 0x3b, 0x99, 0xcd, 0x3a, 0xbe, 0xad, 0x89, 0xdf, 0xf1,
	0x17, 0xdd, 0x5d, 0xc8, 0x60, 0x73, 0xb8, 0xf2, 0xe6, 0x9b, 0xa3, 0x1b, 0xc6, 0x91, 0xab, 0xcc,
	0xac, 0x81, 0x1c, 0x78, 0x4c, 0x6d, 0x2e, 0x8a, 0xc1, 0x5f, 0x50, 0x62, 0x02, 0x0f, 0x1c, 0x2b,
	0xfe, 0x21, 0xdb, 0x8b, 0xeb, 0x41, 0xef, 0xfe, 0x5f, 0xef, 0x53, 0x74, 0xbd, 0x41, 0xd1, 0x5a,
	0x83, 0xa2, 0xbb, 0x0d, 0x8a, 0xb6, 0x1b, 0x14, 0xdd, 0x39, 0xa0, 0x23, 0xff, 0xfb, 0xe6, 0x9b,
	0x5b, 0x60, 0xa6, 0xc8, 0xfd, 0x2b, 0xc0, 0xbe, 0x77, 0x40, 0x6f, 0x23, 0xff, 0xb7, 0x38, 0x31,
	0x0b, 0x6e, 0x7e, 0x8e, 0xad, 0x42, 0xae, 0xad, 0x4a, 0xc5, 0xf7, 0xe5, 0x75, 0xbb, 0xdc, 0xd6,
	0xdf, 0x4b, 0x98, 0xb7, 0x75, 0x66, 0x19, 0xd7, 0xe4, 0x63, 0xcb, 0x2d, 0x83, 0x06, 0x36, 0x13,
	0xa0, 0x9d, 0x94, 0xf9, 0x57, 0xdb, 0xf4, 0x6f, 0xd9, 0x38, 0xa0, 0xdf, 0x9d, 0x2b, 0xf1, 0xf1,
	0x21, 0x4d, 0xae, 0x80, 0x3b, 0xd1, 0xab, 0xf7, 0xd6, 0x1b, 0x8a, 0x0a, 0x1b, 0x91, 0xee, 0xf7,
	0x38, 0x59, 0x35, 0xc8, 0x06, 0xc2, 0x64, 0xda, 0x06, 0x26, 0xa0, 0xeb, 0x81, 0x8c, 0xf6, 0xb8,
	0xf2, 0xc4, 0x90, 0xcf, 0x50, 0xe5, 0x2f, 0x20, 0x73, 0x65, 0xaf, 0x41, 0xc7, 0x54, 0x70, 0x78,
	0xcd, 0x2e, 0x77, 0xaa, 0x38, 0xb9, 0xc9, 0xb2, 0xd7, 0xf8, 0xa2, 0x01, 0xf5, 0xdc, 0xc3, 0x43,
	0x9a, 0x3c, 0x6d, 0x32, 0x37, 0x9e, 0xbe, 0x5c, 0x0f, 0x7e, 0x95, 0x19, 0x56, 0xca, 0x92, 0x44,
	0xf1, 0xdf, 0x42, 0x11, 0xfd, 0x28, 0x21, 0x2f, 0x54, 0xb5, 0x4f, 0x04, 0xb2, 0x26, 0x49, 0x4e,
	0x82, 0x1c, 0x5c, 0xa8, 0xf0, 0xfa, 0xf9, 0x10, 0x7b, 0x19, 0x99, 0x4b, 0x7b, 0x0d, 0xfa, 0xeb,
	0xa9, 0xa0, 0x67, 0x42, 0x8e, 0x66, 0x88, 0xe2, 0x54, 0x78, 0xfd, 0x38, 0xe2, 0x4f, 0x88, 0xdc,
	0x47, 0x98, 0xfc, 0x09, 0x26, 0x7c, 0xc4, 0x24, 0x2f, 0xef, 0x35, 0xe8, 0x6f, 0xbd, 0x00, 0xff,
	0x63, 0x16, 0xd3, 0xe1, 0x6c, 0x44, 0x9a, 0xf9, 0x52, 0xd1, 0x24, 0x47, 0x13, 0xb2, 0xc3, 0x38,
	0x95, 0xdc, 0x7c, 0x91, 0x0a, 0x6c, 0xee, 0xa4, 0xd0, 0xd6, 0x4e, 0x0a, 0x3d, 0xdf, 0x49, 0xa1,
	0xb5, 0xdd, 0x54, 0x60, 0x6b, 0x37, 0x15, 0xd8, 0xde, 0x4d, 0x05, 0x96, 0xa2, 0x12, 0xe5, 0xe7,
	0x77, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0x73, 0x0d, 0x70, 0xee, 0x06, 0x00, 0x00,
}

func (this *CloudletNodeKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.CloudletNodeKey{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "CloudletKey: "+strings.Replace(this.CloudletKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCloudletnode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudletNodeApiClient is the client API for CloudletNodeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudletNodeApiClient interface {
	// Create cloudlet node, should only be used for testing/debug
	CreateCloudletNode(ctx context.Context, in *CloudletNode, opts ...grpc.CallOption) (*Result, error)
	// Update cloudlet node, should only be used for testing/debug
	UpdateCloudletNode(ctx context.Context, in *CloudletNode, opts ...grpc.CallOption) (*Result, error)
	// Show cloudlet nodes
	ShowCloudletNode(ctx context.Context, in *CloudletNode, opts ...grpc.CallOption) (CloudletNodeApi_ShowCloudletNodeClient, error)
	// Delete cloudlet node, in case it was not cleaned up properly
	DeleteCloudletNode(ctx context.Context, in *CloudletNode, opts ...grpc.CallOption) (*Result, error)
}

type cloudletNodeApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletNodeApiClient(cc *grpc.ClientConn) CloudletNodeApiClient {
	return &cloudletNodeApiClient{cc}
}

func (c *cloudletNodeApiClient) CreateCloudletNode(ctx context.Context, in *CloudletNode, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.CloudletNodeApi/CreateCloudletNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletNodeApiClient) UpdateCloudletNode(ctx context.Context, in *CloudletNode, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.CloudletNodeApi/UpdateCloudletNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletNodeApiClient) ShowCloudletNode(ctx context.Context, in *CloudletNode, opts ...grpc.CallOption) (CloudletNodeApi_ShowCloudletNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CloudletNodeApi_serviceDesc.Streams[0], "/edgeproto.CloudletNodeApi/ShowCloudletNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletNodeApiShowCloudletNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletNodeApi_ShowCloudletNodeClient interface {
	Recv() (*CloudletNode, error)
	grpc.ClientStream
}

type cloudletNodeApiShowCloudletNodeClient struct {
	grpc.ClientStream
}

func (x *cloudletNodeApiShowCloudletNodeClient) Recv() (*CloudletNode, error) {
	m := new(CloudletNode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletNodeApiClient) DeleteCloudletNode(ctx context.Context, in *CloudletNode, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.CloudletNodeApi/DeleteCloudletNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudletNodeApiServer is the server API for CloudletNodeApi service.
type CloudletNodeApiServer interface {
	// Create cloudlet node, should only be used for testing/debug
	CreateCloudletNode(context.Context, *CloudletNode) (*Result, error)
	// Update cloudlet node, should only be used for testing/debug
	UpdateCloudletNode(context.Context, *CloudletNode) (*Result, error)
	// Show cloudlet nodes
	ShowCloudletNode(*CloudletNode, CloudletNodeApi_ShowCloudletNodeServer) error
	// Delete cloudlet node, in case it was not cleaned up properly
	DeleteCloudletNode(context.Context, *CloudletNode) (*Result, error)
}

// UnimplementedCloudletNodeApiServer can be embedded to have forward compatible implementations.
type UnimplementedCloudletNodeApiServer struct {
}

func (*UnimplementedCloudletNodeApiServer) CreateCloudletNode(ctx context.Context, req *CloudletNode) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudletNode not implemented")
}
func (*UnimplementedCloudletNodeApiServer) UpdateCloudletNode(ctx context.Context, req *CloudletNode) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudletNode not implemented")
}
func (*UnimplementedCloudletNodeApiServer) ShowCloudletNode(req *CloudletNode, srv CloudletNodeApi_ShowCloudletNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowCloudletNode not implemented")
}
func (*UnimplementedCloudletNodeApiServer) DeleteCloudletNode(ctx context.Context, req *CloudletNode) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudletNode not implemented")
}

func RegisterCloudletNodeApiServer(s *grpc.Server, srv CloudletNodeApiServer) {
	s.RegisterService(&_CloudletNodeApi_serviceDesc, srv)
}

func _CloudletNodeApi_CreateCloudletNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletNodeApiServer).CreateCloudletNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletNodeApi/CreateCloudletNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletNodeApiServer).CreateCloudletNode(ctx, req.(*CloudletNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletNodeApi_UpdateCloudletNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletNodeApiServer).UpdateCloudletNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletNodeApi/UpdateCloudletNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletNodeApiServer).UpdateCloudletNode(ctx, req.(*CloudletNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletNodeApi_ShowCloudletNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletNode)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletNodeApiServer).ShowCloudletNode(m, &cloudletNodeApiShowCloudletNodeServer{stream})
}

type CloudletNodeApi_ShowCloudletNodeServer interface {
	Send(*CloudletNode) error
	grpc.ServerStream
}

type cloudletNodeApiShowCloudletNodeServer struct {
	grpc.ServerStream
}

func (x *cloudletNodeApiShowCloudletNodeServer) Send(m *CloudletNode) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletNodeApi_DeleteCloudletNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletNodeApiServer).DeleteCloudletNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletNodeApi/DeleteCloudletNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletNodeApiServer).DeleteCloudletNode(ctx, req.(*CloudletNode))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudletNodeApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletNodeApi",
	HandlerType: (*CloudletNodeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCloudletNode",
			Handler:    _CloudletNodeApi_CreateCloudletNode_Handler,
		},
		{
			MethodName: "UpdateCloudletNode",
			Handler:    _CloudletNodeApi_UpdateCloudletNode_Handler,
		},
		{
			MethodName: "DeleteCloudletNode",
			Handler:    _CloudletNodeApi_DeleteCloudletNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletNode",
			Handler:       _CloudletNodeApi_ShowCloudletNode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudletnode.proto",
}

func (m *CloudletNodeKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletNodeKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudletNodeKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CloudletKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCloudletnode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCloudletnode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudletNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudletNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCloudletnode(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCloudletnode(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCloudletnode(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.OwnerTags) > 0 {
		for k := range m.OwnerTags {
			v := m.OwnerTags[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCloudletnode(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCloudletnode(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCloudletnode(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Iter != 0 {
		i = encodeVarintCloudletnode(dAtA, i, uint64(m.Iter))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintCloudletnode(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PasswordHash) > 0 {
		i -= len(m.PasswordHash)
		copy(dAtA[i:], m.PasswordHash)
		i = encodeVarintCloudletnode(dAtA, i, uint64(len(m.PasswordHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NodeRole) > 0 {
		i -= len(m.NodeRole)
		copy(dAtA[i:], m.NodeRole)
		i = encodeVarintCloudletnode(dAtA, i, uint64(len(m.NodeRole)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintCloudletnode(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCloudletnode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintCloudletnode(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCloudletnode(dAtA []byte, offset int, v uint64) int {
	offset -= sovCloudletnode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CloudletNodeKey) Matches(o *CloudletNodeKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	if !m.CloudletKey.Matches(&o.CloudletKey, fopts...) {
		return false
	}
	return true
}

func (m *CloudletNodeKey) Clone() *CloudletNodeKey {
	cp := &CloudletNodeKey{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *CloudletNodeKey) CopyInFields(src *CloudletNodeKey) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.CloudletKey.Organization != src.CloudletKey.Organization {
		m.CloudletKey.Organization = src.CloudletKey.Organization
		changed++
	}
	if m.CloudletKey.Name != src.CloudletKey.Name {
		m.CloudletKey.Name = src.CloudletKey.Name
		changed++
	}
	if m.CloudletKey.FederatedOrganization != src.CloudletKey.FederatedOrganization {
		m.CloudletKey.FederatedOrganization = src.CloudletKey.FederatedOrganization
		changed++
	}
	return changed
}

func (m *CloudletNodeKey) DeepCopyIn(src *CloudletNodeKey) {
	m.Name = src.Name
	m.CloudletKey.DeepCopyIn(&src.CloudletKey)
}

func (m *CloudletNodeKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal CloudletNodeKey key string", "obj", m)
	}
	return string(key)
}

func CloudletNodeKeyStringParse(str string, key *CloudletNodeKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal CloudletNodeKey key string", "str", str)
	}
}

func (m *CloudletNodeKey) NotFoundError() error {
	return fmt.Errorf("CloudletNode key %s not found", m.GetKeyString())
}

func (m *CloudletNodeKey) ExistsError() error {
	return fmt.Errorf("CloudletNode key %s already exists", m.GetKeyString())
}

func (m *CloudletNodeKey) BeingDeletedError() error {
	return fmt.Errorf("CloudletNode %s is being deleted", m.GetKeyString())
}

var CloudletNodeKeyTagName = "cloudletnode"

func (m *CloudletNodeKey) GetTags() map[string]string {
	tags := make(map[string]string)
	m.AddTags(tags)
	return tags
}

func (m *CloudletNodeKey) AddTagsByFunc(addTag AddTagFunc) {
	addTag("cloudletnode", m.Name)
	addTag("cloudletorg", m.CloudletKey.Organization)
	addTag("cloudlet", m.CloudletKey.Name)
	addTag("cloudletfedorg", m.CloudletKey.FederatedOrganization)
}

func (m *CloudletNodeKey) AddTags(tags map[string]string) {
	tagMap := TagMap(tags)
	m.AddTagsByFunc(tagMap.AddTag)
}

// Helper method to check that enums have valid values
func (m *CloudletNodeKey) ValidateEnums() error {
	if err := m.CloudletKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (s *CloudletNodeKey) ClearTagged(tags map[string]struct{}) {
	s.CloudletKey.ClearTagged(tags)
}

func (m *CloudletNode) Matches(o *CloudletNode, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.NodeType != "" {
		if o.NodeType != m.NodeType {
			return false
		}
	}
	if !opts.Filter || o.NodeRole != "" {
		if o.NodeRole != m.NodeRole {
			return false
		}
	}
	if !opts.Filter || o.PasswordHash != "" {
		if o.PasswordHash != m.PasswordHash {
			return false
		}
	}
	if !opts.Filter || o.Salt != "" {
		if o.Salt != m.Salt {
			return false
		}
	}
	if !opts.Filter || o.Iter != 0 {
		if o.Iter != m.Iter {
			return false
		}
	}
	if !opts.Filter || o.OwnerTags != nil {
		if len(m.OwnerTags) == 0 && len(o.OwnerTags) > 0 || len(m.OwnerTags) > 0 && len(o.OwnerTags) == 0 {
			return false
		} else if m.OwnerTags != nil && o.OwnerTags != nil {
			if !opts.Filter && len(m.OwnerTags) != len(o.OwnerTags) {
				return false
			}
			for k, _ := range o.OwnerTags {
				_, ok := m.OwnerTags[k]
				if !ok {
					return false
				}
				if o.OwnerTags[k] != m.OwnerTags[k] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.Attributes != nil {
		if len(m.Attributes) == 0 && len(o.Attributes) > 0 || len(m.Attributes) > 0 && len(o.Attributes) == 0 {
			return false
		} else if m.Attributes != nil && o.Attributes != nil {
			if !opts.Filter && len(m.Attributes) != len(o.Attributes) {
				return false
			}
			for k, _ := range o.Attributes {
				_, ok := m.Attributes[k]
				if !ok {
					return false
				}
				if o.Attributes[k] != m.Attributes[k] {
					return false
				}
			}
		}
	}
	return true
}

const CloudletNodeFieldKey = "2"
const CloudletNodeFieldKeyName = "2.1"
const CloudletNodeFieldKeyCloudletKey = "2.2"
const CloudletNodeFieldKeyCloudletKeyOrganization = "2.2.1"
const CloudletNodeFieldKeyCloudletKeyName = "2.2.2"
const CloudletNodeFieldKeyCloudletKeyFederatedOrganization = "2.2.3"
const CloudletNodeFieldNodeType = "3"
const CloudletNodeFieldNodeRole = "4"
const CloudletNodeFieldPasswordHash = "5"
const CloudletNodeFieldSalt = "6"
const CloudletNodeFieldIter = "7"
const CloudletNodeFieldOwnerTags = "8"
const CloudletNodeFieldOwnerTagsKey = "8.1"
const CloudletNodeFieldOwnerTagsValue = "8.2"
const CloudletNodeFieldAttributes = "9"
const CloudletNodeFieldAttributesKey = "9.1"
const CloudletNodeFieldAttributesValue = "9.2"

var CloudletNodeAllFields = []string{
	CloudletNodeFieldKeyName,
	CloudletNodeFieldKeyCloudletKeyOrganization,
	CloudletNodeFieldKeyCloudletKeyName,
	CloudletNodeFieldKeyCloudletKeyFederatedOrganization,
	CloudletNodeFieldNodeType,
	CloudletNodeFieldNodeRole,
	CloudletNodeFieldPasswordHash,
	CloudletNodeFieldSalt,
	CloudletNodeFieldIter,
	CloudletNodeFieldOwnerTagsKey,
	CloudletNodeFieldOwnerTagsValue,
	CloudletNodeFieldAttributesKey,
	CloudletNodeFieldAttributesValue,
}

var CloudletNodeAllFieldsMap = NewFieldMap(map[string]struct{}{
	CloudletNodeFieldKeyName:                             struct{}{},
	CloudletNodeFieldKeyCloudletKeyOrganization:          struct{}{},
	CloudletNodeFieldKeyCloudletKeyName:                  struct{}{},
	CloudletNodeFieldKeyCloudletKeyFederatedOrganization: struct{}{},
	CloudletNodeFieldNodeType:                            struct{}{},
	CloudletNodeFieldNodeRole:                            struct{}{},
	CloudletNodeFieldPasswordHash:                        struct{}{},
	CloudletNodeFieldSalt:                                struct{}{},
	CloudletNodeFieldIter:                                struct{}{},
	CloudletNodeFieldOwnerTagsKey:                        struct{}{},
	CloudletNodeFieldOwnerTagsValue:                      struct{}{},
	CloudletNodeFieldAttributesKey:                       struct{}{},
	CloudletNodeFieldAttributesValue:                     struct{}{},
})

var CloudletNodeAllFieldsStringMap = map[string]string{
	CloudletNodeFieldKeyName:                             "Key Name",
	CloudletNodeFieldKeyCloudletKeyOrganization:          "Key Cloudlet Key Organization",
	CloudletNodeFieldKeyCloudletKeyName:                  "Key Cloudlet Key Name",
	CloudletNodeFieldKeyCloudletKeyFederatedOrganization: "Key Cloudlet Key Federated Organization",
	CloudletNodeFieldNodeType:                            "Node Type",
	CloudletNodeFieldNodeRole:                            "Node Role",
	CloudletNodeFieldPasswordHash:                        "Password Hash",
	CloudletNodeFieldSalt:                                "Salt",
	CloudletNodeFieldIter:                                "Iter",
	CloudletNodeFieldOwnerTagsKey:                        "Owner Tags Key",
	CloudletNodeFieldOwnerTagsValue:                      "Owner Tags Value",
	CloudletNodeFieldAttributesKey:                       "Attributes Key",
	CloudletNodeFieldAttributesValue:                     "Attributes Value",
}

func (m *CloudletNode) IsKeyField(s string) bool {
	return strings.HasPrefix(s, CloudletNodeFieldKey+".") || s == CloudletNodeFieldKey
}

func (m *CloudletNode) DiffFields(o *CloudletNode, fields *FieldMap) {
	if m.Key.Name != o.Key.Name {
		fields.Set(CloudletNodeFieldKeyName)
		fields.Set(CloudletNodeFieldKey)
	}
	if m.Key.CloudletKey.Organization != o.Key.CloudletKey.Organization {
		fields.Set(CloudletNodeFieldKeyCloudletKeyOrganization)
		fields.Set(CloudletNodeFieldKeyCloudletKey)
		fields.Set(CloudletNodeFieldKey)
	}
	if m.Key.CloudletKey.Name != o.Key.CloudletKey.Name {
		fields.Set(CloudletNodeFieldKeyCloudletKeyName)
		fields.Set(CloudletNodeFieldKeyCloudletKey)
		fields.Set(CloudletNodeFieldKey)
	}
	if m.Key.CloudletKey.FederatedOrganization != o.Key.CloudletKey.FederatedOrganization {
		fields.Set(CloudletNodeFieldKeyCloudletKeyFederatedOrganization)
		fields.Set(CloudletNodeFieldKeyCloudletKey)
		fields.Set(CloudletNodeFieldKey)
	}
	if m.NodeType != o.NodeType {
		fields.Set(CloudletNodeFieldNodeType)
	}
	if m.NodeRole != o.NodeRole {
		fields.Set(CloudletNodeFieldNodeRole)
	}
	if m.PasswordHash != o.PasswordHash {
		fields.Set(CloudletNodeFieldPasswordHash)
	}
	if m.Salt != o.Salt {
		fields.Set(CloudletNodeFieldSalt)
	}
	if m.Iter != o.Iter {
		fields.Set(CloudletNodeFieldIter)
	}
	if m.OwnerTags != nil && o.OwnerTags != nil {
		if len(m.OwnerTags) != len(o.OwnerTags) {
			fields.Set(CloudletNodeFieldOwnerTags)
		} else {
			for k0, _ := range m.OwnerTags {
				_, vok0 := o.OwnerTags[k0]
				if !vok0 {
					fields.Set(CloudletNodeFieldOwnerTags)
				} else {
					if m.OwnerTags[k0] != o.OwnerTags[k0] {
						fields.Set(CloudletNodeFieldOwnerTags)
						break
					}
				}
			}
		}
	} else if (m.OwnerTags != nil && o.OwnerTags == nil) || (m.OwnerTags == nil && o.OwnerTags != nil) {
		fields.Set(CloudletNodeFieldOwnerTags)
	}
	if m.Attributes != nil && o.Attributes != nil {
		if len(m.Attributes) != len(o.Attributes) {
			fields.Set(CloudletNodeFieldAttributes)
		} else {
			for k0, _ := range m.Attributes {
				_, vok0 := o.Attributes[k0]
				if !vok0 {
					fields.Set(CloudletNodeFieldAttributes)
				} else {
					if m.Attributes[k0] != o.Attributes[k0] {
						fields.Set(CloudletNodeFieldAttributes)
						break
					}
				}
			}
		}
	} else if (m.Attributes != nil && o.Attributes == nil) || (m.Attributes == nil && o.Attributes != nil) {
		fields.Set(CloudletNodeFieldAttributes)
	}
}

func (m *CloudletNode) GetDiffFields(o *CloudletNode) *FieldMap {
	diffFields := NewFieldMap(nil)
	m.DiffFields(o, diffFields)
	return diffFields
}

var UpdateCloudletNodeFieldsMap = NewFieldMap(map[string]struct{}{
	CloudletNodeFieldNodeType:        struct{}{},
	CloudletNodeFieldNodeRole:        struct{}{},
	CloudletNodeFieldOwnerTags:       struct{}{},
	CloudletNodeFieldOwnerTagsKey:    struct{}{},
	CloudletNodeFieldOwnerTagsValue:  struct{}{},
	CloudletNodeFieldAttributes:      struct{}{},
	CloudletNodeFieldAttributesKey:   struct{}{},
	CloudletNodeFieldAttributesValue: struct{}{},
})

func (m *CloudletNode) ValidateUpdateFields() error {
	return m.ValidateUpdateFieldsCustom(UpdateCloudletNodeFieldsMap)
}

func (m *CloudletNode) ValidateUpdateFieldsCustom(allowedFields *FieldMap) error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for _, field := range fmap.Fields() {
		if m.IsKeyField(field) {
			continue
		}
		if !allowedFields.Has(field) {
			if _, ok := CloudletNodeAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, CloudletNodeAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *CloudletNode) Clone() *CloudletNode {
	cp := &CloudletNode{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *CloudletNode) CopyInFields(src *CloudletNode) int {
	updateListAction := "replace"
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if fmap.HasOrHasChild("2") {
		if fmap.Has("2.1") {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
		if fmap.HasOrHasChild("2.2") {
			if fmap.Has("2.2.1") {
				if m.Key.CloudletKey.Organization != src.Key.CloudletKey.Organization {
					m.Key.CloudletKey.Organization = src.Key.CloudletKey.Organization
					changed++
				}
			}
			if fmap.Has("2.2.2") {
				if m.Key.CloudletKey.Name != src.Key.CloudletKey.Name {
					m.Key.CloudletKey.Name = src.Key.CloudletKey.Name
					changed++
				}
			}
			if fmap.Has("2.2.3") {
				if m.Key.CloudletKey.FederatedOrganization != src.Key.CloudletKey.FederatedOrganization {
					m.Key.CloudletKey.FederatedOrganization = src.Key.CloudletKey.FederatedOrganization
					changed++
				}
			}
		}
	}
	if fmap.Has("3") {
		if m.NodeType != src.NodeType {
			m.NodeType = src.NodeType
			changed++
		}
	}
	if fmap.Has("4") {
		if m.NodeRole != src.NodeRole {
			m.NodeRole = src.NodeRole
			changed++
		}
	}
	if fmap.Has("5") {
		if m.PasswordHash != src.PasswordHash {
			m.PasswordHash = src.PasswordHash
			changed++
		}
	}
	if fmap.Has("6") {
		if m.Salt != src.Salt {
			m.Salt = src.Salt
			changed++
		}
	}
	if fmap.Has("7") {
		if m.Iter != src.Iter {
			m.Iter = src.Iter
			changed++
		}
	}
	if fmap.HasOrHasChild("8") {
		if src.OwnerTags != nil {
			if updateListAction == "add" {
				for k0, v := range src.OwnerTags {
					m.OwnerTags[k0] = v
					changed++
				}
			} else if updateListAction == "remove" {
				for k0, _ := range src.OwnerTags {
					if _, ok := m.OwnerTags[k0]; ok {
						delete(m.OwnerTags, k0)
						changed++
					}
				}
			} else {
				m.OwnerTags = make(map[string]string)
				for k0, v := range src.OwnerTags {
					m.OwnerTags[k0] = v
				}
				changed++
			}
		} else if m.OwnerTags != nil {
			m.OwnerTags = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("9") {
		if src.Attributes != nil {
			if updateListAction == "add" {
				for k0, v := range src.Attributes {
					m.Attributes[k0] = v
					changed++
				}
			} else if updateListAction == "remove" {
				for k0, _ := range src.Attributes {
					if _, ok := m.Attributes[k0]; ok {
						delete(m.Attributes, k0)
						changed++
					}
				}
			} else {
				m.Attributes = make(map[string]string)
				for k0, v := range src.Attributes {
					m.Attributes[k0] = v
				}
				changed++
			}
		} else if m.Attributes != nil {
			m.Attributes = nil
			changed++
		}
	}
	return changed
}

func (m *CloudletNode) DeepCopyIn(src *CloudletNode) {
	m.Key.DeepCopyIn(&src.Key)
	m.NodeType = src.NodeType
	m.NodeRole = src.NodeRole
	m.PasswordHash = src.PasswordHash
	m.Salt = src.Salt
	m.Iter = src.Iter
	if src.OwnerTags != nil {
		m.OwnerTags = make(map[string]string)
		for k, v := range src.OwnerTags {
			m.OwnerTags[k] = v
		}
	} else {
		m.OwnerTags = nil
	}
	if src.Attributes != nil {
		m.Attributes = make(map[string]string)
		for k, v := range src.Attributes {
			m.Attributes[k] = v
		}
	} else {
		m.Attributes = nil
	}
}

func (s *CloudletNode) HasFields() bool {
	return true
}

type CloudletNodeStore interface {
	Create(ctx context.Context, m *CloudletNode, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *CloudletNode, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *CloudletNode, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *CloudletNode, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*CloudletNode, int64, error)
	Get(ctx context.Context, key *CloudletNodeKey, buf *CloudletNode) bool
	STMGet(stm concurrency.STM, key *CloudletNodeKey, buf *CloudletNode) bool
	STMPut(stm concurrency.STM, obj *CloudletNode, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *CloudletNodeKey)
	STMHas(stm concurrency.STM, key *CloudletNodeKey) bool
}

type CloudletNodeStoreImpl struct {
	kvstore objstore.KVStore
}

func NewCloudletNodeStore(kvstore objstore.KVStore) *CloudletNodeStoreImpl {
	return &CloudletNodeStoreImpl{kvstore: kvstore}
}

func (s *CloudletNodeStoreImpl) Create(ctx context.Context, m *CloudletNode, wait func(int64)) (*Result, error) {
	err := m.Validate(CloudletNodeAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletNode", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletNodeStoreImpl) Update(ctx context.Context, m *CloudletNode, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletNode", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur CloudletNode
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletNodeStoreImpl) Put(ctx context.Context, m *CloudletNode, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(CloudletNodeAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletNode", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletNodeStoreImpl) Delete(ctx context.Context, m *CloudletNode, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletNode", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletNodeStoreImpl) LoadOne(key string) (*CloudletNode, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj CloudletNode
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse CloudletNode data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletNodeStoreImpl) Get(ctx context.Context, key *CloudletNodeKey, buf *CloudletNode) bool {
	keystr := objstore.DbKeyString("CloudletNode", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *CloudletNodeStoreImpl) STMGet(stm concurrency.STM, key *CloudletNodeKey, buf *CloudletNode) bool {
	keystr := objstore.DbKeyString("CloudletNode", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *CloudletNodeStoreImpl) STMHas(stm concurrency.STM, key *CloudletNodeKey) bool {
	keystr := objstore.DbKeyString("CloudletNode", key)
	return stm.Get(keystr) != ""
}

func (s *CloudletNodeStoreImpl) parseGetData(val []byte, buf *CloudletNode) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = CloudletNode{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletNodeStoreImpl) STMPut(stm concurrency.STM, obj *CloudletNode, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("CloudletNode", obj.GetKey())

	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("CloudletNode json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *CloudletNodeStoreImpl) STMDel(stm concurrency.STM, key *CloudletNodeKey) {
	keystr := objstore.DbKeyString("CloudletNode", key)
	stm.Del(keystr)
}

func StoreListCloudletNode(ctx context.Context, kvstore objstore.KVStore) ([]CloudletNode, error) {
	keyPrefix := objstore.DbKeyPrefixString("CloudletNode") + "/"
	objs := []CloudletNode{}
	err := kvstore.List(keyPrefix, func(key, val []byte, rev, modRev int64) error {
		obj := CloudletNode{}
		err := json.Unmarshal(val, &obj)
		if err != nil {
			return fmt.Errorf("failed to unmarshal CloudletNode json %s, %s", string(val), err)
		}
		objs = append(objs, obj)
		return nil
	})
	return objs, err
}

type CloudletNodeKeyWatcher struct {
	cb func(ctx context.Context)
}

type CloudletNodeCacheData struct {
	Obj    *CloudletNode
	ModRev int64
}

func (s *CloudletNodeCacheData) Clone() *CloudletNodeCacheData {
	cp := CloudletNodeCacheData{}
	if s.Obj != nil {
		cp.Obj = &CloudletNode{}
		cp.Obj.DeepCopyIn(s.Obj)
	}
	cp.ModRev = s.ModRev
	return &cp
}

// CloudletNodeCache caches CloudletNode objects in memory in a hash table
// and keeps them in sync with the database.
type CloudletNodeCache struct {
	Objs          map[CloudletNodeKey]*CloudletNodeCacheData
	Mux           util.Mutex
	List          map[CloudletNodeKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *CloudletNode, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *CloudletNode, new *CloudletNode)
	DeletedCbs    []func(ctx context.Context, old *CloudletNode)
	KeyWatchers   map[CloudletNodeKey][]*CloudletNodeKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *CloudletNodeKey)
	DeletedKeyCbs []func(ctx context.Context, key *CloudletNodeKey)
	Store         CloudletNodeStore
}

func NewCloudletNodeCache() *CloudletNodeCache {
	cache := CloudletNodeCache{}
	InitCloudletNodeCache(&cache)
	return &cache
}

func InitCloudletNodeCache(cache *CloudletNodeCache) {
	cache.Objs = make(map[CloudletNodeKey]*CloudletNodeCacheData)
	cache.KeyWatchers = make(map[CloudletNodeKey][]*CloudletNodeKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *CloudletNodeCache) GetTypeString() string {
	return "CloudletNode"
}

func (c *CloudletNodeCache) Get(key *CloudletNodeKey, valbuf *CloudletNode) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

// STMGet gets from the store if STM is set, otherwise gets from cache
func (c *CloudletNodeCache) STMGet(ostm *OptionalSTM, key *CloudletNodeKey, valbuf *CloudletNode) bool {
	if ostm.stm != nil {
		if c.Store == nil {
			// panic, otherwise if we fallback to cache, we may silently
			// introduce race conditions and intermittent failures due to
			// reading from cache during a transaction.
			panic("CloudletNodeCache store not set, cannot read via STM")
		}
		return c.Store.STMGet(ostm.stm, key, valbuf)
	}
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *CloudletNodeCache) GetWithRev(key *CloudletNodeKey, valbuf *CloudletNode, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *CloudletNodeCache) HasKey(key *CloudletNodeKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *CloudletNodeCache) GetAllKeys(ctx context.Context, cb func(key *CloudletNodeKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *CloudletNodeCache) GetAllLocked(ctx context.Context, cb func(obj *CloudletNode, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		cb(data.Obj, data.ModRev)
	}
}

func (c *CloudletNodeCache) Update(ctx context.Context, in *CloudletNode, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *CloudletNode) (*CloudletNode, bool) {
		return in, true
	})
}

func (c *CloudletNodeCache) UpdateModFunc(ctx context.Context, key *CloudletNodeKey, modRev int64, modFunc func(old *CloudletNode) (new *CloudletNode, changed bool)) {
	c.Mux.Lock()
	var old *CloudletNode
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if len(c.UpdatedCbs) > 0 || len(c.NotifyCbs) > 0 {
		newCopy := &CloudletNode{}
		newCopy.DeepCopyIn(new)
		for _, cb := range c.UpdatedCbs {
			defer cb(ctx, old, newCopy)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				defer cb(ctx, newCopy, modRev)
			}
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &CloudletNode{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &CloudletNodeCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *CloudletNodeCache) Delete(ctx context.Context, in *CloudletNode, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *CloudletNode) bool {
		return true
	})
}

func (c *CloudletNodeCache) DeleteCondFunc(ctx context.Context, in *CloudletNode, modRev int64, condFunc func(old *CloudletNode) bool) {
	c.Mux.Lock()
	var old *CloudletNode
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete", "key", in.GetKeyVal())
	c.Mux.Unlock()
	obj := old
	if obj == nil {
		obj = in
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, obj, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *CloudletNodeCache) Prune(ctx context.Context, validKeys map[CloudletNodeKey]struct{}) {
	log.SpanLog(ctx, log.DebugLevelApi, "Prune CloudletNode", "numValidKeys", len(validKeys))
	notify := make(map[CloudletNodeKey]*CloudletNodeCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		obj := old.Obj
		if obj == nil {
			obj = &CloudletNode{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletNodeCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *CloudletNodeCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *CloudletNodeCache) Show(filter *CloudletNode, cb func(ret *CloudletNode) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func CloudletNodeGenericNotifyCb(fn func(key *CloudletNodeKey, old *CloudletNode)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletNodeKey), obj.(*CloudletNode))
	}
}

func (c *CloudletNodeCache) SetNotifyCb(fn func(ctx context.Context, obj *CloudletNode, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *CloudletNode, modRev int64){fn}
}

func (c *CloudletNodeCache) SetUpdatedCb(fn func(ctx context.Context, old *CloudletNode, new *CloudletNode)) {
	c.UpdatedCbs = []func(ctx context.Context, old *CloudletNode, new *CloudletNode){fn}
}

func (c *CloudletNodeCache) SetDeletedCb(fn func(ctx context.Context, old *CloudletNode)) {
	c.DeletedCbs = []func(ctx context.Context, old *CloudletNode){fn}
}

func (c *CloudletNodeCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *CloudletNodeKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *CloudletNodeKey){fn}
}

func (c *CloudletNodeCache) SetDeletedKeyCb(fn func(ctx context.Context, key *CloudletNodeKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *CloudletNodeKey){fn}
}

func (c *CloudletNodeCache) AddUpdatedCb(fn func(ctx context.Context, old *CloudletNode, new *CloudletNode)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *CloudletNodeCache) AddDeletedCb(fn func(ctx context.Context, old *CloudletNode)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *CloudletNodeCache) AddNotifyCb(fn func(ctx context.Context, obj *CloudletNode, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *CloudletNodeCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *CloudletNodeKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *CloudletNodeCache) AddDeletedKeyCb(fn func(ctx context.Context, key *CloudletNodeKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *CloudletNodeCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *CloudletNodeCache) WatchKey(key *CloudletNodeKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*CloudletNodeKeyWatcher, 0)
	}
	watcher := CloudletNodeKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching CloudletNode", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *CloudletNodeCache) TriggerKeyWatchers(ctx context.Context, key *CloudletNodeKey) {
	watchers := make([]*CloudletNodeKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *CloudletNodeCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := CloudletNode{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse CloudletNode data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *CloudletNodeCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := CloudletNode{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletNodeKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *CloudletNodeCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletNodeKey]struct{})
}

func (c *CloudletNodeCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletNodeKey]*CloudletNodeCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		obj := val.Obj
		if obj == nil {
			obj = &CloudletNode{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (s *CloudletNodeCache) InitCacheWithSync(sync DataSync) {
	InitCloudletNodeCache(s)
	s.InitSync(sync)
}

func (s *CloudletNodeCache) InitSync(sync DataSync) {
	if sync != nil {
		s.Store = NewCloudletNodeStore(sync.GetKVStore())
		sync.RegisterCache(s)
	}
}

func InitCloudletNodeCacheWithStore(cache *CloudletNodeCache, store CloudletNodeStore) {
	InitCloudletNodeCache(cache)
	cache.Store = store
}

func (c *CloudletNodeCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.CloudletKey.Organization == org {
			return true
		}
	}
	return false
}

func (m *CloudletNode) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *CloudletNode) GetKey() *CloudletNodeKey {
	return &m.Key
}

func (m *CloudletNode) GetKeyVal() CloudletNodeKey {
	return m.Key
}

func (m *CloudletNode) SetKey(key *CloudletNodeKey) {
	m.Key = *key
}

func CmpSortCloudletNode(a CloudletNode, b CloudletNode) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *CloudletNode) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (s *CloudletNode) ClearTagged(tags map[string]struct{}) {
	s.Key.ClearTagged(tags)
}

func (m *CloudletNode) IsValidArgsForCreateCloudletNode() error {
	if m.PasswordHash != "" {
		return fmt.Errorf("Invalid field specified: PasswordHash, this field is only for internal use")
	}
	if m.Salt != "" {
		return fmt.Errorf("Invalid field specified: Salt, this field is only for internal use")
	}
	if m.Iter != 0 {
		return fmt.Errorf("Invalid field specified: Iter, this field is only for internal use")
	}
	return nil
}

func (m *CloudletNode) IsValidArgsForUpdateCloudletNode() error {
	if m.PasswordHash != "" {
		return fmt.Errorf("Invalid field specified: PasswordHash, this field is only for internal use")
	}
	if m.Salt != "" {
		return fmt.Errorf("Invalid field specified: Salt, this field is only for internal use")
	}
	if m.Iter != 0 {
		return fmt.Errorf("Invalid field specified: Iter, this field is only for internal use")
	}
	return nil
}

func (m *CloudletNode) IsValidArgsForDeleteCloudletNode() error {
	if m.PasswordHash != "" {
		return fmt.Errorf("Invalid field specified: PasswordHash, this field is only for internal use")
	}
	if m.Salt != "" {
		return fmt.Errorf("Invalid field specified: Salt, this field is only for internal use")
	}
	if m.Iter != 0 {
		return fmt.Errorf("Invalid field specified: Iter, this field is only for internal use")
	}
	return nil
}

func (m *CloudletNodeKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudletnode(uint64(l))
	}
	l = m.CloudletKey.Size()
	n += 1 + l + sovCloudletnode(uint64(l))
	return n
}

func (m *CloudletNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovCloudletnode(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovCloudletnode(uint64(l))
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovCloudletnode(uint64(l))
	}
	l = len(m.NodeRole)
	if l > 0 {
		n += 1 + l + sovCloudletnode(uint64(l))
	}
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovCloudletnode(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovCloudletnode(uint64(l))
	}
	if m.Iter != 0 {
		n += 1 + sovCloudletnode(uint64(m.Iter))
	}
	if len(m.OwnerTags) > 0 {
		for k, v := range m.OwnerTags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCloudletnode(uint64(len(k))) + 1 + len(v) + sovCloudletnode(uint64(len(v)))
			n += mapEntrySize + 1 + sovCloudletnode(uint64(mapEntrySize))
		}
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCloudletnode(uint64(len(k))) + 1 + len(v) + sovCloudletnode(uint64(len(v)))
			n += mapEntrySize + 1 + sovCloudletnode(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCloudletnode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCloudletnode(x uint64) (n int) {
	return sovCloudletnode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudletNodeKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletnode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletNodeKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletNodeKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletnode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletnode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletnode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletnode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletnode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletnode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletnode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletnode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletnode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletnode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iter", wireType)
			}
			m.Iter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletnode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnerTags == nil {
				m.OwnerTags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudletnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudletnode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCloudletnode
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCloudletnode
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudletnode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCloudletnode
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCloudletnode
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCloudletnode(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCloudletnode
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OwnerTags[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletnode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudletnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudletnode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCloudletnode
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCloudletnode
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudletnode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCloudletnode
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCloudletnode
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCloudletnode(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCloudletnode
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletnode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudletnode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCloudletnode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCloudletnode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudletnode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCloudletnode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCloudletnode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCloudletnode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCloudletnode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCloudletnode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCloudletnode = fmt.Errorf("proto: unexpected end of group")
)
