// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zonepool.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	fmt "fmt"
	distributed_match_engine "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	"github.com/edgexr/edge-cloud-platform/pkg/objstore"
	"github.com/edgexr/edge-cloud-platform/pkg/util"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"go.etcd.io/etcd/client/v3/concurrency"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	"sort"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ZonePool unique key
//
// ZonePoolKey uniquely identifies a ZonePool.
type ZonePoolKey struct {
	// Name of the organization this pool belongs to
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// ZonePool Name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ZonePoolKey) Reset()         { *m = ZonePoolKey{} }
func (m *ZonePoolKey) String() string { return proto.CompactTextString(m) }
func (*ZonePoolKey) ProtoMessage()    {}
func (*ZonePoolKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cab85704f732e0c, []int{0}
}
func (m *ZonePoolKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZonePoolKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZonePoolKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZonePoolKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZonePoolKey.Merge(m, src)
}
func (m *ZonePoolKey) XXX_Size() int {
	return m.Size()
}
func (m *ZonePoolKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ZonePoolKey.DiscardUnknown(m)
}

var xxx_messageInfo_ZonePoolKey proto.InternalMessageInfo

// ZonePool defines a pool of Zones that have restricted access
type ZonePool struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// ZonePool key
	Key ZonePoolKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// Zones part of the pool
	Zones []*ZoneKey `protobuf:"bytes,3,rep,name=zones,proto3" json:"zones,omitempty"`
	// Created at time
	CreatedAt distributed_match_engine.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// Updated at time
	UpdatedAt distributed_match_engine.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	// Preparing to be deleted
	DeletePrepare bool `protobuf:"varint,6,opt,name=delete_prepare,json=deletePrepare,proto3" json:"delete_prepare,omitempty"`
}

func (m *ZonePool) Reset()         { *m = ZonePool{} }
func (m *ZonePool) String() string { return proto.CompactTextString(m) }
func (*ZonePool) ProtoMessage()    {}
func (*ZonePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cab85704f732e0c, []int{1}
}
func (m *ZonePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZonePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZonePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZonePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZonePool.Merge(m, src)
}
func (m *ZonePool) XXX_Size() int {
	return m.Size()
}
func (m *ZonePool) XXX_DiscardUnknown() {
	xxx_messageInfo_ZonePool.DiscardUnknown(m)
}

var xxx_messageInfo_ZonePool proto.InternalMessageInfo

// ZonePoolMember is used to add and remove a Zone from a ZonePool
type ZonePoolMember struct {
	// ZonePool key
	Key ZonePoolKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	// Zone
	Zone ZoneKey `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone"`
}

func (m *ZonePoolMember) Reset()         { *m = ZonePoolMember{} }
func (m *ZonePoolMember) String() string { return proto.CompactTextString(m) }
func (*ZonePoolMember) ProtoMessage()    {}
func (*ZonePoolMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cab85704f732e0c, []int{2}
}
func (m *ZonePoolMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZonePoolMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZonePoolMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZonePoolMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZonePoolMember.Merge(m, src)
}
func (m *ZonePoolMember) XXX_Size() int {
	return m.Size()
}
func (m *ZonePoolMember) XXX_DiscardUnknown() {
	xxx_messageInfo_ZonePoolMember.DiscardUnknown(m)
}

var xxx_messageInfo_ZonePoolMember proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ZonePoolKey)(nil), "edgeproto.ZonePoolKey")
	proto.RegisterType((*ZonePool)(nil), "edgeproto.ZonePool")
	proto.RegisterType((*ZonePoolMember)(nil), "edgeproto.ZonePoolMember")
}

func init() { proto.RegisterFile("zonepool.proto", fileDescriptor_0cab85704f732e0c) }

var fileDescriptor_0cab85704f732e0c = []byte{
	// 843 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x3d, 0x6c, 0x23, 0x55,
	0x10, 0xf6, 0x8b, 0x7d, 0x39, 0xfb, 0xd9, 0x67, 0xec, 0xcd, 0x5d, 0xf4, 0x2e, 0x1c, 0x3e, 0x6b,
	0xaf, 0xb1, 0x60, 0xd9, 0x45, 0x3e, 0x44, 0x61, 0x29, 0x85, 0x0d, 0xa2, 0xe0, 0x74, 0x70, 0x5a,
	0x7e, 0x24, 0x68, 0xa2, 0xb5, 0x77, 0xb2, 0x59, 0x65, 0x77, 0xdf, 0xb2, 0xbb, 0x26, 0x72, 0x2a,
	0x04, 0x12, 0x05, 0x42, 0x22, 0x82, 0x02, 0x44, 0x95, 0x06, 0xf1, 0x53, 0x45, 0x29, 0x53, 0x52,
	0xa5, 0x8c, 0x44, 0x43, 0x85, 0xc0, 0xa1, 0x40, 0xae, 0x90, 0x62, 0x5b, 0x94, 0xe8, 0xbd, 0xfd,
	0xc9, 0xc6, 0x36, 0x91, 0x48, 0x24, 0xba, 0x9d, 0x99, 0x6f, 0x66, 0xbe, 0x37, 0xdf, 0xcc, 0xe2,
	0xf2, 0x2e, 0x75, 0xc0, 0xa5, 0xd4, 0x92, 0x5d, 0x8f, 0x06, 0x54, 0x28, 0x80, 0x6e, 0x00, 0xff,
	0x5c, 0xbb, 0x67, 0x50, 0x6a, 0x58, 0xa0, 0x68, 0xae, 0xa9, 0x68, 0x8e, 0x43, 0x03, 0x2d, 0x30,
	0xa9, 0xe3, 0x87, 0xc0, 0xb5, 0x67, 0x02, 0x4a, 0x2d, 0x5f, 0xe1, 0x86, 0x01, 0x4e, 0xf2, 0x11,
	0x85, 0x4b, 0x1e, 0xf8, 0x7d, 0x2b, 0x88, 0xac, 0x6a, 0xcf, 0xa2, 0x7d, 0xdd, 0x82, 0x60, 0x1b,
	0x06, 0x91, 0xeb, 0xb6, 0x41, 0x0d, 0xca, 0x3f, 0x15, 0xf6, 0x15, 0x79, 0x6f, 0xe9, 0x36, 0x28,
	0x16, 0xed, 0x85, 0xa6, 0xe8, 0xe1, 0xe2, 0x7b, 0xd4, 0x81, 0x27, 0x94, 0x5a, 0x8f, 0x60, 0x20,
	0x3c, 0xc4, 0x25, 0xea, 0x19, 0x9a, 0x63, 0xee, 0x72, 0x2a, 0x04, 0xd5, 0x51, 0xa3, 0xd0, 0x79,
	0xea, 0x68, 0x4a, 0x8a, 0xf1, 0x33, 0xa8, 0x67, 0xa8, 0x17, 0x40, 0x42, 0x1d, 0xe7, 0x1c, 0xcd,
	0x06, 0xb2, 0xc4, 0xc1, 0xa5, 0xa3, 0x29, 0xc9, 0xc7, 0x60, 0x95, 0x47, 0x5a, 0xa5, 0x3f, 0xcf,
	0x08, 0xfa, 0xfb, 0x8c, 0xa0, 0x83, 0xfd, 0xfb, 0x48, 0xfc, 0x38, 0x87, 0xf3, 0x71, 0x53, 0x61,
	0x15, 0x2f, 0x6f, 0x9a, 0x60, 0xe9, 0x3e, 0x41, 0xf5, 0x6c, 0xa3, 0xa0, 0x46, 0x96, 0x20, 0xe3,
	0xec, 0x36, 0x0c, 0x78, 0xcd, 0x62, 0x73, 0x55, 0x4e, 0x86, 0x26, 0xa7, 0xe8, 0x76, 0x72, 0xc7,
	0xbf, 0xde, 0xcf, 0xa8, 0x0c, 0x28, 0x34, 0xf1, 0x0d, 0xd6, 0xd4, 0x27, 0xd9, 0x7a, 0xb6, 0x51,
	0x6c, 0x0a, 0x33, 0x19, 0x0c, 0x9d, 0x1f, 0x4d, 0x49, 0x8e, 0x19, 0x6a, 0x08, 0x15, 0xde, 0xc5,
	0xb8, 0xe7, 0x81, 0x16, 0x80, 0xbe, 0xa1, 0x05, 0x24, 0xc7, 0x5b, 0x3d, 0x90, 0x75, 0xd3, 0x0f,
	0x3c, 0xb3, 0xdb, 0x67, 0x6e, 0x5b, 0x0b, 0x7a, 0x5b, 0x1b, 0xe0, 0x18, 0xa6, 0x03, 0xf2, 0x5b,
	0xa6, 0x0d, 0x7e, 0xa0, 0xd9, 0x6e, 0xe7, 0xce, 0xf7, 0x63, 0x82, 0xbe, 0x38, 0xbc, 0x5b, 0x08,
	0x62, 0x17, 0x27, 0x52, 0x88, 0xaa, 0xb5, 0x03, 0x56, 0xba, 0xef, 0xea, 0x71, 0xe9, 0x1b, 0xd7,
	0x2f, 0x1d, 0x55, 0x6b, 0x07, 0xc2, 0x73, 0xb8, 0xac, 0x83, 0x05, 0x01, 0x6c, 0xb8, 0x1e, 0xb8,
	0x9a, 0x07, 0x64, 0xb9, 0x8e, 0x1a, 0xf9, 0x4e, 0x8e, 0x65, 0xaa, 0xb7, 0xc2, 0xd8, 0x93, 0x30,
	0xd4, 0xfa, 0x0a, 0xb1, 0xd1, 0xff, 0x75, 0x46, 0xd0, 0x87, 0x63, 0x82, 0xf6, 0xc6, 0x04, 0x7d,
	0xcd, 0xea, 0x4f, 0xc8, 0x4b, 0x2f, 0xc7, 0x5c, 0xa5, 0xb7, 0xe3, 0xd2, 0xd2, 0x2b, 0xe9, 0x5c,
	0x89, 0x8d, 0xca, 0x6f, 0x3d, 0x90, 0xdf, 0x48, 0x89, 0xfd, 0xcd, 0x84, 0x88, 0x4c, 0xd2, 0xf5,
	0x47, 0x30, 0x90, 0x5f, 0xd7, 0x6c, 0x90, 0xa8, 0x67, 0x70, 0x23, 0x8d, 0x3a, 0x98, 0x90, 0xcc,
	0xe1, 0x94, 0x54, 0xb6, 0x61, 0xb0, 0x9e, 0xf6, 0xff, 0x34, 0x25, 0x37, 0x23, 0x35, 0xc4, 0xcf,
	0x97, 0x70, 0x39, 0xd6, 0xf2, 0x31, 0xd8, 0x5d, 0xf0, 0x84, 0x56, 0xa8, 0x39, 0xba, 0x54, 0xf3,
	0xca, 0x68, 0x4a, 0x92, 0xf5, 0x39, 0xd7, 0xff, 0x45, 0x9c, 0x63, 0xa2, 0x46, 0x0b, 0xb3, 0x48,
	0xfe, 0x52, 0x2c, 0x3f, 0x4f, 0xe2, 0xe8, 0xd6, 0xa7, 0x6c, 0x14, 0x55, 0xe6, 0x9c, 0x7d, 0xe5,
	0xfb, 0x6c, 0x7d, 0x2f, 0x7f, 0xa5, 0xc4, 0x4a, 0xac, 0xf3, 0x64, 0x8e, 0x61, 0x26, 0xc3, 0xcd,
	0x95, 0xe3, 0x91, 0x4d, 0xd0, 0x93, 0xe0, 0xab, 0xa0, 0x83, 0xc7, 0x66, 0x9e, 0x46, 0x35, 0x7f,
	0xb8, 0x79, 0x7e, 0x8c, 0x6d, 0xd7, 0x14, 0xf6, 0x11, 0x2e, 0x87, 0x2a, 0x25, 0xd7, 0xb2, 0xb2,
	0x60, 0x28, 0x6b, 0xd5, 0x94, 0x53, 0xe5, 0x3f, 0x05, 0x71, 0x73, 0x34, 0x26, 0x8a, 0x0a, 0x3e,
	0xed, 0x7b, 0xbd, 0x24, 0xdb, 0x97, 0xda, 0x3d, 0xd6, 0xe8, 0xb1, 0xe6, 0x68, 0x06, 0x48, 0xb3,
	0xcf, 0x39, 0x99, 0x10, 0xf4, 0xe3, 0x94, 0x54, 0x66, 0xfd, 0x1f, 0xfd, 0xfc, 0xc7, 0x97, 0x4b,
	0x77, 0xc4, 0x8a, 0x12, 0x6e, 0xb7, 0x12, 0xdf, 0x76, 0x0b, 0x3d, 0x2b, 0x7c, 0x86, 0x70, 0x39,
	0x5c, 0x9a, 0xff, 0x4c, 0x51, 0xbd, 0x22, 0xc5, 0x84, 0x4e, 0xb8, 0xe8, 0x73, 0x74, 0xc2, 0x6d,
	0xfe, 0xff, 0xe9, 0x84, 0x07, 0x7a, 0x81, 0xce, 0x27, 0x08, 0x97, 0xde, 0xdc, 0xa2, 0x3b, 0x97,
	0x93, 0x59, 0xe4, 0x14, 0x5f, 0x1b, 0x8d, 0xc9, 0xf3, 0xff, 0x46, 0xe7, 0x1d, 0x13, 0x76, 0xa4,
	0x85, 0x32, 0xad, 0x88, 0x65, 0xc5, 0xdf, 0xa2, 0x3b, 0x69, 0x1a, 0x2f, 0x20, 0xe1, 0x5b, 0x84,
	0xab, 0x6d, 0x5d, 0x9f, 0x39, 0xb7, 0xbb, 0x0b, 0x1a, 0x87, 0xa1, 0x45, 0x03, 0xea, 0x5e, 0x71,
	0x40, 0xc3, 0x09, 0x29, 0x24, 0x37, 0xc2, 0x49, 0x12, 0x71, 0x45, 0xd1, 0x74, 0x3d, 0xe1, 0x68,
	0xf3, 0x9e, 0x6c, 0x60, 0xdf, 0x21, 0x7c, 0x5b, 0x05, 0x9b, 0x7e, 0x00, 0xd7, 0xa2, 0xaa, 0x5d,
	0x81, 0xea, 0x3c, 0xcd, 0xa7, 0xc5, 0x55, 0xc5, 0xe3, 0x64, 0xe6, 0x99, 0x76, 0xee, 0x1d, 0xff,
	0x5e, 0xcb, 0x1c, 0x0f, 0x6b, 0xe8, 0x64, 0x58, 0x43, 0xbf, 0x0d, 0x6b, 0x68, 0xef, 0xb4, 0x96,
	0x39, 0x39, 0xad, 0x65, 0x7e, 0x39, 0xad, 0x65, 0xba, 0xcb, 0x9c, 0xce, 0xc3, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x40, 0xe0, 0x92, 0x71, 0xfc, 0x07, 0x00, 0x00,
}

func (this *ZonePoolKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.ZonePoolKey{")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringZonepool(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ZonePoolApiClient is the client API for ZonePoolApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZonePoolApiClient interface {
	// Create a ZonePool
	CreateZonePool(ctx context.Context, in *ZonePool, opts ...grpc.CallOption) (*Result, error)
	// Delete a ZonePool
	DeleteZonePool(ctx context.Context, in *ZonePool, opts ...grpc.CallOption) (*Result, error)
	// Update a ZonePool
	UpdateZonePool(ctx context.Context, in *ZonePool, opts ...grpc.CallOption) (*Result, error)
	// Show ZonePools
	ShowZonePool(ctx context.Context, in *ZonePool, opts ...grpc.CallOption) (ZonePoolApi_ShowZonePoolClient, error)
	// Add a Zone to a ZonePool
	AddZonePoolMember(ctx context.Context, in *ZonePoolMember, opts ...grpc.CallOption) (*Result, error)
	// Remove a Zone from a ZonePool
	RemoveZonePoolMember(ctx context.Context, in *ZonePoolMember, opts ...grpc.CallOption) (*Result, error)
}

type zonePoolApiClient struct {
	cc *grpc.ClientConn
}

func NewZonePoolApiClient(cc *grpc.ClientConn) ZonePoolApiClient {
	return &zonePoolApiClient{cc}
}

func (c *zonePoolApiClient) CreateZonePool(ctx context.Context, in *ZonePool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.ZonePoolApi/CreateZonePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonePoolApiClient) DeleteZonePool(ctx context.Context, in *ZonePool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.ZonePoolApi/DeleteZonePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonePoolApiClient) UpdateZonePool(ctx context.Context, in *ZonePool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.ZonePoolApi/UpdateZonePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonePoolApiClient) ShowZonePool(ctx context.Context, in *ZonePool, opts ...grpc.CallOption) (ZonePoolApi_ShowZonePoolClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZonePoolApi_serviceDesc.Streams[0], "/edgeproto.ZonePoolApi/ShowZonePool", opts...)
	if err != nil {
		return nil, err
	}
	x := &zonePoolApiShowZonePoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZonePoolApi_ShowZonePoolClient interface {
	Recv() (*ZonePool, error)
	grpc.ClientStream
}

type zonePoolApiShowZonePoolClient struct {
	grpc.ClientStream
}

func (x *zonePoolApiShowZonePoolClient) Recv() (*ZonePool, error) {
	m := new(ZonePool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zonePoolApiClient) AddZonePoolMember(ctx context.Context, in *ZonePoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.ZonePoolApi/AddZonePoolMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonePoolApiClient) RemoveZonePoolMember(ctx context.Context, in *ZonePoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.ZonePoolApi/RemoveZonePoolMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZonePoolApiServer is the server API for ZonePoolApi service.
type ZonePoolApiServer interface {
	// Create a ZonePool
	CreateZonePool(context.Context, *ZonePool) (*Result, error)
	// Delete a ZonePool
	DeleteZonePool(context.Context, *ZonePool) (*Result, error)
	// Update a ZonePool
	UpdateZonePool(context.Context, *ZonePool) (*Result, error)
	// Show ZonePools
	ShowZonePool(*ZonePool, ZonePoolApi_ShowZonePoolServer) error
	// Add a Zone to a ZonePool
	AddZonePoolMember(context.Context, *ZonePoolMember) (*Result, error)
	// Remove a Zone from a ZonePool
	RemoveZonePoolMember(context.Context, *ZonePoolMember) (*Result, error)
}

// UnimplementedZonePoolApiServer can be embedded to have forward compatible implementations.
type UnimplementedZonePoolApiServer struct {
}

func (*UnimplementedZonePoolApiServer) CreateZonePool(ctx context.Context, req *ZonePool) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZonePool not implemented")
}
func (*UnimplementedZonePoolApiServer) DeleteZonePool(ctx context.Context, req *ZonePool) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZonePool not implemented")
}
func (*UnimplementedZonePoolApiServer) UpdateZonePool(ctx context.Context, req *ZonePool) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZonePool not implemented")
}
func (*UnimplementedZonePoolApiServer) ShowZonePool(req *ZonePool, srv ZonePoolApi_ShowZonePoolServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowZonePool not implemented")
}
func (*UnimplementedZonePoolApiServer) AddZonePoolMember(ctx context.Context, req *ZonePoolMember) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddZonePoolMember not implemented")
}
func (*UnimplementedZonePoolApiServer) RemoveZonePoolMember(ctx context.Context, req *ZonePoolMember) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveZonePoolMember not implemented")
}

func RegisterZonePoolApiServer(s *grpc.Server, srv ZonePoolApiServer) {
	s.RegisterService(&_ZonePoolApi_serviceDesc, srv)
}

func _ZonePoolApi_CreateZonePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZonePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonePoolApiServer).CreateZonePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ZonePoolApi/CreateZonePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonePoolApiServer).CreateZonePool(ctx, req.(*ZonePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonePoolApi_DeleteZonePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZonePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonePoolApiServer).DeleteZonePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ZonePoolApi/DeleteZonePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonePoolApiServer).DeleteZonePool(ctx, req.(*ZonePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonePoolApi_UpdateZonePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZonePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonePoolApiServer).UpdateZonePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ZonePoolApi/UpdateZonePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonePoolApiServer).UpdateZonePool(ctx, req.(*ZonePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonePoolApi_ShowZonePool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ZonePool)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZonePoolApiServer).ShowZonePool(m, &zonePoolApiShowZonePoolServer{stream})
}

type ZonePoolApi_ShowZonePoolServer interface {
	Send(*ZonePool) error
	grpc.ServerStream
}

type zonePoolApiShowZonePoolServer struct {
	grpc.ServerStream
}

func (x *zonePoolApiShowZonePoolServer) Send(m *ZonePool) error {
	return x.ServerStream.SendMsg(m)
}

func _ZonePoolApi_AddZonePoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZonePoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonePoolApiServer).AddZonePoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ZonePoolApi/AddZonePoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonePoolApiServer).AddZonePoolMember(ctx, req.(*ZonePoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonePoolApi_RemoveZonePoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZonePoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonePoolApiServer).RemoveZonePoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ZonePoolApi/RemoveZonePoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonePoolApiServer).RemoveZonePoolMember(ctx, req.(*ZonePoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZonePoolApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.ZonePoolApi",
	HandlerType: (*ZonePoolApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateZonePool",
			Handler:    _ZonePoolApi_CreateZonePool_Handler,
		},
		{
			MethodName: "DeleteZonePool",
			Handler:    _ZonePoolApi_DeleteZonePool_Handler,
		},
		{
			MethodName: "UpdateZonePool",
			Handler:    _ZonePoolApi_UpdateZonePool_Handler,
		},
		{
			MethodName: "AddZonePoolMember",
			Handler:    _ZonePoolApi_AddZonePoolMember_Handler,
		},
		{
			MethodName: "RemoveZonePoolMember",
			Handler:    _ZonePoolApi_RemoveZonePoolMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowZonePool",
			Handler:       _ZonePoolApi_ShowZonePool_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zonepool.proto",
}

func (m *ZonePoolKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZonePoolKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZonePoolKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintZonepool(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintZonepool(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZonePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZonePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZonePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletePrepare {
		i--
		if m.DeletePrepare {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintZonepool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintZonepool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Zones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZonepool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintZonepool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintZonepool(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ZonePoolMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZonePoolMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZonePoolMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Zone.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintZonepool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintZonepool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintZonepool(dAtA []byte, offset int, v uint64) int {
	offset -= sovZonepool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ZonePoolKey) Matches(o *ZonePoolKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Organization != "" {
		if o.Organization != m.Organization {
			return false
		}
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *ZonePoolKey) Clone() *ZonePoolKey {
	cp := &ZonePoolKey{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *ZonePoolKey) CopyInFields(src *ZonePoolKey) int {
	changed := 0
	if m.Organization != src.Organization {
		m.Organization = src.Organization
		changed++
	}
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *ZonePoolKey) DeepCopyIn(src *ZonePoolKey) {
	m.Organization = src.Organization
	m.Name = src.Name
}

func (m *ZonePoolKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal ZonePoolKey key string", "obj", m)
	}
	return string(key)
}

func ZonePoolKeyStringParse(str string, key *ZonePoolKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal ZonePoolKey key string", "str", str)
	}
}

func (m *ZonePoolKey) NotFoundError() error {
	return fmt.Errorf("ZonePool key %s not found", m.GetKeyString())
}

func (m *ZonePoolKey) ExistsError() error {
	return fmt.Errorf("ZonePool key %s already exists", m.GetKeyString())
}

func (m *ZonePoolKey) BeingDeletedError() error {
	return fmt.Errorf("ZonePool %s is being deleted", m.GetKeyString())
}

var ZonePoolKeyTagOrganization = "zonepoolorg"
var ZonePoolKeyTagName = "zonepool"

func (m *ZonePoolKey) GetTags() map[string]string {
	tags := make(map[string]string)
	m.AddTags(tags)
	return tags
}

func (m *ZonePoolKey) AddTagsByFunc(addTag AddTagFunc) {
	addTag("zonepoolorg", m.Organization)
	addTag("zonepool", m.Name)
}

func (m *ZonePoolKey) AddTags(tags map[string]string) {
	tagMap := TagMap(tags)
	m.AddTagsByFunc(tagMap.AddTag)
}

// Helper method to check that enums have valid values
func (m *ZonePoolKey) ValidateEnums() error {
	return nil
}

func (s *ZonePoolKey) ClearTagged(tags map[string]struct{}) {
}

func (m *ZonePool) Matches(o *ZonePool, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Zones != nil {
		if len(m.Zones) == 0 && len(o.Zones) > 0 || len(m.Zones) > 0 && len(o.Zones) == 0 {
			return false
		} else if m.Zones != nil && o.Zones != nil {
			if !opts.Filter && len(m.Zones) != len(o.Zones) {
				return false
			}
			if opts.SortArrayedKeys {
				sort.Slice(m.Zones, func(i, j int) bool {
					return m.Zones[i].GetKeyString() < m.Zones[j].GetKeyString()
				})
				sort.Slice(o.Zones, func(i, j int) bool {
					return o.Zones[i].GetKeyString() < o.Zones[j].GetKeyString()
				})
			}
			found := 0
			for oIndex, _ := range o.Zones {
				for mIndex, _ := range m.Zones {
					if m.Zones[mIndex].Matches(o.Zones[oIndex], fopts...) {
						found++
						break
					}
				}
			}
			if found != len(o.Zones) {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
	}
	if !opts.IgnoreBackend {
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeletePrepare != false {
			if o.DeletePrepare != m.DeletePrepare {
				return false
			}
		}
	}
	return true
}

const ZonePoolFieldKey = "2"
const ZonePoolFieldKeyOrganization = "2.1"
const ZonePoolFieldKeyName = "2.2"
const ZonePoolFieldZones = "3"
const ZonePoolFieldZonesOrganization = "3.1"
const ZonePoolFieldZonesName = "3.2"
const ZonePoolFieldZonesFederatedOrganization = "3.3"
const ZonePoolFieldCreatedAt = "4"
const ZonePoolFieldCreatedAtSeconds = "4.1"
const ZonePoolFieldCreatedAtNanos = "4.2"
const ZonePoolFieldUpdatedAt = "5"
const ZonePoolFieldUpdatedAtSeconds = "5.1"
const ZonePoolFieldUpdatedAtNanos = "5.2"
const ZonePoolFieldDeletePrepare = "6"

var ZonePoolAllFields = []string{
	ZonePoolFieldKeyOrganization,
	ZonePoolFieldKeyName,
	ZonePoolFieldZonesOrganization,
	ZonePoolFieldZonesName,
	ZonePoolFieldZonesFederatedOrganization,
	ZonePoolFieldCreatedAtSeconds,
	ZonePoolFieldCreatedAtNanos,
	ZonePoolFieldUpdatedAtSeconds,
	ZonePoolFieldUpdatedAtNanos,
	ZonePoolFieldDeletePrepare,
}

var ZonePoolAllFieldsMap = NewFieldMap(map[string]struct{}{
	ZonePoolFieldKeyOrganization:            struct{}{},
	ZonePoolFieldKeyName:                    struct{}{},
	ZonePoolFieldZonesOrganization:          struct{}{},
	ZonePoolFieldZonesName:                  struct{}{},
	ZonePoolFieldZonesFederatedOrganization: struct{}{},
	ZonePoolFieldCreatedAtSeconds:           struct{}{},
	ZonePoolFieldCreatedAtNanos:             struct{}{},
	ZonePoolFieldUpdatedAtSeconds:           struct{}{},
	ZonePoolFieldUpdatedAtNanos:             struct{}{},
	ZonePoolFieldDeletePrepare:              struct{}{},
})

var ZonePoolAllFieldsStringMap = map[string]string{
	ZonePoolFieldKeyOrganization:            "Key Organization",
	ZonePoolFieldKeyName:                    "Key Name",
	ZonePoolFieldZonesOrganization:          "Zones Organization",
	ZonePoolFieldZonesName:                  "Zones Name",
	ZonePoolFieldZonesFederatedOrganization: "Zones Federated Organization",
	ZonePoolFieldCreatedAtSeconds:           "Created At Seconds",
	ZonePoolFieldCreatedAtNanos:             "Created At Nanos",
	ZonePoolFieldUpdatedAtSeconds:           "Updated At Seconds",
	ZonePoolFieldUpdatedAtNanos:             "Updated At Nanos",
	ZonePoolFieldDeletePrepare:              "Delete Prepare",
}

func (m *ZonePool) IsKeyField(s string) bool {
	return strings.HasPrefix(s, ZonePoolFieldKey+".") || s == ZonePoolFieldKey
}

func (m *ZonePool) DiffFields(o *ZonePool, fields *FieldMap) {
	if m.Key.Organization != o.Key.Organization {
		fields.Set(ZonePoolFieldKeyOrganization)
		fields.Set(ZonePoolFieldKey)
	}
	if m.Key.Name != o.Key.Name {
		fields.Set(ZonePoolFieldKeyName)
		fields.Set(ZonePoolFieldKey)
	}
	if m.Zones != nil && o.Zones != nil {
		if len(m.Zones) != len(o.Zones) {
			fields.Set(ZonePoolFieldZones)
		} else {
			for i0 := 0; i0 < len(m.Zones); i0++ {
				if m.Zones[i0].Organization != o.Zones[i0].Organization {
					fields.Set(ZonePoolFieldZonesOrganization)
					fields.Set(ZonePoolFieldZones)
				}
				if m.Zones[i0].Name != o.Zones[i0].Name {
					fields.Set(ZonePoolFieldZonesName)
					fields.Set(ZonePoolFieldZones)
				}
				if m.Zones[i0].FederatedOrganization != o.Zones[i0].FederatedOrganization {
					fields.Set(ZonePoolFieldZonesFederatedOrganization)
					fields.Set(ZonePoolFieldZones)
				}
			}
		}
	} else if (m.Zones != nil && o.Zones == nil) || (m.Zones == nil && o.Zones != nil) {
		fields.Set(ZonePoolFieldZones)
	}
	if m.CreatedAt.Seconds != o.CreatedAt.Seconds {
		fields.Set(ZonePoolFieldCreatedAtSeconds)
		fields.Set(ZonePoolFieldCreatedAt)
	}
	if m.CreatedAt.Nanos != o.CreatedAt.Nanos {
		fields.Set(ZonePoolFieldCreatedAtNanos)
		fields.Set(ZonePoolFieldCreatedAt)
	}
	if m.UpdatedAt.Seconds != o.UpdatedAt.Seconds {
		fields.Set(ZonePoolFieldUpdatedAtSeconds)
		fields.Set(ZonePoolFieldUpdatedAt)
	}
	if m.UpdatedAt.Nanos != o.UpdatedAt.Nanos {
		fields.Set(ZonePoolFieldUpdatedAtNanos)
		fields.Set(ZonePoolFieldUpdatedAt)
	}
	if m.DeletePrepare != o.DeletePrepare {
		fields.Set(ZonePoolFieldDeletePrepare)
	}
}

func (m *ZonePool) GetDiffFields(o *ZonePool) *FieldMap {
	diffFields := NewFieldMap(nil)
	m.DiffFields(o, diffFields)
	return diffFields
}

var UpdateZonePoolFieldsMap = NewFieldMap(map[string]struct{}{
	ZonePoolFieldZones:                      struct{}{},
	ZonePoolFieldZonesOrganization:          struct{}{},
	ZonePoolFieldZonesName:                  struct{}{},
	ZonePoolFieldZonesFederatedOrganization: struct{}{},
})

func (m *ZonePool) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for _, field := range fmap.Fields() {
		if m.IsKeyField(field) {
			continue
		}
		if !UpdateZonePoolFieldsMap.Has(field) {
			if _, ok := ZonePoolAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, ZonePoolAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *ZonePool) Clone() *ZonePool {
	cp := &ZonePool{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *ZonePool) AddZones(vals ...*ZoneKey) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.Zones {
		cur[v.GetKeyString()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.GetKeyString()]; found {
			continue // duplicate
		}
		m.Zones = append(m.Zones, v)
		changes++
	}
	return changes
}

func (m *ZonePool) RemoveZones(vals ...*ZoneKey) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.GetKeyString()] = struct{}{}
	}
	for i := len(m.Zones); i >= 0; i-- {
		if _, found := remove[m.Zones[i].GetKeyString()]; found {
			m.Zones = append(m.Zones[:i], m.Zones[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *ZonePool) CopyInFields(src *ZonePool) int {
	updateListAction := "replace"
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if fmap.HasOrHasChild("2") {
		if fmap.Has("2.1") {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if fmap.Has("2.2") {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if fmap.HasOrHasChild("3") {
		if src.Zones != nil {
			if updateListAction == "add" {
				changed += m.AddZones(src.Zones...)
			} else if updateListAction == "remove" {
				changed += m.RemoveZones(src.Zones...)
			} else {
				m.Zones = make([]*ZoneKey, 0)
				for k0, _ := range src.Zones {
					m.Zones = append(m.Zones, src.Zones[k0].Clone())
				}
				changed++
			}
		} else if m.Zones != nil {
			m.Zones = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("4") {
		if fmap.Has("4.1") {
			if m.CreatedAt.Seconds != src.CreatedAt.Seconds {
				m.CreatedAt.Seconds = src.CreatedAt.Seconds
				changed++
			}
		}
		if fmap.Has("4.2") {
			if m.CreatedAt.Nanos != src.CreatedAt.Nanos {
				m.CreatedAt.Nanos = src.CreatedAt.Nanos
				changed++
			}
		}
	}
	if fmap.HasOrHasChild("5") {
		if fmap.Has("5.1") {
			if m.UpdatedAt.Seconds != src.UpdatedAt.Seconds {
				m.UpdatedAt.Seconds = src.UpdatedAt.Seconds
				changed++
			}
		}
		if fmap.Has("5.2") {
			if m.UpdatedAt.Nanos != src.UpdatedAt.Nanos {
				m.UpdatedAt.Nanos = src.UpdatedAt.Nanos
				changed++
			}
		}
	}
	if fmap.Has("6") {
		if m.DeletePrepare != src.DeletePrepare {
			m.DeletePrepare = src.DeletePrepare
			changed++
		}
	}
	return changed
}

func (m *ZonePool) DeepCopyIn(src *ZonePool) {
	m.Key.DeepCopyIn(&src.Key)
	if src.Zones != nil {
		m.Zones = make([]*ZoneKey, len(src.Zones), len(src.Zones))
		for ii, s := range src.Zones {
			var tmp_s ZoneKey
			tmp_s.DeepCopyIn(s)
			m.Zones[ii] = &tmp_s
		}
	} else {
		m.Zones = nil
	}
	m.CreatedAt = src.CreatedAt
	m.UpdatedAt = src.UpdatedAt
	m.DeletePrepare = src.DeletePrepare
}

func (s *ZonePool) HasFields() bool {
	return true
}

type ZonePoolStore interface {
	Create(ctx context.Context, m *ZonePool, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *ZonePool, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *ZonePool, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *ZonePool, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*ZonePool, int64, error)
	Get(ctx context.Context, key *ZonePoolKey, buf *ZonePool) bool
	STMGet(stm concurrency.STM, key *ZonePoolKey, buf *ZonePool) bool
	STMPut(stm concurrency.STM, obj *ZonePool, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *ZonePoolKey)
	STMHas(stm concurrency.STM, key *ZonePoolKey) bool
}

type ZonePoolStoreImpl struct {
	kvstore objstore.KVStore
}

func NewZonePoolStore(kvstore objstore.KVStore) *ZonePoolStoreImpl {
	return &ZonePoolStoreImpl{kvstore: kvstore}
}

func (s *ZonePoolStoreImpl) Create(ctx context.Context, m *ZonePool, wait func(int64)) (*Result, error) {
	err := m.Validate(ZonePoolAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ZonePool", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ZonePoolStoreImpl) Update(ctx context.Context, m *ZonePool, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ZonePool", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur ZonePool
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ZonePoolStoreImpl) Put(ctx context.Context, m *ZonePool, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(ZonePoolAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ZonePool", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ZonePoolStoreImpl) Delete(ctx context.Context, m *ZonePool, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ZonePool", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ZonePoolStoreImpl) LoadOne(key string) (*ZonePool, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj ZonePool
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse ZonePool data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *ZonePoolStoreImpl) Get(ctx context.Context, key *ZonePoolKey, buf *ZonePool) bool {
	keystr := objstore.DbKeyString("ZonePool", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *ZonePoolStoreImpl) STMGet(stm concurrency.STM, key *ZonePoolKey, buf *ZonePool) bool {
	keystr := objstore.DbKeyString("ZonePool", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *ZonePoolStoreImpl) STMHas(stm concurrency.STM, key *ZonePoolKey) bool {
	keystr := objstore.DbKeyString("ZonePool", key)
	return stm.Get(keystr) != ""
}

func (s *ZonePoolStoreImpl) parseGetData(val []byte, buf *ZonePool) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = ZonePool{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *ZonePoolStoreImpl) STMPut(stm concurrency.STM, obj *ZonePool, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("ZonePool", obj.GetKey())

	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("ZonePool json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *ZonePoolStoreImpl) STMDel(stm concurrency.STM, key *ZonePoolKey) {
	keystr := objstore.DbKeyString("ZonePool", key)
	stm.Del(keystr)
}

func StoreListZonePool(ctx context.Context, kvstore objstore.KVStore) ([]ZonePool, error) {
	keyPrefix := objstore.DbKeyPrefixString("ZonePool") + "/"
	objs := []ZonePool{}
	err := kvstore.List(keyPrefix, func(key, val []byte, rev, modRev int64) error {
		obj := ZonePool{}
		err := json.Unmarshal(val, &obj)
		if err != nil {
			return fmt.Errorf("failed to unmarshal ZonePool json %s, %s", string(val), err)
		}
		objs = append(objs, obj)
		return nil
	})
	return objs, err
}

type ZonePoolKeyWatcher struct {
	cb func(ctx context.Context)
}

type ZonePoolCacheData struct {
	Obj    *ZonePool
	ModRev int64
}

func (s *ZonePoolCacheData) Clone() *ZonePoolCacheData {
	cp := ZonePoolCacheData{}
	if s.Obj != nil {
		cp.Obj = &ZonePool{}
		cp.Obj.DeepCopyIn(s.Obj)
	}
	cp.ModRev = s.ModRev
	return &cp
}

// ZonePoolCache caches ZonePool objects in memory in a hash table
// and keeps them in sync with the database.
type ZonePoolCache struct {
	Objs          map[ZonePoolKey]*ZonePoolCacheData
	Mux           util.Mutex
	List          map[ZonePoolKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *ZonePool, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *ZonePool, new *ZonePool)
	DeletedCbs    []func(ctx context.Context, old *ZonePool)
	KeyWatchers   map[ZonePoolKey][]*ZonePoolKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *ZonePoolKey)
	DeletedKeyCbs []func(ctx context.Context, key *ZonePoolKey)
	Store         ZonePoolStore
}

func NewZonePoolCache() *ZonePoolCache {
	cache := ZonePoolCache{}
	InitZonePoolCache(&cache)
	return &cache
}

func InitZonePoolCache(cache *ZonePoolCache) {
	cache.Objs = make(map[ZonePoolKey]*ZonePoolCacheData)
	cache.KeyWatchers = make(map[ZonePoolKey][]*ZonePoolKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *ZonePoolCache) GetTypeString() string {
	return "ZonePool"
}

func (c *ZonePoolCache) Get(key *ZonePoolKey, valbuf *ZonePool) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *ZonePoolCache) GetWithRev(key *ZonePoolKey, valbuf *ZonePool, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *ZonePoolCache) HasKey(key *ZonePoolKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *ZonePoolCache) GetAllKeys(ctx context.Context, cb func(key *ZonePoolKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *ZonePoolCache) GetAllLocked(ctx context.Context, cb func(obj *ZonePool, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		cb(data.Obj, data.ModRev)
	}
}

func (c *ZonePoolCache) Update(ctx context.Context, in *ZonePool, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *ZonePool) (*ZonePool, bool) {
		return in, true
	})
}

func (c *ZonePoolCache) UpdateModFunc(ctx context.Context, key *ZonePoolKey, modRev int64, modFunc func(old *ZonePool) (new *ZonePool, changed bool)) {
	c.Mux.Lock()
	var old *ZonePool
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if len(c.UpdatedCbs) > 0 || len(c.NotifyCbs) > 0 {
		newCopy := &ZonePool{}
		newCopy.DeepCopyIn(new)
		for _, cb := range c.UpdatedCbs {
			defer cb(ctx, old, newCopy)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				defer cb(ctx, newCopy, modRev)
			}
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &ZonePool{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &ZonePoolCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *ZonePoolCache) Delete(ctx context.Context, in *ZonePool, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *ZonePool) bool {
		return true
	})
}

func (c *ZonePoolCache) DeleteCondFunc(ctx context.Context, in *ZonePool, modRev int64, condFunc func(old *ZonePool) bool) {
	c.Mux.Lock()
	var old *ZonePool
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete", "key", in.GetKeyVal())
	c.Mux.Unlock()
	obj := old
	if obj == nil {
		obj = in
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, obj, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *ZonePoolCache) Prune(ctx context.Context, validKeys map[ZonePoolKey]struct{}) {
	log.SpanLog(ctx, log.DebugLevelApi, "Prune ZonePool", "numValidKeys", len(validKeys))
	notify := make(map[ZonePoolKey]*ZonePoolCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		obj := old.Obj
		if obj == nil {
			obj = &ZonePool{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *ZonePoolCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *ZonePoolCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *ZonePoolCache) Show(filter *ZonePool, cb func(ret *ZonePool) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func ZonePoolGenericNotifyCb(fn func(key *ZonePoolKey, old *ZonePool)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*ZonePoolKey), obj.(*ZonePool))
	}
}

func (c *ZonePoolCache) SetNotifyCb(fn func(ctx context.Context, obj *ZonePool, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *ZonePool, modRev int64){fn}
}

func (c *ZonePoolCache) SetUpdatedCb(fn func(ctx context.Context, old *ZonePool, new *ZonePool)) {
	c.UpdatedCbs = []func(ctx context.Context, old *ZonePool, new *ZonePool){fn}
}

func (c *ZonePoolCache) SetDeletedCb(fn func(ctx context.Context, old *ZonePool)) {
	c.DeletedCbs = []func(ctx context.Context, old *ZonePool){fn}
}

func (c *ZonePoolCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *ZonePoolKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *ZonePoolKey){fn}
}

func (c *ZonePoolCache) SetDeletedKeyCb(fn func(ctx context.Context, key *ZonePoolKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *ZonePoolKey){fn}
}

func (c *ZonePoolCache) AddUpdatedCb(fn func(ctx context.Context, old *ZonePool, new *ZonePool)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *ZonePoolCache) AddDeletedCb(fn func(ctx context.Context, old *ZonePool)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *ZonePoolCache) AddNotifyCb(fn func(ctx context.Context, obj *ZonePool, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *ZonePoolCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *ZonePoolKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *ZonePoolCache) AddDeletedKeyCb(fn func(ctx context.Context, key *ZonePoolKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *ZonePoolCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *ZonePoolCache) WatchKey(key *ZonePoolKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*ZonePoolKeyWatcher, 0)
	}
	watcher := ZonePoolKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching ZonePool", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *ZonePoolCache) TriggerKeyWatchers(ctx context.Context, key *ZonePoolKey) {
	watchers := make([]*ZonePoolKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *ZonePoolCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := ZonePool{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse ZonePool data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *ZonePoolCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := ZonePool{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	ZonePoolKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *ZonePoolCache) SyncListStart(ctx context.Context) {
	c.List = make(map[ZonePoolKey]struct{})
}

func (c *ZonePoolCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[ZonePoolKey]*ZonePoolCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		obj := val.Obj
		if obj == nil {
			obj = &ZonePool{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (s *ZonePoolCache) InitCacheWithSync(sync DataSync) {
	InitZonePoolCache(s)
	s.InitSync(sync)
}

func (s *ZonePoolCache) InitSync(sync DataSync) {
	if sync != nil {
		s.Store = NewZonePoolStore(sync.GetKVStore())
		sync.RegisterCache(s)
	}
}

func (c *ZonePoolCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

type ZonePoolByZoneKey struct {
	ZoneKeys map[ZoneKey]map[ZonePoolKey]struct{}
	Mux      util.Mutex
}

func (s *ZonePoolByZoneKey) Init() {
	s.ZoneKeys = make(map[ZoneKey]map[ZonePoolKey]struct{})
}

func (s *ZonePoolByZoneKey) Updated(old *ZonePool, new *ZonePool) map[ZoneKey]struct{} {
	// the below func must be implemented by the user:
	// ZonePool.GetZoneKeys() map[ZoneKey]struct{}
	oldZoneKeys := make(map[ZoneKey]struct{})
	if old != nil {
		oldZoneKeys = old.GetZoneKeys()
	}
	newZoneKeys := new.GetZoneKeys()

	for lookup, _ := range oldZoneKeys {
		if _, found := newZoneKeys[lookup]; found {
			delete(oldZoneKeys, lookup)
			delete(newZoneKeys, lookup)
		}
	}

	s.Mux.Lock()
	defer s.Mux.Unlock()

	changed := make(map[ZoneKey]struct{})
	for lookup, _ := range oldZoneKeys {
		// remove
		s.removeRef(lookup, old.GetKeyVal())
		changed[lookup] = struct{}{}
	}
	for lookup, _ := range newZoneKeys {
		// add
		s.addRef(lookup, new.GetKeyVal())
		changed[lookup] = struct{}{}
	}
	return changed
}

func (s *ZonePoolByZoneKey) Deleted(old *ZonePool) {
	oldZoneKeys := old.GetZoneKeys()

	s.Mux.Lock()
	defer s.Mux.Unlock()

	for lookup, _ := range oldZoneKeys {
		s.removeRef(lookup, old.GetKeyVal())
	}
}

func (s *ZonePoolByZoneKey) addRef(lookup ZoneKey, key ZonePoolKey) {
	ZonePoolKeys, found := s.ZoneKeys[lookup]
	if !found {
		ZonePoolKeys = make(map[ZonePoolKey]struct{})
		s.ZoneKeys[lookup] = ZonePoolKeys
	}
	ZonePoolKeys[key] = struct{}{}
}

func (s *ZonePoolByZoneKey) removeRef(lookup ZoneKey, key ZonePoolKey) {
	ZonePoolKeys, found := s.ZoneKeys[lookup]
	if found {
		delete(ZonePoolKeys, key)
		if len(ZonePoolKeys) == 0 {
			delete(s.ZoneKeys, lookup)
		}
	}
}

func (s *ZonePoolByZoneKey) Find(lookup ZoneKey) []ZonePoolKey {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	list := []ZonePoolKey{}
	for k, _ := range s.ZoneKeys[lookup] {
		list = append(list, k)
	}
	return list
}

func (s *ZonePoolByZoneKey) HasRef(lookup ZoneKey) bool {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	_, found := s.ZoneKeys[lookup]
	return found
}

// Convert to dumpable format. JSON cannot marshal maps with struct keys.
func (s *ZonePoolByZoneKey) Dumpable() map[string]interface{} {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	dat := make(map[string]interface{})
	for lookup, keys := range s.ZoneKeys {
		keystrs := make(map[string]interface{})
		for k, _ := range keys {
			keystrs[k.GetKeyString()] = struct{}{}
		}
		dat[lookup.GetKeyString()] = keystrs
	}
	return dat
}

func (m *ZonePool) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *ZonePool) GetKey() *ZonePoolKey {
	return &m.Key
}

func (m *ZonePool) GetKeyVal() ZonePoolKey {
	return m.Key
}

func (m *ZonePool) SetKey(key *ZonePoolKey) {
	m.Key = *key
}

func CmpSortZonePool(a ZonePool, b ZonePool) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *ZonePool) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.Zones {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *ZonePool) ClearTagged(tags map[string]struct{}) {
	s.Key.ClearTagged(tags)
	if s.Zones != nil {
		for ii := 0; ii < len(s.Zones); ii++ {
			s.Zones[ii].ClearTagged(tags)
		}
	}
	if _, found := tags["timestamp"]; found {
		s.CreatedAt = distributed_match_engine.Timestamp{}
	}
	if _, found := tags["timestamp"]; found {
		s.UpdatedAt = distributed_match_engine.Timestamp{}
	}
}

func IgnoreZonePoolFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CreatedAt")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "UpdatedAt")
	}
	return cmpopts.IgnoreFields(ZonePool{}, names...)
}

func (m *ZonePoolMember) Clone() *ZonePoolMember {
	cp := &ZonePoolMember{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *ZonePoolMember) CopyInFields(src *ZonePoolMember) int {
	changed := 0
	if m.Key.Organization != src.Key.Organization {
		m.Key.Organization = src.Key.Organization
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if m.Zone.Organization != src.Zone.Organization {
		m.Zone.Organization = src.Zone.Organization
		changed++
	}
	if m.Zone.Name != src.Zone.Name {
		m.Zone.Name = src.Zone.Name
		changed++
	}
	if m.Zone.FederatedOrganization != src.Zone.FederatedOrganization {
		m.Zone.FederatedOrganization = src.Zone.FederatedOrganization
		changed++
	}
	return changed
}

func (m *ZonePoolMember) DeepCopyIn(src *ZonePoolMember) {
	m.Key.DeepCopyIn(&src.Key)
	m.Zone.DeepCopyIn(&src.Zone)
}

func (m *ZonePoolMember) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *ZonePoolMember) GetKey() *ZonePoolKey {
	return &m.Key
}

func (m *ZonePoolMember) GetKeyVal() ZonePoolKey {
	return m.Key
}

func (m *ZonePoolMember) SetKey(key *ZonePoolKey) {
	m.Key = *key
}

func CmpSortZonePoolMember(a ZonePoolMember, b ZonePoolMember) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *ZonePoolMember) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if err := m.Zone.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (s *ZonePoolMember) ClearTagged(tags map[string]struct{}) {
	s.Key.ClearTagged(tags)
	s.Zone.ClearTagged(tags)
}

func (m *ZonePool) IsValidArgsForCreateZonePool() error {
	if m.Zones != nil {
	}
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	return nil
}

func (m *ZonePool) IsValidArgsForDeleteZonePool() error {
	if m.Zones != nil {
	}
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	return nil
}

func (m *ZonePool) IsValidArgsForUpdateZonePool() error {
	if m.Zones != nil {
	}
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	return nil
}

func (m *ZonePoolMember) IsValidArgsForAddZonePoolMember() error {
	return nil
}

func (m *ZonePoolMember) IsValidArgsForRemoveZonePoolMember() error {
	return nil
}

func (m *ZonePoolKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovZonepool(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovZonepool(uint64(l))
	}
	return n
}

func (m *ZonePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovZonepool(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovZonepool(uint64(l))
	if len(m.Zones) > 0 {
		for _, e := range m.Zones {
			l = e.Size()
			n += 1 + l + sovZonepool(uint64(l))
		}
	}
	l = m.CreatedAt.Size()
	n += 1 + l + sovZonepool(uint64(l))
	l = m.UpdatedAt.Size()
	n += 1 + l + sovZonepool(uint64(l))
	if m.DeletePrepare {
		n += 2
	}
	return n
}

func (m *ZonePoolMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovZonepool(uint64(l))
	l = m.Zone.Size()
	n += 1 + l + sovZonepool(uint64(l))
	return n
}

func sovZonepool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZonepool(x uint64) (n int) {
	return sovZonepool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ZonePoolKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZonepool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZonePoolKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZonePoolKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZonepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZonepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZonepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZonepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZonepool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZonepool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZonePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZonepool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZonePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZonePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZonepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZonepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZonepool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZonepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZonepool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZonepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, &ZoneKey{})
			if err := m.Zones[len(m.Zones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZonepool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZonepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZonepool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZonepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletePrepare", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeletePrepare = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipZonepool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZonepool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZonePoolMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZonepool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZonePoolMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZonePoolMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZonepool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZonepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZonepool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZonepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Zone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZonepool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZonepool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZonepool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZonepool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZonepool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZonepool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZonepool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZonepool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZonepool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZonepool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZonepool = fmt.Errorf("proto: unexpected end of group")
)
