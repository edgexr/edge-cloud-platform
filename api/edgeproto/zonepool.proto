// Copyright 2022 MobiledgeX, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ZonePool proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "tools/protogen/protogen.proto";
import "result.proto";
import "cloudletkey.proto";
import "gogoproto/gogo.proto";
import "dme/loc.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// ZonePool unique key
//
// ZonePoolKey uniquely identifies a ZonePool.
message ZonePoolKey {
  // Name of the organization this pool belongs to
  string organization = 1 [(protogen.keytag) = "zonepoolorg"];
  // ZonePool Name
  string name = 2 [(protogen.keytag) = "zonepool"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// ZonePool defines a pool of Zones that have restricted access
message ZonePool {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // ZonePool key
  ZonePoolKey key = 2 [(gogoproto.nullable) = false];
  // Zones part of the pool
  repeated ZoneKey zones = 3 [(protogen.refers_to) = "Zone"];
    // Created at time
  distributed_match_engine.Timestamp created_at = 4 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
    // Updated at time
  distributed_match_engine.Timestamp updated_at = 5 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // Preparing to be deleted
  bool delete_prepare = 6 [(protogen.backend) = true]; 
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_test_update) = false;
  option (protogen.generate_cache) = true;
  option (protogen.noconfig) = "CreatedAt,UpdatedAt,DeletePrepare,Zones:#.Organization";
  option (protogen.alias) = "name=Key.Name,org=Key.Organization";
  option (protogen.uses_org) = "key=Organization";
  option (protogen.notify_cache) = true;
  option (protogen.generate_lookup_by_sublist) = "ZoneKey";
}

// ZonePoolMember is used to add and remove a Zone from a ZonePool
message ZonePoolMember {
  // ZonePool key
  ZonePoolKey key = 1 [(gogoproto.nullable) = false, (protogen.refers_to) = "ZonePool"];
  // Zone
  ZoneKey zone = 2 [(protogen.refers_to) = "Zone", (gogoproto.nullable) = false];
  option (protogen.alias) = "pool=Key.Name,org=Key.Organization,zone=Zone.Name,zoneorg=Zone.Organization,zonefedorg=Zone.FederatedOrganization";
  option (protogen.noconfig) = "Zone.Organization";
}

service ZonePoolApi {
  // Create a ZonePool
  rpc CreateZonePool(ZonePool) returns (Result) {
    option (google.api.http) = {
      post: "/create/zonepool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceZonePools,ActionManage,Key.Organization";
    option (protogen.mc2_api_requires_org) = "Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Delete a ZonePool
  rpc DeleteZonePool(ZonePool) returns (Result) {
    option (google.api.http) = {
      post: "/delete/zonepool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceZonePools,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Update a ZonePool
  rpc UpdateZonePool(ZonePool) returns (Result) {
    option (google.api.http) = {
      post: "/update/zonepool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceZonePools,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Show ZonePools
  rpc ShowZonePool(ZonePool) returns (stream ZonePool) {
    option (google.api.http) = {
      post: "/show/zonepool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceZonePools,ActionView,Key.Organization";
  }
  // Add a Zone to a ZonePool
  rpc AddZonePoolMember(ZonePoolMember) returns (Result) {
    option (google.api.http) = {
      post: "/add/zonepoolmember"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceZonePools,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
    option (protogen.method_also_required) = "Zone.Name";
  }
  // Remove a Zone from a ZonePool
  rpc RemoveZonePoolMember(ZonePoolMember) returns (Result) {
    option (google.api.http) = {
      post: "/remove/zonepoolmember"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceZonePools,ActionManage,Key.Organization";
    option (protogen.method_also_required) = "Zone.Name";
  }
}
