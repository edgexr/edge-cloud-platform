// Copyright 2024 EdgeXR, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "tools/protogen/protogen.proto";
import "cloudletkey.proto";
import "result.proto";
import "cloudlet.proto";
import "gogoproto/gogo.proto";
import "dme/loc.proto";
import "resources.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// Zone
//
// Zone is a collection of edge sites for deploying
// applications, analagous to an availability zone.
message Zone {
    // Fields are used for the Update API to specify which fields to apply
    repeated string fields = 1;
    // Unique identifier key
    ZoneKey key = 2 [(gogoproto.nullable) = false];
    // Description of Zone
    string description = 3;
    // Zone-specific flavors
    repeated FlavorInfo infra_flavors = 4 [(protogen.backend) = true];
    // Geo location, used for Federation and UI display
    distributed_match_engine.Loc location = 5 [(gogoproto.nullable) = false];
    // Universally unique object ID
    string obj_id = 89 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
    // Preparing to be deleted
    bool delete_prepare = 90 [(protogen.backend) = true];
    // Created at time
    distributed_match_engine.Timestamp created_at = 91 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
    // Updated at time
    distributed_match_engine.Timestamp updated_at = 92 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
    option (protogen.generate_matches) = true;
    option (protogen.generate_cud) = true;
    option (protogen.generate_cud_test) = true;
    option (protogen.generate_cud_test_update) = false;
    option (protogen.generate_cache) = true;
    option (protogen.noconfig) = "CreatedAt,UpdatedAt,DeletePrepare,Key.FederatedOrganization,Location,FederationConfig";
    option (protogen.alias) = "name=Key.Name,org=Key.Organization";
    option (protogen.uses_org) = "key=Organization";
    option (protogen.notify_cache) = true;
    option (protogen.mc2_target_zone) = "Key";
}

message ZoneGPUs {
    // Zone key
    ZoneKey zone_key = 1 [(gogoproto.nullable) = false];
    // List of GPUs. Note the count will either be 1 or 0, to indicate if such a GPU is available or not. The actual count present is not displayed.
    repeated GPUResource gpus = 2;
}

service ZoneApi {
    // Create a Zone
    rpc CreateZone(Zone) returns (Result) {
        option (google.api.http) = {
            post: "/create/zone"
            body: "*"
        };
        option (protogen.mc2_api) = "ResourceZones,ActionManage,Key.Organization";
        option (protogen.mc2_api_requires_org) = "Key.Organization";
    }
    // Delete a Zone
    rpc DeleteZone(Zone) returns (Result) {
        option (google.api.http) = {
            post: "/delete/zone"
            body: "*"
        };
        option (protogen.mc2_api) = "ResourceZones,ActionManage,Key.Organization";
    }
    // Update a Zone
    rpc UpdateZone(Zone) returns (Result) {
        option (google.api.http) = {
            post: "/update/zone"
            body: "*"
        };
        option (protogen.mc2_api) = "ResourceZones,ActionManage,Key.Organization";
    }
    // Show Zones
    rpc ShowZone(Zone) returns (stream Zone) {
        option (google.api.http) = {
            post: "/show/zone"
            body: "*"
        };
        option (protogen.mc2_api) = "ResourceZones,ActionView,";
        option (protogen.mc2_custom_authz) = true;
    }
    // Show zone GPU information
    rpc ShowZoneGPUs(Zone) returns (stream ZoneGPUs) {
        option (google.api.http) = {
            post: "/show/zonegpus"
            body: "*"
        };
        option (protogen.mc2_api) = "ResourceZones,ActionView,";
        option (protogen.mc2_custom_authz) = true;
    }
}
