// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alert.proto

package edgeproto

import (
	context "context"
	encoding_binary "encoding/binary"
	"encoding/json"
	fmt "fmt"
	distributed_match_engine "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	"github.com/edgexr/edge-cloud-platform/pkg/objstore"
	"github.com/edgexr/edge-cloud-platform/pkg/util"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"go.etcd.io/etcd/client/v3/concurrency"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	"sort"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Alert struct {
	// Labels uniquely define the alert
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Annotations are extra information about the alert
	Annotations map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// State of the alert
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// When alert became active
	ActiveAt distributed_match_engine.Timestamp `protobuf:"bytes,4,opt,name=active_at,json=activeAt,proto3" json:"active_at"`
	// Any value associated with alert
	Value float64 `protobuf:"fixed64,5,opt,name=value,proto3" json:"value,omitempty"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,6,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// Connected controller unique id
	Controller string `protobuf:"bytes,7,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (m *Alert) Reset()         { *m = Alert{} }
func (m *Alert) String() string { return proto.CompactTextString(m) }
func (*Alert) ProtoMessage()    {}
func (*Alert) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b11b2fb4e5b6d61, []int{0}
}
func (m *Alert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Alert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Alert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Alert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Alert.Merge(m, src)
}
func (m *Alert) XXX_Size() int {
	return m.Size()
}
func (m *Alert) XXX_DiscardUnknown() {
	xxx_messageInfo_Alert.DiscardUnknown(m)
}

var xxx_messageInfo_Alert proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Alert)(nil), "edgeproto.Alert")
	proto.RegisterMapType((map[string]string)(nil), "edgeproto.Alert.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "edgeproto.Alert.LabelsEntry")
}

func init() { proto.RegisterFile("alert.proto", fileDescriptor_3b11b2fb4e5b6d61) }

var fileDescriptor_3b11b2fb4e5b6d61 = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xb1, 0x8f, 0x12, 0x4f,
	0x14, 0x66, 0xe0, 0xe0, 0xc7, 0xce, 0xe6, 0x12, 0x7e, 0x9b, 0x2b, 0x06, 0x82, 0x2b, 0x62, 0x43,
	0x2e, 0xb8, 0x6b, 0xd0, 0x44, 0xa5, 0x30, 0x01, 0x63, 0x61, 0xb4, 0xda, 0x33, 0xb6, 0x64, 0xd8,
	0x7d, 0x2e, 0xa3, 0xcb, 0x0c, 0xd9, 0x1d, 0x20, 0x74, 0xc6, 0xc6, 0xf6, 0x72, 0xfe, 0x03, 0x96,
	0xd6, 0xfc, 0x15, 0x94, 0x24, 0x36, 0x56, 0xe6, 0x04, 0x0b, 0x63, 0x65, 0xbc, 0x3d, 0x6b, 0xb3,
	0xb3, 0x78, 0x47, 0xb8, 0xca, 0xee, 0xfb, 0xde, 0xfb, 0xbe, 0x79, 0xdf, 0xcc, 0x3c, 0xac, 0xd3,
	0x00, 0x42, 0x69, 0x8d, 0x42, 0x21, 0x85, 0xa1, 0x81, 0xe7, 0x83, 0x82, 0x95, 0xaa, 0x2f, 0x84,
	0x1f, 0x80, 0x4d, 0x47, 0xcc, 0xa6, 0x9c, 0x0b, 0x49, 0x25, 0x13, 0x3c, 0x4a, 0x85, 0x95, 0x6b,
	0x52, 0x88, 0x20, 0xb2, 0x15, 0xf1, 0x81, 0x5f, 0x80, 0x4d, 0x7b, 0xdf, 0x1b, 0x82, 0x1d, 0x08,
	0x77, 0x43, 0x0f, 0x7c, 0xe1, 0x0b, 0x05, 0xed, 0x04, 0xa5, 0xd5, 0xfa, 0xbb, 0x3d, 0x9c, 0xef,
	0x24, 0xc3, 0x8d, 0xbb, 0xb8, 0x10, 0xd0, 0x3e, 0x04, 0x11, 0x41, 0xb5, 0x5c, 0x43, 0x6f, 0x55,
	0xad, 0x8b, 0x1c, 0x96, 0x52, 0x58, 0xcf, 0x54, 0xfb, 0x31, 0x97, 0xe1, 0xcc, 0xd9, 0x68, 0x8d,
	0x47, 0x58, 0xdf, 0x0a, 0x46, 0xb2, 0xca, 0x7a, 0xe3, 0x8a, 0xb5, 0x73, 0xa9, 0x49, 0xfd, 0xdb,
	0x2e, 0xe3, 0x00, 0xe7, 0x23, 0x49, 0x25, 0x90, 0x5c, 0x0d, 0x35, 0x34, 0x27, 0x25, 0xc6, 0x11,
	0xd6, 0xa8, 0x2b, 0xd9, 0x04, 0x7a, 0x54, 0x92, 0xbd, 0x1a, 0x6a, 0xe8, 0xad, 0x9b, 0x96, 0xc7,
	0x22, 0x19, 0xb2, 0xfe, 0x58, 0x82, 0xd7, 0x1b, 0x52, 0xe9, 0x0e, 0x7a, 0xc0, 0x7d, 0xc6, 0xc1,
	0x7a, 0xce, 0x86, 0x10, 0x49, 0x3a, 0x1c, 0x75, 0xff, 0x3f, 0x99, 0x97, 0x35, 0xf9, 0x97, 0x2e,
	0xbe, 0x5c, 0xcf, 0x38, 0xc5, 0xf4, 0xa0, 0x8e, 0x4c, 0x46, 0x4d, 0x68, 0x30, 0x06, 0x92, 0xaf,
	0xa1, 0x06, 0x72, 0x52, 0x62, 0x1c, 0x62, 0x8d, 0x0b, 0xc9, 0x5e, 0xce, 0x7a, 0xcc, 0x23, 0x85,
	0x1a, 0x6a, 0xe4, 0xba, 0xfb, 0x1f, 0x63, 0x82, 0x4e, 0xe6, 0xe5, 0x3c, 0x17, 0xee, 0x70, 0xe4,
	0x14, 0xd3, 0xfe, 0x13, 0xcf, 0xb8, 0x85, 0xb1, 0x2b, 0xb8, 0x0c, 0x45, 0x10, 0x40, 0x48, 0xfe,
	0x4b, 0x12, 0xef, 0x8a, 0xb7, 0x04, 0x95, 0x07, 0x58, 0xdf, 0x7a, 0x37, 0xa3, 0x84, 0x73, 0xaf,
	0x61, 0x46, 0x90, 0xba, 0x68, 0x02, 0x2f, 0x13, 0x65, 0xd3, 0xcb, 0x2b, 0xd2, 0xce, 0xde, 0x47,
	0x95, 0x87, 0xb8, 0xb4, 0xfb, 0x6e, 0xff, 0xe2, 0x6f, 0x37, 0xbf, 0x9f, 0x11, 0xf4, 0xf3, 0x8c,
	0xa0, 0x37, 0x31, 0x41, 0xc7, 0x31, 0x41, 0x1f, 0x62, 0x82, 0x4e, 0x63, 0x82, 0x7e, 0x9d, 0x93,
	0xa2, 0xfa, 0x97, 0xa7, 0x30, 0x9b, 0xff, 0x26, 0x7b, 0x5c, 0x70, 0x68, 0x4d, 0x70, 0x5a, 0xeb,
	0x8c, 0x98, 0xf1, 0x0a, 0x6b, 0x47, 0x03, 0x31, 0x4d, 0x17, 0xa3, 0xb4, 0xfb, 0x9b, 0x95, 0x2b,
	0x95, 0xfa, 0xbd, 0x1f, 0x31, 0x29, 0x3b, 0x10, 0x89, 0x71, 0xe8, 0x82, 0x2a, 0x35, 0x3b, 0x6e,
	0x12, 0xfb, 0x05, 0x83, 0x69, 0x73, 0x79, 0x4e, 0xd0, 0xdb, 0x4f, 0xdf, 0xde, 0x67, 0x4b, 0x75,
	0xdd, 0x8e, 0x06, 0x62, 0x6a, 0xab, 0x7d, 0x6f, 0xa3, 0xc3, 0xdb, 0xa8, 0x5b, 0x5d, 0x7c, 0x35,
	0x33, 0x8b, 0x95, 0x89, 0x96, 0x2b, 0x13, 0x9d, 0xae, 0x4c, 0x74, 0xbc, 0x36, 0x33, 0xcb, 0xb5,
	0x99, 0xf9, 0xbc, 0x36, 0x33, 0xfd, 0x82, 0x9a, 0x72, 0xe7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x40, 0x5d, 0xa5, 0xd5, 0x22, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AlertApiClient is the client API for AlertApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlertApiClient interface {
	// Show alerts
	ShowAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (AlertApi_ShowAlertClient, error)
}

type alertApiClient struct {
	cc *grpc.ClientConn
}

func NewAlertApiClient(cc *grpc.ClientConn) AlertApiClient {
	return &alertApiClient{cc}
}

func (c *alertApiClient) ShowAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (AlertApi_ShowAlertClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AlertApi_serviceDesc.Streams[0], "/edgeproto.AlertApi/ShowAlert", opts...)
	if err != nil {
		return nil, err
	}
	x := &alertApiShowAlertClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlertApi_ShowAlertClient interface {
	Recv() (*Alert, error)
	grpc.ClientStream
}

type alertApiShowAlertClient struct {
	grpc.ClientStream
}

func (x *alertApiShowAlertClient) Recv() (*Alert, error) {
	m := new(Alert)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlertApiServer is the server API for AlertApi service.
type AlertApiServer interface {
	// Show alerts
	ShowAlert(*Alert, AlertApi_ShowAlertServer) error
}

// UnimplementedAlertApiServer can be embedded to have forward compatible implementations.
type UnimplementedAlertApiServer struct {
}

func (*UnimplementedAlertApiServer) ShowAlert(req *Alert, srv AlertApi_ShowAlertServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowAlert not implemented")
}

func RegisterAlertApiServer(s *grpc.Server, srv AlertApiServer) {
	s.RegisterService(&_AlertApi_serviceDesc, srv)
}

func _AlertApi_ShowAlert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Alert)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlertApiServer).ShowAlert(m, &alertApiShowAlertServer{stream})
}

type AlertApi_ShowAlertServer interface {
	Send(*Alert) error
	grpc.ServerStream
}

type alertApiShowAlertServer struct {
	grpc.ServerStream
}

func (x *alertApiShowAlertServer) Send(m *Alert) error {
	return x.ServerStream.SendMsg(m)
}

var _AlertApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AlertApi",
	HandlerType: (*AlertApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowAlert",
			Handler:       _AlertApi_ShowAlert_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "alert.proto",
}

func (m *Alert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Alert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Alert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Controller) > 0 {
		i -= len(m.Controller)
		copy(dAtA[i:], m.Controller)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.Controller)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NotifyId != 0 {
		i = encodeVarintAlert(dAtA, i, uint64(m.NotifyId))
		i--
		dAtA[i] = 0x30
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x29
	}
	{
		size, err := m.ActiveAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAlert(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAlert(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAlert(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAlert(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAlert(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAlert(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAlert(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlert(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlert(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Alert) Matches(o *Alert, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Labels != nil {
		if len(m.Labels) == 0 && len(o.Labels) > 0 || len(m.Labels) > 0 && len(o.Labels) == 0 {
			return false
		} else if m.Labels != nil && o.Labels != nil {
			if !opts.Filter && len(m.Labels) != len(o.Labels) {
				return false
			}
			for k, _ := range o.Labels {
				_, ok := m.Labels[k]
				if !ok {
					return false
				}
				if o.Labels[k] != m.Labels[k] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.Annotations != nil {
		if len(m.Annotations) == 0 && len(o.Annotations) > 0 || len(m.Annotations) > 0 && len(o.Annotations) == 0 {
			return false
		} else if m.Annotations != nil && o.Annotations != nil {
			if !opts.Filter && len(m.Annotations) != len(o.Annotations) {
				return false
			}
			for k, _ := range o.Annotations {
				_, ok := m.Annotations[k]
				if !ok {
					return false
				}
				if o.Annotations[k] != m.Annotations[k] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.State != "" {
		if o.State != m.State {
			return false
		}
	}
	if !opts.Filter || o.Value != 0 {
		if o.Value != m.Value {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.NotifyId != 0 {
			if o.NotifyId != m.NotifyId {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Controller != "" {
			if o.Controller != m.Controller {
				return false
			}
		}
	}
	return true
}

func (m *Alert) Clone() *Alert {
	cp := &Alert{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *Alert) CopyInFields(src *Alert) int {
	updateListAction := "replace"
	changed := 0
	if src.Labels != nil {
		if updateListAction == "add" {
			for k0, v := range src.Labels {
				m.Labels[k0] = v
				changed++
			}
		} else if updateListAction == "remove" {
			for k0, _ := range src.Labels {
				if _, ok := m.Labels[k0]; ok {
					delete(m.Labels, k0)
					changed++
				}
			}
		} else {
			m.Labels = make(map[string]string)
			for k0, v := range src.Labels {
				m.Labels[k0] = v
			}
			changed++
		}
	} else if m.Labels != nil {
		m.Labels = nil
		changed++
	}
	if src.Annotations != nil {
		if updateListAction == "add" {
			for k0, v := range src.Annotations {
				m.Annotations[k0] = v
				changed++
			}
		} else if updateListAction == "remove" {
			for k0, _ := range src.Annotations {
				if _, ok := m.Annotations[k0]; ok {
					delete(m.Annotations, k0)
					changed++
				}
			}
		} else {
			m.Annotations = make(map[string]string)
			for k0, v := range src.Annotations {
				m.Annotations[k0] = v
			}
			changed++
		}
	} else if m.Annotations != nil {
		m.Annotations = nil
		changed++
	}
	if m.State != src.State {
		m.State = src.State
		changed++
	}
	if m.ActiveAt.Seconds != src.ActiveAt.Seconds {
		m.ActiveAt.Seconds = src.ActiveAt.Seconds
		changed++
	}
	if m.ActiveAt.Nanos != src.ActiveAt.Nanos {
		m.ActiveAt.Nanos = src.ActiveAt.Nanos
		changed++
	}
	if m.Value != src.Value {
		m.Value = src.Value
		changed++
	}
	if m.NotifyId != src.NotifyId {
		m.NotifyId = src.NotifyId
		changed++
	}
	if m.Controller != src.Controller {
		m.Controller = src.Controller
		changed++
	}
	return changed
}

func (m *Alert) DeepCopyIn(src *Alert) {
	if src.Labels != nil {
		m.Labels = make(map[string]string)
		for k, v := range src.Labels {
			m.Labels[k] = v
		}
	} else {
		m.Labels = nil
	}
	if src.Annotations != nil {
		m.Annotations = make(map[string]string)
		for k, v := range src.Annotations {
			m.Annotations[k] = v
		}
	} else {
		m.Annotations = nil
	}
	m.State = src.State
	m.ActiveAt = src.ActiveAt
	m.Value = src.Value
	m.NotifyId = src.NotifyId
	m.Controller = src.Controller
}

func (s *Alert) HasFields() bool {
	return false
}

type AlertStore interface {
	Create(ctx context.Context, m *Alert, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *Alert, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *Alert, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *Alert, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*Alert, int64, error)
	Get(ctx context.Context, key *AlertKey, buf *Alert) bool
	STMGet(stm concurrency.STM, key *AlertKey, buf *Alert) bool
	STMPut(stm concurrency.STM, obj *Alert, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *AlertKey)
	STMHas(stm concurrency.STM, key *AlertKey) bool
}

type AlertStoreImpl struct {
	kvstore objstore.KVStore
}

func NewAlertStore(kvstore objstore.KVStore) *AlertStoreImpl {
	return &AlertStoreImpl{kvstore: kvstore}
}

func (s *AlertStoreImpl) Create(ctx context.Context, m *Alert, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Alert", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AlertStoreImpl) Update(ctx context.Context, m *Alert, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Alert", m.GetKey())
	var vers int64 = 0
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AlertStoreImpl) Put(ctx context.Context, m *Alert, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Alert", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AlertStoreImpl) Delete(ctx context.Context, m *Alert, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Alert", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AlertStoreImpl) LoadOne(key string) (*Alert, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj Alert
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse Alert data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AlertStoreImpl) Get(ctx context.Context, key *AlertKey, buf *Alert) bool {
	keystr := objstore.DbKeyString("Alert", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *AlertStoreImpl) STMGet(stm concurrency.STM, key *AlertKey, buf *Alert) bool {
	keystr := objstore.DbKeyString("Alert", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *AlertStoreImpl) STMHas(stm concurrency.STM, key *AlertKey) bool {
	keystr := objstore.DbKeyString("Alert", key)
	return stm.Get(keystr) != ""
}

func (s *AlertStoreImpl) parseGetData(val []byte, buf *Alert) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = Alert{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AlertStoreImpl) STMPut(stm concurrency.STM, obj *Alert, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("Alert", obj.GetKey())

	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("Alert json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AlertStoreImpl) STMDel(stm concurrency.STM, key *AlertKey) {
	keystr := objstore.DbKeyString("Alert", key)
	stm.Del(keystr)
}

func StoreListAlert(ctx context.Context, kvstore objstore.KVStore) ([]Alert, error) {
	keyPrefix := objstore.DbKeyPrefixString("Alert") + "/"
	objs := []Alert{}
	err := kvstore.List(keyPrefix, func(key, val []byte, rev, modRev int64) error {
		obj := Alert{}
		err := json.Unmarshal(val, &obj)
		if err != nil {
			return fmt.Errorf("failed to unmarshal Alert json %s, %s", string(val), err)
		}
		objs = append(objs, obj)
		return nil
	})
	return objs, err
}

type AlertKeyWatcher struct {
	cb func(ctx context.Context)
}

type AlertCacheData struct {
	Obj    *Alert
	ModRev int64
}

func (s *AlertCacheData) Clone() *AlertCacheData {
	cp := AlertCacheData{}
	if s.Obj != nil {
		cp.Obj = &Alert{}
		cp.Obj.DeepCopyIn(s.Obj)
	}
	cp.ModRev = s.ModRev
	return &cp
}

// AlertCache caches Alert objects in memory in a hash table
// and keeps them in sync with the database.
type AlertCache struct {
	Objs          map[AlertKey]*AlertCacheData
	Mux           util.Mutex
	List          map[AlertKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *Alert, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *Alert, new *Alert)
	DeletedCbs    []func(ctx context.Context, old *Alert)
	KeyWatchers   map[AlertKey][]*AlertKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *AlertKey)
	DeletedKeyCbs []func(ctx context.Context, key *AlertKey)
	Store         AlertStore
}

func NewAlertCache() *AlertCache {
	cache := AlertCache{}
	InitAlertCache(&cache)
	return &cache
}

func InitAlertCache(cache *AlertCache) {
	cache.Objs = make(map[AlertKey]*AlertCacheData)
	cache.KeyWatchers = make(map[AlertKey][]*AlertKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *AlertCache) GetTypeString() string {
	return "Alert"
}

func (c *AlertCache) Get(key *AlertKey, valbuf *Alert) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

// STMGet gets from the store if STM is set, otherwise gets from cache
func (c *AlertCache) STMGet(ostm *OptionalSTM, key *AlertKey, valbuf *Alert) bool {
	if ostm.stm != nil {
		if c.Store == nil {
			// panic, otherwise if we fallback to cache, we may silently
			// introduce race conditions and intermittent failures due to
			// reading from cache during a transaction.
			panic("AlertCache store not set, cannot read via STM")
		}
		return c.Store.STMGet(ostm.stm, key, valbuf)
	}
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *AlertCache) GetWithRev(key *AlertKey, valbuf *Alert, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *AlertCache) HasKey(key *AlertKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AlertCache) GetAllKeys(ctx context.Context, cb func(key *AlertKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *AlertCache) GetAllLocked(ctx context.Context, cb func(obj *Alert, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		cb(data.Obj, data.ModRev)
	}
}

func (c *AlertCache) Update(ctx context.Context, in *Alert, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *Alert) (*Alert, bool) {
		return in, true
	})
}

func (c *AlertCache) UpdateModFunc(ctx context.Context, key *AlertKey, modRev int64, modFunc func(old *Alert) (new *Alert, changed bool)) {
	c.Mux.Lock()
	var old *Alert
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if len(c.UpdatedCbs) > 0 || len(c.NotifyCbs) > 0 {
		newCopy := &Alert{}
		newCopy.DeepCopyIn(new)
		for _, cb := range c.UpdatedCbs {
			defer cb(ctx, old, newCopy)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				defer cb(ctx, newCopy, modRev)
			}
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &Alert{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &AlertCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *AlertCache) Delete(ctx context.Context, in *Alert, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *Alert) bool {
		return true
	})
}

func (c *AlertCache) DeleteCondFunc(ctx context.Context, in *Alert, modRev int64, condFunc func(old *Alert) bool) {
	c.Mux.Lock()
	var old *Alert
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete", "key", in.GetKeyVal())
	c.Mux.Unlock()
	obj := old
	if obj == nil {
		obj = in
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, obj, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *AlertCache) Prune(ctx context.Context, validKeys map[AlertKey]struct{}) {
	log.SpanLog(ctx, log.DebugLevelApi, "Prune Alert", "numValidKeys", len(validKeys))
	notify := make(map[AlertKey]*AlertCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		obj := old.Obj
		if obj == nil {
			obj = &Alert{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AlertCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AlertCache) Flush(ctx context.Context, notifyId int64) {
	log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush Alert", "notifyId", notifyId, "FlushAll", c.FlushAll)
	flushed := make(map[AlertKey]*AlertCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if !c.FlushAll && val.Obj.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush Alert delete", "key", key)
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			obj := old.Obj
			if obj == nil {
				obj = &Alert{}
				obj.SetKey(&key)
			}
			for _, cb := range c.NotifyCbs {
				if cb != nil {
					cb(ctx, obj, old.ModRev)
				}
			}
			for _, cb := range c.DeletedKeyCbs {
				cb(ctx, &key)
			}
			if old.Obj != nil {
				for _, cb := range c.DeletedCbs {
					cb(ctx, old.Obj)
				}
			}
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *AlertCache) Show(filter *Alert, cb func(ret *Alert) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AlertGenericNotifyCb(fn func(key *AlertKey, old *Alert)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*AlertKey), obj.(*Alert))
	}
}

func (c *AlertCache) SetNotifyCb(fn func(ctx context.Context, obj *Alert, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *Alert, modRev int64){fn}
}

func (c *AlertCache) SetUpdatedCb(fn func(ctx context.Context, old *Alert, new *Alert)) {
	c.UpdatedCbs = []func(ctx context.Context, old *Alert, new *Alert){fn}
}

func (c *AlertCache) SetDeletedCb(fn func(ctx context.Context, old *Alert)) {
	c.DeletedCbs = []func(ctx context.Context, old *Alert){fn}
}

func (c *AlertCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *AlertKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *AlertKey){fn}
}

func (c *AlertCache) SetDeletedKeyCb(fn func(ctx context.Context, key *AlertKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *AlertKey){fn}
}

func (c *AlertCache) AddUpdatedCb(fn func(ctx context.Context, old *Alert, new *Alert)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *AlertCache) AddDeletedCb(fn func(ctx context.Context, old *Alert)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *AlertCache) AddNotifyCb(fn func(ctx context.Context, obj *Alert, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *AlertCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *AlertKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *AlertCache) AddDeletedKeyCb(fn func(ctx context.Context, key *AlertKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *AlertCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *AlertCache) WatchKey(key *AlertKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AlertKeyWatcher, 0)
	}
	watcher := AlertKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching Alert", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AlertCache) TriggerKeyWatchers(ctx context.Context, key *AlertKey) {
	watchers := make([]*AlertKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *AlertCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := Alert{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse Alert data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AlertCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := Alert{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	AlertKeyStringParse(keystr, &obj)
	c.Delete(ctx, &obj, modRev)
}

func (c *AlertCache) SyncListStart(ctx context.Context) {
	c.List = make(map[AlertKey]struct{})
}

func (c *AlertCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[AlertKey]*AlertCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		obj := val.Obj
		if obj == nil {
			obj = &Alert{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (s *AlertCache) InitCacheWithSync(sync DataSync) {
	InitAlertCache(s)
	s.InitSync(sync)
}

func (s *AlertCache) InitSync(sync DataSync) {
	if sync != nil {
		s.Store = NewAlertStore(sync.GetKVStore())
		sync.RegisterCache(s)
	}
}

func InitAlertCacheWithStore(cache *AlertCache, store AlertStore) {
	InitAlertCache(cache)
	cache.Store = store
}

func (c *AlertCache) UsesOrg(org string) bool {
	return false
}

// Helper method to check that enums have valid values
func (m *Alert) ValidateEnums() error {
	return nil
}

func (s *Alert) ClearTagged(tags map[string]struct{}) {
	if _, found := tags["timestamp"]; found {
		s.ActiveAt = distributed_match_engine.Timestamp{}
	}
	if _, found := tags["nocmp"]; found {
		s.NotifyId = 0
	}
	if _, found := tags["nocmp"]; found {
		s.Controller = ""
	}
}

func IgnoreAlertFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "ActiveAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifyId")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Controller")
	}
	return cmpopts.IgnoreFields(Alert{}, names...)
}

type MatchOptions struct {
	// Filter will ignore 0 or nil fields on the passed in object
	Filter bool
	// IgnoreBackend will ignore fields that were marked backend in .proto
	IgnoreBackend bool
	// Sort repeated (arrays) of Key objects so matching does not
	// fail due to order.
	SortArrayedKeys bool
}

type MatchOpt func(*MatchOptions)

func MatchFilter() MatchOpt {
	return func(opts *MatchOptions) {
		opts.Filter = true
	}
}

func MatchIgnoreBackend() MatchOpt {
	return func(opts *MatchOptions) {
		opts.IgnoreBackend = true
	}
}

func MatchSortArrayedKeys() MatchOpt {
	return func(opts *MatchOptions) {
		opts.SortArrayedKeys = true
	}
}

func applyMatchOptions(opts *MatchOptions, args ...MatchOpt) {
	for _, f := range args {
		f(opts)
	}
}

type FieldMap struct {
	fields map[string]struct{}
}

func MakeFieldMap(fields []string) *FieldMap {
	fmap := &FieldMap{}
	fmap.fields = map[string]struct{}{}
	if fields == nil {
		return fmap
	}
	for _, set := range fields {
		fmap.fields[set] = struct{}{}
	}
	return fmap
}

func NewFieldMap(fields map[string]struct{}) *FieldMap {
	if fields == nil {
		fields = map[string]struct{}{}
	}
	return &FieldMap{
		fields: fields,
	}
}

// Has checks if the key is set. Note that setting
// a parent key implies that all child keys are also set.
func (s *FieldMap) Has(key string) bool {
	// key or parent is specified
	for {
		if _, ok := s.fields[key]; ok {
			return true
		}
		idx := strings.LastIndex(key, ".")
		if idx == -1 {
			break
		}
		key = key[:idx]
	}
	return false
}

// HasOrHasChild checks if the key, or any child
// of the key is set. Note that as with Has(), if
// a parent of the key is set, this returns true.
func (s *FieldMap) HasOrHasChild(key string) bool {
	if s.Has(key) {
		return true
	}
	prefix := key + "."
	for k := range s.fields {
		if strings.HasPrefix(k, prefix) {
			return true
		}
	}
	return false
}

func (s *FieldMap) Set(key string) {
	s.fields[key] = struct{}{}
}

func (s *FieldMap) Clear(key string) {
	delete(s.fields, key)
}

func (s *FieldMap) Fields() []string {
	fields := []string{}
	for k := range s.fields {
		fields = append(fields, k)
	}
	sort.Strings(fields)
	return fields
}

func (s *FieldMap) Count() int {
	return len(s.fields)
}

// OptionalSTM is for operations that use either the cache or the store.
type OptionalSTM struct {
	// STM may be nil to force using the cache instead of the store
	stm concurrency.STM
}

// NewOptionalSTM creates a new optional STM for operations that
// use either the cache or the store. Set the stm to force using
// the store, or leave nil to force using the cache.
func NewOptionalSTM(stm concurrency.STM) *OptionalSTM {
	return &OptionalSTM{
		stm: stm,
	}
}

// DecodeHook for use with the mapstructure package.
// Allows decoding to handle protobuf enums that are
// represented as strings.
func EnumDecodeHook(from, to reflect.Type, data interface{}) (interface{}, error) {
	switch to {
	case reflect.TypeOf(OptResNames(0)):
		return ParseOptResNames(data)
	case reflect.TypeOf(Liveness(0)):
		return ParseLiveness(data)
	case reflect.TypeOf(IpSupport(0)):
		return ParseIpSupport(data)
	case reflect.TypeOf(IpAccess(0)):
		return ParseIpAccess(data)
	case reflect.TypeOf(TrackedState(0)):
		return ParseTrackedState(data)
	case reflect.TypeOf(CRMOverride(0)):
		return ParseCRMOverride(data)
	case reflect.TypeOf(ImageType(0)):
		return ParseImageType(data)
	case reflect.TypeOf(QosSessionProfile(0)):
		return ParseQosSessionProfile(data)
	case reflect.TypeOf(VmAppOsType(0)):
		return ParseVmAppOsType(data)
	case reflect.TypeOf(DeleteType(0)):
		return ParseDeleteType(data)
	case reflect.TypeOf(AccessType(0)):
		return ParseAccessType(data)
	case reflect.TypeOf(GpuType(0)):
		return ParseGpuType(data)
	case reflect.TypeOf(PowerState(0)):
		return ParsePowerState(data)
	case reflect.TypeOf(InfraApiAccess(0)):
		return ParseInfraApiAccess(data)
	case reflect.TypeOf(OSType(0)):
		return ParseOSType(data)
	case reflect.TypeOf(ReportSchedule(0)):
		return ParseReportSchedule(data)
	case reflect.TypeOf(VMState(0)):
		return ParseVMState(data)
	case reflect.TypeOf(VMAction(0)):
		return ParseVMAction(data)
	case reflect.TypeOf(TrustPolicyExceptionState(0)):
		return ParseTrustPolicyExceptionState(data)
	case reflect.TypeOf(NetworkConnectionType(0)):
		return ParseNetworkConnectionType(data)
	case reflect.TypeOf(ApiEndpointType(0)):
		return ParseApiEndpointType(data)
	case reflect.TypeOf(RateLimitTarget(0)):
		return ParseRateLimitTarget(data)
	case reflect.TypeOf(FlowRateLimitAlgorithm(0)):
		return ParseFlowRateLimitAlgorithm(data)
	case reflect.TypeOf(MaxReqsRateLimitAlgorithm(0)):
		return ParseMaxReqsRateLimitAlgorithm(data)
	case reflect.TypeOf(NoticeAction(0)):
		return ParseNoticeAction(data)
	case reflect.TypeOf(StreamState(0)):
		return ParseStreamState(data)
	case reflect.TypeOf(VersionHash(0)):
		return ParseVersionHash(data)
	}
	return data, nil
}

// GetEnumParseHelp gets end-user specific messages for
// enum parse errors.
// It returns the enum type name, a help message with
// valid values, and a bool that indicates if a type was matched.
func GetEnumParseHelp(t reflect.Type) (string, string, bool) {
	switch t {
	case reflect.TypeOf(OptResNames(0)):
		return "OptResNames", ", valid values are one of Gpu, Nas, Nic, or 0, 1, 2", true
	case reflect.TypeOf(Liveness(0)):
		return "Liveness", ", valid values are one of Unknown, Static, Dynamic, Autoprov, or 0, 1, 2, 3", true
	case reflect.TypeOf(IpSupport(0)):
		return "IpSupport", ", valid values are one of Unknown, Static, Dynamic, or 0, 1, 2", true
	case reflect.TypeOf(IpAccess(0)):
		return "IpAccess", ", valid values are one of Unknown, Dedicated, Shared, or 0, 1, 3", true
	case reflect.TypeOf(TrackedState(0)):
		return "TrackedState", ", valid values are one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone, or 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15", true
	case reflect.TypeOf(CRMOverride(0)):
		return "CRMOverride", ", valid values are one of NoOverride, IgnoreCrmErrors, IgnoreCrm, IgnoreTransientState, IgnoreCrmAndTransientState, or 0, 1, 2, 3, 4", true
	case reflect.TypeOf(ImageType(0)):
		return "ImageType", ", valid values are one of Unknown, Docker, Qcow, Helm, Ovf, Ova, or 0, 1, 2, 3, 4, 5", true
	case reflect.TypeOf(QosSessionProfile(0)):
		return "QosSessionProfile", ", valid values are one of NoPriority, LowLatency, ThroughputDownS, ThroughputDownM, ThroughputDownL, or 0, 1, 2, 3, 4", true
	case reflect.TypeOf(VmAppOsType(0)):
		return "VmAppOsType", ", valid values are one of Unknown, Linux, Windows10, Windows2012, Windows2016, Windows2019, or 0, 1, 2, 3, 4, 5", true
	case reflect.TypeOf(DeleteType(0)):
		return "DeleteType", ", valid values are one of NoAutoDelete, AutoDelete, or 0, 1", true
	case reflect.TypeOf(AccessType(0)):
		return "AccessType", ", valid values are one of DefaultForDeployment, Direct, LoadBalancer, or 0, 1, 2", true
	case reflect.TypeOf(GpuType(0)):
		return "GpuType", ", valid values are one of None, Any, Vgpu, Pci, or 0, 1, 2, 3", true
	case reflect.TypeOf(PowerState(0)):
		return "PowerState", ", valid values are one of PowerStateUnknown, PowerOnRequested, PoweringOn, PowerOn, PowerOffRequested, PoweringOff, PowerOff, RebootRequested, Rebooting, Reboot, PowerStateError, or 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10", true
	case reflect.TypeOf(InfraApiAccess(0)):
		return "InfraApiAccess", ", valid values are one of DirectAccess, RestrictedAccess, or 0, 1", true
	case reflect.TypeOf(OSType(0)):
		return "OSType", ", valid values are one of Linux, Windows, Others, or 0, 1, 20", true
	case reflect.TypeOf(ReportSchedule(0)):
		return "ReportSchedule", ", valid values are one of EveryWeek, Every15Days, EveryMonth, or 0, 1, 3", true
	case reflect.TypeOf(VMState(0)):
		return "VMState", ", valid values are one of Free, InProgress, InUse, Add, Remove, Update, ForceFree, or 0, 1, 2, 3, 4, 5, 6", true
	case reflect.TypeOf(VMAction(0)):
		return "VMAction", ", valid values are one of Done, Allocate, Release, or 0, 1, 2", true
	case reflect.TypeOf(TrustPolicyExceptionState(0)):
		return "TrustPolicyExceptionState", ", valid values are one of Unknown, ApprovalRequested, Active, Rejected, or 0, 1, 2, 3", true
	case reflect.TypeOf(NetworkConnectionType(0)):
		return "NetworkConnectionType", ", valid values are one of Undefined, ConnectToLoadBalancer, ConnectToClusterNodes, ConnectToAll, or 0, 1, 2, 3", true
	case reflect.TypeOf(ApiEndpointType(0)):
		return "ApiEndpointType", ", valid values are one of UnknownApiEndpointType, Dme, or 0, 1", true
	case reflect.TypeOf(RateLimitTarget(0)):
		return "RateLimitTarget", ", valid values are one of UnknownTarget, AllRequests, PerIp, PerUser, or 0, 1, 2, 3", true
	case reflect.TypeOf(FlowRateLimitAlgorithm(0)):
		return "FlowRateLimitAlgorithm", ", valid values are one of UnknownFlowAlgorithm, TokenBucketAlgorithm, LeakyBucketAlgorithm, or 0, 1, 2", true
	case reflect.TypeOf(MaxReqsRateLimitAlgorithm(0)):
		return "MaxReqsRateLimitAlgorithm", ", valid values are one of UnknownMaxReqsAlgorithm, FixedWindowAlgorithm, or 0, 1", true
	case reflect.TypeOf(NoticeAction(0)):
		return "NoticeAction", ", valid values are one of None, Update, Delete, Version, SendallEnd, or 0, 1, 2, 3, 4", true
	case reflect.TypeOf(StreamState(0)):
		return "StreamState", ", valid values are one of Unknown, Start, Stop, Error, or 0, 1, 2, 3", true
	case reflect.TypeOf(VersionHash(0)):
		return "VersionHash", ", valid values are one of D41D8Cd98F00B204E9800998Ecf8427E, C2D882033B0C14F28Cece41Cf4010060, 14Ae4C721C1Bace6E8379D0061A72A77, Eff9D3A6C74Fd02840Efce05D1984E8D, Eac56710C013D954Db31Eeb306B514A4, 75883D14000640B2Ecf694Fe8Ef9192B, E65C39Ec2A489834Dd06E87F7239F9A8, B25B4E18E9A1Dadfd3006E23Fabfbf95, or 0, 52, 53, 54, 55, 56, 57, 58", true
	}
	return "", "", false
}

var ShowMethodNames = map[string]struct{}{
	"ShowAlert":                    struct{}{},
	"ShowAlertPolicy":              struct{}{},
	"ShowSettings":                 struct{}{},
	"ShowFlavor":                   struct{}{},
	"ShowOperatorCode":             struct{}{},
	"ShowResTagTable":              struct{}{},
	"ShowAutoScalePolicy":          struct{}{},
	"ShowTrustPolicy":              struct{}{},
	"ShowApp":                      struct{}{},
	"ShowZonesForAppDeployment":    struct{}{},
	"ShowAppInst":                  struct{}{},
	"ShowAppInstInfo":              struct{}{},
	"ShowAppInstMetrics":           struct{}{},
	"ShowPlatformFeatures":         struct{}{},
	"ShowGPUDriver":                struct{}{},
	"ShowCloudlet":                 struct{}{},
	"ShowCloudletInfo":             struct{}{},
	"ShowCloudletMetrics":          struct{}{},
	"ShowZone":                     struct{}{},
	"ShowZonePool":                 struct{}{},
	"ShowVMPool":                   struct{}{},
	"ShowClusterInst":              struct{}{},
	"ShowClusterInstInfo":          struct{}{},
	"ShowAutoProvPolicy":           struct{}{},
	"ShowTrustPolicyException":     struct{}{},
	"ShowNetwork":                  struct{}{},
	"ShowCloudletRefs":             struct{}{},
	"ShowClusterRefs":              struct{}{},
	"ShowAppInstRefs":              struct{}{},
	"ShowRateLimitSettings":        struct{}{},
	"ShowFlowRateLimitSettings":    struct{}{},
	"ShowMaxReqsRateLimitSettings": struct{}{},
	"ShowCloudletNode":             struct{}{},
	"ShowController":               struct{}{},
	"ShowNode":                     struct{}{},
	"ShowDevice":                   struct{}{},
	"ShowDeviceReport":             struct{}{},
}

func IsShow(cmd string) bool {
	_, found := ShowMethodNames[cmd]
	return found
}

var AllKeyTags = []string{
	"alert",
	"alertorg",
	"apiendpointtype",
	"apiname",
	"app",
	"appinst",
	"appinstorg",
	"appinstv2",
	"appinstv2org",
	"apporg",
	"appver",
	"cloudlet",
	"cloudletfedorg",
	"cloudletnode",
	"cloudletorg",
	"cluster",
	"clusterorg",
	"controlleraddr",
	"deviceid",
	"deviceidtype",
	"flavor",
	"flowsettingsname",
	"gpudriver",
	"gpudriverorg",
	"maxreqssettingsname",
	"name",
	"network",
	"node",
	"noderegion",
	"nodetype",
	"policy",
	"policyorg",
	"ratelimittarget",
	"restagtable",
	"restagtableorg",
	"uniqueid",
	"uniqueidtype",
	"vmpool",
	"vmpoolorg",
	"zone",
	"zonefedorg",
	"zoneorg",
	"zonepool",
	"zonepoolorg",
}

var AllKeyTagsMap = map[string]struct{}{
	"alert":               struct{}{},
	"alertorg":            struct{}{},
	"apiendpointtype":     struct{}{},
	"apiname":             struct{}{},
	"app":                 struct{}{},
	"appinst":             struct{}{},
	"appinstorg":          struct{}{},
	"appinstv2":           struct{}{},
	"appinstv2org":        struct{}{},
	"apporg":              struct{}{},
	"appver":              struct{}{},
	"cloudlet":            struct{}{},
	"cloudletfedorg":      struct{}{},
	"cloudletnode":        struct{}{},
	"cloudletorg":         struct{}{},
	"cluster":             struct{}{},
	"clusterorg":          struct{}{},
	"controlleraddr":      struct{}{},
	"deviceid":            struct{}{},
	"deviceidtype":        struct{}{},
	"flavor":              struct{}{},
	"flowsettingsname":    struct{}{},
	"gpudriver":           struct{}{},
	"gpudriverorg":        struct{}{},
	"maxreqssettingsname": struct{}{},
	"name":                struct{}{},
	"network":             struct{}{},
	"node":                struct{}{},
	"noderegion":          struct{}{},
	"nodetype":            struct{}{},
	"policy":              struct{}{},
	"policyorg":           struct{}{},
	"ratelimittarget":     struct{}{},
	"restagtable":         struct{}{},
	"restagtableorg":      struct{}{},
	"uniqueid":            struct{}{},
	"uniqueidtype":        struct{}{},
	"vmpool":              struct{}{},
	"vmpoolorg":           struct{}{},
	"zone":                struct{}{},
	"zonefedorg":          struct{}{},
	"zoneorg":             struct{}{},
	"zonepool":            struct{}{},
	"zonepoolorg":         struct{}{},
}

// References generated from the refers_to and tracks_refs_by protogen options
func GetReferencesMap() map[string][]string {
	refs := make(map[string][]string)
	refs["AllData"] = []string{"AlertPolicy", "App", "AutoProvPolicy", "AutoScalePolicy", "Cloudlet", "ClusterInst", "Flavor", "GPUDriver", "Network", "PlatformFeatures", "ResTagTable", "TrustPolicy", "VMPool", "Zone", "ZonePool"}
	refs["App"] = []string{"AlertPolicy", "AutoProvPolicy", "Flavor"}
	refs["AppAlertPolicy"] = []string{"AlertPolicy", "App"}
	refs["AppAutoProvPolicy"] = []string{"App", "AutoProvPolicy"}
	refs["AppInst"] = []string{"App", "Cloudlet", "ClusterInst", "Flavor"}
	refs["AppInstKeyV1"] = []string{"ClusterInst"}
	refs["AppInstKeyV2"] = []string{"Cloudlet"}
	refs["AppInstRefs"] = []string{"AppInst"}
	refs["AutoProvPolicy"] = []string{"Zone"}
	refs["AutoProvPolicyZone"] = []string{"AutoProvPolicy", "Zone"}
	refs["Cloudlet"] = []string{"Flavor", "GPUDriver", "PlatformFeatures", "ResTagTable", "TrustPolicy", "VMPool"}
	refs["CloudletRefs"] = []string{"AppInst", "ClusterInst"}
	refs["CloudletResMap"] = []string{"Cloudlet", "ResTagTable"}
	refs["ClusterInst"] = []string{"AutoScalePolicy", "Cloudlet", "Network"}
	refs["ClusterInstKeyV1"] = []string{"Cloudlet"}
	refs["ClusterInstKeyV2"] = []string{"Cloudlet"}
	refs["ClusterRefs"] = []string{"AppInst"}
	refs["DeploymentZoneRequest"] = []string{"AlertPolicy", "AutoProvPolicy", "Flavor"}
	refs["GPUConfig"] = []string{"GPUDriver"}
	refs["Network"] = []string{"Cloudlet"}
	refs["NetworkKey"] = []string{"Cloudlet"}
	refs["TPEInstanceKey"] = []string{"App", "ZonePool"}
	refs["TrustPolicyException"] = []string{"App", "ZonePool"}
	refs["TrustPolicyExceptionKey"] = []string{"App", "ZonePool"}
	refs["ZonePool"] = []string{"Zone"}
	refs["ZonePoolMember"] = []string{"Zone", "ZonePool"}
	return refs
}
func (m *Alert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAlert(uint64(len(k))) + 1 + len(v) + sovAlert(uint64(len(v)))
			n += mapEntrySize + 1 + sovAlert(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAlert(uint64(len(k))) + 1 + len(v) + sovAlert(uint64(len(v)))
			n += mapEntrySize + 1 + sovAlert(uint64(mapEntrySize))
		}
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	l = m.ActiveAt.Size()
	n += 1 + l + sovAlert(uint64(l))
	if m.Value != 0 {
		n += 9
	}
	if m.NotifyId != 0 {
		n += 1 + sovAlert(uint64(m.NotifyId))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	return n
}

func sovAlert(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlert(x uint64) (n int) {
	return sovAlert(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Alert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Alert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Alert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlert
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAlert
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAlert
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAlert
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAlert
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAlert(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAlert
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlert
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAlert
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAlert
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAlert
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAlert
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAlert(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAlert
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlert(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlert
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlert
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlert
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlert
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlert        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlert          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlert = fmt.Errorf("proto: unexpected end of group")
)
