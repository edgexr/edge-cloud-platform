// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: version.proto

package edgeproto

import (
	"encoding/json"
	fmt "fmt"
	"github.com/edgexr/edge-cloud-platform/pkg/util"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	reflect "reflect"
	"strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Below enum lists hashes as well as corresponding versions
type VersionHash int32

const (
	VersionHash_HASH_d41d8cd98f00b204e9800998ecf8427e VersionHash = 0
	//interim versions deleted
	VersionHash_HASH_c2d882033b0c14f28cece41cf4010060 VersionHash = 52
	VersionHash_HASH_14ae4c721c1bace6e8379d0061a72a77 VersionHash = 53
	VersionHash_HASH_eff9d3a6c74fd02840efce05d1984e8d VersionHash = 54
	VersionHash_HASH_eac56710c013d954db31eeb306b514a4 VersionHash = 55
	VersionHash_HASH_75883d14000640b2ecf694fe8ef9192b VersionHash = 56
	VersionHash_HASH_e65c39ec2a489834dd06e87f7239f9a8 VersionHash = 57
	VersionHash_HASH_b25b4e18e9a1dadfd3006e23fabfbf95 VersionHash = 58
	VersionHash_HASH_e935bf4a02a405a206b6a082a773205f VersionHash = 59
)

var VersionHash_name = map[int32]string{
	0:  "HASH_d41d8cd98f00b204e9800998ecf8427e",
	52: "HASH_c2d882033b0c14f28cece41cf4010060",
	53: "HASH_14ae4c721c1bace6e8379d0061a72a77",
	54: "HASH_eff9d3a6c74fd02840efce05d1984e8d",
	55: "HASH_eac56710c013d954db31eeb306b514a4",
	56: "HASH_75883d14000640b2ecf694fe8ef9192b",
	57: "HASH_e65c39ec2a489834dd06e87f7239f9a8",
	58: "HASH_b25b4e18e9a1dadfd3006e23fabfbf95",
	59: "HASH_e935bf4a02a405a206b6a082a773205f",
}

var VersionHash_value = map[string]int32{
	"HASH_d41d8cd98f00b204e9800998ecf8427e": 0,
	"HASH_c2d882033b0c14f28cece41cf4010060": 52,
	"HASH_14ae4c721c1bace6e8379d0061a72a77": 53,
	"HASH_eff9d3a6c74fd02840efce05d1984e8d": 54,
	"HASH_eac56710c013d954db31eeb306b514a4": 55,
	"HASH_75883d14000640b2ecf694fe8ef9192b": 56,
	"HASH_e65c39ec2a489834dd06e87f7239f9a8": 57,
	"HASH_b25b4e18e9a1dadfd3006e23fabfbf95": 58,
	"HASH_e935bf4a02a405a206b6a082a773205f": 59,
}

func (x VersionHash) String() string {
	return proto.EnumName(VersionHash_name, int32(x))
}

func (VersionHash) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7d2c07d79758f814, []int{0}
}

func init() {
	proto.RegisterEnum("edgeproto.VersionHash", VersionHash_name, VersionHash_value)
}

func init() { proto.RegisterFile("version.proto", fileDescriptor_7d2c07d79758f814) }

var fileDescriptor_7d2c07d79758f814 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x92, 0xbf, 0x6b, 0x14, 0x4f,
	0x18, 0xc6, 0xef, 0xe0, 0xcb, 0x17, 0x93, 0x18, 0x5c, 0x97, 0x14, 0xcb, 0x12, 0x17, 0x1b, 0x0b,
	0x2d, 0xcc, 0x3b, 0xbf, 0x67, 0xa2, 0x20, 0xf1, 0x47, 0x48, 0x08, 0x24, 0x62, 0xd0, 0xc2, 0x46,
	0x66, 0xe6, 0x7d, 0x67, 0x8d, 0x98, 0xdd, 0xf3, 0x6e, 0x15, 0x6c, 0x2d, 0xaf, 0xb2, 0xf7, 0x1f,
	0x4a, 0x99, 0xd2, 0x52, 0x93, 0x7f, 0xc1, 0x05, 0x4b, 0xc9, 0xdd, 0xe5, 0xba, 0xcf, 0x0c, 0xcf,
	0x7c, 0x8a, 0xe7, 0x99, 0xd5, 0xf5, 0x2f, 0x34, 0x9e, 0x9c, 0xb4, 0xcd, 0xc3, 0xd1, 0xb8, 0xed,
	0xda, 0x7c, 0x85, 0xb0, 0xa6, 0x19, 0x96, 0x77, 0xba, 0xb6, 0xfd, 0x38, 0xd9, 0x9a, 0x1d, 0x6a,
	0x6a, 0x96, 0x30, 0x4f, 0x96, 0x1b, 0x75, 0x5b, 0xb7, 0x33, 0xdc, 0xba, 0xa2, 0xf9, 0xed, 0x83,
	0x1f, 0xff, 0xad, 0xae, 0xbd, 0x99, 0x1b, 0xf7, 0xfc, 0xe4, 0x7d, 0x7e, 0x7f, 0xf5, 0xde, 0xde,
	0xce, 0xf1, 0xde, 0x3b, 0x94, 0x0c, 0x6d, 0x44, 0x67, 0x13, 0x40, 0xe0, 0x20, 0xc9, 0x59, 0x00,
	0xe7, 0x2c, 0xc5, 0x64, 0x25, 0x37, 0x94, 0x0d, 0x96, 0xd1, 0xc8, 0xd1, 0x5a, 0x0e, 0x42, 0x04,
	0x88, 0x4c, 0x26, 0x6e, 0x23, 0x45, 0x92, 0x2c, 0x26, 0x09, 0x0c, 0x40, 0x43, 0x26, 0xf3, 0x27,
	0x8b, 0x28, 0x93, 0x9e, 0x64, 0x34, 0x9c, 0x45, 0x16, 0x7c, 0x24, 0x4d, 0x56, 0x18, 0x87, 0x00,
	0x9a, 0x79, 0xc3, 0xbd, 0x31, 0x99, 0x2a, 0x37, 0xa6, 0x7d, 0x91, 0xbd, 0x1e, 0xd5, 0x63, 0x8f,
	0xf4, 0x6c, 0x7c, 0x7a, 0xd4, 0xbc, 0xc0, 0x9a, 0xf2, 0xc7, 0x0b, 0x01, 0xa5, 0xe4, 0x50, 0x78,
	0x1d, 0x8d, 0x4c, 0x08, 0xdc, 0x4a, 0xa0, 0x14, 0x09, 0x14, 0x32, 0x67, 0x25, 0x59, 0xcc, 0x74,
	0x79, 0x7b, 0xda, 0x17, 0xeb, 0x3b, 0x88, 0xc7, 0x9d, 0xef, 0x4e, 0xe2, 0xee, 0x27, 0x6c, 0xf2,
	0x83, 0xeb, 0xd7, 0x3e, 0x2a, 0x6d, 0x18, 0x44, 0x60, 0x02, 0x9d, 0x92, 0x18, 0x04, 0x23, 0x0a,
	0x02, 0x74, 0x50, 0x4c, 0x7a, 0x99, 0x99, 0xf2, 0xee, 0xb4, 0x2f, 0x36, 0xf7, 0x9b, 0x49, 0xe7,
	0x9b, 0x48, 0x07, 0xf4, 0x75, 0xf2, 0x8a, 0xea, 0x93, 0xb6, 0x39, 0x8e, 0xed, 0x88, 0xf0, 0xd0,
	0x9f, 0x52, 0xbe, 0xbd, 0x90, 0x19, 0x65, 0xad, 0x40, 0x26, 0x01, 0x40, 0x4b, 0x08, 0x9c, 0x62,
	0xd2, 0x4e, 0x26, 0xb2, 0x94, 0x1c, 0x73, 0x3c, 0x64, 0xb6, 0xbc, 0x35, 0xed, 0x8b, 0xb5, 0xb7,
	0x6d, 0x43, 0xbb, 0xe4, 0xbb, 0xcf, 0x63, 0x5a, 0xf6, 0x40, 0x5a, 0x45, 0xe1, 0x28, 0x72, 0x2f,
	0xad, 0xb3, 0x42, 0x22, 0x82, 0x26, 0x6b, 0x92, 0xe1, 0xc2, 0x25, 0xe7, 0x6d, 0xe6, 0xe6, 0x3d,
	0x1c, 0xb6, 0x48, 0x2f, 0xaf, 0x56, 0xbd, 0x16, 0x98, 0x85, 0x20, 0x70, 0x15, 0x24, 0x31, 0x4b,
	0xce, 0x33, 0xf4, 0x98, 0x50, 0x00, 0x68, 0xe2, 0x22, 0xf9, 0x90, 0x42, 0x72, 0x2a, 0xdb, 0x2e,
	0x6f, 0x4e, 0xfb, 0xe2, 0xc6, 0xce, 0x68, 0x74, 0x14, 0x3e, 0xec, 0x3f, 0x5f, 0x8e, 0x45, 0x4e,
	0xa8, 0x90, 0xa4, 0x07, 0xee, 0x25, 0x28, 0xcf, 0x41, 0x07, 0xed, 0xc1, 0x5e, 0x95, 0x2f, 0x38,
	0xa8, 0x94, 0x3d, 0x2a, 0x57, 0xfe, 0xfe, 0x29, 0x86, 0xdf, 0xfa, 0x62, 0xc8, 0x9f, 0x6e, 0x9e,
	0xfd, 0xae, 0x06, 0x67, 0x17, 0xd5, 0xf0, 0xfc, 0xa2, 0x1a, 0xfe, 0xba, 0xa8, 0x86, 0xdf, 0x2f,
	0xab, 0xc1, 0xf9, 0x65, 0x35, 0xf8, 0x79, 0x59, 0x0d, 0xc2, 0xff, 0xb3, 0x2f, 0x24, 0xfe, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xdf, 0xdb, 0x69, 0x81, 0x93, 0x02, 0x00, 0x00,
}
var VersionHashStrings = []string{
	"HASH_d41d8cd98f00b204e9800998ecf8427e",
	"HASH_c2d882033b0c14f28cece41cf4010060",
	"HASH_14ae4c721c1bace6e8379d0061a72a77",
	"HASH_eff9d3a6c74fd02840efce05d1984e8d",
	"HASH_eac56710c013d954db31eeb306b514a4",
	"HASH_75883d14000640b2ecf694fe8ef9192b",
	"HASH_e65c39ec2a489834dd06e87f7239f9a8",
	"HASH_b25b4e18e9a1dadfd3006e23fabfbf95",
	"HASH_e935bf4a02a405a206b6a082a773205f",
}

const (
	VersionHashHASHD41D8Cd98F00B204E9800998Ecf8427E  uint64 = 1 << 0
	VersionHashHASHC2D882033B0C14F28Cece41Cf4010060  uint64 = 1 << 1
	VersionHashHASH_14Ae4C721C1Bace6E8379D0061A72A77 uint64 = 1 << 2
	VersionHashHASHEff9D3A6C74Fd02840Efce05D1984E8D  uint64 = 1 << 3
	VersionHashHASHEac56710C013D954Db31Eeb306B514A4  uint64 = 1 << 4
	VersionHashHASH_75883D14000640B2Ecf694Fe8Ef9192B uint64 = 1 << 5
	VersionHashHASHE65C39Ec2A489834Dd06E87F7239F9A8  uint64 = 1 << 6
	VersionHashHASHB25B4E18E9A1Dadfd3006E23Fabfbf95  uint64 = 1 << 7
	VersionHashHASHE935Bf4A02A405A206B6A082A773205F  uint64 = 1 << 8
)

var VersionHash_CamelName = map[int32]string{
	// HASH_d41d8cd98f00b204e9800998ecf8427e -> HashD41D8Cd98F00B204E9800998Ecf8427E
	0: "HashD41D8Cd98F00B204E9800998Ecf8427E",
	// HASH_c2d882033b0c14f28cece41cf4010060 -> HashC2D882033B0C14F28Cece41Cf4010060
	52: "HashC2D882033B0C14F28Cece41Cf4010060",
	// HASH_14ae4c721c1bace6e8379d0061a72a77 -> Hash14Ae4C721C1Bace6E8379D0061A72A77
	53: "Hash14Ae4C721C1Bace6E8379D0061A72A77",
	// HASH_eff9d3a6c74fd02840efce05d1984e8d -> HashEff9D3A6C74Fd02840Efce05D1984E8D
	54: "HashEff9D3A6C74Fd02840Efce05D1984E8D",
	// HASH_eac56710c013d954db31eeb306b514a4 -> HashEac56710C013D954Db31Eeb306B514A4
	55: "HashEac56710C013D954Db31Eeb306B514A4",
	// HASH_75883d14000640b2ecf694fe8ef9192b -> Hash75883D14000640B2Ecf694Fe8Ef9192B
	56: "Hash75883D14000640B2Ecf694Fe8Ef9192B",
	// HASH_e65c39ec2a489834dd06e87f7239f9a8 -> HashE65C39Ec2A489834Dd06E87F7239F9A8
	57: "HashE65C39Ec2A489834Dd06E87F7239F9A8",
	// HASH_b25b4e18e9a1dadfd3006e23fabfbf95 -> HashB25B4E18E9A1Dadfd3006E23Fabfbf95
	58: "HashB25B4E18E9A1Dadfd3006E23Fabfbf95",
	// HASH_e935bf4a02a405a206b6a082a773205f -> HashE935Bf4A02A405A206B6A082A773205F
	59: "HashE935Bf4A02A405A206B6A082A773205F",
}
var VersionHash_CamelValue = map[string]int32{
	"HashD41D8Cd98F00B204E9800998Ecf8427E": 0,
	"HashC2D882033B0C14F28Cece41Cf4010060": 52,
	"Hash14Ae4C721C1Bace6E8379D0061A72A77": 53,
	"HashEff9D3A6C74Fd02840Efce05D1984E8D": 54,
	"HashEac56710C013D954Db31Eeb306B514A4": 55,
	"Hash75883D14000640B2Ecf694Fe8Ef9192B": 56,
	"HashE65C39Ec2A489834Dd06E87F7239F9A8": 57,
	"HashB25B4E18E9A1Dadfd3006E23Fabfbf95": 58,
	"HashE935Bf4A02A405A206B6A082A773205F": 59,
}

func ParseVersionHash(data interface{}) (VersionHash, error) {
	if val, ok := data.(VersionHash); ok {
		return val, nil
	} else if str, ok := data.(string); ok {
		val, ok := VersionHash_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = VersionHash_CamelValue["Hash"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = VersionHash_CamelName[val]
			}
		}
		if !ok {
			return VersionHash(0), fmt.Errorf("Invalid VersionHash value %q", str)
		}
		return VersionHash(val), nil
	} else if ival, ok := data.(int32); ok {
		if _, ok := VersionHash_CamelName[ival]; ok {
			return VersionHash(ival), nil
		} else {
			return VersionHash(0), fmt.Errorf("Invalid VersionHash value %d", ival)
		}
	}
	return VersionHash(0), fmt.Errorf("Invalid VersionHash value %v", data)
}

func (e *VersionHash) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, err := ParseVersionHash(str)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

func (e VersionHash) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(VersionHash_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Hash")
	return str, nil
}

// custom JSON encoding/decoding
func (e *VersionHash) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, err := ParseVersionHash(str)
		if err != nil {
			return &json.UnmarshalTypeError{
				Value: "string " + str,
				Type:  reflect.TypeOf(VersionHash(0)),
			}
		}
		*e = VersionHash(val)
		return nil
	}
	var ival int32
	err = json.Unmarshal(b, &ival)
	if err == nil {
		val, err := ParseVersionHash(ival)
		if err == nil {
			*e = val
			return nil
		}
	}
	return &json.UnmarshalTypeError{
		Value: "value " + string(b),
		Type:  reflect.TypeOf(VersionHash(0)),
	}
}

func (e VersionHash) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(VersionHash_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Hash")
	return json.Marshal(str)
}

var VersionHashCommonPrefix = "Hash"

// Keys being hashed:
// AlertPolicyKey
// AppInstKey
// AppInstKeyV1
// AppInstKeyV2
// AppKey
// CloudletKey
// CloudletNodeKey
// ClusterInstKeyV1
// ClusterInstKeyV2
// ClusterKey
// ClusterKeyV1
// ControllerKey
// DeviceKey
// FedAppInstKey
// FlavorKey
// FlowRateLimitSettingsKey
// GPUDriverKey
// MaxReqsRateLimitSettingsKey
// NetworkKey
// PolicyKey
// RateLimitSettingsKey
// ResTagTableKey
// SvcNodeKey
// TPEInstanceKey
// TrustPolicyExceptionKey
// VMPoolKey
// VirtualClusterInstKeyV1
// ZoneKey
// ZonePoolKey

type DataModelVersion struct {
	Hash string
	ID   int32
}

func GetDataModelVersion() *DataModelVersion {
	return &DataModelVersion{
		Hash: "e935bf4a02a405a206b6a082a773205f",
		ID:   59,
	}
}
