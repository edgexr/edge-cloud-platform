// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: autoprovpolicy.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	"errors"
	fmt "fmt"
	distributed_match_engine "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	"github.com/edgexr/edge-cloud-platform/pkg/objstore"
	"github.com/edgexr/edge-cloud-platform/pkg/util"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"go.etcd.io/etcd/client/v3/concurrency"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	"sort"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AutoProvPolicy defines the automated provisioning policy
type AutoProvPolicy struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key PolicyKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// Minimum number of clients within the auto deploy interval to trigger deployment
	DeployClientCount uint32 `protobuf:"varint,3,opt,name=deploy_client_count,json=deployClientCount,proto3" json:"deploy_client_count,omitempty"`
	// Number of intervals to check before triggering deployment
	DeployIntervalCount uint32 `protobuf:"varint,4,opt,name=deploy_interval_count,json=deployIntervalCount,proto3" json:"deploy_interval_count,omitempty"`
	// Allowed deployment locations
	Zones []*ZoneKey `protobuf:"bytes,5,rep,name=zones,proto3" json:"zones,omitempty"`
	// Minimum number of active instances for High-Availability
	MinActiveInstances uint32 `protobuf:"varint,6,opt,name=min_active_instances,json=minActiveInstances,proto3" json:"min_active_instances,omitempty"`
	// Maximum number of instances (active or not)
	MaxInstances uint32 `protobuf:"varint,7,opt,name=max_instances,json=maxInstances,proto3" json:"max_instances,omitempty"`
	// Number of active clients for the undeploy interval below which trigers undeployment, 0 (default) disables auto undeploy
	UndeployClientCount uint32 `protobuf:"varint,8,opt,name=undeploy_client_count,json=undeployClientCount,proto3" json:"undeploy_client_count,omitempty"`
	// Number of intervals to check before triggering undeployment
	UndeployIntervalCount uint32 `protobuf:"varint,9,opt,name=undeploy_interval_count,json=undeployIntervalCount,proto3" json:"undeploy_interval_count,omitempty"`
	// Preparing to be deleted
	DeletePrepare bool `protobuf:"varint,10,opt,name=delete_prepare,json=deletePrepare,proto3" json:"delete_prepare,omitempty"`
}

func (m *AutoProvPolicy) Reset()         { *m = AutoProvPolicy{} }
func (m *AutoProvPolicy) String() string { return proto.CompactTextString(m) }
func (*AutoProvPolicy) ProtoMessage()    {}
func (*AutoProvPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_199b84e2b69e837c, []int{0}
}
func (m *AutoProvPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoProvPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoProvPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoProvPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoProvPolicy.Merge(m, src)
}
func (m *AutoProvPolicy) XXX_Size() int {
	return m.Size()
}
func (m *AutoProvPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoProvPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_AutoProvPolicy proto.InternalMessageInfo

// AutoProvCount is used to send potential zone and location counts from DME to Controller
type AutoProvCount struct {
	// Target app
	AppKey AppKey `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key"`
	// Target zone
	ZoneKey ZoneKey `protobuf:"bytes,2,opt,name=zone_key,json=zoneKey,proto3" json:"zone_key"`
	// FindCloudlet client count
	Count uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// Process count immediately
	ProcessNow bool `protobuf:"varint,4,opt,name=process_now,json=processNow,proto3" json:"process_now,omitempty"`
}

func (m *AutoProvCount) Reset()         { *m = AutoProvCount{} }
func (m *AutoProvCount) String() string { return proto.CompactTextString(m) }
func (*AutoProvCount) ProtoMessage()    {}
func (*AutoProvCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_199b84e2b69e837c, []int{1}
}
func (m *AutoProvCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoProvCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoProvCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoProvCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoProvCount.Merge(m, src)
}
func (m *AutoProvCount) XXX_Size() int {
	return m.Size()
}
func (m *AutoProvCount) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoProvCount.DiscardUnknown(m)
}

var xxx_messageInfo_AutoProvCount proto.InternalMessageInfo

// AutoProvCounts is used to send potential zone and location counts from DME to Controller
type AutoProvCounts struct {
	// DME node name
	DmeNodeName string `protobuf:"bytes,1,opt,name=dme_node_name,json=dmeNodeName,proto3" json:"dme_node_name,omitempty"`
	// Timestamp when the metric was captured
	Timestamp types.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp"`
	// List of DmeCount from DME
	Counts []*AutoProvCount `protobuf:"bytes,3,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (m *AutoProvCounts) Reset()         { *m = AutoProvCounts{} }
func (m *AutoProvCounts) String() string { return proto.CompactTextString(m) }
func (*AutoProvCounts) ProtoMessage()    {}
func (*AutoProvCounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_199b84e2b69e837c, []int{2}
}
func (m *AutoProvCounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoProvCounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoProvCounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoProvCounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoProvCounts.Merge(m, src)
}
func (m *AutoProvCounts) XXX_Size() int {
	return m.Size()
}
func (m *AutoProvCounts) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoProvCounts.DiscardUnknown(m)
}

var xxx_messageInfo_AutoProvCounts proto.InternalMessageInfo

// AutoProvPolicyZone is used to add and remove Zones from the Auto Provisioning Policy
type AutoProvPolicyZone struct {
	// Unique policy identifier key
	Key PolicyKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	// Zone identifier key
	ZoneKey ZoneKey `protobuf:"bytes,2,opt,name=zone_key,json=zoneKey,proto3" json:"zone_key"`
}

func (m *AutoProvPolicyZone) Reset()         { *m = AutoProvPolicyZone{} }
func (m *AutoProvPolicyZone) String() string { return proto.CompactTextString(m) }
func (*AutoProvPolicyZone) ProtoMessage()    {}
func (*AutoProvPolicyZone) Descriptor() ([]byte, []int) {
	return fileDescriptor_199b84e2b69e837c, []int{3}
}
func (m *AutoProvPolicyZone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoProvPolicyZone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoProvPolicyZone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoProvPolicyZone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoProvPolicyZone.Merge(m, src)
}
func (m *AutoProvPolicyZone) XXX_Size() int {
	return m.Size()
}
func (m *AutoProvPolicyZone) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoProvPolicyZone.DiscardUnknown(m)
}

var xxx_messageInfo_AutoProvPolicyZone proto.InternalMessageInfo

// AutoProvInfo notifies the controller when cloudlet maintenance failover is done.
type AutoProvInfo struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Cloudlet Key
	Key CloudletKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,3,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// failover result state
	MaintenanceState distributed_match_engine.MaintenanceState `protobuf:"varint,4,opt,name=maintenance_state,json=maintenanceState,proto3,enum=distributed_match_engine.MaintenanceState" json:"maintenance_state,omitempty"`
	// Failover actions done if any
	Completed []string `protobuf:"bytes,5,rep,name=completed,proto3" json:"completed,omitempty"`
	// Errors if any
	Errors []string `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *AutoProvInfo) Reset()         { *m = AutoProvInfo{} }
func (m *AutoProvInfo) String() string { return proto.CompactTextString(m) }
func (*AutoProvInfo) ProtoMessage()    {}
func (*AutoProvInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_199b84e2b69e837c, []int{4}
}
func (m *AutoProvInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoProvInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoProvInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoProvInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoProvInfo.Merge(m, src)
}
func (m *AutoProvInfo) XXX_Size() int {
	return m.Size()
}
func (m *AutoProvInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoProvInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AutoProvInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AutoProvPolicy)(nil), "edgeproto.AutoProvPolicy")
	proto.RegisterType((*AutoProvCount)(nil), "edgeproto.AutoProvCount")
	proto.RegisterType((*AutoProvCounts)(nil), "edgeproto.AutoProvCounts")
	proto.RegisterType((*AutoProvPolicyZone)(nil), "edgeproto.AutoProvPolicyZone")
	proto.RegisterType((*AutoProvInfo)(nil), "edgeproto.AutoProvInfo")
}

func init() { proto.RegisterFile("autoprovpolicy.proto", fileDescriptor_199b84e2b69e837c) }

var fileDescriptor_199b84e2b69e837c = []byte{
	// 1193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x68, 0x1b, 0x47,
	0x14, 0xd6, 0x58, 0xb2, 0x2d, 0x8d, 0xad, 0x10, 0x6d, 0x64, 0x67, 0xe2, 0x3a, 0x8a, 0x51, 0x69,
	0x31, 0xa9, 0x90, 0x8c, 0x42, 0x4b, 0x71, 0x49, 0xc0, 0x76, 0x28, 0x98, 0xe0, 0x34, 0x6c, 0xda,
	0x14, 0x72, 0xc8, 0x32, 0xd9, 0x7d, 0x56, 0x96, 0xec, 0xce, 0x2c, 0xbb, 0x23, 0x39, 0xf2, 0xa5,
	0xa5, 0x3d, 0xb4, 0xc7, 0x90, 0x1e, 0x5a, 0x72, 0xea, 0xa1, 0x87, 0xd2, 0x3f, 0x8a, 0xa1, 0xf7,
	0xd2, 0x93, 0x4f, 0xc5, 0x90, 0x4b, 0x4f, 0x25, 0xb5, 0x7b, 0x28, 0x3e, 0x05, 0x22, 0xe9, 0x5c,
	0x66, 0x76, 0x25, 0xad, 0x54, 0x39, 0x98, 0xb8, 0xb7, 0x79, 0xef, 0x7d, 0x6f, 0xf6, 0x7b, 0xdf,
	0xbc, 0xf7, 0x16, 0xe7, 0x69, 0x5d, 0x70, 0xcf, 0xe7, 0x0d, 0x8f, 0x3b, 0xb6, 0xd9, 0x2c, 0x7b,
	0x3e, 0x17, 0x5c, 0xcb, 0x80, 0x55, 0x03, 0x75, 0x9c, 0x9b, 0xaf, 0x71, 0x5e, 0x73, 0xa0, 0x42,
	0x3d, 0xbb, 0x42, 0x19, 0xe3, 0x82, 0x0a, 0x9b, 0xb3, 0x20, 0x04, 0xce, 0x4d, 0xfb, 0x10, 0xd4,
	0x1d, 0x11, 0x59, 0xe7, 0x05, 0xe7, 0x4e, 0x50, 0x51, 0x46, 0x0d, 0x58, 0xef, 0x10, 0x85, 0xf3,
	0x35, 0x5e, 0xe3, 0xea, 0x58, 0x91, 0xa7, 0xc8, 0x3b, 0x23, 0x19, 0x04, 0x26, 0x75, 0x20, 0x4e,
	0x61, 0x2e, 0x67, 0x3a, 0xbc, 0x6e, 0x39, 0x20, 0xee, 0x43, 0xd7, 0x95, 0xa1, 0x9e, 0x17, 0x1d,
	0xcf, 0x58, 0xae, 0xa4, 0xe4, 0x99, 0xdc, 0x75, 0x79, 0xf7, 0xfe, 0x0b, 0x11, 0x55, 0x65, 0xdd,
	0xad, 0x6f, 0x56, 0x84, 0xed, 0x42, 0x20, 0xa8, 0x1b, 0x65, 0x15, 0x9f, 0xa4, 0xf0, 0xa9, 0x95,
	0xba, 0xe0, 0x37, 0x7c, 0xde, 0xb8, 0xa1, 0x3e, 0xa6, 0xcd, 0xe2, 0x89, 0x4d, 0x1b, 0x1c, 0x2b,
	0x20, 0x68, 0x21, 0xb9, 0x98, 0xd1, 0x23, 0x4b, 0x2b, 0xe1, 0xe4, 0x7d, 0x68, 0x92, 0xb1, 0x05,
	0xb4, 0x38, 0x55, 0xcd, 0x97, 0x7b, 0x7a, 0x94, 0xc3, 0xbc, 0x6b, 0xd0, 0x5c, 0x4d, 0xed, 0xfe,
	0x79, 0x21, 0xa1, 0x4b, 0x98, 0x56, 0xc6, 0x67, 0x2c, 0xf0, 0x1c, 0xde, 0x34, 0x4c, 0xc7, 0x06,
	0x26, 0x0c, 0x93, 0xd7, 0x99, 0x20, 0xc9, 0x05, 0xb4, 0x98, 0xd5, 0x73, 0x61, 0x68, 0x4d, 0x45,
	0xd6, 0x64, 0x40, 0x7b, 0x1b, 0xcf, 0x44, 0x78, 0x9b, 0x09, 0xf0, 0x1b, 0xd4, 0x89, 0x32, 0x52,
	0x32, 0x63, 0x35, 0xf5, 0x79, 0x8b, 0x20, 0x3d, 0xba, 0x72, 0x3d, 0x42, 0x84, 0x99, 0x55, 0x3c,
	0xbe, 0xcd, 0x19, 0x04, 0x64, 0x7c, 0x21, 0xb9, 0x38, 0x55, 0xd5, 0x62, 0xcc, 0x6e, 0x73, 0x06,
	0x92, 0x57, 0xfa, 0xb0, 0x43, 0x52, 0xd2, 0xd0, 0x43, 0xa8, 0xb6, 0x84, 0xf3, 0xae, 0xcd, 0x0c,
	0x6a, 0x0a, 0xbb, 0x01, 0x86, 0xcd, 0x02, 0x41, 0x99, 0x09, 0x01, 0x99, 0x50, 0xf4, 0x34, 0xd7,
	0x66, 0x2b, 0x2a, 0xb4, 0xde, 0x8d, 0x68, 0xaf, 0xe2, 0xac, 0x4b, 0x1f, 0xc4, 0xa0, 0x93, 0x0a,
	0x3a, 0xed, 0xd2, 0x07, 0x7d, 0x50, 0x15, 0xcf, 0xd4, 0xd9, 0xa8, 0xb2, 0xd3, 0x0a, 0x7c, 0xa6,
	0x1b, 0x8c, 0x17, 0xfe, 0x16, 0x3e, 0xdb, 0xcb, 0x19, 0x2a, 0x3d, 0xa3, 0xb2, 0x7a, 0x57, 0x0e,
	0x96, 0xfd, 0x06, 0x3e, 0x65, 0x81, 0x03, 0x02, 0x0c, 0xcf, 0x07, 0x8f, 0xfa, 0x40, 0xf0, 0x02,
	0x5a, 0x4c, 0xaf, 0xa6, 0xbe, 0x95, 0x4a, 0x65, 0xc3, 0xd8, 0x8d, 0x30, 0xb4, 0xec, 0xfe, 0xf3,
	0x9c, 0xa0, 0x67, 0xcf, 0x09, 0xfa, 0xb8, 0x45, 0xd0, 0xc3, 0x16, 0x41, 0x5f, 0xb5, 0x08, 0x7a,
	0xd4, 0x26, 0xd9, 0xab, 0x71, 0xd8, 0xe3, 0x36, 0x79, 0x8d, 0x51, 0x17, 0x2e, 0x5f, 0x83, 0x66,
	0xf9, 0x3a, 0x75, 0xa1, 0x44, 0x3d, 0x8f, 0xfb, 0x35, 0x65, 0xbf, 0xe7, 0xd7, 0x28, 0xb3, 0xb7,
	0x55, 0xaf, 0xef, 0x74, 0xc8, 0xe9, 0xfb, 0xd0, 0xbc, 0x1c, 0xf7, 0xfd, 0xd6, 0x21, 0x93, 0x91,
	0xde, 0xc5, 0x1f, 0x11, 0xce, 0x76, 0xbb, 0x2a, 0x64, 0xbb, 0x84, 0x27, 0xa9, 0xe7, 0x19, 0xb2,
	0x81, 0x90, 0x6a, 0xa0, 0x5c, 0xec, 0x99, 0x56, 0x3c, 0xaf, 0xdf, 0x3d, 0x13, 0x54, 0x59, 0xda,
	0x25, 0x9c, 0x96, 0x6f, 0x65, 0xf4, 0x7b, 0x6e, 0xd4, 0xcb, 0x86, 0x39, 0x93, 0xdb, 0xa1, 0xa9,
	0xe5, 0xf1, 0x78, 0xbf, 0xcf, 0x52, 0x7a, 0x68, 0x68, 0x17, 0xf0, 0x94, 0xe7, 0x73, 0x13, 0x82,
	0xc0, 0x60, 0x7c, 0x4b, 0x75, 0x54, 0x5a, 0xc7, 0x91, 0xeb, 0x3a, 0xdf, 0x2a, 0xfe, 0x8c, 0xfa,
	0x53, 0xa0, 0xf8, 0x06, 0x5a, 0x11, 0x67, 0x2d, 0x17, 0x0c, 0xc6, 0x2d, 0x30, 0xa4, 0x26, 0x8a,
	0x76, 0x46, 0x9f, 0xb2, 0x5c, 0xb8, 0xce, 0x2d, 0x90, 0xea, 0x68, 0x57, 0x70, 0xa6, 0x37, 0x4f,
	0x11, 0xc7, 0xb9, 0x72, 0x38, 0x71, 0xe5, 0xee, 0xc4, 0x95, 0xdf, 0xef, 0x22, 0x22, 0xae, 0xfd,
	0x14, 0x6d, 0x09, 0x4f, 0x28, 0x82, 0x01, 0x49, 0xaa, 0xd6, 0x25, 0x71, 0x4d, 0xe2, 0x74, 0xf4,
	0x08, 0xb7, 0x9c, 0xfe, 0xb5, 0x45, 0xd0, 0xb3, 0x16, 0x49, 0x14, 0xbf, 0x1c, 0xc3, 0xda, 0xe0,
	0xe0, 0x4a, 0x49, 0xb4, 0x2b, 0xe1, 0x90, 0xa2, 0x17, 0x0c, 0xe9, 0xec, 0x61, 0x87, 0x0c, 0xcd,
	0x7c, 0x7f, 0x6c, 0xdf, 0x39, 0x96, 0xea, 0xd3, 0xdd, 0x79, 0x1a, 0x50, 0x7f, 0xf9, 0x53, 0xf4,
	0xb8, 0x4d, 0x3e, 0x3a, 0x56, 0x07, 0x95, 0x64, 0xce, 0xe5, 0xe8, 0xbe, 0x10, 0x29, 0x3d, 0x12,
	0xda, 0x75, 0x0e, 0xc0, 0x37, 0xc1, 0x02, 0x9f, 0x0a, 0xb0, 0xe2, 0x88, 0x77, 0xbb, 0xce, 0x38,
	0xb4, 0xf8, 0xfd, 0x18, 0x9e, 0xee, 0x96, 0xb7, 0xce, 0x36, 0xf9, 0x91, 0x0b, 0xad, 0x1c, 0x5f,
	0x68, 0xb3, 0xb1, 0x32, 0xd7, 0xa2, 0x3d, 0x3b, 0xb4, 0xd2, 0x5e, 0xc7, 0x19, 0xc6, 0x85, 0xbd,
	0xd9, 0x34, 0x6c, 0x4b, 0x35, 0x58, 0x72, 0x35, 0xf3, 0x68, 0xe7, 0xdc, 0x38, 0xe3, 0xa6, 0xeb,
	0xe9, 0xe9, 0x30, 0xb6, 0x6e, 0x69, 0x1f, 0xe2, 0x9c, 0x4b, 0xe5, 0x28, 0x33, 0xb9, 0x15, 0x8c,
	0x40, 0x50, 0x01, 0xaa, 0xe9, 0x4e, 0x55, 0x2f, 0x96, 0x2d, 0x3b, 0x10, 0xbe, 0x7d, 0xb7, 0x2e,
	0xc0, 0x32, 0x5c, 0x2a, 0xcc, 0x7b, 0x06, 0xb0, 0x9a, 0xcd, 0xa0, 0xbc, 0xd1, 0x4f, 0xb9, 0x29,
	0x33, 0xf4, 0xd3, 0xee, 0x90, 0x47, 0x9b, 0xc7, 0x19, 0x93, 0xbb, 0x9e, 0x9c, 0x58, 0x4b, 0x6d,
	0xbb, 0x8c, 0xde, 0x77, 0xc8, 0x32, 0xc1, 0xf7, 0xb9, 0x2f, 0xb7, 0x98, 0x2a, 0x33, 0xb4, 0x96,
	0xe7, 0x87, 0x67, 0xff, 0x69, 0x8b, 0xa0, 0x9d, 0x0e, 0x49, 0x31, 0xce, 0xa0, 0xfa, 0x4b, 0x1a,
	0xe7, 0x06, 0x9b, 0x61, 0xc5, 0xb3, 0xb5, 0xdf, 0x11, 0xce, 0xaf, 0xf9, 0x40, 0x05, 0x0c, 0xfd,
	0x1c, 0xce, 0x8d, 0x68, 0xd1, 0x30, 0x34, 0x17, 0x9f, 0x68, 0x5d, 0xfd, 0x03, 0x8b, 0x9f, 0xa1,
	0xc3, 0x16, 0x79, 0x53, 0x87, 0x80, 0xd7, 0x7d, 0x13, 0xae, 0x42, 0x03, 0x1c, 0xee, 0x81, 0x1f,
	0x26, 0x94, 0xe4, 0x8a, 0xe5, 0x6c, 0x83, 0x32, 0x5a, 0x83, 0xd2, 0xf0, 0x8b, 0xef, 0xb5, 0x09,
	0xda, 0x6f, 0x93, 0xdc, 0x86, 0xcd, 0xe4, 0xbc, 0x05, 0xa5, 0x0d, 0xfa, 0x40, 0x1d, 0xbe, 0xeb,
	0x90, 0xd3, 0xc3, 0xe0, 0x4f, 0x9e, 0xfc, 0xfd, 0xc5, 0xd8, 0x2b, 0xc5, 0xd9, 0x8a, 0xa9, 0x38,
	0x57, 0x06, 0xff, 0xe0, 0xcb, 0xe8, 0xa2, 0xf6, 0x35, 0xc2, 0xf9, 0x70, 0xd7, 0x9d, 0xa8, 0xa0,
	0xdb, 0x2f, 0x5d, 0x4f, 0x8f, 0x62, 0xb8, 0x98, 0x47, 0x50, 0xfc, 0x06, 0xe1, 0xfc, 0x07, 0x9e,
	0x75, 0x52, 0xcd, 0xef, 0x9c, 0x48, 0xf2, 0x1e, 0xcd, 0xba, 0x62, 0x32, 0x9a, 0xa6, 0x76, 0xf3,
	0x1e, 0xdf, 0x3a, 0x3e, 0xc9, 0xa3, 0x43, 0xc5, 0x5b, 0x87, 0x2d, 0x72, 0xe9, 0xc5, 0x64, 0x6f,
	0xd9, 0xb0, 0x35, 0x5a, 0xcd, 0x73, 0xc5, 0x7c, 0x25, 0xb8, 0xc7, 0xb7, 0xfe, 0x4b, 0x72, 0x09,
	0x69, 0x3f, 0x21, 0x3c, 0xb3, 0x62, 0x59, 0x23, 0x56, 0xe4, 0xf9, 0x23, 0xe9, 0xc8, 0xf0, 0x28,
	0x49, 0xcd, 0x97, 0x96, 0x74, 0xb7, 0x4d, 0x50, 0x4f, 0xd6, 0xf9, 0xe2, 0xd9, 0x0a, 0xb5, 0xac,
	0x21, 0xba, 0x72, 0xed, 0x49, 0x5d, 0x7f, 0x40, 0x98, 0xe8, 0xe0, 0xf2, 0x06, 0xfc, 0x2f, 0x9c,
	0xef, 0x9c, 0x88, 0x73, 0xaf, 0x0d, 0x7c, 0x77, 0x34, 0xdd, 0xd5, 0xf9, 0xdd, 0xbf, 0x0a, 0x89,
	0xdd, 0xfd, 0x02, 0xda, 0xdb, 0x2f, 0xa0, 0xa7, 0xfb, 0x05, 0xf4, 0xf0, 0xa0, 0x90, 0xd8, 0x3b,
	0x28, 0x24, 0xfe, 0x38, 0x28, 0x24, 0xee, 0x4e, 0x28, 0x2e, 0x97, 0xfe, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x46, 0xf8, 0x81, 0x80, 0x4c, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AutoProvPolicyApiClient is the client API for AutoProvPolicyApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AutoProvPolicyApiClient interface {
	// Create an Auto Provisioning Policy
	CreateAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error)
	// Delete an Auto Provisioning Policy
	DeleteAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error)
	// Update an Auto Provisioning Policy
	UpdateAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error)
	// Show Auto Provisioning Policies. Any fields specified will be used to filter results.
	ShowAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (AutoProvPolicyApi_ShowAutoProvPolicyClient, error)
	// Add a Zone to the Auto Provisioning Policy
	AddAutoProvPolicyZone(ctx context.Context, in *AutoProvPolicyZone, opts ...grpc.CallOption) (*Result, error)
	// Remove a Zone from the Auto Provisioning Policy
	RemoveAutoProvPolicyZone(ctx context.Context, in *AutoProvPolicyZone, opts ...grpc.CallOption) (*Result, error)
}

type autoProvPolicyApiClient struct {
	cc *grpc.ClientConn
}

func NewAutoProvPolicyApiClient(cc *grpc.ClientConn) AutoProvPolicyApiClient {
	return &autoProvPolicyApiClient{cc}
}

func (c *autoProvPolicyApiClient) CreateAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AutoProvPolicyApi/CreateAutoProvPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoProvPolicyApiClient) DeleteAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AutoProvPolicyApi/DeleteAutoProvPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoProvPolicyApiClient) UpdateAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AutoProvPolicyApi/UpdateAutoProvPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoProvPolicyApiClient) ShowAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (AutoProvPolicyApi_ShowAutoProvPolicyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AutoProvPolicyApi_serviceDesc.Streams[0], "/edgeproto.AutoProvPolicyApi/ShowAutoProvPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &autoProvPolicyApiShowAutoProvPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AutoProvPolicyApi_ShowAutoProvPolicyClient interface {
	Recv() (*AutoProvPolicy, error)
	grpc.ClientStream
}

type autoProvPolicyApiShowAutoProvPolicyClient struct {
	grpc.ClientStream
}

func (x *autoProvPolicyApiShowAutoProvPolicyClient) Recv() (*AutoProvPolicy, error) {
	m := new(AutoProvPolicy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *autoProvPolicyApiClient) AddAutoProvPolicyZone(ctx context.Context, in *AutoProvPolicyZone, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AutoProvPolicyApi/AddAutoProvPolicyZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoProvPolicyApiClient) RemoveAutoProvPolicyZone(ctx context.Context, in *AutoProvPolicyZone, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AutoProvPolicyApi/RemoveAutoProvPolicyZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutoProvPolicyApiServer is the server API for AutoProvPolicyApi service.
type AutoProvPolicyApiServer interface {
	// Create an Auto Provisioning Policy
	CreateAutoProvPolicy(context.Context, *AutoProvPolicy) (*Result, error)
	// Delete an Auto Provisioning Policy
	DeleteAutoProvPolicy(context.Context, *AutoProvPolicy) (*Result, error)
	// Update an Auto Provisioning Policy
	UpdateAutoProvPolicy(context.Context, *AutoProvPolicy) (*Result, error)
	// Show Auto Provisioning Policies. Any fields specified will be used to filter results.
	ShowAutoProvPolicy(*AutoProvPolicy, AutoProvPolicyApi_ShowAutoProvPolicyServer) error
	// Add a Zone to the Auto Provisioning Policy
	AddAutoProvPolicyZone(context.Context, *AutoProvPolicyZone) (*Result, error)
	// Remove a Zone from the Auto Provisioning Policy
	RemoveAutoProvPolicyZone(context.Context, *AutoProvPolicyZone) (*Result, error)
}

// UnimplementedAutoProvPolicyApiServer can be embedded to have forward compatible implementations.
type UnimplementedAutoProvPolicyApiServer struct {
}

func (*UnimplementedAutoProvPolicyApiServer) CreateAutoProvPolicy(ctx context.Context, req *AutoProvPolicy) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoProvPolicy not implemented")
}
func (*UnimplementedAutoProvPolicyApiServer) DeleteAutoProvPolicy(ctx context.Context, req *AutoProvPolicy) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoProvPolicy not implemented")
}
func (*UnimplementedAutoProvPolicyApiServer) UpdateAutoProvPolicy(ctx context.Context, req *AutoProvPolicy) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoProvPolicy not implemented")
}
func (*UnimplementedAutoProvPolicyApiServer) ShowAutoProvPolicy(req *AutoProvPolicy, srv AutoProvPolicyApi_ShowAutoProvPolicyServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowAutoProvPolicy not implemented")
}
func (*UnimplementedAutoProvPolicyApiServer) AddAutoProvPolicyZone(ctx context.Context, req *AutoProvPolicyZone) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAutoProvPolicyZone not implemented")
}
func (*UnimplementedAutoProvPolicyApiServer) RemoveAutoProvPolicyZone(ctx context.Context, req *AutoProvPolicyZone) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAutoProvPolicyZone not implemented")
}

func RegisterAutoProvPolicyApiServer(s *grpc.Server, srv AutoProvPolicyApiServer) {
	s.RegisterService(&_AutoProvPolicyApi_serviceDesc, srv)
}

func _AutoProvPolicyApi_CreateAutoProvPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoProvPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoProvPolicyApiServer).CreateAutoProvPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoProvPolicyApi/CreateAutoProvPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoProvPolicyApiServer).CreateAutoProvPolicy(ctx, req.(*AutoProvPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoProvPolicyApi_DeleteAutoProvPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoProvPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoProvPolicyApiServer).DeleteAutoProvPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoProvPolicyApi/DeleteAutoProvPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoProvPolicyApiServer).DeleteAutoProvPolicy(ctx, req.(*AutoProvPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoProvPolicyApi_UpdateAutoProvPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoProvPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoProvPolicyApiServer).UpdateAutoProvPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoProvPolicyApi/UpdateAutoProvPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoProvPolicyApiServer).UpdateAutoProvPolicy(ctx, req.(*AutoProvPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoProvPolicyApi_ShowAutoProvPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AutoProvPolicy)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AutoProvPolicyApiServer).ShowAutoProvPolicy(m, &autoProvPolicyApiShowAutoProvPolicyServer{stream})
}

type AutoProvPolicyApi_ShowAutoProvPolicyServer interface {
	Send(*AutoProvPolicy) error
	grpc.ServerStream
}

type autoProvPolicyApiShowAutoProvPolicyServer struct {
	grpc.ServerStream
}

func (x *autoProvPolicyApiShowAutoProvPolicyServer) Send(m *AutoProvPolicy) error {
	return x.ServerStream.SendMsg(m)
}

func _AutoProvPolicyApi_AddAutoProvPolicyZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoProvPolicyZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoProvPolicyApiServer).AddAutoProvPolicyZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoProvPolicyApi/AddAutoProvPolicyZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoProvPolicyApiServer).AddAutoProvPolicyZone(ctx, req.(*AutoProvPolicyZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoProvPolicyApi_RemoveAutoProvPolicyZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoProvPolicyZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoProvPolicyApiServer).RemoveAutoProvPolicyZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoProvPolicyApi/RemoveAutoProvPolicyZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoProvPolicyApiServer).RemoveAutoProvPolicyZone(ctx, req.(*AutoProvPolicyZone))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutoProvPolicyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AutoProvPolicyApi",
	HandlerType: (*AutoProvPolicyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAutoProvPolicy",
			Handler:    _AutoProvPolicyApi_CreateAutoProvPolicy_Handler,
		},
		{
			MethodName: "DeleteAutoProvPolicy",
			Handler:    _AutoProvPolicyApi_DeleteAutoProvPolicy_Handler,
		},
		{
			MethodName: "UpdateAutoProvPolicy",
			Handler:    _AutoProvPolicyApi_UpdateAutoProvPolicy_Handler,
		},
		{
			MethodName: "AddAutoProvPolicyZone",
			Handler:    _AutoProvPolicyApi_AddAutoProvPolicyZone_Handler,
		},
		{
			MethodName: "RemoveAutoProvPolicyZone",
			Handler:    _AutoProvPolicyApi_RemoveAutoProvPolicyZone_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowAutoProvPolicy",
			Handler:       _AutoProvPolicyApi_ShowAutoProvPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "autoprovpolicy.proto",
}

func (m *AutoProvPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoProvPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoProvPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletePrepare {
		i--
		if m.DeletePrepare {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.UndeployIntervalCount != 0 {
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.UndeployIntervalCount))
		i--
		dAtA[i] = 0x48
	}
	if m.UndeployClientCount != 0 {
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.UndeployClientCount))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxInstances != 0 {
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.MaxInstances))
		i--
		dAtA[i] = 0x38
	}
	if m.MinActiveInstances != 0 {
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.MinActiveInstances))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Zones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAutoprovpolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.DeployIntervalCount != 0 {
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.DeployIntervalCount))
		i--
		dAtA[i] = 0x20
	}
	if m.DeployClientCount != 0 {
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.DeployClientCount))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintAutoprovpolicy(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AutoProvCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoProvCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoProvCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProcessNow {
		i--
		if m.ProcessNow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Count != 0 {
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.ZoneKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.AppKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AutoProvCounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoProvCounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoProvCounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Counts) > 0 {
		for iNdEx := len(m.Counts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAutoprovpolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DmeNodeName) > 0 {
		i -= len(m.DmeNodeName)
		copy(dAtA[i:], m.DmeNodeName)
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(len(m.DmeNodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutoProvPolicyZone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoProvPolicyZone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoProvPolicyZone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ZoneKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AutoProvInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoProvInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoProvInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintAutoprovpolicy(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Completed) > 0 {
		for iNdEx := len(m.Completed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Completed[iNdEx])
			copy(dAtA[i:], m.Completed[iNdEx])
			i = encodeVarintAutoprovpolicy(dAtA, i, uint64(len(m.Completed[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MaintenanceState != 0 {
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.MaintenanceState))
		i--
		dAtA[i] = 0x20
	}
	if m.NotifyId != 0 {
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.NotifyId))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintAutoprovpolicy(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAutoprovpolicy(dAtA []byte, offset int, v uint64) int {
	offset -= sovAutoprovpolicy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AutoProvPolicy) Matches(o *AutoProvPolicy, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.DeployClientCount != 0 {
		if o.DeployClientCount != m.DeployClientCount {
			return false
		}
	}
	if !opts.Filter || o.DeployIntervalCount != 0 {
		if o.DeployIntervalCount != m.DeployIntervalCount {
			return false
		}
	}
	if !opts.Filter || o.Zones != nil {
		if len(m.Zones) == 0 && len(o.Zones) > 0 || len(m.Zones) > 0 && len(o.Zones) == 0 {
			return false
		} else if m.Zones != nil && o.Zones != nil {
			if !opts.Filter && len(m.Zones) != len(o.Zones) {
				return false
			}
			if opts.SortArrayedKeys {
				sort.Slice(m.Zones, func(i, j int) bool {
					return m.Zones[i].GetKeyString() < m.Zones[j].GetKeyString()
				})
				sort.Slice(o.Zones, func(i, j int) bool {
					return o.Zones[i].GetKeyString() < o.Zones[j].GetKeyString()
				})
			}
			found := 0
			for oIndex, _ := range o.Zones {
				for mIndex, _ := range m.Zones {
					if m.Zones[mIndex].Matches(o.Zones[oIndex], fopts...) {
						found++
						break
					}
				}
			}
			if found != len(o.Zones) {
				return false
			}
		}
	}
	if !opts.Filter || o.MinActiveInstances != 0 {
		if o.MinActiveInstances != m.MinActiveInstances {
			return false
		}
	}
	if !opts.Filter || o.MaxInstances != 0 {
		if o.MaxInstances != m.MaxInstances {
			return false
		}
	}
	if !opts.Filter || o.UndeployClientCount != 0 {
		if o.UndeployClientCount != m.UndeployClientCount {
			return false
		}
	}
	if !opts.Filter || o.UndeployIntervalCount != 0 {
		if o.UndeployIntervalCount != m.UndeployIntervalCount {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeletePrepare != false {
			if o.DeletePrepare != m.DeletePrepare {
				return false
			}
		}
	}
	return true
}

const AutoProvPolicyFieldKey = "2"
const AutoProvPolicyFieldKeyOrganization = "2.1"
const AutoProvPolicyFieldKeyName = "2.2"
const AutoProvPolicyFieldDeployClientCount = "3"
const AutoProvPolicyFieldDeployIntervalCount = "4"
const AutoProvPolicyFieldZones = "5"
const AutoProvPolicyFieldZonesOrganization = "5.1"
const AutoProvPolicyFieldZonesName = "5.2"
const AutoProvPolicyFieldZonesFederatedOrganization = "5.3"
const AutoProvPolicyFieldMinActiveInstances = "6"
const AutoProvPolicyFieldMaxInstances = "7"
const AutoProvPolicyFieldUndeployClientCount = "8"
const AutoProvPolicyFieldUndeployIntervalCount = "9"
const AutoProvPolicyFieldDeletePrepare = "10"

var AutoProvPolicyAllFields = []string{
	AutoProvPolicyFieldKeyOrganization,
	AutoProvPolicyFieldKeyName,
	AutoProvPolicyFieldDeployClientCount,
	AutoProvPolicyFieldDeployIntervalCount,
	AutoProvPolicyFieldZonesOrganization,
	AutoProvPolicyFieldZonesName,
	AutoProvPolicyFieldZonesFederatedOrganization,
	AutoProvPolicyFieldMinActiveInstances,
	AutoProvPolicyFieldMaxInstances,
	AutoProvPolicyFieldUndeployClientCount,
	AutoProvPolicyFieldUndeployIntervalCount,
	AutoProvPolicyFieldDeletePrepare,
}

var AutoProvPolicyAllFieldsMap = NewFieldMap(map[string]struct{}{
	AutoProvPolicyFieldKeyOrganization:            struct{}{},
	AutoProvPolicyFieldKeyName:                    struct{}{},
	AutoProvPolicyFieldDeployClientCount:          struct{}{},
	AutoProvPolicyFieldDeployIntervalCount:        struct{}{},
	AutoProvPolicyFieldZonesOrganization:          struct{}{},
	AutoProvPolicyFieldZonesName:                  struct{}{},
	AutoProvPolicyFieldZonesFederatedOrganization: struct{}{},
	AutoProvPolicyFieldMinActiveInstances:         struct{}{},
	AutoProvPolicyFieldMaxInstances:               struct{}{},
	AutoProvPolicyFieldUndeployClientCount:        struct{}{},
	AutoProvPolicyFieldUndeployIntervalCount:      struct{}{},
	AutoProvPolicyFieldDeletePrepare:              struct{}{},
})

var AutoProvPolicyAllFieldsStringMap = map[string]string{
	AutoProvPolicyFieldKeyOrganization:            "Key Organization",
	AutoProvPolicyFieldKeyName:                    "Key Name",
	AutoProvPolicyFieldDeployClientCount:          "Deploy Client Count",
	AutoProvPolicyFieldDeployIntervalCount:        "Deploy Interval Count",
	AutoProvPolicyFieldZonesOrganization:          "Zones Organization",
	AutoProvPolicyFieldZonesName:                  "Zones Name",
	AutoProvPolicyFieldZonesFederatedOrganization: "Zones Federated Organization",
	AutoProvPolicyFieldMinActiveInstances:         "Min Active Instances",
	AutoProvPolicyFieldMaxInstances:               "Max Instances",
	AutoProvPolicyFieldUndeployClientCount:        "Undeploy Client Count",
	AutoProvPolicyFieldUndeployIntervalCount:      "Undeploy Interval Count",
	AutoProvPolicyFieldDeletePrepare:              "Delete Prepare",
}

func (m *AutoProvPolicy) IsKeyField(s string) bool {
	return strings.HasPrefix(s, AutoProvPolicyFieldKey+".") || s == AutoProvPolicyFieldKey
}

func (m *AutoProvPolicy) DiffFields(o *AutoProvPolicy, fields *FieldMap) {
	if m.Key.Organization != o.Key.Organization {
		fields.Set(AutoProvPolicyFieldKeyOrganization)
		fields.Set(AutoProvPolicyFieldKey)
	}
	if m.Key.Name != o.Key.Name {
		fields.Set(AutoProvPolicyFieldKeyName)
		fields.Set(AutoProvPolicyFieldKey)
	}
	if m.DeployClientCount != o.DeployClientCount {
		fields.Set(AutoProvPolicyFieldDeployClientCount)
	}
	if m.DeployIntervalCount != o.DeployIntervalCount {
		fields.Set(AutoProvPolicyFieldDeployIntervalCount)
	}
	if m.Zones != nil && o.Zones != nil {
		if len(m.Zones) != len(o.Zones) {
			fields.Set(AutoProvPolicyFieldZones)
		} else {
			for i0 := 0; i0 < len(m.Zones); i0++ {
				if m.Zones[i0].Organization != o.Zones[i0].Organization {
					fields.Set(AutoProvPolicyFieldZonesOrganization)
					fields.Set(AutoProvPolicyFieldZones)
				}
				if m.Zones[i0].Name != o.Zones[i0].Name {
					fields.Set(AutoProvPolicyFieldZonesName)
					fields.Set(AutoProvPolicyFieldZones)
				}
				if m.Zones[i0].FederatedOrganization != o.Zones[i0].FederatedOrganization {
					fields.Set(AutoProvPolicyFieldZonesFederatedOrganization)
					fields.Set(AutoProvPolicyFieldZones)
				}
			}
		}
	} else if (m.Zones != nil && o.Zones == nil) || (m.Zones == nil && o.Zones != nil) {
		fields.Set(AutoProvPolicyFieldZones)
	}
	if m.MinActiveInstances != o.MinActiveInstances {
		fields.Set(AutoProvPolicyFieldMinActiveInstances)
	}
	if m.MaxInstances != o.MaxInstances {
		fields.Set(AutoProvPolicyFieldMaxInstances)
	}
	if m.UndeployClientCount != o.UndeployClientCount {
		fields.Set(AutoProvPolicyFieldUndeployClientCount)
	}
	if m.UndeployIntervalCount != o.UndeployIntervalCount {
		fields.Set(AutoProvPolicyFieldUndeployIntervalCount)
	}
	if m.DeletePrepare != o.DeletePrepare {
		fields.Set(AutoProvPolicyFieldDeletePrepare)
	}
}

func (m *AutoProvPolicy) GetDiffFields(o *AutoProvPolicy) *FieldMap {
	diffFields := NewFieldMap(nil)
	m.DiffFields(o, diffFields)
	return diffFields
}

var UpdateAutoProvPolicyFieldsMap = NewFieldMap(map[string]struct{}{
	AutoProvPolicyFieldDeployClientCount:          struct{}{},
	AutoProvPolicyFieldDeployIntervalCount:        struct{}{},
	AutoProvPolicyFieldZones:                      struct{}{},
	AutoProvPolicyFieldZonesOrganization:          struct{}{},
	AutoProvPolicyFieldZonesName:                  struct{}{},
	AutoProvPolicyFieldZonesFederatedOrganization: struct{}{},
	AutoProvPolicyFieldMinActiveInstances:         struct{}{},
	AutoProvPolicyFieldMaxInstances:               struct{}{},
	AutoProvPolicyFieldUndeployClientCount:        struct{}{},
	AutoProvPolicyFieldUndeployIntervalCount:      struct{}{},
})

func (m *AutoProvPolicy) ValidateUpdateFields() error {
	return m.ValidateUpdateFieldsCustom(UpdateAutoProvPolicyFieldsMap)
}

func (m *AutoProvPolicy) ValidateUpdateFieldsCustom(allowedFields *FieldMap) error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for _, field := range fmap.Fields() {
		if m.IsKeyField(field) {
			continue
		}
		if !allowedFields.Has(field) {
			if _, ok := AutoProvPolicyAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, AutoProvPolicyAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *AutoProvPolicy) Clone() *AutoProvPolicy {
	cp := &AutoProvPolicy{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *AutoProvPolicy) AddZones(vals ...*ZoneKey) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.Zones {
		cur[v.GetKeyString()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.GetKeyString()]; found {
			continue // duplicate
		}
		m.Zones = append(m.Zones, v)
		changes++
	}
	return changes
}

func (m *AutoProvPolicy) RemoveZones(vals ...*ZoneKey) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.GetKeyString()] = struct{}{}
	}
	for i := len(m.Zones); i >= 0; i-- {
		if _, found := remove[m.Zones[i].GetKeyString()]; found {
			m.Zones = append(m.Zones[:i], m.Zones[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *AutoProvPolicy) CopyInFields(src *AutoProvPolicy) int {
	updateListAction := "replace"
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if fmap.HasOrHasChild("2") {
		if fmap.Has("2.1") {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if fmap.Has("2.2") {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if fmap.Has("3") {
		if m.DeployClientCount != src.DeployClientCount {
			m.DeployClientCount = src.DeployClientCount
			changed++
		}
	}
	if fmap.Has("4") {
		if m.DeployIntervalCount != src.DeployIntervalCount {
			m.DeployIntervalCount = src.DeployIntervalCount
			changed++
		}
	}
	if fmap.HasOrHasChild("5") {
		if src.Zones != nil {
			if updateListAction == "add" {
				changed += m.AddZones(src.Zones...)
			} else if updateListAction == "remove" {
				changed += m.RemoveZones(src.Zones...)
			} else {
				m.Zones = make([]*ZoneKey, 0)
				for k0, _ := range src.Zones {
					m.Zones = append(m.Zones, src.Zones[k0].Clone())
				}
				changed++
			}
		} else if m.Zones != nil {
			m.Zones = nil
			changed++
		}
	}
	if fmap.Has("6") {
		if m.MinActiveInstances != src.MinActiveInstances {
			m.MinActiveInstances = src.MinActiveInstances
			changed++
		}
	}
	if fmap.Has("7") {
		if m.MaxInstances != src.MaxInstances {
			m.MaxInstances = src.MaxInstances
			changed++
		}
	}
	if fmap.Has("8") {
		if m.UndeployClientCount != src.UndeployClientCount {
			m.UndeployClientCount = src.UndeployClientCount
			changed++
		}
	}
	if fmap.Has("9") {
		if m.UndeployIntervalCount != src.UndeployIntervalCount {
			m.UndeployIntervalCount = src.UndeployIntervalCount
			changed++
		}
	}
	if fmap.Has("10") {
		if m.DeletePrepare != src.DeletePrepare {
			m.DeletePrepare = src.DeletePrepare
			changed++
		}
	}
	return changed
}

func (m *AutoProvPolicy) DeepCopyIn(src *AutoProvPolicy) {
	m.Key.DeepCopyIn(&src.Key)
	m.DeployClientCount = src.DeployClientCount
	m.DeployIntervalCount = src.DeployIntervalCount
	if src.Zones != nil {
		m.Zones = make([]*ZoneKey, len(src.Zones), len(src.Zones))
		for ii, s := range src.Zones {
			var tmp_s ZoneKey
			tmp_s.DeepCopyIn(s)
			m.Zones[ii] = &tmp_s
		}
	} else {
		m.Zones = nil
	}
	m.MinActiveInstances = src.MinActiveInstances
	m.MaxInstances = src.MaxInstances
	m.UndeployClientCount = src.UndeployClientCount
	m.UndeployIntervalCount = src.UndeployIntervalCount
	m.DeletePrepare = src.DeletePrepare
}

func (s *AutoProvPolicy) HasFields() bool {
	return true
}

type AutoProvPolicyStore interface {
	Create(ctx context.Context, m *AutoProvPolicy, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *AutoProvPolicy, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *AutoProvPolicy, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *AutoProvPolicy, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*AutoProvPolicy, int64, error)
	Get(ctx context.Context, key *PolicyKey, buf *AutoProvPolicy) bool
	STMGet(stm concurrency.STM, key *PolicyKey, buf *AutoProvPolicy) bool
	STMPut(stm concurrency.STM, obj *AutoProvPolicy, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *PolicyKey)
	STMHas(stm concurrency.STM, key *PolicyKey) bool
}

type AutoProvPolicyStoreImpl struct {
	kvstore objstore.KVStore
}

func NewAutoProvPolicyStore(kvstore objstore.KVStore) *AutoProvPolicyStoreImpl {
	return &AutoProvPolicyStoreImpl{kvstore: kvstore}
}

func (s *AutoProvPolicyStoreImpl) Create(ctx context.Context, m *AutoProvPolicy, wait func(int64)) (*Result, error) {
	err := m.Validate(AutoProvPolicyAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvPolicy", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvPolicyStoreImpl) Update(ctx context.Context, m *AutoProvPolicy, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvPolicy", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur AutoProvPolicy
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvPolicyStoreImpl) Put(ctx context.Context, m *AutoProvPolicy, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(AutoProvPolicyAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvPolicy", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvPolicyStoreImpl) Delete(ctx context.Context, m *AutoProvPolicy, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvPolicy", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvPolicyStoreImpl) LoadOne(key string) (*AutoProvPolicy, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj AutoProvPolicy
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse AutoProvPolicy data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AutoProvPolicyStoreImpl) Get(ctx context.Context, key *PolicyKey, buf *AutoProvPolicy) bool {
	keystr := objstore.DbKeyString("AutoProvPolicy", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *AutoProvPolicyStoreImpl) STMGet(stm concurrency.STM, key *PolicyKey, buf *AutoProvPolicy) bool {
	keystr := objstore.DbKeyString("AutoProvPolicy", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *AutoProvPolicyStoreImpl) STMHas(stm concurrency.STM, key *PolicyKey) bool {
	keystr := objstore.DbKeyString("AutoProvPolicy", key)
	return stm.Get(keystr) != ""
}

func (s *AutoProvPolicyStoreImpl) parseGetData(val []byte, buf *AutoProvPolicy) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = AutoProvPolicy{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AutoProvPolicyStoreImpl) STMPut(stm concurrency.STM, obj *AutoProvPolicy, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("AutoProvPolicy", obj.GetKey())

	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("AutoProvPolicy json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AutoProvPolicyStoreImpl) STMDel(stm concurrency.STM, key *PolicyKey) {
	keystr := objstore.DbKeyString("AutoProvPolicy", key)
	stm.Del(keystr)
}

func StoreListAutoProvPolicy(ctx context.Context, kvstore objstore.KVStore) ([]AutoProvPolicy, error) {
	keyPrefix := objstore.DbKeyPrefixString("AutoProvPolicy") + "/"
	objs := []AutoProvPolicy{}
	err := kvstore.List(keyPrefix, func(key, val []byte, rev, modRev int64) error {
		obj := AutoProvPolicy{}
		err := json.Unmarshal(val, &obj)
		if err != nil {
			return fmt.Errorf("failed to unmarshal AutoProvPolicy json %s, %s", string(val), err)
		}
		objs = append(objs, obj)
		return nil
	})
	return objs, err
}

type AutoProvPolicyKeyWatcher struct {
	cb func(ctx context.Context)
}

type AutoProvPolicyCacheData struct {
	Obj    *AutoProvPolicy
	ModRev int64
}

func (s *AutoProvPolicyCacheData) Clone() *AutoProvPolicyCacheData {
	cp := AutoProvPolicyCacheData{}
	if s.Obj != nil {
		cp.Obj = &AutoProvPolicy{}
		cp.Obj.DeepCopyIn(s.Obj)
	}
	cp.ModRev = s.ModRev
	return &cp
}

// AutoProvPolicyCache caches AutoProvPolicy objects in memory in a hash table
// and keeps them in sync with the database.
type AutoProvPolicyCache struct {
	Objs          map[PolicyKey]*AutoProvPolicyCacheData
	Mux           util.Mutex
	List          map[PolicyKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *AutoProvPolicy, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *AutoProvPolicy, new *AutoProvPolicy)
	DeletedCbs    []func(ctx context.Context, old *AutoProvPolicy)
	KeyWatchers   map[PolicyKey][]*AutoProvPolicyKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *PolicyKey)
	DeletedKeyCbs []func(ctx context.Context, key *PolicyKey)
	Store         AutoProvPolicyStore
}

func NewAutoProvPolicyCache() *AutoProvPolicyCache {
	cache := AutoProvPolicyCache{}
	InitAutoProvPolicyCache(&cache)
	return &cache
}

func InitAutoProvPolicyCache(cache *AutoProvPolicyCache) {
	cache.Objs = make(map[PolicyKey]*AutoProvPolicyCacheData)
	cache.KeyWatchers = make(map[PolicyKey][]*AutoProvPolicyKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *AutoProvPolicyCache) GetTypeString() string {
	return "AutoProvPolicy"
}

func (c *AutoProvPolicyCache) Get(key *PolicyKey, valbuf *AutoProvPolicy) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

// STMGet gets from the store if STM is set, otherwise gets from cache
func (c *AutoProvPolicyCache) STMGet(ostm *OptionalSTM, key *PolicyKey, valbuf *AutoProvPolicy) bool {
	if ostm.stm != nil {
		if c.Store == nil {
			// panic, otherwise if we fallback to cache, we may silently
			// introduce race conditions and intermittent failures due to
			// reading from cache during a transaction.
			panic("AutoProvPolicyCache store not set, cannot read via STM")
		}
		return c.Store.STMGet(ostm.stm, key, valbuf)
	}
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *AutoProvPolicyCache) GetWithRev(key *PolicyKey, valbuf *AutoProvPolicy, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *AutoProvPolicyCache) HasKey(key *PolicyKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AutoProvPolicyCache) GetAllKeys(ctx context.Context, cb func(key *PolicyKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *AutoProvPolicyCache) GetAllLocked(ctx context.Context, cb func(obj *AutoProvPolicy, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		cb(data.Obj, data.ModRev)
	}
}

func (c *AutoProvPolicyCache) Update(ctx context.Context, in *AutoProvPolicy, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *AutoProvPolicy) (*AutoProvPolicy, bool) {
		return in, true
	})
}

func (c *AutoProvPolicyCache) UpdateModFunc(ctx context.Context, key *PolicyKey, modRev int64, modFunc func(old *AutoProvPolicy) (new *AutoProvPolicy, changed bool)) {
	c.Mux.Lock()
	var old *AutoProvPolicy
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if len(c.UpdatedCbs) > 0 || len(c.NotifyCbs) > 0 {
		newCopy := &AutoProvPolicy{}
		newCopy.DeepCopyIn(new)
		for _, cb := range c.UpdatedCbs {
			defer cb(ctx, old, newCopy)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				defer cb(ctx, newCopy, modRev)
			}
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &AutoProvPolicy{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &AutoProvPolicyCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *AutoProvPolicyCache) Delete(ctx context.Context, in *AutoProvPolicy, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *AutoProvPolicy) bool {
		return true
	})
}

func (c *AutoProvPolicyCache) DeleteCondFunc(ctx context.Context, in *AutoProvPolicy, modRev int64, condFunc func(old *AutoProvPolicy) bool) {
	c.Mux.Lock()
	var old *AutoProvPolicy
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete", "key", in.GetKeyVal())
	c.Mux.Unlock()
	obj := old
	if obj == nil {
		obj = in
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, obj, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *AutoProvPolicyCache) Prune(ctx context.Context, validKeys map[PolicyKey]struct{}) {
	log.SpanLog(ctx, log.DebugLevelApi, "Prune AutoProvPolicy", "numValidKeys", len(validKeys))
	notify := make(map[PolicyKey]*AutoProvPolicyCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		obj := old.Obj
		if obj == nil {
			obj = &AutoProvPolicy{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AutoProvPolicyCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AutoProvPolicyCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *AutoProvPolicyCache) Show(filter *AutoProvPolicy, cb func(ret *AutoProvPolicy) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AutoProvPolicyGenericNotifyCb(fn func(key *PolicyKey, old *AutoProvPolicy)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*PolicyKey), obj.(*AutoProvPolicy))
	}
}

func (c *AutoProvPolicyCache) SetNotifyCb(fn func(ctx context.Context, obj *AutoProvPolicy, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *AutoProvPolicy, modRev int64){fn}
}

func (c *AutoProvPolicyCache) SetUpdatedCb(fn func(ctx context.Context, old *AutoProvPolicy, new *AutoProvPolicy)) {
	c.UpdatedCbs = []func(ctx context.Context, old *AutoProvPolicy, new *AutoProvPolicy){fn}
}

func (c *AutoProvPolicyCache) SetDeletedCb(fn func(ctx context.Context, old *AutoProvPolicy)) {
	c.DeletedCbs = []func(ctx context.Context, old *AutoProvPolicy){fn}
}

func (c *AutoProvPolicyCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *PolicyKey){fn}
}

func (c *AutoProvPolicyCache) SetDeletedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *PolicyKey){fn}
}

func (c *AutoProvPolicyCache) AddUpdatedCb(fn func(ctx context.Context, old *AutoProvPolicy, new *AutoProvPolicy)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *AutoProvPolicyCache) AddDeletedCb(fn func(ctx context.Context, old *AutoProvPolicy)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *AutoProvPolicyCache) AddNotifyCb(fn func(ctx context.Context, obj *AutoProvPolicy, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *AutoProvPolicyCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *AutoProvPolicyCache) AddDeletedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *AutoProvPolicyCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *AutoProvPolicyCache) WatchKey(key *PolicyKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AutoProvPolicyKeyWatcher, 0)
	}
	watcher := AutoProvPolicyKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching AutoProvPolicy", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AutoProvPolicyCache) TriggerKeyWatchers(ctx context.Context, key *PolicyKey) {
	watchers := make([]*AutoProvPolicyKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *AutoProvPolicyCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := AutoProvPolicy{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse AutoProvPolicy data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AutoProvPolicyCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := AutoProvPolicy{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	PolicyKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *AutoProvPolicyCache) SyncListStart(ctx context.Context) {
	c.List = make(map[PolicyKey]struct{})
}

func (c *AutoProvPolicyCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[PolicyKey]*AutoProvPolicyCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		obj := val.Obj
		if obj == nil {
			obj = &AutoProvPolicy{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (s *AutoProvPolicyCache) InitCacheWithSync(sync DataSync) {
	InitAutoProvPolicyCache(s)
	s.InitSync(sync)
}

func (s *AutoProvPolicyCache) InitSync(sync DataSync) {
	if sync != nil {
		s.Store = NewAutoProvPolicyStore(sync.GetKVStore())
		sync.RegisterCache(s)
	}
}

func InitAutoProvPolicyCacheWithStore(cache *AutoProvPolicyCache, store AutoProvPolicyStore) {
	InitAutoProvPolicyCache(cache)
	cache.Store = store
}

func (c *AutoProvPolicyCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

type AutoProvPolicyByZoneKey struct {
	ZoneKeys map[ZoneKey]map[PolicyKey]struct{}
	Mux      util.Mutex
}

func (s *AutoProvPolicyByZoneKey) Init() {
	s.ZoneKeys = make(map[ZoneKey]map[PolicyKey]struct{})
}

func (s *AutoProvPolicyByZoneKey) Updated(old *AutoProvPolicy, new *AutoProvPolicy) map[ZoneKey]struct{} {
	// the below func must be implemented by the user:
	// AutoProvPolicy.GetZoneKeys() map[ZoneKey]struct{}
	oldZoneKeys := make(map[ZoneKey]struct{})
	if old != nil {
		oldZoneKeys = old.GetZoneKeys()
	}
	newZoneKeys := new.GetZoneKeys()

	for lookup, _ := range oldZoneKeys {
		if _, found := newZoneKeys[lookup]; found {
			delete(oldZoneKeys, lookup)
			delete(newZoneKeys, lookup)
		}
	}

	s.Mux.Lock()
	defer s.Mux.Unlock()

	changed := make(map[ZoneKey]struct{})
	for lookup, _ := range oldZoneKeys {
		// remove
		s.removeRef(lookup, old.GetKeyVal())
		changed[lookup] = struct{}{}
	}
	for lookup, _ := range newZoneKeys {
		// add
		s.addRef(lookup, new.GetKeyVal())
		changed[lookup] = struct{}{}
	}
	return changed
}

func (s *AutoProvPolicyByZoneKey) Deleted(old *AutoProvPolicy) {
	oldZoneKeys := old.GetZoneKeys()

	s.Mux.Lock()
	defer s.Mux.Unlock()

	for lookup, _ := range oldZoneKeys {
		s.removeRef(lookup, old.GetKeyVal())
	}
}

func (s *AutoProvPolicyByZoneKey) addRef(lookup ZoneKey, key PolicyKey) {
	PolicyKeys, found := s.ZoneKeys[lookup]
	if !found {
		PolicyKeys = make(map[PolicyKey]struct{})
		s.ZoneKeys[lookup] = PolicyKeys
	}
	PolicyKeys[key] = struct{}{}
}

func (s *AutoProvPolicyByZoneKey) removeRef(lookup ZoneKey, key PolicyKey) {
	PolicyKeys, found := s.ZoneKeys[lookup]
	if found {
		delete(PolicyKeys, key)
		if len(PolicyKeys) == 0 {
			delete(s.ZoneKeys, lookup)
		}
	}
}

func (s *AutoProvPolicyByZoneKey) Find(lookup ZoneKey) []PolicyKey {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	list := []PolicyKey{}
	for k, _ := range s.ZoneKeys[lookup] {
		list = append(list, k)
	}
	return list
}

func (s *AutoProvPolicyByZoneKey) HasRef(lookup ZoneKey) bool {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	_, found := s.ZoneKeys[lookup]
	return found
}

// Convert to dumpable format. JSON cannot marshal maps with struct keys.
func (s *AutoProvPolicyByZoneKey) Dumpable() map[string]interface{} {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	dat := make(map[string]interface{})
	for lookup, keys := range s.ZoneKeys {
		keystrs := make(map[string]interface{})
		for k, _ := range keys {
			keystrs[k.GetKeyString()] = struct{}{}
		}
		dat[lookup.GetKeyString()] = keystrs
	}
	return dat
}

func (m *AutoProvPolicy) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *AutoProvPolicy) GetKey() *PolicyKey {
	return &m.Key
}

func (m *AutoProvPolicy) GetKeyVal() PolicyKey {
	return m.Key
}

func (m *AutoProvPolicy) SetKey(key *PolicyKey) {
	m.Key = *key
}

func CmpSortAutoProvPolicy(a AutoProvPolicy, b AutoProvPolicy) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *AutoProvPolicy) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.Zones {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *AutoProvPolicy) ClearTagged(tags map[string]struct{}) {
	s.Key.ClearTagged(tags)
	if s.Zones != nil {
		for ii := 0; ii < len(s.Zones); ii++ {
			s.Zones[ii].ClearTagged(tags)
		}
	}
}

func (m *AutoProvCount) Clone() *AutoProvCount {
	cp := &AutoProvCount{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *AutoProvCount) CopyInFields(src *AutoProvCount) int {
	changed := 0
	if m.AppKey.Organization != src.AppKey.Organization {
		m.AppKey.Organization = src.AppKey.Organization
		changed++
	}
	if m.AppKey.Name != src.AppKey.Name {
		m.AppKey.Name = src.AppKey.Name
		changed++
	}
	if m.AppKey.Version != src.AppKey.Version {
		m.AppKey.Version = src.AppKey.Version
		changed++
	}
	if m.ZoneKey.Organization != src.ZoneKey.Organization {
		m.ZoneKey.Organization = src.ZoneKey.Organization
		changed++
	}
	if m.ZoneKey.Name != src.ZoneKey.Name {
		m.ZoneKey.Name = src.ZoneKey.Name
		changed++
	}
	if m.ZoneKey.FederatedOrganization != src.ZoneKey.FederatedOrganization {
		m.ZoneKey.FederatedOrganization = src.ZoneKey.FederatedOrganization
		changed++
	}
	if m.Count != src.Count {
		m.Count = src.Count
		changed++
	}
	if m.ProcessNow != src.ProcessNow {
		m.ProcessNow = src.ProcessNow
		changed++
	}
	return changed
}

func (m *AutoProvCount) DeepCopyIn(src *AutoProvCount) {
	m.AppKey.DeepCopyIn(&src.AppKey)
	m.ZoneKey.DeepCopyIn(&src.ZoneKey)
	m.Count = src.Count
	m.ProcessNow = src.ProcessNow
}

// Helper method to check that enums have valid values
func (m *AutoProvCount) ValidateEnums() error {
	if err := m.AppKey.ValidateEnums(); err != nil {
		return err
	}
	if err := m.ZoneKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (s *AutoProvCount) ClearTagged(tags map[string]struct{}) {
	s.AppKey.ClearTagged(tags)
	s.ZoneKey.ClearTagged(tags)
}

func (m *AutoProvCounts) Clone() *AutoProvCounts {
	cp := &AutoProvCounts{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *AutoProvCounts) AddCounts(vals ...*AutoProvCount) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.Counts {
		cur[v.String()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.String()]; found {
			continue // duplicate
		}
		m.Counts = append(m.Counts, v)
		changes++
	}
	return changes
}

func (m *AutoProvCounts) RemoveCounts(vals ...*AutoProvCount) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.String()] = struct{}{}
	}
	for i := len(m.Counts); i >= 0; i-- {
		if _, found := remove[m.Counts[i].String()]; found {
			m.Counts = append(m.Counts[:i], m.Counts[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *AutoProvCounts) CopyInFields(src *AutoProvCounts) int {
	updateListAction := "replace"
	changed := 0
	if m.DmeNodeName != src.DmeNodeName {
		m.DmeNodeName = src.DmeNodeName
		changed++
	}
	if m.Timestamp.Seconds != src.Timestamp.Seconds {
		m.Timestamp.Seconds = src.Timestamp.Seconds
		changed++
	}
	if m.Timestamp.Nanos != src.Timestamp.Nanos {
		m.Timestamp.Nanos = src.Timestamp.Nanos
		changed++
	}
	if src.Counts != nil {
		if updateListAction == "add" {
			changed += m.AddCounts(src.Counts...)
		} else if updateListAction == "remove" {
			changed += m.RemoveCounts(src.Counts...)
		} else {
			m.Counts = make([]*AutoProvCount, 0)
			for k0, _ := range src.Counts {
				m.Counts = append(m.Counts, src.Counts[k0].Clone())
			}
			changed++
		}
	} else if m.Counts != nil {
		m.Counts = nil
		changed++
	}
	return changed
}

func (m *AutoProvCounts) DeepCopyIn(src *AutoProvCounts) {
	m.DmeNodeName = src.DmeNodeName
	m.Timestamp = src.Timestamp
	if src.Counts != nil {
		m.Counts = make([]*AutoProvCount, len(src.Counts), len(src.Counts))
		for ii, s := range src.Counts {
			var tmp_s AutoProvCount
			tmp_s.DeepCopyIn(s)
			m.Counts[ii] = &tmp_s
		}
	} else {
		m.Counts = nil
	}
}

func (m *AutoProvCounts) MessageTypeKey() string {
	return "msg/type/AutoProvCounts"
}

// Helper method to check that enums have valid values
func (m *AutoProvCounts) ValidateEnums() error {
	for _, e := range m.Counts {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *AutoProvCounts) ClearTagged(tags map[string]struct{}) {
	if s.Counts != nil {
		for ii := 0; ii < len(s.Counts); ii++ {
			s.Counts[ii].ClearTagged(tags)
		}
	}
}

func (m *AutoProvPolicyZone) Clone() *AutoProvPolicyZone {
	cp := &AutoProvPolicyZone{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *AutoProvPolicyZone) CopyInFields(src *AutoProvPolicyZone) int {
	changed := 0
	if m.Key.Organization != src.Key.Organization {
		m.Key.Organization = src.Key.Organization
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if m.ZoneKey.Organization != src.ZoneKey.Organization {
		m.ZoneKey.Organization = src.ZoneKey.Organization
		changed++
	}
	if m.ZoneKey.Name != src.ZoneKey.Name {
		m.ZoneKey.Name = src.ZoneKey.Name
		changed++
	}
	if m.ZoneKey.FederatedOrganization != src.ZoneKey.FederatedOrganization {
		m.ZoneKey.FederatedOrganization = src.ZoneKey.FederatedOrganization
		changed++
	}
	return changed
}

func (m *AutoProvPolicyZone) DeepCopyIn(src *AutoProvPolicyZone) {
	m.Key.DeepCopyIn(&src.Key)
	m.ZoneKey.DeepCopyIn(&src.ZoneKey)
}

func (m *AutoProvPolicyZone) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *AutoProvPolicyZone) GetKey() *PolicyKey {
	return &m.Key
}

func (m *AutoProvPolicyZone) GetKeyVal() PolicyKey {
	return m.Key
}

func (m *AutoProvPolicyZone) SetKey(key *PolicyKey) {
	m.Key = *key
}

func CmpSortAutoProvPolicyZone(a AutoProvPolicyZone, b AutoProvPolicyZone) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *AutoProvPolicyZone) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if err := m.ZoneKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (s *AutoProvPolicyZone) ClearTagged(tags map[string]struct{}) {
	s.Key.ClearTagged(tags)
	s.ZoneKey.ClearTagged(tags)
}

func (m *AutoProvInfo) Matches(o *AutoProvInfo, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.NotifyId != 0 {
		if o.NotifyId != m.NotifyId {
			return false
		}
	}
	if !opts.Filter || o.MaintenanceState != 0 {
		if o.MaintenanceState != m.MaintenanceState {
			return false
		}
	}
	if !opts.Filter || o.Completed != nil {
		if len(m.Completed) == 0 && len(o.Completed) > 0 || len(m.Completed) > 0 && len(o.Completed) == 0 {
			return false
		} else if m.Completed != nil && o.Completed != nil {
			if !opts.Filter && len(m.Completed) != len(o.Completed) {
				return false
			}
			found := 0
			for oIndex, _ := range o.Completed {
				for mIndex, _ := range m.Completed {
					if o.Completed[oIndex] == m.Completed[mIndex] {
						found++
						break
					}
				}
			}
			if found != len(o.Completed) {
				return false
			}
		}
	}
	if !opts.Filter || o.Errors != nil {
		if len(m.Errors) == 0 && len(o.Errors) > 0 || len(m.Errors) > 0 && len(o.Errors) == 0 {
			return false
		} else if m.Errors != nil && o.Errors != nil {
			if !opts.Filter && len(m.Errors) != len(o.Errors) {
				return false
			}
			found := 0
			for oIndex, _ := range o.Errors {
				for mIndex, _ := range m.Errors {
					if o.Errors[oIndex] == m.Errors[mIndex] {
						found++
						break
					}
				}
			}
			if found != len(o.Errors) {
				return false
			}
		}
	}
	return true
}

const AutoProvInfoFieldKey = "2"
const AutoProvInfoFieldKeyOrganization = "2.1"
const AutoProvInfoFieldKeyName = "2.2"
const AutoProvInfoFieldKeyFederatedOrganization = "2.3"
const AutoProvInfoFieldNotifyId = "3"
const AutoProvInfoFieldMaintenanceState = "4"
const AutoProvInfoFieldCompleted = "5"
const AutoProvInfoFieldErrors = "6"

var AutoProvInfoAllFields = []string{
	AutoProvInfoFieldKeyOrganization,
	AutoProvInfoFieldKeyName,
	AutoProvInfoFieldKeyFederatedOrganization,
	AutoProvInfoFieldNotifyId,
	AutoProvInfoFieldMaintenanceState,
	AutoProvInfoFieldCompleted,
	AutoProvInfoFieldErrors,
}

var AutoProvInfoAllFieldsMap = NewFieldMap(map[string]struct{}{
	AutoProvInfoFieldKeyOrganization:          struct{}{},
	AutoProvInfoFieldKeyName:                  struct{}{},
	AutoProvInfoFieldKeyFederatedOrganization: struct{}{},
	AutoProvInfoFieldNotifyId:                 struct{}{},
	AutoProvInfoFieldMaintenanceState:         struct{}{},
	AutoProvInfoFieldCompleted:                struct{}{},
	AutoProvInfoFieldErrors:                   struct{}{},
})

var AutoProvInfoAllFieldsStringMap = map[string]string{
	AutoProvInfoFieldKeyOrganization:          "Key Organization",
	AutoProvInfoFieldKeyName:                  "Key Name",
	AutoProvInfoFieldKeyFederatedOrganization: "Key Federated Organization",
	AutoProvInfoFieldNotifyId:                 "Notify Id",
	AutoProvInfoFieldMaintenanceState:         "Maintenance State",
	AutoProvInfoFieldCompleted:                "Completed",
	AutoProvInfoFieldErrors:                   "Errors",
}

func (m *AutoProvInfo) IsKeyField(s string) bool {
	return strings.HasPrefix(s, AutoProvInfoFieldKey+".") || s == AutoProvInfoFieldKey
}

func (m *AutoProvInfo) DiffFields(o *AutoProvInfo, fields *FieldMap) {
	if m.Key.Organization != o.Key.Organization {
		fields.Set(AutoProvInfoFieldKeyOrganization)
		fields.Set(AutoProvInfoFieldKey)
	}
	if m.Key.Name != o.Key.Name {
		fields.Set(AutoProvInfoFieldKeyName)
		fields.Set(AutoProvInfoFieldKey)
	}
	if m.Key.FederatedOrganization != o.Key.FederatedOrganization {
		fields.Set(AutoProvInfoFieldKeyFederatedOrganization)
		fields.Set(AutoProvInfoFieldKey)
	}
	if m.NotifyId != o.NotifyId {
		fields.Set(AutoProvInfoFieldNotifyId)
	}
	if m.MaintenanceState != o.MaintenanceState {
		fields.Set(AutoProvInfoFieldMaintenanceState)
	}
	if len(m.Completed) != len(o.Completed) {
		fields.Set(AutoProvInfoFieldCompleted)
	} else {
		for i0 := 0; i0 < len(m.Completed); i0++ {
			if m.Completed[i0] != o.Completed[i0] {
				fields.Set(AutoProvInfoFieldCompleted)
				break
			}
		}
	}
	if len(m.Errors) != len(o.Errors) {
		fields.Set(AutoProvInfoFieldErrors)
	} else {
		for i0 := 0; i0 < len(m.Errors); i0++ {
			if m.Errors[i0] != o.Errors[i0] {
				fields.Set(AutoProvInfoFieldErrors)
				break
			}
		}
	}
}

func (m *AutoProvInfo) GetDiffFields(o *AutoProvInfo) *FieldMap {
	diffFields := NewFieldMap(nil)
	m.DiffFields(o, diffFields)
	return diffFields
}

func (m *AutoProvInfo) Clone() *AutoProvInfo {
	cp := &AutoProvInfo{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *AutoProvInfo) AddCompleted(vals ...string) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.Completed {
		cur[v] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v]; found {
			continue // duplicate
		}
		m.Completed = append(m.Completed, v)
		changes++
	}
	return changes
}

func (m *AutoProvInfo) RemoveCompleted(vals ...string) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v] = struct{}{}
	}
	for i := len(m.Completed); i >= 0; i-- {
		if _, found := remove[m.Completed[i]]; found {
			m.Completed = append(m.Completed[:i], m.Completed[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *AutoProvInfo) AddErrors(vals ...string) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.Errors {
		cur[v] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v]; found {
			continue // duplicate
		}
		m.Errors = append(m.Errors, v)
		changes++
	}
	return changes
}

func (m *AutoProvInfo) RemoveErrors(vals ...string) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v] = struct{}{}
	}
	for i := len(m.Errors); i >= 0; i-- {
		if _, found := remove[m.Errors[i]]; found {
			m.Errors = append(m.Errors[:i], m.Errors[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *AutoProvInfo) CopyInFields(src *AutoProvInfo) int {
	updateListAction := "replace"
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if fmap.HasOrHasChild("2") {
		if fmap.Has("2.1") {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if fmap.Has("2.2") {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
		if fmap.Has("2.3") {
			if m.Key.FederatedOrganization != src.Key.FederatedOrganization {
				m.Key.FederatedOrganization = src.Key.FederatedOrganization
				changed++
			}
		}
	}
	if fmap.Has("3") {
		if m.NotifyId != src.NotifyId {
			m.NotifyId = src.NotifyId
			changed++
		}
	}
	if fmap.Has("4") {
		if m.MaintenanceState != src.MaintenanceState {
			m.MaintenanceState = src.MaintenanceState
			changed++
		}
	}
	if fmap.Has("5") {
		if src.Completed != nil {
			if updateListAction == "add" {
				changed += m.AddCompleted(src.Completed...)
			} else if updateListAction == "remove" {
				changed += m.RemoveCompleted(src.Completed...)
			} else {
				m.Completed = make([]string, 0)
				m.Completed = append(m.Completed, src.Completed...)
				changed++
			}
		} else if m.Completed != nil {
			m.Completed = nil
			changed++
		}
	}
	if fmap.Has("6") {
		if src.Errors != nil {
			if updateListAction == "add" {
				changed += m.AddErrors(src.Errors...)
			} else if updateListAction == "remove" {
				changed += m.RemoveErrors(src.Errors...)
			} else {
				m.Errors = make([]string, 0)
				m.Errors = append(m.Errors, src.Errors...)
				changed++
			}
		} else if m.Errors != nil {
			m.Errors = nil
			changed++
		}
	}
	return changed
}

func (m *AutoProvInfo) DeepCopyIn(src *AutoProvInfo) {
	m.Key.DeepCopyIn(&src.Key)
	m.NotifyId = src.NotifyId
	m.MaintenanceState = src.MaintenanceState
	if src.Completed != nil {
		m.Completed = make([]string, len(src.Completed), len(src.Completed))
		for ii, s := range src.Completed {
			m.Completed[ii] = s
		}
	} else {
		m.Completed = nil
	}
	if src.Errors != nil {
		m.Errors = make([]string, len(src.Errors), len(src.Errors))
		for ii, s := range src.Errors {
			m.Errors[ii] = s
		}
	} else {
		m.Errors = nil
	}
}

func (s *AutoProvInfo) HasFields() bool {
	return true
}

type AutoProvInfoStore interface {
	Create(ctx context.Context, m *AutoProvInfo, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *AutoProvInfo, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *AutoProvInfo, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *AutoProvInfo, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*AutoProvInfo, int64, error)
	Get(ctx context.Context, key *CloudletKey, buf *AutoProvInfo) bool
	STMGet(stm concurrency.STM, key *CloudletKey, buf *AutoProvInfo) bool
	STMPut(stm concurrency.STM, obj *AutoProvInfo, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *CloudletKey)
	STMHas(stm concurrency.STM, key *CloudletKey) bool
}

type AutoProvInfoStoreImpl struct {
	kvstore objstore.KVStore
}

func NewAutoProvInfoStore(kvstore objstore.KVStore) *AutoProvInfoStoreImpl {
	return &AutoProvInfoStoreImpl{kvstore: kvstore}
}

func (s *AutoProvInfoStoreImpl) Create(ctx context.Context, m *AutoProvInfo, wait func(int64)) (*Result, error) {
	err := m.Validate(AutoProvInfoAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvInfo", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvInfoStoreImpl) Update(ctx context.Context, m *AutoProvInfo, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvInfo", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur AutoProvInfo
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvInfoStoreImpl) Put(ctx context.Context, m *AutoProvInfo, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(AutoProvInfoAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvInfo", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvInfoStoreImpl) Delete(ctx context.Context, m *AutoProvInfo, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvInfo", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvInfoStoreImpl) LoadOne(key string) (*AutoProvInfo, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj AutoProvInfo
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse AutoProvInfo data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AutoProvInfoStoreImpl) Get(ctx context.Context, key *CloudletKey, buf *AutoProvInfo) bool {
	keystr := objstore.DbKeyString("AutoProvInfo", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *AutoProvInfoStoreImpl) STMGet(stm concurrency.STM, key *CloudletKey, buf *AutoProvInfo) bool {
	keystr := objstore.DbKeyString("AutoProvInfo", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *AutoProvInfoStoreImpl) STMHas(stm concurrency.STM, key *CloudletKey) bool {
	keystr := objstore.DbKeyString("AutoProvInfo", key)
	return stm.Get(keystr) != ""
}

func (s *AutoProvInfoStoreImpl) parseGetData(val []byte, buf *AutoProvInfo) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = AutoProvInfo{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AutoProvInfoStoreImpl) STMPut(stm concurrency.STM, obj *AutoProvInfo, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("AutoProvInfo", obj.GetKey())

	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("AutoProvInfo json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AutoProvInfoStoreImpl) STMDel(stm concurrency.STM, key *CloudletKey) {
	keystr := objstore.DbKeyString("AutoProvInfo", key)
	stm.Del(keystr)
}

func StoreListAutoProvInfo(ctx context.Context, kvstore objstore.KVStore) ([]AutoProvInfo, error) {
	keyPrefix := objstore.DbKeyPrefixString("AutoProvInfo") + "/"
	objs := []AutoProvInfo{}
	err := kvstore.List(keyPrefix, func(key, val []byte, rev, modRev int64) error {
		obj := AutoProvInfo{}
		err := json.Unmarshal(val, &obj)
		if err != nil {
			return fmt.Errorf("failed to unmarshal AutoProvInfo json %s, %s", string(val), err)
		}
		objs = append(objs, obj)
		return nil
	})
	return objs, err
}

type AutoProvInfoKeyWatcher struct {
	cb func(ctx context.Context)
}

type AutoProvInfoCacheData struct {
	Obj    *AutoProvInfo
	ModRev int64
}

func (s *AutoProvInfoCacheData) Clone() *AutoProvInfoCacheData {
	cp := AutoProvInfoCacheData{}
	if s.Obj != nil {
		cp.Obj = &AutoProvInfo{}
		cp.Obj.DeepCopyIn(s.Obj)
	}
	cp.ModRev = s.ModRev
	return &cp
}

// AutoProvInfoCache caches AutoProvInfo objects in memory in a hash table
// and keeps them in sync with the database.
type AutoProvInfoCache struct {
	Objs          map[CloudletKey]*AutoProvInfoCacheData
	Mux           util.Mutex
	List          map[CloudletKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *AutoProvInfo, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *AutoProvInfo, new *AutoProvInfo)
	DeletedCbs    []func(ctx context.Context, old *AutoProvInfo)
	KeyWatchers   map[CloudletKey][]*AutoProvInfoKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *CloudletKey)
	DeletedKeyCbs []func(ctx context.Context, key *CloudletKey)
	Store         AutoProvInfoStore
}

func NewAutoProvInfoCache() *AutoProvInfoCache {
	cache := AutoProvInfoCache{}
	InitAutoProvInfoCache(&cache)
	return &cache
}

func InitAutoProvInfoCache(cache *AutoProvInfoCache) {
	cache.Objs = make(map[CloudletKey]*AutoProvInfoCacheData)
	cache.KeyWatchers = make(map[CloudletKey][]*AutoProvInfoKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *AutoProvInfoCache) GetTypeString() string {
	return "AutoProvInfo"
}

func (c *AutoProvInfoCache) Get(key *CloudletKey, valbuf *AutoProvInfo) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

// STMGet gets from the store if STM is set, otherwise gets from cache
func (c *AutoProvInfoCache) STMGet(ostm *OptionalSTM, key *CloudletKey, valbuf *AutoProvInfo) bool {
	if ostm.stm != nil {
		if c.Store == nil {
			// panic, otherwise if we fallback to cache, we may silently
			// introduce race conditions and intermittent failures due to
			// reading from cache during a transaction.
			panic("AutoProvInfoCache store not set, cannot read via STM")
		}
		return c.Store.STMGet(ostm.stm, key, valbuf)
	}
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *AutoProvInfoCache) GetWithRev(key *CloudletKey, valbuf *AutoProvInfo, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *AutoProvInfoCache) HasKey(key *CloudletKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AutoProvInfoCache) GetAllKeys(ctx context.Context, cb func(key *CloudletKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *AutoProvInfoCache) GetAllLocked(ctx context.Context, cb func(obj *AutoProvInfo, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		cb(data.Obj, data.ModRev)
	}
}

func (c *AutoProvInfoCache) Update(ctx context.Context, in *AutoProvInfo, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *AutoProvInfo) (*AutoProvInfo, bool) {
		return in, true
	})
}

func (c *AutoProvInfoCache) UpdateModFunc(ctx context.Context, key *CloudletKey, modRev int64, modFunc func(old *AutoProvInfo) (new *AutoProvInfo, changed bool)) {
	c.Mux.Lock()
	var old *AutoProvInfo
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if len(c.UpdatedCbs) > 0 || len(c.NotifyCbs) > 0 {
		newCopy := &AutoProvInfo{}
		newCopy.DeepCopyIn(new)
		for _, cb := range c.UpdatedCbs {
			defer cb(ctx, old, newCopy)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				defer cb(ctx, newCopy, modRev)
			}
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &AutoProvInfo{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &AutoProvInfoCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *AutoProvInfoCache) Delete(ctx context.Context, in *AutoProvInfo, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *AutoProvInfo) bool {
		return true
	})
}

func (c *AutoProvInfoCache) DeleteCondFunc(ctx context.Context, in *AutoProvInfo, modRev int64, condFunc func(old *AutoProvInfo) bool) {
	c.Mux.Lock()
	var old *AutoProvInfo
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete", "key", in.GetKeyVal())
	c.Mux.Unlock()
	obj := old
	if obj == nil {
		obj = in
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, obj, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *AutoProvInfoCache) Prune(ctx context.Context, validKeys map[CloudletKey]struct{}) {
	log.SpanLog(ctx, log.DebugLevelApi, "Prune AutoProvInfo", "numValidKeys", len(validKeys))
	notify := make(map[CloudletKey]*AutoProvInfoCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		obj := old.Obj
		if obj == nil {
			obj = &AutoProvInfo{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AutoProvInfoCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AutoProvInfoCache) Flush(ctx context.Context, notifyId int64) {
	log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush AutoProvInfo", "notifyId", notifyId, "FlushAll", c.FlushAll)
	flushed := make(map[CloudletKey]*AutoProvInfoCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if !c.FlushAll && val.Obj.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush AutoProvInfo delete", "key", key)
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			obj := old.Obj
			if obj == nil {
				obj = &AutoProvInfo{}
				obj.SetKey(&key)
			}
			for _, cb := range c.NotifyCbs {
				if cb != nil {
					cb(ctx, obj, old.ModRev)
				}
			}
			for _, cb := range c.DeletedKeyCbs {
				cb(ctx, &key)
			}
			if old.Obj != nil {
				for _, cb := range c.DeletedCbs {
					cb(ctx, old.Obj)
				}
			}
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *AutoProvInfoCache) Show(filter *AutoProvInfo, cb func(ret *AutoProvInfo) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AutoProvInfoGenericNotifyCb(fn func(key *CloudletKey, old *AutoProvInfo)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletKey), obj.(*AutoProvInfo))
	}
}

func (c *AutoProvInfoCache) SetNotifyCb(fn func(ctx context.Context, obj *AutoProvInfo, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *AutoProvInfo, modRev int64){fn}
}

func (c *AutoProvInfoCache) SetUpdatedCb(fn func(ctx context.Context, old *AutoProvInfo, new *AutoProvInfo)) {
	c.UpdatedCbs = []func(ctx context.Context, old *AutoProvInfo, new *AutoProvInfo){fn}
}

func (c *AutoProvInfoCache) SetDeletedCb(fn func(ctx context.Context, old *AutoProvInfo)) {
	c.DeletedCbs = []func(ctx context.Context, old *AutoProvInfo){fn}
}

func (c *AutoProvInfoCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *CloudletKey){fn}
}

func (c *AutoProvInfoCache) SetDeletedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *CloudletKey){fn}
}

func (c *AutoProvInfoCache) AddUpdatedCb(fn func(ctx context.Context, old *AutoProvInfo, new *AutoProvInfo)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *AutoProvInfoCache) AddDeletedCb(fn func(ctx context.Context, old *AutoProvInfo)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *AutoProvInfoCache) AddNotifyCb(fn func(ctx context.Context, obj *AutoProvInfo, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *AutoProvInfoCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *AutoProvInfoCache) AddDeletedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *AutoProvInfoCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *AutoProvInfoCache) WatchKey(key *CloudletKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AutoProvInfoKeyWatcher, 0)
	}
	watcher := AutoProvInfoKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching AutoProvInfo", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AutoProvInfoCache) TriggerKeyWatchers(ctx context.Context, key *CloudletKey) {
	watchers := make([]*AutoProvInfoKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *AutoProvInfoCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := AutoProvInfo{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse AutoProvInfo data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AutoProvInfoCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := AutoProvInfo{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *AutoProvInfoCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletKey]struct{})
}

func (c *AutoProvInfoCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletKey]*AutoProvInfoCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		obj := val.Obj
		if obj == nil {
			obj = &AutoProvInfo{}
			obj.SetKey(&key)
		}
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (s *AutoProvInfoCache) InitCacheWithSync(sync DataSync) {
	InitAutoProvInfoCache(s)
	s.InitSync(sync)
}

func (s *AutoProvInfoCache) InitSync(sync DataSync) {
	if sync != nil {
		s.Store = NewAutoProvInfoStore(sync.GetKVStore())
		sync.RegisterCache(s)
	}
}

func InitAutoProvInfoCacheWithStore(cache *AutoProvInfoCache, store AutoProvInfoStore) {
	InitAutoProvInfoCache(cache)
	cache.Store = store
}

func (c *AutoProvInfoCache) UsesOrg(org string) bool {
	return false
}

func (m *AutoProvInfo) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *AutoProvInfo) GetKey() *CloudletKey {
	return &m.Key
}

func (m *AutoProvInfo) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *AutoProvInfo) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortAutoProvInfo(a AutoProvInfo, b AutoProvInfo) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *AutoProvInfo) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := distributed_match_engine.MaintenanceState_name[int32(m.MaintenanceState)]; !ok {
		return errors.New("invalid MaintenanceState")
	}
	return nil
}

func (s *AutoProvInfo) ClearTagged(tags map[string]struct{}) {
	s.Key.ClearTagged(tags)
	if _, found := tags["nocmp"]; found {
		s.NotifyId = 0
	}
}

func IgnoreAutoProvInfoFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifyId")
	}
	return cmpopts.IgnoreFields(AutoProvInfo{}, names...)
}

func (m *AutoProvPolicy) IsValidArgsForCreateAutoProvPolicy() error {
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	return nil
}

func (m *AutoProvPolicy) IsValidArgsForDeleteAutoProvPolicy() error {
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	return nil
}

func (m *AutoProvPolicy) IsValidArgsForUpdateAutoProvPolicy() error {
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	return nil
}

func (m *AutoProvPolicyZone) IsValidArgsForAddAutoProvPolicyZone() error {
	return nil
}

func (m *AutoProvPolicyZone) IsValidArgsForRemoveAutoProvPolicyZone() error {
	return nil
}

func (m *AutoProvPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovAutoprovpolicy(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	if m.DeployClientCount != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.DeployClientCount))
	}
	if m.DeployIntervalCount != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.DeployIntervalCount))
	}
	if len(m.Zones) > 0 {
		for _, e := range m.Zones {
			l = e.Size()
			n += 1 + l + sovAutoprovpolicy(uint64(l))
		}
	}
	if m.MinActiveInstances != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.MinActiveInstances))
	}
	if m.MaxInstances != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.MaxInstances))
	}
	if m.UndeployClientCount != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.UndeployClientCount))
	}
	if m.UndeployIntervalCount != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.UndeployIntervalCount))
	}
	if m.DeletePrepare {
		n += 2
	}
	return n
}

func (m *AutoProvCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AppKey.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	l = m.ZoneKey.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	if m.Count != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.Count))
	}
	if m.ProcessNow {
		n += 2
	}
	return n
}

func (m *AutoProvCounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DmeNodeName)
	if l > 0 {
		n += 1 + l + sovAutoprovpolicy(uint64(l))
	}
	l = m.Timestamp.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	if len(m.Counts) > 0 {
		for _, e := range m.Counts {
			l = e.Size()
			n += 1 + l + sovAutoprovpolicy(uint64(l))
		}
	}
	return n
}

func (m *AutoProvPolicyZone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	l = m.ZoneKey.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	return n
}

func (m *AutoProvInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovAutoprovpolicy(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	if m.NotifyId != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.NotifyId))
	}
	if m.MaintenanceState != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.MaintenanceState))
	}
	if len(m.Completed) > 0 {
		for _, s := range m.Completed {
			l = len(s)
			n += 1 + l + sovAutoprovpolicy(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovAutoprovpolicy(uint64(l))
		}
	}
	return n
}

func sovAutoprovpolicy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAutoprovpolicy(x uint64) (n int) {
	return sovAutoprovpolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoProvPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoProvPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoProvPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployClientCount", wireType)
			}
			m.DeployClientCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeployClientCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployIntervalCount", wireType)
			}
			m.DeployIntervalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeployIntervalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, &ZoneKey{})
			if err := m.Zones[len(m.Zones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinActiveInstances", wireType)
			}
			m.MinActiveInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinActiveInstances |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInstances", wireType)
			}
			m.MaxInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxInstances |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndeployClientCount", wireType)
			}
			m.UndeployClientCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UndeployClientCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndeployIntervalCount", wireType)
			}
			m.UndeployIntervalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UndeployIntervalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletePrepare", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeletePrepare = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAutoprovpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoProvCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoProvCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoProvCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZoneKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessNow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessNow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAutoprovpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoProvCounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoProvCounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoProvCounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DmeNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DmeNodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counts = append(m.Counts, &AutoProvCount{})
			if err := m.Counts[len(m.Counts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutoprovpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoProvPolicyZone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoProvPolicyZone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoProvPolicyZone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZoneKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutoprovpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoProvInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoProvInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoProvInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintenanceState", wireType)
			}
			m.MaintenanceState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaintenanceState |= distributed_match_engine.MaintenanceState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Completed = append(m.Completed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutoprovpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAutoprovpolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAutoprovpolicy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAutoprovpolicy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAutoprovpolicy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAutoprovpolicy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAutoprovpolicy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAutoprovpolicy = fmt.Errorf("proto: unexpected end of group")
)
