// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ccrm.proto

package edgeproto

import (
	context "context"
	fmt "fmt"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StreamStatus struct {
	// Cache update type
	CacheUpdateType int32 `protobuf:"varint,3,opt,name=cache_update_type,json=cacheUpdateType,proto3" json:"cache_update_type,omitempty"`
	// Status value
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *StreamStatus) Reset()         { *m = StreamStatus{} }
func (m *StreamStatus) String() string { return proto.CompactTextString(m) }
func (*StreamStatus) ProtoMessage()    {}
func (*StreamStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0502422f6eb3ccb5, []int{0}
}
func (m *StreamStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamStatus.Merge(m, src)
}
func (m *StreamStatus) XXX_Size() int {
	return m.Size()
}
func (m *StreamStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StreamStatus proto.InternalMessageInfo

type InfraResourceMap struct {
	// Infra resources map
	InfraResources map[string]*InfraResource `protobuf:"bytes,1,rep,name=infra_resources,json=infraResources,proto3" json:"infra_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *InfraResourceMap) Reset()         { *m = InfraResourceMap{} }
func (m *InfraResourceMap) String() string { return proto.CompactTextString(m) }
func (*InfraResourceMap) ProtoMessage()    {}
func (*InfraResourceMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0502422f6eb3ccb5, []int{1}
}
func (m *InfraResourceMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfraResourceMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfraResourceMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfraResourceMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfraResourceMap.Merge(m, src)
}
func (m *InfraResourceMap) XXX_Size() int {
	return m.Size()
}
func (m *InfraResourceMap) XXX_DiscardUnknown() {
	xxx_messageInfo_InfraResourceMap.DiscardUnknown(m)
}

var xxx_messageInfo_InfraResourceMap proto.InternalMessageInfo

type ClusterResourcesReq struct {
	// Cloudlet
	CloudletKey *CloudletKey `protobuf:"bytes,1,opt,name=cloudlet_key,json=cloudletKey,proto3" json:"cloudlet_key,omitempty"`
	// VM Resources
	VmResources []VMResource `protobuf:"bytes,2,rep,name=vm_resources,json=vmResources,proto3" json:"vm_resources"`
	// Infra Resources Map
	InfraResources map[string]*InfraResource `protobuf:"bytes,3,rep,name=infra_resources,json=infraResources,proto3" json:"infra_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ClusterResourcesReq) Reset()         { *m = ClusterResourcesReq{} }
func (m *ClusterResourcesReq) String() string { return proto.CompactTextString(m) }
func (*ClusterResourcesReq) ProtoMessage()    {}
func (*ClusterResourcesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0502422f6eb3ccb5, []int{2}
}
func (m *ClusterResourcesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterResourcesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterResourcesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterResourcesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterResourcesReq.Merge(m, src)
}
func (m *ClusterResourcesReq) XXX_Size() int {
	return m.Size()
}
func (m *ClusterResourcesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterResourcesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterResourcesReq proto.InternalMessageInfo

type ClusterResourceMetricReq struct {
	// Cloudlet
	CloudletKey *CloudletKey `protobuf:"bytes,1,opt,name=cloudlet_key,json=cloudletKey,proto3" json:"cloudlet_key,omitempty"`
	// Resource Metric
	ResMetric *Metric `protobuf:"bytes,2,opt,name=res_metric,json=resMetric,proto3" json:"res_metric,omitempty"`
	// VM Resources
	VmResources []VMResource `protobuf:"bytes,3,rep,name=vm_resources,json=vmResources,proto3" json:"vm_resources"`
}

func (m *ClusterResourceMetricReq) Reset()         { *m = ClusterResourceMetricReq{} }
func (m *ClusterResourceMetricReq) String() string { return proto.CompactTextString(m) }
func (*ClusterResourceMetricReq) ProtoMessage()    {}
func (*ClusterResourceMetricReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0502422f6eb3ccb5, []int{3}
}
func (m *ClusterResourceMetricReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterResourceMetricReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterResourceMetricReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterResourceMetricReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterResourceMetricReq.Merge(m, src)
}
func (m *ClusterResourceMetricReq) XXX_Size() int {
	return m.Size()
}
func (m *ClusterResourceMetricReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterResourceMetricReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterResourceMetricReq proto.InternalMessageInfo

type NameSanitizeReq struct {
	// Cloudlet
	CloudletKey *CloudletKey `protobuf:"bytes,1,opt,name=cloudlet_key,json=cloudletKey,proto3" json:"cloudlet_key,omitempty"`
	// String value
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *NameSanitizeReq) Reset()         { *m = NameSanitizeReq{} }
func (m *NameSanitizeReq) String() string { return proto.CompactTextString(m) }
func (*NameSanitizeReq) ProtoMessage()    {}
func (*NameSanitizeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0502422f6eb3ccb5, []int{4}
}
func (m *NameSanitizeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameSanitizeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameSanitizeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameSanitizeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameSanitizeReq.Merge(m, src)
}
func (m *NameSanitizeReq) XXX_Size() int {
	return m.Size()
}
func (m *NameSanitizeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NameSanitizeReq.DiscardUnknown(m)
}

var xxx_messageInfo_NameSanitizeReq proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StreamStatus)(nil), "edgeproto.StreamStatus")
	proto.RegisterType((*InfraResourceMap)(nil), "edgeproto.InfraResourceMap")
	proto.RegisterMapType((map[string]*InfraResource)(nil), "edgeproto.InfraResourceMap.InfraResourcesEntry")
	proto.RegisterType((*ClusterResourcesReq)(nil), "edgeproto.ClusterResourcesReq")
	proto.RegisterMapType((map[string]*InfraResource)(nil), "edgeproto.ClusterResourcesReq.InfraResourcesEntry")
	proto.RegisterType((*ClusterResourceMetricReq)(nil), "edgeproto.ClusterResourceMetricReq")
	proto.RegisterType((*NameSanitizeReq)(nil), "edgeproto.NameSanitizeReq")
}

func init() { proto.RegisterFile("ccrm.proto", fileDescriptor_0502422f6eb3ccb5) }

var fileDescriptor_0502422f6eb3ccb5 = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x41, 0x4f, 0xdb, 0x4a,
	0x10, 0xf6, 0x26, 0x01, 0x94, 0x4d, 0x44, 0x60, 0xe1, 0xf1, 0xac, 0xc0, 0xf3, 0x8b, 0xfc, 0x2e,
	0xd1, 0x93, 0x48, 0x50, 0x7a, 0x69, 0x39, 0x50, 0x41, 0xd4, 0x22, 0x54, 0x52, 0x55, 0xa6, 0xad,
	0x90, 0x90, 0x1a, 0x2d, 0xce, 0xc4, 0x58, 0xd8, 0xde, 0x74, 0x77, 0x1d, 0x35, 0xfd, 0x15, 0xfd,
	0x49, 0xbd, 0x35, 0xed, 0x89, 0x63, 0x4f, 0x55, 0x0b, 0xff, 0xa0, 0xaa, 0xd4, 0x6b, 0x95, 0x8d,
	0x1d, 0x9c, 0x84, 0x20, 0x55, 0x1c, 0x7a, 0xca, 0xcc, 0x78, 0xbe, 0x6f, 0xbe, 0xcc, 0xcc, 0x0e,
	0xc6, 0xb6, 0xcd, 0xfd, 0x4a, 0x87, 0x33, 0xc9, 0x48, 0x16, 0x5a, 0x0e, 0x28, 0xb3, 0xb8, 0xe1,
	0x30, 0xe6, 0x78, 0x50, 0xa5, 0x1d, 0xb7, 0x4a, 0x83, 0x80, 0x49, 0x2a, 0x5d, 0x16, 0x88, 0x61,
	0x62, 0xb1, 0xee, 0xb8, 0xf2, 0x2c, 0x3c, 0xad, 0xd8, 0xcc, 0xaf, 0x0e, 0x30, 0x6f, 0xb8, 0xfa,
	0xd9, 0xb4, 0x3d, 0x16, 0xb6, 0x36, 0x3b, 0x1e, 0x95, 0x6d, 0xc6, 0xfd, 0xaa, 0x64, 0xcc, 0x13,
	0x55, 0x05, 0x71, 0x20, 0x18, 0x19, 0x11, 0xc9, 0xb2, 0xca, 0xf6, 0x40, 0x9e, 0x43, 0x2f, 0x0a,
	0x2d, 0xc6, 0xa1, 0xc8, 0xcf, 0xb7, 0x3d, 0xda, 0x65, 0x3c, 0xf2, 0x30, 0x87, 0x76, 0xac, 0x20,
	0xef, 0x83, 0xe4, 0xae, 0x1d, 0x7b, 0x1c, 0x44, 0xe8, 0xc5, 0xa8, 0x55, 0x37, 0x68, 0x73, 0xca,
	0x41, 0xb0, 0x90, 0xdb, 0x10, 0x23, 0x56, 0x1d, 0xe6, 0x30, 0x65, 0x56, 0x07, 0xd6, 0x30, 0x6a,
	0x1e, 0xe3, 0xfc, 0x91, 0xe4, 0x40, 0xfd, 0x23, 0x49, 0x65, 0x28, 0xc8, 0xff, 0x78, 0xd9, 0xa6,
	0xf6, 0x19, 0x34, 0xc3, 0x4e, 0x8b, 0x4a, 0x68, 0xca, 0x5e, 0x07, 0xf4, 0x74, 0x09, 0x95, 0xe7,
	0xac, 0x82, 0xfa, 0xf0, 0x42, 0xc5, 0x9f, 0xf7, 0x3a, 0x40, 0xd6, 0xf0, 0xbc, 0x50, 0x28, 0x3d,
	0x53, 0x42, 0xe5, 0xac, 0x15, 0x79, 0xdb, 0x99, 0xf7, 0x3f, 0x74, 0x64, 0x7e, 0x44, 0x78, 0xe9,
	0x60, 0x20, 0xc4, 0x8a, 0x84, 0x34, 0x68, 0x87, 0x1c, 0xe3, 0x82, 0x12, 0xd7, 0x1c, 0xa9, 0xd3,
	0x51, 0x29, 0x5d, 0xce, 0xd5, 0xaa, 0x95, 0x51, 0xef, 0x2b, 0x93, 0xa8, 0xf1, 0x80, 0x78, 0x14,
	0x48, 0xde, 0xb3, 0x16, 0xdd, 0xb1, 0x60, 0xf1, 0x04, 0xaf, 0xdc, 0x90, 0x46, 0x96, 0x70, 0xfa,
	0x1c, 0x7a, 0x3a, 0x52, 0x02, 0x07, 0x26, 0xa9, 0xe0, 0xb9, 0x2e, 0xf5, 0x42, 0xd0, 0x53, 0x25,
	0x54, 0xce, 0xd5, 0xf4, 0x59, 0x85, 0xad, 0x61, 0xda, 0x76, 0xea, 0x3e, 0x32, 0x3f, 0xa5, 0xf0,
	0x4a, 0xdd, 0x0b, 0x85, 0x04, 0x3e, 0xe2, 0xb7, 0xe0, 0x35, 0x79, 0x80, 0xf3, 0xf1, 0xc4, 0x9a,
	0x71, 0x99, 0x5c, 0x6d, 0x2d, 0x41, 0x59, 0x8f, 0x3e, 0x3f, 0x81, 0x9e, 0x95, 0xb3, 0xaf, 0x1d,
	0xb2, 0x83, 0xf3, 0x5d, 0x3f, 0xd1, 0x86, 0x94, 0x6a, 0xc3, 0x5f, 0x09, 0xe8, 0xcb, 0x46, 0x5c,
	0x6b, 0x2f, 0xd3, 0xff, 0xf2, 0xaf, 0x66, 0xe5, 0xba, 0xfe, 0xa8, 0x3a, 0x39, 0x99, 0xee, 0x64,
	0x5a, 0x51, 0xd4, 0xc6, 0xaa, 0x4f, 0x69, 0xfe, 0xf3, 0xcd, 0xfc, 0x80, 0xb0, 0x3e, 0x21, 0xac,
	0xa1, 0x96, 0xf9, 0x8e, 0x1d, 0xdd, 0xc2, 0x98, 0x83, 0x68, 0x0e, 0x1f, 0x46, 0x24, 0x68, 0x39,
	0x01, 0x8c, 0x8a, 0x64, 0x39, 0x88, 0xa1, 0x39, 0x35, 0x83, 0xf4, 0xef, 0xcd, 0xc0, 0x6c, 0xe3,
	0xc2, 0x53, 0xea, 0xc3, 0x11, 0x0d, 0x5c, 0xe9, 0xbe, 0x85, 0x3b, 0xea, 0xd7, 0xf1, 0x82, 0x0f,
	0x42, 0x50, 0x67, 0xd8, 0xcd, 0xac, 0x15, 0xbb, 0xb5, 0xef, 0x69, 0xbc, 0x50, 0xaf, 0x5b, 0x8d,
	0xdd, 0x67, 0x07, 0xe4, 0x10, 0xaf, 0xec, 0x83, 0x8c, 0x49, 0x1a, 0x34, 0x70, 0xdb, 0x20, 0x24,
	0x99, 0x51, 0xa1, 0xb8, 0x7e, 0x43, 0x3c, 0x06, 0x99, 0x1a, 0x79, 0x85, 0xff, 0x51, 0x6c, 0x6a,
	0x1a, 0xbb, 0xad, 0x96, 0x3b, 0xb8, 0x72, 0xd4, 0xbb, 0x5e, 0x33, 0xe3, 0xf6, 0x6d, 0x1a, 0xe3,
	0x9f, 0x7c, 0xb7, 0x8a, 0xdf, 0xbc, 0x8d, 0x3f, 0x9a, 0xc3, 0x7f, 0xb3, 0x8b, 0x8c, 0x36, 0xa3,
	0x38, 0x3d, 0x4a, 0x53, 0x23, 0x16, 0x5e, 0xdf, 0x07, 0x69, 0x81, 0x18, 0xf8, 0x12, 0x5a, 0xf1,
	0x5f, 0x8c, 0xae, 0xd9, 0xac, 0xae, 0xfc, 0x9d, 0x88, 0x27, 0xcf, 0x9f, 0xa9, 0x6d, 0x21, 0xb2,
	0x83, 0x0b, 0x03, 0x4e, 0xc6, 0xe4, 0xe1, 0xe9, 0x63, 0x75, 0x7f, 0x67, 0xf2, 0x24, 0x35, 0x0d,
	0x53, 0x4d, 0x8d, 0x3c, 0xc4, 0xf9, 0xe4, 0x56, 0x90, 0x62, 0x22, 0x69, 0x62, 0x5d, 0xc6, 0x08,
	0x2c, 0x75, 0xc3, 0x4d, 0xad, 0x98, 0xe9, 0xff, 0xd4, 0xd1, 0xde, 0x46, 0xff, 0x9b, 0xa1, 0xf5,
	0x2f, 0x0d, 0x74, 0x71, 0x69, 0xa0, 0xaf, 0x97, 0x06, 0x7a, 0x77, 0x65, 0x68, 0x17, 0x57, 0x86,
	0xf6, 0xf9, 0xca, 0xd0, 0x4e, 0xe7, 0x15, 0xe6, 0xde, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7c,
	0x7d, 0x8e, 0xd2, 0xbf, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CCRMAPIClient is the client API for CCRMAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CCRMAPIClient interface {
	GetCloudletManifest(ctx context.Context, in *CloudletKey, opts ...grpc.CallOption) (*CloudletManifest, error)
	GetClusterAdditionalResources(ctx context.Context, in *ClusterResourcesReq, opts ...grpc.CallOption) (*InfraResourceMap, error)
	GetClusterAdditionalResourceMetric(ctx context.Context, in *ClusterResourceMetricReq, opts ...grpc.CallOption) (*Metric, error)
	GetRestrictedCloudletStatus(ctx context.Context, in *CloudletKey, opts ...grpc.CallOption) (CCRMAPI_GetRestrictedCloudletStatusClient, error)
	GetRootLbFlavor(ctx context.Context, in *CloudletKey, opts ...grpc.CallOption) (*Flavor, error)
	NameSanitize(ctx context.Context, in *NameSanitizeReq, opts ...grpc.CallOption) (*Result, error)
}

type cCRMAPIClient struct {
	cc *grpc.ClientConn
}

func NewCCRMAPIClient(cc *grpc.ClientConn) CCRMAPIClient {
	return &cCRMAPIClient{cc}
}

func (c *cCRMAPIClient) GetCloudletManifest(ctx context.Context, in *CloudletKey, opts ...grpc.CallOption) (*CloudletManifest, error) {
	out := new(CloudletManifest)
	err := c.cc.Invoke(ctx, "/edgeproto.CCRMAPI/GetCloudletManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCRMAPIClient) GetClusterAdditionalResources(ctx context.Context, in *ClusterResourcesReq, opts ...grpc.CallOption) (*InfraResourceMap, error) {
	out := new(InfraResourceMap)
	err := c.cc.Invoke(ctx, "/edgeproto.CCRMAPI/GetClusterAdditionalResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCRMAPIClient) GetClusterAdditionalResourceMetric(ctx context.Context, in *ClusterResourceMetricReq, opts ...grpc.CallOption) (*Metric, error) {
	out := new(Metric)
	err := c.cc.Invoke(ctx, "/edgeproto.CCRMAPI/GetClusterAdditionalResourceMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCRMAPIClient) GetRestrictedCloudletStatus(ctx context.Context, in *CloudletKey, opts ...grpc.CallOption) (CCRMAPI_GetRestrictedCloudletStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CCRMAPI_serviceDesc.Streams[0], "/edgeproto.CCRMAPI/GetRestrictedCloudletStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &cCRMAPIGetRestrictedCloudletStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CCRMAPI_GetRestrictedCloudletStatusClient interface {
	Recv() (*StreamStatus, error)
	grpc.ClientStream
}

type cCRMAPIGetRestrictedCloudletStatusClient struct {
	grpc.ClientStream
}

func (x *cCRMAPIGetRestrictedCloudletStatusClient) Recv() (*StreamStatus, error) {
	m := new(StreamStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cCRMAPIClient) GetRootLbFlavor(ctx context.Context, in *CloudletKey, opts ...grpc.CallOption) (*Flavor, error) {
	out := new(Flavor)
	err := c.cc.Invoke(ctx, "/edgeproto.CCRMAPI/GetRootLbFlavor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCRMAPIClient) NameSanitize(ctx context.Context, in *NameSanitizeReq, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.CCRMAPI/NameSanitize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCRMAPIServer is the server API for CCRMAPI service.
type CCRMAPIServer interface {
	GetCloudletManifest(context.Context, *CloudletKey) (*CloudletManifest, error)
	GetClusterAdditionalResources(context.Context, *ClusterResourcesReq) (*InfraResourceMap, error)
	GetClusterAdditionalResourceMetric(context.Context, *ClusterResourceMetricReq) (*Metric, error)
	GetRestrictedCloudletStatus(*CloudletKey, CCRMAPI_GetRestrictedCloudletStatusServer) error
	GetRootLbFlavor(context.Context, *CloudletKey) (*Flavor, error)
	NameSanitize(context.Context, *NameSanitizeReq) (*Result, error)
}

// UnimplementedCCRMAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCCRMAPIServer struct {
}

func (*UnimplementedCCRMAPIServer) GetCloudletManifest(ctx context.Context, req *CloudletKey) (*CloudletManifest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudletManifest not implemented")
}
func (*UnimplementedCCRMAPIServer) GetClusterAdditionalResources(ctx context.Context, req *ClusterResourcesReq) (*InfraResourceMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterAdditionalResources not implemented")
}
func (*UnimplementedCCRMAPIServer) GetClusterAdditionalResourceMetric(ctx context.Context, req *ClusterResourceMetricReq) (*Metric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterAdditionalResourceMetric not implemented")
}
func (*UnimplementedCCRMAPIServer) GetRestrictedCloudletStatus(req *CloudletKey, srv CCRMAPI_GetRestrictedCloudletStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRestrictedCloudletStatus not implemented")
}
func (*UnimplementedCCRMAPIServer) GetRootLbFlavor(ctx context.Context, req *CloudletKey) (*Flavor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootLbFlavor not implemented")
}
func (*UnimplementedCCRMAPIServer) NameSanitize(ctx context.Context, req *NameSanitizeReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameSanitize not implemented")
}

func RegisterCCRMAPIServer(s *grpc.Server, srv CCRMAPIServer) {
	s.RegisterService(&_CCRMAPI_serviceDesc, srv)
}

func _CCRMAPI_GetCloudletManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCRMAPIServer).GetCloudletManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CCRMAPI/GetCloudletManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCRMAPIServer).GetCloudletManifest(ctx, req.(*CloudletKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCRMAPI_GetClusterAdditionalResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterResourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCRMAPIServer).GetClusterAdditionalResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CCRMAPI/GetClusterAdditionalResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCRMAPIServer).GetClusterAdditionalResources(ctx, req.(*ClusterResourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCRMAPI_GetClusterAdditionalResourceMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterResourceMetricReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCRMAPIServer).GetClusterAdditionalResourceMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CCRMAPI/GetClusterAdditionalResourceMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCRMAPIServer).GetClusterAdditionalResourceMetric(ctx, req.(*ClusterResourceMetricReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCRMAPI_GetRestrictedCloudletStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletKey)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CCRMAPIServer).GetRestrictedCloudletStatus(m, &cCRMAPIGetRestrictedCloudletStatusServer{stream})
}

type CCRMAPI_GetRestrictedCloudletStatusServer interface {
	Send(*StreamStatus) error
	grpc.ServerStream
}

type cCRMAPIGetRestrictedCloudletStatusServer struct {
	grpc.ServerStream
}

func (x *cCRMAPIGetRestrictedCloudletStatusServer) Send(m *StreamStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _CCRMAPI_GetRootLbFlavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCRMAPIServer).GetRootLbFlavor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CCRMAPI/GetRootLbFlavor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCRMAPIServer).GetRootLbFlavor(ctx, req.(*CloudletKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCRMAPI_NameSanitize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameSanitizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCRMAPIServer).NameSanitize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CCRMAPI/NameSanitize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCRMAPIServer).NameSanitize(ctx, req.(*NameSanitizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CCRMAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CCRMAPI",
	HandlerType: (*CCRMAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCloudletManifest",
			Handler:    _CCRMAPI_GetCloudletManifest_Handler,
		},
		{
			MethodName: "GetClusterAdditionalResources",
			Handler:    _CCRMAPI_GetClusterAdditionalResources_Handler,
		},
		{
			MethodName: "GetClusterAdditionalResourceMetric",
			Handler:    _CCRMAPI_GetClusterAdditionalResourceMetric_Handler,
		},
		{
			MethodName: "GetRootLbFlavor",
			Handler:    _CCRMAPI_GetRootLbFlavor_Handler,
		},
		{
			MethodName: "NameSanitize",
			Handler:    _CCRMAPI_NameSanitize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRestrictedCloudletStatus",
			Handler:       _CCRMAPI_GetRestrictedCloudletStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ccrm.proto",
}

func (m *StreamStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCcrm(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if m.CacheUpdateType != 0 {
		i = encodeVarintCcrm(dAtA, i, uint64(m.CacheUpdateType))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *InfraResourceMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfraResourceMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfraResourceMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InfraResources) > 0 {
		for k := range m.InfraResources {
			v := m.InfraResources[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCcrm(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCcrm(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCcrm(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClusterResourcesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterResourcesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterResourcesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InfraResources) > 0 {
		for k := range m.InfraResources {
			v := m.InfraResources[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCcrm(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCcrm(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCcrm(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.VmResources) > 0 {
		for iNdEx := len(m.VmResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VmResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCcrm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CloudletKey != nil {
		{
			size, err := m.CloudletKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcrm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterResourceMetricReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterResourceMetricReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterResourceMetricReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VmResources) > 0 {
		for iNdEx := len(m.VmResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VmResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCcrm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ResMetric != nil {
		{
			size, err := m.ResMetric.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcrm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CloudletKey != nil {
		{
			size, err := m.CloudletKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcrm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NameSanitizeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameSanitizeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameSanitizeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCcrm(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.CloudletKey != nil {
		{
			size, err := m.CloudletKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcrm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCcrm(dAtA []byte, offset int, v uint64) int {
	offset -= sovCcrm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamStatus) CopyInFields(src *StreamStatus) int {
	changed := 0
	if m.CacheUpdateType != src.CacheUpdateType {
		m.CacheUpdateType = src.CacheUpdateType
		changed++
	}
	if m.Status != src.Status {
		m.Status = src.Status
		changed++
	}
	return changed
}

func (m *StreamStatus) DeepCopyIn(src *StreamStatus) {
	m.CacheUpdateType = src.CacheUpdateType
	m.Status = src.Status
}

func (m *StreamStatus) MessageTypeKey() string {
	return "msg/type/StreamStatus"
}

// Helper method to check that enums have valid values
func (m *StreamStatus) ValidateEnums() error {
	return nil
}

func (s *StreamStatus) ClearTagged(tags map[string]struct{}) {
}

func (m *InfraResourceMap) CopyInFields(src *InfraResourceMap) int {
	changed := 0
	if src.InfraResources != nil {
		m.InfraResources = make(map[string]*InfraResource)
		for k0, _ := range src.InfraResources {
			m.InfraResources[k0] = &InfraResource{}
			if m.InfraResources[k0].Name != src.InfraResources[k0].Name {
				m.InfraResources[k0].Name = src.InfraResources[k0].Name
				changed++
			}
			if m.InfraResources[k0].Value != src.InfraResources[k0].Value {
				m.InfraResources[k0].Value = src.InfraResources[k0].Value
				changed++
			}
			if m.InfraResources[k0].InfraMaxValue != src.InfraResources[k0].InfraMaxValue {
				m.InfraResources[k0].InfraMaxValue = src.InfraResources[k0].InfraMaxValue
				changed++
			}
			if m.InfraResources[k0].QuotaMaxValue != src.InfraResources[k0].QuotaMaxValue {
				m.InfraResources[k0].QuotaMaxValue = src.InfraResources[k0].QuotaMaxValue
				changed++
			}
			if m.InfraResources[k0].Description != src.InfraResources[k0].Description {
				m.InfraResources[k0].Description = src.InfraResources[k0].Description
				changed++
			}
			if m.InfraResources[k0].Units != src.InfraResources[k0].Units {
				m.InfraResources[k0].Units = src.InfraResources[k0].Units
				changed++
			}
			if m.InfraResources[k0].AlertThreshold != src.InfraResources[k0].AlertThreshold {
				m.InfraResources[k0].AlertThreshold = src.InfraResources[k0].AlertThreshold
				changed++
			}
		}
	} else if m.InfraResources != nil {
		m.InfraResources = nil
		changed++
	}
	return changed
}

func (m *InfraResourceMap) DeepCopyIn(src *InfraResourceMap) {
	if src.InfraResources != nil {
		m.InfraResources = make(map[string]*InfraResource)
		for k, v := range src.InfraResources {
			var tmp_v InfraResource
			tmp_v.DeepCopyIn(v)
			m.InfraResources[k] = &tmp_v
		}
	} else {
		m.InfraResources = nil
	}
}

// Helper method to check that enums have valid values
func (m *InfraResourceMap) ValidateEnums() error {
	return nil
}

func (s *InfraResourceMap) ClearTagged(tags map[string]struct{}) {
}

func (m *ClusterResourcesReq) CopyInFields(src *ClusterResourcesReq) int {
	changed := 0
	if src.CloudletKey != nil {
		if m.CloudletKey == nil {
			m.CloudletKey = &CloudletKey{}
		}
		if m.CloudletKey.Organization != src.CloudletKey.Organization {
			m.CloudletKey.Organization = src.CloudletKey.Organization
			changed++
		}
		if m.CloudletKey.Name != src.CloudletKey.Name {
			m.CloudletKey.Name = src.CloudletKey.Name
			changed++
		}
		if m.CloudletKey.FederatedOrganization != src.CloudletKey.FederatedOrganization {
			m.CloudletKey.FederatedOrganization = src.CloudletKey.FederatedOrganization
			changed++
		}
	} else if m.CloudletKey != nil {
		m.CloudletKey = nil
		changed++
	}
	if src.VmResources != nil {
		m.VmResources = src.VmResources
		changed++
	} else if m.VmResources != nil {
		m.VmResources = nil
		changed++
	}
	if src.InfraResources != nil {
		m.InfraResources = make(map[string]*InfraResource)
		for k0, _ := range src.InfraResources {
			m.InfraResources[k0] = &InfraResource{}
			if m.InfraResources[k0].Name != src.InfraResources[k0].Name {
				m.InfraResources[k0].Name = src.InfraResources[k0].Name
				changed++
			}
			if m.InfraResources[k0].Value != src.InfraResources[k0].Value {
				m.InfraResources[k0].Value = src.InfraResources[k0].Value
				changed++
			}
			if m.InfraResources[k0].InfraMaxValue != src.InfraResources[k0].InfraMaxValue {
				m.InfraResources[k0].InfraMaxValue = src.InfraResources[k0].InfraMaxValue
				changed++
			}
			if m.InfraResources[k0].QuotaMaxValue != src.InfraResources[k0].QuotaMaxValue {
				m.InfraResources[k0].QuotaMaxValue = src.InfraResources[k0].QuotaMaxValue
				changed++
			}
			if m.InfraResources[k0].Description != src.InfraResources[k0].Description {
				m.InfraResources[k0].Description = src.InfraResources[k0].Description
				changed++
			}
			if m.InfraResources[k0].Units != src.InfraResources[k0].Units {
				m.InfraResources[k0].Units = src.InfraResources[k0].Units
				changed++
			}
			if m.InfraResources[k0].AlertThreshold != src.InfraResources[k0].AlertThreshold {
				m.InfraResources[k0].AlertThreshold = src.InfraResources[k0].AlertThreshold
				changed++
			}
		}
	} else if m.InfraResources != nil {
		m.InfraResources = nil
		changed++
	}
	return changed
}

func (m *ClusterResourcesReq) DeepCopyIn(src *ClusterResourcesReq) {
	if src.CloudletKey != nil {
		var tmp_CloudletKey CloudletKey
		tmp_CloudletKey.DeepCopyIn(src.CloudletKey)
		m.CloudletKey = &tmp_CloudletKey
	} else {
		m.CloudletKey = nil
	}
	if src.VmResources != nil {
		m.VmResources = make([]VMResource, len(src.VmResources), len(src.VmResources))
		for ii, s := range src.VmResources {
			m.VmResources[ii].DeepCopyIn(&s)
		}
	} else {
		m.VmResources = nil
	}
	if src.InfraResources != nil {
		m.InfraResources = make(map[string]*InfraResource)
		for k, v := range src.InfraResources {
			var tmp_v InfraResource
			tmp_v.DeepCopyIn(v)
			m.InfraResources[k] = &tmp_v
		}
	} else {
		m.InfraResources = nil
	}
}

// Helper method to check that enums have valid values
func (m *ClusterResourcesReq) ValidateEnums() error {
	if m.CloudletKey != nil {
		if err := m.CloudletKey.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.VmResources {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *ClusterResourcesReq) ClearTagged(tags map[string]struct{}) {
	if s.CloudletKey != nil {
		s.CloudletKey.ClearTagged(tags)
	}
	if s.VmResources != nil {
		for ii := 0; ii < len(s.VmResources); ii++ {
			s.VmResources[ii].ClearTagged(tags)
		}
	}
}

func (m *ClusterResourceMetricReq) CopyInFields(src *ClusterResourceMetricReq) int {
	changed := 0
	if src.CloudletKey != nil {
		if m.CloudletKey == nil {
			m.CloudletKey = &CloudletKey{}
		}
		if m.CloudletKey.Organization != src.CloudletKey.Organization {
			m.CloudletKey.Organization = src.CloudletKey.Organization
			changed++
		}
		if m.CloudletKey.Name != src.CloudletKey.Name {
			m.CloudletKey.Name = src.CloudletKey.Name
			changed++
		}
		if m.CloudletKey.FederatedOrganization != src.CloudletKey.FederatedOrganization {
			m.CloudletKey.FederatedOrganization = src.CloudletKey.FederatedOrganization
			changed++
		}
	} else if m.CloudletKey != nil {
		m.CloudletKey = nil
		changed++
	}
	if src.ResMetric != nil {
		if m.ResMetric == nil {
			m.ResMetric = &Metric{}
		}
		if m.ResMetric.Name != src.ResMetric.Name {
			m.ResMetric.Name = src.ResMetric.Name
			changed++
		}
		if m.ResMetric.Timestamp.Seconds != src.ResMetric.Timestamp.Seconds {
			m.ResMetric.Timestamp.Seconds = src.ResMetric.Timestamp.Seconds
			changed++
		}
		if m.ResMetric.Timestamp.Nanos != src.ResMetric.Timestamp.Nanos {
			m.ResMetric.Timestamp.Nanos = src.ResMetric.Timestamp.Nanos
			changed++
		}
		if src.ResMetric.Tags != nil {
			m.ResMetric.Tags = src.ResMetric.Tags
			changed++
		} else if m.ResMetric.Tags != nil {
			m.ResMetric.Tags = nil
			changed++
		}
		if src.ResMetric.Vals != nil {
			m.ResMetric.Vals = src.ResMetric.Vals
			changed++
		} else if m.ResMetric.Vals != nil {
			m.ResMetric.Vals = nil
			changed++
		}
	} else if m.ResMetric != nil {
		m.ResMetric = nil
		changed++
	}
	if src.VmResources != nil {
		m.VmResources = src.VmResources
		changed++
	} else if m.VmResources != nil {
		m.VmResources = nil
		changed++
	}
	return changed
}

func (m *ClusterResourceMetricReq) DeepCopyIn(src *ClusterResourceMetricReq) {
	if src.CloudletKey != nil {
		var tmp_CloudletKey CloudletKey
		tmp_CloudletKey.DeepCopyIn(src.CloudletKey)
		m.CloudletKey = &tmp_CloudletKey
	} else {
		m.CloudletKey = nil
	}
	if src.ResMetric != nil {
		var tmp_ResMetric Metric
		tmp_ResMetric.DeepCopyIn(src.ResMetric)
		m.ResMetric = &tmp_ResMetric
	} else {
		m.ResMetric = nil
	}
	if src.VmResources != nil {
		m.VmResources = make([]VMResource, len(src.VmResources), len(src.VmResources))
		for ii, s := range src.VmResources {
			m.VmResources[ii].DeepCopyIn(&s)
		}
	} else {
		m.VmResources = nil
	}
}

// Helper method to check that enums have valid values
func (m *ClusterResourceMetricReq) ValidateEnums() error {
	if m.CloudletKey != nil {
		if err := m.CloudletKey.ValidateEnums(); err != nil {
			return err
		}
	}
	if m.ResMetric != nil {
		if err := m.ResMetric.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.VmResources {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *ClusterResourceMetricReq) ClearTagged(tags map[string]struct{}) {
	if s.CloudletKey != nil {
		s.CloudletKey.ClearTagged(tags)
	}
	if s.ResMetric != nil {
		s.ResMetric.ClearTagged(tags)
	}
	if s.VmResources != nil {
		for ii := 0; ii < len(s.VmResources); ii++ {
			s.VmResources[ii].ClearTagged(tags)
		}
	}
}

func (m *NameSanitizeReq) CopyInFields(src *NameSanitizeReq) int {
	changed := 0
	if src.CloudletKey != nil {
		if m.CloudletKey == nil {
			m.CloudletKey = &CloudletKey{}
		}
		if m.CloudletKey.Organization != src.CloudletKey.Organization {
			m.CloudletKey.Organization = src.CloudletKey.Organization
			changed++
		}
		if m.CloudletKey.Name != src.CloudletKey.Name {
			m.CloudletKey.Name = src.CloudletKey.Name
			changed++
		}
		if m.CloudletKey.FederatedOrganization != src.CloudletKey.FederatedOrganization {
			m.CloudletKey.FederatedOrganization = src.CloudletKey.FederatedOrganization
			changed++
		}
	} else if m.CloudletKey != nil {
		m.CloudletKey = nil
		changed++
	}
	if m.Message != src.Message {
		m.Message = src.Message
		changed++
	}
	return changed
}

func (m *NameSanitizeReq) DeepCopyIn(src *NameSanitizeReq) {
	if src.CloudletKey != nil {
		var tmp_CloudletKey CloudletKey
		tmp_CloudletKey.DeepCopyIn(src.CloudletKey)
		m.CloudletKey = &tmp_CloudletKey
	} else {
		m.CloudletKey = nil
	}
	m.Message = src.Message
}

// Helper method to check that enums have valid values
func (m *NameSanitizeReq) ValidateEnums() error {
	if m.CloudletKey != nil {
		if err := m.CloudletKey.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *NameSanitizeReq) ClearTagged(tags map[string]struct{}) {
	if s.CloudletKey != nil {
		s.CloudletKey.ClearTagged(tags)
	}
}

func (m *StreamStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheUpdateType != 0 {
		n += 1 + sovCcrm(uint64(m.CacheUpdateType))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCcrm(uint64(l))
	}
	return n
}

func (m *InfraResourceMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InfraResources) > 0 {
		for k, v := range m.InfraResources {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCcrm(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCcrm(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCcrm(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ClusterResourcesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudletKey != nil {
		l = m.CloudletKey.Size()
		n += 1 + l + sovCcrm(uint64(l))
	}
	if len(m.VmResources) > 0 {
		for _, e := range m.VmResources {
			l = e.Size()
			n += 1 + l + sovCcrm(uint64(l))
		}
	}
	if len(m.InfraResources) > 0 {
		for k, v := range m.InfraResources {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCcrm(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCcrm(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCcrm(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ClusterResourceMetricReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudletKey != nil {
		l = m.CloudletKey.Size()
		n += 1 + l + sovCcrm(uint64(l))
	}
	if m.ResMetric != nil {
		l = m.ResMetric.Size()
		n += 1 + l + sovCcrm(uint64(l))
	}
	if len(m.VmResources) > 0 {
		for _, e := range m.VmResources {
			l = e.Size()
			n += 1 + l + sovCcrm(uint64(l))
		}
	}
	return n
}

func (m *NameSanitizeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudletKey != nil {
		l = m.CloudletKey.Size()
		n += 1 + l + sovCcrm(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCcrm(uint64(l))
	}
	return n
}

func sovCcrm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCcrm(x uint64) (n int) {
	return sovCcrm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcrm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheUpdateType", wireType)
			}
			m.CacheUpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheUpdateType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCcrm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCcrm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcrm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcrm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfraResourceMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcrm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfraResourceMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfraResourceMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfraResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcrm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcrm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfraResources == nil {
				m.InfraResources = make(map[string]*InfraResource)
			}
			var mapkey string
			var mapvalue *InfraResource
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCcrm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCcrm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCcrm
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCcrm
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCcrm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCcrm
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCcrm
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &InfraResource{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCcrm(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCcrm
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.InfraResources[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcrm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcrm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterResourcesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcrm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterResourcesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterResourcesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcrm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcrm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudletKey == nil {
				m.CloudletKey = &CloudletKey{}
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcrm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcrm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmResources = append(m.VmResources, VMResource{})
			if err := m.VmResources[len(m.VmResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfraResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcrm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcrm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfraResources == nil {
				m.InfraResources = make(map[string]*InfraResource)
			}
			var mapkey string
			var mapvalue *InfraResource
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCcrm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCcrm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCcrm
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCcrm
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCcrm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCcrm
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCcrm
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &InfraResource{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCcrm(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCcrm
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.InfraResources[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcrm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcrm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterResourceMetricReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcrm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterResourceMetricReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterResourceMetricReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcrm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcrm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudletKey == nil {
				m.CloudletKey = &CloudletKey{}
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResMetric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcrm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcrm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResMetric == nil {
				m.ResMetric = &Metric{}
			}
			if err := m.ResMetric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcrm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcrm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmResources = append(m.VmResources, VMResource{})
			if err := m.VmResources[len(m.VmResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcrm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcrm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameSanitizeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcrm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameSanitizeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameSanitizeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcrm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcrm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudletKey == nil {
				m.CloudletKey = &CloudletKey{}
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCcrm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCcrm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcrm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcrm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCcrm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCcrm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCcrm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCcrm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCcrm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCcrm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCcrm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCcrm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCcrm = fmt.Errorf("proto: unexpected end of group")
)
