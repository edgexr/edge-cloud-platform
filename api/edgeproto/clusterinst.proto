// Copyright 2022 MobiledgeX, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ClusterInst defines a kubernetes cluster on a particular Cloudlet

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "tools/protogen/protogen.proto";
import "result.proto";
import "flavor.proto";
import "resources.proto";
import "cluster.proto";
import "cloudletkey.proto";
import "common.proto";
import "infraresources.proto";
import "gogoproto/gogo.proto";
import "dme/loc.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// (_deprecated_) Cluster Instance V1 unique key
//
// ClusterInstKeyV1 uniquely identifies a Cluster Instance (ClusterInst) or Cluster Instance state (ClusterInstInfo).
message ClusterInstKeyV1 {
  // Name of Cluster
  ClusterKeyV1 cluster_key = 1 [(gogoproto.nullable) = false];
  // Name of Cloudlet on which the Cluster is instantiated
  CloudletKey cloudlet_key = 2 [(gogoproto.nullable) = false, (protogen.refers_to) = "Cloudlet"];
  // Name of Developer organization that this cluster belongs to
  string organization = 3 [(protogen.keytag) = "clusterorg", (protogen.skip_keytag_conflict_check) = true];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// (_deprecated_) Cluster Instance unique key V2
//
// ClusterInstKey uniquely identifies a Cluster Instance (ClusterInst) or Cluster Instance state (ClusterInstInfo).
message ClusterInstKeyV2 {
  // Name of Cluster
  ClusterKey cluster_key = 1 [(gogoproto.nullable) = false];
  // Name of Cloudlet on which the Cluster is instantiated
  CloudletKey cloudlet_key = 2 [(gogoproto.nullable) = false, (protogen.refers_to) = "Cloudlet"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// Cluster Instance
//
// ClusterInst is an instance of a Cluster on a Cloudlet. 
// It is defined by a Cluster, Cloudlet, and Developer key. 
message ClusterInst {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique key
  // required: true
  ClusterKey key = 2 [(gogoproto.nullable) = false];
  // Cloudlet on which the cluster is deployed
  CloudletKey cloudlet_key = 41 [(gogoproto.nullable) = false, (protogen.refers_to) = "Cloudlet"];
  // Zone on which the instance is deployed
  ZoneKey zone_key = 43 [(gogoproto.nullable) = false];
  // Flavor for the VM or the primary Kubernetes node pool
  FlavorKey flavor = 3 [(gogoproto.nullable) = false, (protogen.backend) = true];
  // Liveness of instance (see Liveness)
  Liveness liveness = 9 [(protogen.backend) = true];
  // Auto is set to true when automatically created by back-end (internal use only)
  bool auto = 10 [(protogen.backend) = true];
  // State of the cluster instance
  TrackedState state = 4 [(protogen.backend) = true];
  // Any errors trying to create, update, or delete the ClusterInst on the Cloudlet.
  repeated string errors = 5 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Override actions to CRM
  CRMOverride crm_override = 6;
  // IP access type (RootLB Type)
  IpAccess ip_access = 7 [(protogen.backend) = true];
  // Allocated IP for dedicated access
  string allocated_ip = 8 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // (_deprecated_) Replaced by NodePools.NodeResources.InfraNodeFlavor. Cloudlet specific node flavor.
  string node_flavor = 11 [(protogen.backend) = true];
  // Deployment type (kubernetes or docker)
  string deployment = 15 [(protogen.backend) = true];
  // Number of k8s masters (In case of docker deployment, this field is not required)
  uint32 num_masters = 13;
  // (_deprecated_) Replaced by NodePools.NumNodes. Number of k8s nodes.
  uint32 num_nodes = 14;
  // StatusInfo (16) (Deprecated) status is used to reflect progress of creation or other events
  reserved 16;
  // (_deprecated_) Replaced by NodePools.NodeResources.ExternalVolumeSize. Size of external volume to be attached to nodes. This is for the root partition
  uint64 external_volume_size = 17 [(protogen.backend) = true];
  // Auto scale policy name
  string auto_scale_policy = 18 [(protogen.refers_to) = "AutoScalePolicy"];
  // Optional Resource AZ if any
  string availability_zone = 19;
  // Optional resource specific image to launch
  string image_name = 20  [(protogen.backend) = true];
  // If ClusterInst is reservable
  bool reservable = 21;
  // For reservable EdgeCloud ClusterInsts, the current developer tenant
  string reserved_by = 22 [(protogen.backend) = true];
  // Size of an optional shared volume to be mounted on the master
  uint64 shared_volume_size = 23;
  // Generic flavor for k8s master VM when worker nodes > 0
  string master_node_flavor = 25 [(protogen.backend) = true];
  // Prevents cleanup of resources on failure within CRM, used for diagnostic purposes
  bool skip_crm_cleanup_on_failure = 26;
  // Optional Resources required by OS flavor if any
  string opt_res = 27 [(protogen.backend) = true];
  // Resources used by cluster
  InfraResources resources = 28 [(protogen.backend) = true, (gogoproto.nullable) = false];
  // Created at time
  distributed_match_engine.Timestamp created_at = 29 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // Updated at time
  distributed_match_engine.Timestamp updated_at = 30 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // For reservable ClusterInsts, when the last reservation ended
  distributed_match_engine.Timestamp reservation_ended_at = 31 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // Multi-tenant kubernetes cluster
  bool multi_tenant = 32;
  // networks to connect to
  repeated string networks = 33 [(protogen.refers_to) = "Network"];
  // Preparing to be deleted
  bool delete_prepare = 34 [(protogen.backend) = true]; 
  // DNS label that is unique within the cloudlet and among other AppInsts/ClusterInsts
  string dns_label = 35 [(protogen.backend) = true];
  // FQDN is a globally unique DNS id for the ClusterInst
  string fqdn = 36 [(protogen.backend) = true];
  // Static startup FQDN is an immutable globally unique name, set when object is created
  string static_fqdn = 39 [(protogen.backend) = true];
  // Enable IPv6 addressing, requires platform and cloudlet support, defaults to platform setting
  bool enable_ipv6 = 37;
  // Universally unique object ID
  string obj_id = 38 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // internal compatibility version
  uint32 compatibility_version = 40 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Annotations
  map<string, string> annotations = 42;
  // database version model ID
  int32 db_model_id = 44 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Node resources for VM/docker deployments
  NodeResources node_resources = 45;
  // Node Pool specifications for Kubernetes clusters
  repeated NodePool node_pools = 46;
  // Annotations added by the implementing infrastructure
  map<string, string> infra_annotations = 47 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Kubernetes version of cluster if applicable
  string kubernetes_version = 48;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_streamout) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_stream_key) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_custom_update) = true;
  option (protogen.notify_filter_cloudlet_key) = true;
  option (protogen.noconfig) = "Liveness,Auto,MasterNodeFlavor,NodeFlavor,ExternalVolumeSize,AllocatedIp,ReservedBy,State,Errors,Resources,AvailabilityZone,CreatedAt,UpdatedAt,OptRes,ReservationEndedAt,DeletePrepare,DnsLabel,Fqdn,StaticFqdn,CompatibilityVersion,CloudletKey";
  option (protogen.alias) = "cluster=Key.Name,cloudlet=CloudletKey.Name,cloudletorg=CloudletKey.Organization,federatedorg=CloudletKey.FederatedOrganization,clusterorg=Key.Organization,flavor=Flavor.Name";
  option (protogen.mc2_target_zone) = "ZoneKey";
  option (protogen.uses_org) = "custom";
}

// Parameters for selecting reservable ClusterInsts to delete
message IdleReservableClusterInsts {
  // Idle time (duration)
  int64 idle_time = 1 [(gogoproto.casttype) = "Duration"];
  option (protogen.singular_data) = true;
  option (protogen.uses_org) = "none";
}

message ClusterResourceUsage {
  // Cluster Key
  ClusterKey key = 1 [(gogoproto.nullable) = false];
  // Zone Key
  ZoneKey zone_key = 2 [(gogoproto.nullable) = false];
  // Cloudlet Key
  CloudletKey cloudlet_key = 3 [(gogoproto.nullable) = false];
  // Total resource info
  repeated InfraResource total_resources = 4;
  // CPU Pool resource info for Kubernetes clusters
  repeated InfraResource cpu_pools_resources = 5;
  // GPU Pool resource info for Kubernetes clusters
  repeated InfraResource gpu_pools_resources = 6;
  // Resource score, higher score means more available resources
  uint64 resource_score = 7;
  // CPU Pool Resource score for Kubernetes clusters, higher score means more available resources
  uint64 cpu_pools_resource_score = 8;
  // GPU Pool Resource score for Kubernetes clusters, higher score means more available resources
  uint64 gpu_pools_resource_score = 9;
  option (protogen.alias) = "cluster=Key.Name,clusterorg=Key.Organization";
}

service ClusterInstApi {
  // Create Cluster Instance. Creates an instance of a Cluster on a Cloudlet,
  // defined by a Cluster Key and a Cloudlet Key. ClusterInst is a collection of
  // compute resources on a Cloudlet on which AppInsts are deployed.
  rpc CreateClusterInst(ClusterInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/create/clusterinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceClusterInsts,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Delete Cluster Instance. Deletes an instance of a Cluster deployed on a Cloudlet.
  rpc DeleteClusterInst(ClusterInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/delete/clusterinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceClusterInsts,ActionManage,Key.Organization";
  }
  // Update Cluster Instance. Updates an instance of a Cluster deployed on a Cloudlet.
  rpc UpdateClusterInst(ClusterInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/update/clusterinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceClusterInsts,ActionManage,Key.Organization";
    option (protogen.method_noconfig) = "Flavor,NumMasters,AvailabilityZone,Reservable,SharedVolumeSize,IpAccess,Deployment,ImageName,Networks,MultiTenant,CloudletKey,NodeResources,NodePools:#.Name,NodePools:#.NodeResources,KubernetesVersion";
  }
  // Show Cluster Instances. Lists all the cluster instances managed by Edge Controller.
  rpc ShowClusterInst(ClusterInst) returns (stream ClusterInst) {
    option (google.api.http) = {
      post: "/show/clusterinst"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceClusterInsts,ActionView,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Cleanup Reservable Cluster Instances. Deletes reservable cluster instances that are not in use.
  rpc DeleteIdleReservableClusterInsts(IdleReservableClusterInsts) returns (Result) {
    option (google.api.http) = {
      post: "/delete/idlereservableclusterinsts"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceClusterInsts,ActionManage,";
  }
  // Show Cluster resource information
  rpc ShowClusterResourceUsage(ClusterInst) returns (stream ClusterResourceUsage) {
    option (google.api.http) = {
      post: "/show/clusterinst/resource/usage"
      body: "*"
    };
    option (protogen.non_standard_show) = true;
    option (protogen.mc2_api) = "ResourceClusterInsts,ActionView,Key.Organization";
    option (protogen.method_not_required) = "Key.Organization,Key.Name";
    option (protogen.mc2_show_custom_authz) = true;
  }
}

// ClusterInstInfo provides information from the Cloudlet Resource Manager about the state of the ClusterInst on the Cloudlet. Whereas the ClusterInst defines the intent of instantiating a Cluster on a Cloudlet, the ClusterInstInfo defines the current state of trying to apply that intent on the physical resources of the Cloudlet.
message ClusterInstInfo {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  ClusterKey key = 2 [(gogoproto.nullable) = false];
  // Id of client assigned by server (internal use only)
  int64 notify_id = 3 [(protogen.hidetag) = "nocmp"];
  // State of the cluster instance
  TrackedState state = 4;
  // Any errors trying to create, update, or delete the ClusterInst on the Cloudlet.
  repeated string errors = 5;
  // status is used to reflect progress of creation or other events
  StatusInfo status = 6 [(protogen.backend) = true, (gogoproto.nullable) = false];
  // Resources allocated to this cluster
  InfraResources resources = 7 [(protogen.backend) = true, (gogoproto.nullable) = false];
  // Annotations added by the implementing infrastructure
  map<string, string> infra_annotations = 45 [(protogen.backend) = true];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.parent_obj_name) = "ClusterInst";
  option (protogen.generate_wait_for_state) = "TrackedState";
  option (protogen.notify_cache) = true;
  option (protogen.notify_flush) = true;
  option (protogen.uses_org) = "none";
  option (protogen.ignore_refers_to) = true;
}

service ClusterInstInfoApi {
  // Show Cluster instances state.
  rpc ShowClusterInstInfo(ClusterInstInfo) returns (stream ClusterInstInfo) {
    option (google.api.http) = {
      post: "/show/clusterinstinfo"
      body: "*"
    };
  }
}
