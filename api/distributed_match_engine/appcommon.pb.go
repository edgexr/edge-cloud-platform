// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: appcommon.proto

package distributed_match_engine

import (
	"encoding/json"
	"errors"
	fmt "fmt"
	"github.com/edgexr/edge-cloud-platform/pkg/util"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	"strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Layer4 Protocol
//
// LProto indicates which protocol to use for accessing an application on a particular port. This is required by Kubernetes for port mapping.
//
// 0: `L_PROTO_UNKNOWN`
// 1: `L_PROTO_TCP`
// 2: `L_PROTO_UDP`
// 3: `L_PROTO_HTTP`
type LProto int32

const (
	// Unknown protocol
	LProto_L_PROTO_UNKNOWN LProto = 0
	// TCP (L4) protocol
	LProto_L_PROTO_TCP LProto = 1
	// UDP (L4) protocol
	LProto_L_PROTO_UDP LProto = 2
	// HTTP (L7) protocol
	LProto_L_PROTO_HTTP LProto = 3
)

var LProto_name = map[int32]string{
	0: "L_PROTO_UNKNOWN",
	1: "L_PROTO_TCP",
	2: "L_PROTO_UDP",
	3: "L_PROTO_HTTP",
}

var LProto_value = map[string]int32{
	"L_PROTO_UNKNOWN": 0,
	"L_PROTO_TCP":     1,
	"L_PROTO_UDP":     2,
	"L_PROTO_HTTP":    3,
}

func (x LProto) String() string {
	return proto.EnumName(LProto_name, int32(x))
}

func (LProto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdc58d2114e550de, []int{0}
}

// Health check status
//
// Health check status gets set by external, or rootLB health check
type HealthCheck int32

const (
	// Health Check is unknown
	HealthCheck_HEALTH_CHECK_UNKNOWN HealthCheck = 0
	// Health Check failure due to RootLB being offline
	HealthCheck_HEALTH_CHECK_ROOTLB_OFFLINE HealthCheck = 1
	// Health Check failure due to Backend server being unavailable
	HealthCheck_HEALTH_CHECK_SERVER_FAIL HealthCheck = 2
	// Health Check is ok
	HealthCheck_HEALTH_CHECK_OK HealthCheck = 3
	// Health Check failure due to Cloudlet Offline
	HealthCheck_HEALTH_CHECK_CLOUDLET_OFFLINE HealthCheck = 4
)

var HealthCheck_name = map[int32]string{
	0: "HEALTH_CHECK_UNKNOWN",
	1: "HEALTH_CHECK_ROOTLB_OFFLINE",
	2: "HEALTH_CHECK_SERVER_FAIL",
	3: "HEALTH_CHECK_OK",
	4: "HEALTH_CHECK_CLOUDLET_OFFLINE",
}

var HealthCheck_value = map[string]int32{
	"HEALTH_CHECK_UNKNOWN":          0,
	"HEALTH_CHECK_ROOTLB_OFFLINE":   1,
	"HEALTH_CHECK_SERVER_FAIL":      2,
	"HEALTH_CHECK_OK":               3,
	"HEALTH_CHECK_CLOUDLET_OFFLINE": 4,
}

func (x HealthCheck) String() string {
	return proto.EnumName(HealthCheck_name, int32(x))
}

func (HealthCheck) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdc58d2114e550de, []int{1}
}

// CloudletState is the state of the Cloudlet.
type CloudletState int32

const (
	// Unknown
	CloudletState_CLOUDLET_STATE_UNKNOWN CloudletState = 0
	// Create/Delete/Update encountered errors (see Errors field of CloudletInfo)
	CloudletState_CLOUDLET_STATE_ERRORS CloudletState = 1
	// Cloudlet is created and ready
	CloudletState_CLOUDLET_STATE_READY CloudletState = 2
	// Cloudlet is offline (unreachable)
	CloudletState_CLOUDLET_STATE_OFFLINE CloudletState = 3
	// Cloudlet is not present
	CloudletState_CLOUDLET_STATE_NOT_PRESENT CloudletState = 4
	// Cloudlet is initializing
	CloudletState_CLOUDLET_STATE_INIT CloudletState = 5
	// Cloudlet is upgrading
	CloudletState_CLOUDLET_STATE_UPGRADE CloudletState = 6
	// Cloudlet needs data to synchronize
	CloudletState_CLOUDLET_STATE_NEED_SYNC CloudletState = 7
)

var CloudletState_name = map[int32]string{
	0: "CLOUDLET_STATE_UNKNOWN",
	1: "CLOUDLET_STATE_ERRORS",
	2: "CLOUDLET_STATE_READY",
	3: "CLOUDLET_STATE_OFFLINE",
	4: "CLOUDLET_STATE_NOT_PRESENT",
	5: "CLOUDLET_STATE_INIT",
	6: "CLOUDLET_STATE_UPGRADE",
	7: "CLOUDLET_STATE_NEED_SYNC",
}

var CloudletState_value = map[string]int32{
	"CLOUDLET_STATE_UNKNOWN":     0,
	"CLOUDLET_STATE_ERRORS":      1,
	"CLOUDLET_STATE_READY":       2,
	"CLOUDLET_STATE_OFFLINE":     3,
	"CLOUDLET_STATE_NOT_PRESENT": 4,
	"CLOUDLET_STATE_INIT":        5,
	"CLOUDLET_STATE_UPGRADE":     6,
	"CLOUDLET_STATE_NEED_SYNC":   7,
}

func (x CloudletState) String() string {
	return proto.EnumName(CloudletState_name, int32(x))
}

func (CloudletState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdc58d2114e550de, []int{2}
}

// Cloudlet Maintenance States
//
// Maintenance allows for planned downtimes of Cloudlets.
// These states involve message exchanges between the Controller,
// the AutoProv service, and the CRM. Certain states are only set
// by certain actors.
type MaintenanceState int32

const (
	// Normal operational state
	MaintenanceState_NORMAL_OPERATION MaintenanceState = 0
	// Request start of maintenance
	MaintenanceState_MAINTENANCE_START MaintenanceState = 1
	// Trigger failover for any HA AppInsts
	MaintenanceState_FAILOVER_REQUESTED MaintenanceState = 2
	// Failover done
	MaintenanceState_FAILOVER_DONE MaintenanceState = 3
	// Some errors encountered during maintenance failover
	MaintenanceState_FAILOVER_ERROR MaintenanceState = 4
	// Request start of maintenance without AutoProv failover
	MaintenanceState_MAINTENANCE_START_NO_FAILOVER MaintenanceState = 5
	// Request CRM to transition to maintenance
	MaintenanceState_CRM_REQUESTED MaintenanceState = 6
	// CRM request done and under maintenance
	MaintenanceState_CRM_UNDER_MAINTENANCE MaintenanceState = 7
	// CRM failed to go into maintenance
	MaintenanceState_CRM_ERROR MaintenanceState = 8
	// Request CRM to transition to normal operation
	MaintenanceState_NORMAL_OPERATION_INIT MaintenanceState = 9
	// Under maintenance
	MaintenanceState_UNDER_MAINTENANCE MaintenanceState = 31
)

var MaintenanceState_name = map[int32]string{
	0:  "NORMAL_OPERATION",
	1:  "MAINTENANCE_START",
	2:  "FAILOVER_REQUESTED",
	3:  "FAILOVER_DONE",
	4:  "FAILOVER_ERROR",
	5:  "MAINTENANCE_START_NO_FAILOVER",
	6:  "CRM_REQUESTED",
	7:  "CRM_UNDER_MAINTENANCE",
	8:  "CRM_ERROR",
	9:  "NORMAL_OPERATION_INIT",
	31: "UNDER_MAINTENANCE",
}

var MaintenanceState_value = map[string]int32{
	"NORMAL_OPERATION":              0,
	"MAINTENANCE_START":             1,
	"FAILOVER_REQUESTED":            2,
	"FAILOVER_DONE":                 3,
	"FAILOVER_ERROR":                4,
	"MAINTENANCE_START_NO_FAILOVER": 5,
	"CRM_REQUESTED":                 6,
	"CRM_UNDER_MAINTENANCE":         7,
	"CRM_ERROR":                     8,
	"NORMAL_OPERATION_INIT":         9,
	"UNDER_MAINTENANCE":             31,
}

func (x MaintenanceState) String() string {
	return proto.EnumName(MaintenanceState_name, int32(x))
}

func (MaintenanceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdc58d2114e550de, []int{3}
}

// ReplyStatus
type ReplyStatus int32

const (
	// Undefined status
	ReplyStatus_RS_UNDEFINED ReplyStatus = 0
	// Successful status
	ReplyStatus_RS_SUCCESS ReplyStatus = 1
	// Failure status
	ReplyStatus_RS_FAIL ReplyStatus = 2
)

var ReplyStatus_name = map[int32]string{
	0: "RS_UNDEFINED",
	1: "RS_SUCCESS",
	2: "RS_FAIL",
}

var ReplyStatus_value = map[string]int32{
	"RS_UNDEFINED": 0,
	"RS_SUCCESS":   1,
	"RS_FAIL":      2,
}

func (x ReplyStatus) String() string {
	return proto.EnumName(ReplyStatus_name, int32(x))
}

func (ReplyStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdc58d2114e550de, []int{4}
}

// Application Port
//
// AppPort describes an L4 public access port/path mapping. This is used to track external to internal mappings for access via a shared load balancer or reverse proxy.
type AppPort struct {
	// TCP (L4) or UDP (L4) protocol
	Proto LProto `protobuf:"varint,1,opt,name=proto,proto3,enum=distributed_match_engine.LProto" json:"proto,omitempty"`
	// Container port
	InternalPort int32 `protobuf:"varint,2,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	// Public facing port for TCP/UDP (may be mapped on shared LB reverse proxy)
	PublicPort int32 `protobuf:"varint,3,opt,name=public_port,json=publicPort,proto3" json:"public_port,omitempty"`
	// FQDN prefix to append to base FQDN in FindCloudlet response. May be empty.
	FqdnPrefix string `protobuf:"bytes,5,opt,name=fqdn_prefix,json=fqdnPrefix,proto3" json:"fqdn_prefix,omitempty"`
	// A non-zero end port indicates a port range from internal port to end port, inclusive.
	EndPort int32 `protobuf:"varint,6,opt,name=end_port,json=endPort,proto3" json:"end_port,omitempty"`
	// TLS termination for this port
	Tls bool `protobuf:"varint,7,opt,name=tls,proto3" json:"tls,omitempty"`
	// Use nginx proxy for this port if you really need a transparent proxy (udp only)
	Nginx bool `protobuf:"varint,8,opt,name=nginx,proto3" json:"nginx,omitempty"`
	// Maximum datagram size (udp only)
	MaxPktSize           int64    `protobuf:"varint,9,opt,name=max_pkt_size,json=maxPktSize,proto3" json:"max_pkt_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppPort) Reset()         { *m = AppPort{} }
func (m *AppPort) String() string { return proto.CompactTextString(m) }
func (*AppPort) ProtoMessage()    {}
func (*AppPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdc58d2114e550de, []int{0}
}
func (m *AppPort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppPort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppPort.Merge(m, src)
}
func (m *AppPort) XXX_Size() int {
	return m.Size()
}
func (m *AppPort) XXX_DiscardUnknown() {
	xxx_messageInfo_AppPort.DiscardUnknown(m)
}

var xxx_messageInfo_AppPort proto.InternalMessageInfo

// DeviceInfoStatic
type DeviceInfoStatic struct {
	// Android or iOS
	DeviceOs string `protobuf:"bytes,1,opt,name=device_os,json=deviceOs,proto3" json:"device_os,omitempty"`
	// Device model
	DeviceModel          string   `protobuf:"bytes,2,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceInfoStatic) Reset()         { *m = DeviceInfoStatic{} }
func (m *DeviceInfoStatic) String() string { return proto.CompactTextString(m) }
func (*DeviceInfoStatic) ProtoMessage()    {}
func (*DeviceInfoStatic) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdc58d2114e550de, []int{1}
}
func (m *DeviceInfoStatic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceInfoStatic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceInfoStatic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceInfoStatic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfoStatic.Merge(m, src)
}
func (m *DeviceInfoStatic) XXX_Size() int {
	return m.Size()
}
func (m *DeviceInfoStatic) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfoStatic.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfoStatic proto.InternalMessageInfo

// DeviceInfoDynamic
type DeviceInfoDynamic struct {
	// LTE, 5G, etc.
	DataNetworkType string `protobuf:"bytes,1,opt,name=data_network_type,json=dataNetworkType,proto3" json:"data_network_type,omitempty"`
	// Device signal strength
	SignalStrength uint64 `protobuf:"varint,2,opt,name=signal_strength,json=signalStrength,proto3" json:"signal_strength,omitempty"`
	// Carrier name (can be different from cloudlet org if using "")
	CarrierName          string   `protobuf:"bytes,3,opt,name=carrier_name,json=carrierName,proto3" json:"carrier_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceInfoDynamic) Reset()         { *m = DeviceInfoDynamic{} }
func (m *DeviceInfoDynamic) String() string { return proto.CompactTextString(m) }
func (*DeviceInfoDynamic) ProtoMessage()    {}
func (*DeviceInfoDynamic) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdc58d2114e550de, []int{2}
}
func (m *DeviceInfoDynamic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceInfoDynamic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceInfoDynamic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceInfoDynamic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfoDynamic.Merge(m, src)
}
func (m *DeviceInfoDynamic) XXX_Size() int {
	return m.Size()
}
func (m *DeviceInfoDynamic) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfoDynamic.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfoDynamic proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("distributed_match_engine.LProto", LProto_name, LProto_value)
	proto.RegisterEnum("distributed_match_engine.HealthCheck", HealthCheck_name, HealthCheck_value)
	proto.RegisterEnum("distributed_match_engine.CloudletState", CloudletState_name, CloudletState_value)
	proto.RegisterEnum("distributed_match_engine.MaintenanceState", MaintenanceState_name, MaintenanceState_value)
	proto.RegisterEnum("distributed_match_engine.ReplyStatus", ReplyStatus_name, ReplyStatus_value)
	proto.RegisterType((*AppPort)(nil), "distributed_match_engine.AppPort")
	proto.RegisterType((*DeviceInfoStatic)(nil), "distributed_match_engine.DeviceInfoStatic")
	proto.RegisterType((*DeviceInfoDynamic)(nil), "distributed_match_engine.DeviceInfoDynamic")
}

func init() { proto.RegisterFile("appcommon.proto", fileDescriptor_fdc58d2114e550de) }

var fileDescriptor_fdc58d2114e550de = []byte{
	// 874 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x4d, 0x73, 0xe3, 0x44,
	0x10, 0x8d, 0xfc, 0x11, 0xdb, 0xed, 0x24, 0x9e, 0x4c, 0x12, 0x56, 0xeb, 0xb0, 0x8e, 0x13, 0x0e,
	0xb8, 0x7c, 0xc8, 0x56, 0x41, 0x15, 0x27, 0x2e, 0x5a, 0x69, 0x82, 0x4d, 0x6c, 0x49, 0x3b, 0x92,
	0xa1, 0xf6, 0x34, 0xa5, 0x48, 0x13, 0x47, 0x15, 0x5b, 0x12, 0xf2, 0x18, 0x92, 0xfd, 0x0b, 0x5c,
	0xa8, 0xe2, 0xce, 0x6f, 0xe1, 0xb8, 0x47, 0x7e, 0x02, 0xe4, 0x0f, 0x70, 0xe3, 0x4c, 0x8d, 0x24,
	0x67, 0x1d, 0xef, 0xee, 0x6d, 0xfc, 0xde, 0xeb, 0xd7, 0xdd, 0x6f, 0xc6, 0x82, 0x96, 0x97, 0x24,
	0x7e, 0x3c, 0x9f, 0xc7, 0xd1, 0x79, 0x92, 0xc6, 0x22, 0xc6, 0x6a, 0x10, 0x2e, 0x44, 0x1a, 0x5e,
	0x2d, 0x05, 0x0f, 0xd8, 0xdc, 0x13, 0xfe, 0x0d, 0xe3, 0xd1, 0x34, 0x8c, 0x78, 0xbb, 0x3b, 0x8d,
	0xe3, 0xe9, 0x8c, 0xbf, 0xcc, 0x74, 0x57, 0xcb, 0xeb, 0x97, 0x01, 0x5f, 0xf8, 0x69, 0x98, 0x88,
	0x38, 0xcd, 0x6b, 0xdb, 0x98, 0x07, 0x53, 0x9e, 0x1d, 0xa7, 0xbc, 0xf0, 0x3b, 0xfb, 0xbd, 0x04,
	0x35, 0x2d, 0x49, 0xec, 0x38, 0x15, 0xf8, 0x1b, 0xa8, 0x66, 0xa0, 0xaa, 0x74, 0x95, 0xde, 0xde,
	0x57, 0xdd, 0xf3, 0x4f, 0xf5, 0x3a, 0x1f, 0xd9, 0x52, 0x47, 0x73, 0x39, 0xfe, 0x02, 0x76, 0xc3,
	0x48, 0xf0, 0x34, 0xf2, 0x66, 0x2c, 0x89, 0x53, 0xa1, 0x96, 0xba, 0x4a, 0xaf, 0x4a, 0x77, 0x56,
	0x60, 0x66, 0x7e, 0x02, 0xcd, 0x64, 0x79, 0x35, 0x0b, 0xfd, 0x5c, 0x52, 0xce, 0x24, 0x90, 0x43,
	0x2b, 0xc1, 0xf5, 0x4f, 0x41, 0xc4, 0x92, 0x94, 0x5f, 0x87, 0x77, 0x6a, 0xb5, 0xab, 0xf4, 0x1a,
	0x14, 0x24, 0x64, 0x67, 0x08, 0x7e, 0x0e, 0x75, 0x1e, 0x05, 0x79, 0xf9, 0x76, 0x56, 0x5e, 0xe3,
	0x51, 0x90, 0xd5, 0x22, 0x28, 0x8b, 0xd9, 0x42, 0xad, 0x75, 0x95, 0x5e, 0x9d, 0xca, 0x23, 0x3e,
	0x84, 0xaa, 0x1c, 0xf5, 0x4e, 0xad, 0x67, 0x58, 0xfe, 0x03, 0x77, 0x61, 0x67, 0xee, 0xdd, 0xb1,
	0xe4, 0x56, 0xb0, 0x45, 0xf8, 0x96, 0xab, 0x8d, 0xae, 0xd2, 0x2b, 0x53, 0x98, 0x7b, 0x77, 0xf6,
	0xad, 0x70, 0xc2, 0xb7, 0xfc, 0xfb, 0x4a, 0xbd, 0x82, 0xaa, 0x67, 0x14, 0x90, 0xc1, 0x7f, 0x0e,
	0x7d, 0x3e, 0x8c, 0xae, 0x63, 0x47, 0x78, 0x22, 0xf4, 0xf1, 0x31, 0x34, 0x82, 0x0c, 0x63, 0xf1,
	0x22, 0x4b, 0xa8, 0x41, 0xeb, 0x39, 0x60, 0x2d, 0xf0, 0x29, 0xec, 0x14, 0xe4, 0x3c, 0x0e, 0xf8,
	0x2c, 0x4b, 0xa0, 0x41, 0x9b, 0x39, 0x36, 0x96, 0xd0, 0xd9, 0xaf, 0x0a, 0xec, 0xbf, 0x37, 0x35,
	0xee, 0x23, 0x6f, 0x1e, 0xfa, 0xb8, 0x0f, 0xfb, 0x81, 0x27, 0x3c, 0x16, 0x71, 0xf1, 0x4b, 0x9c,
	0xde, 0x32, 0x71, 0x9f, 0xf0, 0xc2, 0xbd, 0x25, 0x09, 0x33, 0xc7, 0xdd, 0xfb, 0x84, 0xe3, 0x2f,
	0xa1, 0xb5, 0x08, 0xa7, 0x32, 0xe5, 0x85, 0x48, 0x79, 0x34, 0x15, 0x37, 0x59, 0x9f, 0x0a, 0xdd,
	0xcb, 0x61, 0xa7, 0x40, 0xe5, 0x34, 0xbe, 0x97, 0xa6, 0x21, 0x4f, 0x59, 0xe4, 0xcd, 0x79, 0x16,
	0x76, 0x83, 0x36, 0x0b, 0xcc, 0xf4, 0xe6, 0xbc, 0xff, 0x1a, 0xb6, 0xf3, 0x4b, 0xc4, 0x07, 0xd0,
	0x1a, 0x31, 0x9b, 0x5a, 0xae, 0xc5, 0x26, 0xe6, 0xa5, 0x69, 0xfd, 0x68, 0xa2, 0x2d, 0xdc, 0x82,
	0xe6, 0x0a, 0x74, 0x75, 0x1b, 0x29, 0xeb, 0xc0, 0xc4, 0xb0, 0x51, 0x09, 0x23, 0xd8, 0x59, 0x01,
	0x03, 0xd7, 0xb5, 0x51, 0xb9, 0xff, 0x87, 0x02, 0xcd, 0x01, 0xf7, 0x66, 0xe2, 0x46, 0xbf, 0xe1,
	0xfe, 0x2d, 0x56, 0xe1, 0x70, 0x40, 0xb4, 0x91, 0x3b, 0x60, 0xfa, 0x80, 0xe8, 0x97, 0x6b, 0xee,
	0x27, 0x70, 0xfc, 0x84, 0xa1, 0x96, 0xe5, 0x8e, 0x5e, 0x31, 0xeb, 0xe2, 0x62, 0x34, 0x34, 0x09,
	0x52, 0xf0, 0xe7, 0xa0, 0x3e, 0x11, 0x38, 0x84, 0xfe, 0x40, 0x28, 0xbb, 0xd0, 0x86, 0x23, 0x54,
	0x92, 0x13, 0x3f, 0x61, 0xad, 0x4b, 0x54, 0xc6, 0xa7, 0xf0, 0xe2, 0x09, 0xa8, 0x8f, 0xac, 0x89,
	0x31, 0x22, 0xee, 0xa3, 0x6b, 0xa5, 0xff, 0xaf, 0x02, 0xbb, 0xfa, 0x2c, 0x5e, 0x06, 0x33, 0x2e,
	0xe4, 0xa5, 0x72, 0xdc, 0x86, 0xcf, 0x1e, 0x75, 0x8e, 0xab, 0xb9, 0x64, 0x6d, 0xc8, 0xe7, 0x70,
	0xb4, 0xc1, 0x11, 0x4a, 0x2d, 0xea, 0x20, 0x45, 0x6e, 0xb6, 0x41, 0x51, 0xa2, 0x19, 0x6f, 0x50,
	0xe9, 0x23, 0x86, 0xab, 0xf6, 0x65, 0xdc, 0x81, 0xf6, 0x06, 0x67, 0x5a, 0x2e, 0xb3, 0x29, 0x71,
	0x88, 0xe9, 0xa2, 0x0a, 0x7e, 0x06, 0x07, 0x1b, 0xfc, 0xd0, 0x1c, 0xba, 0xa8, 0xfa, 0xb1, 0x29,
	0xed, 0xef, 0xa8, 0x66, 0x10, 0xb4, 0x2d, 0x93, 0xda, 0x34, 0x25, 0xc4, 0x60, 0xce, 0x1b, 0x53,
	0x47, 0xb5, 0xfe, 0x9f, 0x25, 0x40, 0x63, 0x4f, 0xfe, 0x0f, 0x23, 0x2f, 0xf2, 0x79, 0xbe, 0xf4,
	0x21, 0x20, 0xd3, 0xa2, 0x63, 0x6d, 0xc4, 0x2c, 0x9b, 0x50, 0xcd, 0x1d, 0x5a, 0x72, 0xdd, 0x23,
	0xd8, 0x1f, 0x6b, 0x43, 0xd3, 0x25, 0xa6, 0x66, 0xea, 0x44, 0x7a, 0x51, 0x37, 0xbb, 0x09, 0x2c,
	0x53, 0xb7, 0x64, 0xfc, 0x94, 0xbc, 0x9e, 0x10, 0xc7, 0x25, 0x06, 0x2a, 0xb5, 0x2b, 0xbf, 0xfd,
	0xa7, 0x2a, 0xf8, 0x19, 0xec, 0x3e, 0xb2, 0x86, 0x25, 0xb7, 0x2c, 0x08, 0x15, 0xf6, 0x1e, 0x89,
	0x2c, 0x36, 0x54, 0x29, 0x98, 0x53, 0x78, 0xf1, 0x41, 0x1f, 0x66, 0x5a, 0x6c, 0x25, 0x47, 0x55,
	0xe9, 0xaa, 0xd3, 0xf1, 0x5a, 0xbb, 0xed, 0xa2, 0xf6, 0x04, 0x8e, 0x24, 0x31, 0x31, 0x0d, 0x42,
	0xd9, 0x9a, 0x0b, 0xaa, 0x15, 0x82, 0x03, 0x68, 0x48, 0x41, 0xde, 0xb1, 0xfe, 0xbe, 0x6a, 0x73,
	0xdf, 0x3c, 0xd9, 0x46, 0x21, 0x38, 0x86, 0xfd, 0x0f, 0x2d, 0x4f, 0x72, 0xb2, 0xff, 0x2d, 0x34,
	0x29, 0x4f, 0x66, 0xf7, 0x32, 0xbb, 0xe5, 0x42, 0x3e, 0x7b, 0xea, 0x64, 0x13, 0x5c, 0x0c, 0x4d,
	0x62, 0xa0, 0x2d, 0xbc, 0x07, 0x40, 0x1d, 0xe6, 0x4c, 0x74, 0x9d, 0x38, 0xf2, 0x71, 0x34, 0xa1,
	0x46, 0x9d, 0xe2, 0xa9, 0xbe, 0x42, 0xef, 0xfe, 0xe9, 0x6c, 0xbd, 0x7b, 0xe8, 0x28, 0x7f, 0x3d,
	0x74, 0x94, 0xbf, 0x1f, 0x3a, 0xca, 0xd5, 0x76, 0xf6, 0xcd, 0xfc, 0xfa, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x74, 0x78, 0x9a, 0x1e, 0xda, 0x05, 0x00, 0x00,
}

func (m *AppPort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxPktSize != 0 {
		i = encodeVarintAppcommon(dAtA, i, uint64(m.MaxPktSize))
		i--
		dAtA[i] = 0x48
	}
	if m.Nginx {
		i--
		if m.Nginx {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Tls {
		i--
		if m.Tls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.EndPort != 0 {
		i = encodeVarintAppcommon(dAtA, i, uint64(m.EndPort))
		i--
		dAtA[i] = 0x30
	}
	if len(m.FqdnPrefix) > 0 {
		i -= len(m.FqdnPrefix)
		copy(dAtA[i:], m.FqdnPrefix)
		i = encodeVarintAppcommon(dAtA, i, uint64(len(m.FqdnPrefix)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PublicPort != 0 {
		i = encodeVarintAppcommon(dAtA, i, uint64(m.PublicPort))
		i--
		dAtA[i] = 0x18
	}
	if m.InternalPort != 0 {
		i = encodeVarintAppcommon(dAtA, i, uint64(m.InternalPort))
		i--
		dAtA[i] = 0x10
	}
	if m.Proto != 0 {
		i = encodeVarintAppcommon(dAtA, i, uint64(m.Proto))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceInfoStatic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceInfoStatic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceInfoStatic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeviceModel) > 0 {
		i -= len(m.DeviceModel)
		copy(dAtA[i:], m.DeviceModel)
		i = encodeVarintAppcommon(dAtA, i, uint64(len(m.DeviceModel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceOs) > 0 {
		i -= len(m.DeviceOs)
		copy(dAtA[i:], m.DeviceOs)
		i = encodeVarintAppcommon(dAtA, i, uint64(len(m.DeviceOs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceInfoDynamic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceInfoDynamic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceInfoDynamic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CarrierName) > 0 {
		i -= len(m.CarrierName)
		copy(dAtA[i:], m.CarrierName)
		i = encodeVarintAppcommon(dAtA, i, uint64(len(m.CarrierName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SignalStrength != 0 {
		i = encodeVarintAppcommon(dAtA, i, uint64(m.SignalStrength))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DataNetworkType) > 0 {
		i -= len(m.DataNetworkType)
		copy(dAtA[i:], m.DataNetworkType)
		i = encodeVarintAppcommon(dAtA, i, uint64(len(m.DataNetworkType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAppcommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovAppcommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppPort) Clone() *AppPort {
	cp := &AppPort{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *AppPort) CopyInFields(src *AppPort) int {
	changed := 0
	if m.Proto != src.Proto {
		m.Proto = src.Proto
		changed++
	}
	if m.InternalPort != src.InternalPort {
		m.InternalPort = src.InternalPort
		changed++
	}
	if m.PublicPort != src.PublicPort {
		m.PublicPort = src.PublicPort
		changed++
	}
	if m.FqdnPrefix != src.FqdnPrefix {
		m.FqdnPrefix = src.FqdnPrefix
		changed++
	}
	if m.EndPort != src.EndPort {
		m.EndPort = src.EndPort
		changed++
	}
	if m.Tls != src.Tls {
		m.Tls = src.Tls
		changed++
	}
	if m.Nginx != src.Nginx {
		m.Nginx = src.Nginx
		changed++
	}
	if m.MaxPktSize != src.MaxPktSize {
		m.MaxPktSize = src.MaxPktSize
		changed++
	}
	return changed
}

func (m *AppPort) DeepCopyIn(src *AppPort) {
	m.Proto = src.Proto
	m.InternalPort = src.InternalPort
	m.PublicPort = src.PublicPort
	m.FqdnPrefix = src.FqdnPrefix
	m.EndPort = src.EndPort
	m.Tls = src.Tls
	m.Nginx = src.Nginx
	m.MaxPktSize = src.MaxPktSize
}

// Helper method to check that enums have valid values
func (m *AppPort) ValidateEnums() error {
	if _, ok := LProto_name[int32(m.Proto)]; !ok {
		return errors.New("invalid Proto")
	}
	return nil
}

func (s *AppPort) ClearTagged(tags map[string]struct{}) {
}

func (m *DeviceInfoStatic) Clone() *DeviceInfoStatic {
	cp := &DeviceInfoStatic{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *DeviceInfoStatic) CopyInFields(src *DeviceInfoStatic) int {
	changed := 0
	if m.DeviceOs != src.DeviceOs {
		m.DeviceOs = src.DeviceOs
		changed++
	}
	if m.DeviceModel != src.DeviceModel {
		m.DeviceModel = src.DeviceModel
		changed++
	}
	return changed
}

func (m *DeviceInfoStatic) DeepCopyIn(src *DeviceInfoStatic) {
	m.DeviceOs = src.DeviceOs
	m.DeviceModel = src.DeviceModel
}

// Helper method to check that enums have valid values
func (m *DeviceInfoStatic) ValidateEnums() error {
	return nil
}

func (s *DeviceInfoStatic) ClearTagged(tags map[string]struct{}) {
}

func (m *DeviceInfoDynamic) Clone() *DeviceInfoDynamic {
	cp := &DeviceInfoDynamic{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *DeviceInfoDynamic) CopyInFields(src *DeviceInfoDynamic) int {
	changed := 0
	if m.DataNetworkType != src.DataNetworkType {
		m.DataNetworkType = src.DataNetworkType
		changed++
	}
	if m.SignalStrength != src.SignalStrength {
		m.SignalStrength = src.SignalStrength
		changed++
	}
	if m.CarrierName != src.CarrierName {
		m.CarrierName = src.CarrierName
		changed++
	}
	return changed
}

func (m *DeviceInfoDynamic) DeepCopyIn(src *DeviceInfoDynamic) {
	m.DataNetworkType = src.DataNetworkType
	m.SignalStrength = src.SignalStrength
	m.CarrierName = src.CarrierName
}

// Helper method to check that enums have valid values
func (m *DeviceInfoDynamic) ValidateEnums() error {
	return nil
}

func (s *DeviceInfoDynamic) ClearTagged(tags map[string]struct{}) {
}

var LProtoStrings = []string{
	"L_PROTO_UNKNOWN",
	"L_PROTO_TCP",
	"L_PROTO_UDP",
	"L_PROTO_HTTP",
}

const (
	LProtoL_PROTO_UNKNOWN uint64 = 1 << 0
	LProtoL_PROTO_TCP     uint64 = 1 << 1
	LProtoL_PROTO_UDP     uint64 = 1 << 2
	LProtoL_PROTO_HTTP    uint64 = 1 << 3
)

var LProto_CamelName = map[int32]string{
	// L_PROTO_UNKNOWN -> LProtoUnknown
	0: "LProtoUnknown",
	// L_PROTO_TCP -> LProtoTcp
	1: "LProtoTcp",
	// L_PROTO_UDP -> LProtoUdp
	2: "LProtoUdp",
	// L_PROTO_HTTP -> LProtoHttp
	3: "LProtoHttp",
}
var LProto_CamelValue = map[string]int32{
	"LProtoUnknown": 0,
	"LProtoTcp":     1,
	"LProtoUdp":     2,
	"LProtoHttp":    3,
}

func ParseLProto(data interface{}) (LProto, error) {
	if val, ok := data.(LProto); ok {
		return val, nil
	} else if str, ok := data.(string); ok {
		val, ok := LProto_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = LProto_CamelValue["LProto"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = LProto_CamelName[val]
			}
		}
		if !ok {
			return LProto(0), fmt.Errorf("Invalid LProto value %q", str)
		}
		return LProto(val), nil
	} else if ival, ok := data.(int32); ok {
		if _, ok := LProto_CamelName[ival]; ok {
			return LProto(ival), nil
		} else {
			return LProto(0), fmt.Errorf("Invalid LProto value %d", ival)
		}
	}
	return LProto(0), fmt.Errorf("Invalid LProto value %v", data)
}

func (e *LProto) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, err := ParseLProto(str)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

func (e LProto) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(LProto_CamelName, int32(e))
	str = strings.TrimPrefix(str, "LProto")
	return str, nil
}

// custom JSON encoding/decoding
func (e *LProto) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, err := ParseLProto(str)
		if err != nil {
			return &json.UnmarshalTypeError{
				Value: "string " + str,
				Type:  reflect.TypeOf(LProto(0)),
			}
		}
		*e = LProto(val)
		return nil
	}
	var ival int32
	err = json.Unmarshal(b, &ival)
	if err == nil {
		val, err := ParseLProto(ival)
		if err == nil {
			*e = val
			return nil
		}
	}
	return &json.UnmarshalTypeError{
		Value: "value " + string(b),
		Type:  reflect.TypeOf(LProto(0)),
	}
}

func (e LProto) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(LProto_CamelName, int32(e))
	str = strings.TrimPrefix(str, "LProto")
	return json.Marshal(str)
}

var LProtoCommonPrefix = "LProto"

var HealthCheckStrings = []string{
	"HEALTH_CHECK_UNKNOWN",
	"HEALTH_CHECK_ROOTLB_OFFLINE",
	"HEALTH_CHECK_SERVER_FAIL",
	"HEALTH_CHECK_OK",
	"HEALTH_CHECK_CLOUDLET_OFFLINE",
}

const (
	HealthCheckHEALTH_CHECK_UNKNOWN          uint64 = 1 << 0
	HealthCheckHEALTH_CHECK_ROOTLB_OFFLINE   uint64 = 1 << 1
	HealthCheckHEALTH_CHECK_SERVER_FAIL      uint64 = 1 << 2
	HealthCheckHEALTH_CHECK_OK               uint64 = 1 << 3
	HealthCheckHEALTH_CHECK_CLOUDLET_OFFLINE uint64 = 1 << 4
)

var HealthCheck_CamelName = map[int32]string{
	// HEALTH_CHECK_UNKNOWN -> HealthCheckUnknown
	0: "HealthCheckUnknown",
	// HEALTH_CHECK_ROOTLB_OFFLINE -> HealthCheckRootlbOffline
	1: "HealthCheckRootlbOffline",
	// HEALTH_CHECK_SERVER_FAIL -> HealthCheckServerFail
	2: "HealthCheckServerFail",
	// HEALTH_CHECK_OK -> HealthCheckOk
	3: "HealthCheckOk",
	// HEALTH_CHECK_CLOUDLET_OFFLINE -> HealthCheckCloudletOffline
	4: "HealthCheckCloudletOffline",
}
var HealthCheck_CamelValue = map[string]int32{
	"HealthCheckUnknown":         0,
	"HealthCheckRootlbOffline":   1,
	"HealthCheckServerFail":      2,
	"HealthCheckOk":              3,
	"HealthCheckCloudletOffline": 4,
}

func ParseHealthCheck(data interface{}) (HealthCheck, error) {
	if val, ok := data.(HealthCheck); ok {
		return val, nil
	} else if str, ok := data.(string); ok {
		val, ok := HealthCheck_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = HealthCheck_CamelValue["HealthCheck"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = HealthCheck_CamelName[val]
			}
		}
		if !ok {
			return HealthCheck(0), fmt.Errorf("Invalid HealthCheck value %q", str)
		}
		return HealthCheck(val), nil
	} else if ival, ok := data.(int32); ok {
		if _, ok := HealthCheck_CamelName[ival]; ok {
			return HealthCheck(ival), nil
		} else {
			return HealthCheck(0), fmt.Errorf("Invalid HealthCheck value %d", ival)
		}
	}
	return HealthCheck(0), fmt.Errorf("Invalid HealthCheck value %v", data)
}

func (e *HealthCheck) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, err := ParseHealthCheck(str)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

func (e HealthCheck) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(HealthCheck_CamelName, int32(e))
	str = strings.TrimPrefix(str, "HealthCheck")
	return str, nil
}

// custom JSON encoding/decoding
func (e *HealthCheck) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, err := ParseHealthCheck(str)
		if err != nil {
			return &json.UnmarshalTypeError{
				Value: "string " + str,
				Type:  reflect.TypeOf(HealthCheck(0)),
			}
		}
		*e = HealthCheck(val)
		return nil
	}
	var ival int32
	err = json.Unmarshal(b, &ival)
	if err == nil {
		val, err := ParseHealthCheck(ival)
		if err == nil {
			*e = val
			return nil
		}
	}
	return &json.UnmarshalTypeError{
		Value: "value " + string(b),
		Type:  reflect.TypeOf(HealthCheck(0)),
	}
}

func (e HealthCheck) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(HealthCheck_CamelName, int32(e))
	str = strings.TrimPrefix(str, "HealthCheck")
	return json.Marshal(str)
}

var HealthCheckCommonPrefix = "HealthCheck"

var CloudletStateStrings = []string{
	"CLOUDLET_STATE_UNKNOWN",
	"CLOUDLET_STATE_ERRORS",
	"CLOUDLET_STATE_READY",
	"CLOUDLET_STATE_OFFLINE",
	"CLOUDLET_STATE_NOT_PRESENT",
	"CLOUDLET_STATE_INIT",
	"CLOUDLET_STATE_UPGRADE",
	"CLOUDLET_STATE_NEED_SYNC",
}

const (
	CloudletStateCLOUDLET_STATE_UNKNOWN     uint64 = 1 << 0
	CloudletStateCLOUDLET_STATE_ERRORS      uint64 = 1 << 1
	CloudletStateCLOUDLET_STATE_READY       uint64 = 1 << 2
	CloudletStateCLOUDLET_STATE_OFFLINE     uint64 = 1 << 3
	CloudletStateCLOUDLET_STATE_NOT_PRESENT uint64 = 1 << 4
	CloudletStateCLOUDLET_STATE_INIT        uint64 = 1 << 5
	CloudletStateCLOUDLET_STATE_UPGRADE     uint64 = 1 << 6
	CloudletStateCLOUDLET_STATE_NEED_SYNC   uint64 = 1 << 7
)

var CloudletState_CamelName = map[int32]string{
	// CLOUDLET_STATE_UNKNOWN -> CloudletStateUnknown
	0: "CloudletStateUnknown",
	// CLOUDLET_STATE_ERRORS -> CloudletStateErrors
	1: "CloudletStateErrors",
	// CLOUDLET_STATE_READY -> CloudletStateReady
	2: "CloudletStateReady",
	// CLOUDLET_STATE_OFFLINE -> CloudletStateOffline
	3: "CloudletStateOffline",
	// CLOUDLET_STATE_NOT_PRESENT -> CloudletStateNotPresent
	4: "CloudletStateNotPresent",
	// CLOUDLET_STATE_INIT -> CloudletStateInit
	5: "CloudletStateInit",
	// CLOUDLET_STATE_UPGRADE -> CloudletStateUpgrade
	6: "CloudletStateUpgrade",
	// CLOUDLET_STATE_NEED_SYNC -> CloudletStateNeedSync
	7: "CloudletStateNeedSync",
}
var CloudletState_CamelValue = map[string]int32{
	"CloudletStateUnknown":    0,
	"CloudletStateErrors":     1,
	"CloudletStateReady":      2,
	"CloudletStateOffline":    3,
	"CloudletStateNotPresent": 4,
	"CloudletStateInit":       5,
	"CloudletStateUpgrade":    6,
	"CloudletStateNeedSync":   7,
}

func ParseCloudletState(data interface{}) (CloudletState, error) {
	if val, ok := data.(CloudletState); ok {
		return val, nil
	} else if str, ok := data.(string); ok {
		val, ok := CloudletState_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = CloudletState_CamelValue["CloudletState"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = CloudletState_CamelName[val]
			}
		}
		if !ok {
			return CloudletState(0), fmt.Errorf("Invalid CloudletState value %q", str)
		}
		return CloudletState(val), nil
	} else if ival, ok := data.(int32); ok {
		if _, ok := CloudletState_CamelName[ival]; ok {
			return CloudletState(ival), nil
		} else {
			return CloudletState(0), fmt.Errorf("Invalid CloudletState value %d", ival)
		}
	}
	return CloudletState(0), fmt.Errorf("Invalid CloudletState value %v", data)
}

func (e *CloudletState) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, err := ParseCloudletState(str)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

func (e CloudletState) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(CloudletState_CamelName, int32(e))
	str = strings.TrimPrefix(str, "CloudletState")
	return str, nil
}

// custom JSON encoding/decoding
func (e *CloudletState) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, err := ParseCloudletState(str)
		if err != nil {
			return &json.UnmarshalTypeError{
				Value: "string " + str,
				Type:  reflect.TypeOf(CloudletState(0)),
			}
		}
		*e = CloudletState(val)
		return nil
	}
	var ival int32
	err = json.Unmarshal(b, &ival)
	if err == nil {
		val, err := ParseCloudletState(ival)
		if err == nil {
			*e = val
			return nil
		}
	}
	return &json.UnmarshalTypeError{
		Value: "value " + string(b),
		Type:  reflect.TypeOf(CloudletState(0)),
	}
}

func (e CloudletState) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(CloudletState_CamelName, int32(e))
	str = strings.TrimPrefix(str, "CloudletState")
	return json.Marshal(str)
}

var CloudletStateCommonPrefix = "CloudletState"

var MaintenanceStateStrings = []string{
	"NORMAL_OPERATION",
	"MAINTENANCE_START",
	"FAILOVER_REQUESTED",
	"FAILOVER_DONE",
	"FAILOVER_ERROR",
	"MAINTENANCE_START_NO_FAILOVER",
	"CRM_REQUESTED",
	"CRM_UNDER_MAINTENANCE",
	"CRM_ERROR",
	"NORMAL_OPERATION_INIT",
	"UNDER_MAINTENANCE",
}

const (
	MaintenanceStateNORMAL_OPERATION              uint64 = 1 << 0
	MaintenanceStateMAINTENANCE_START             uint64 = 1 << 1
	MaintenanceStateFAILOVER_REQUESTED            uint64 = 1 << 2
	MaintenanceStateFAILOVER_DONE                 uint64 = 1 << 3
	MaintenanceStateFAILOVER_ERROR                uint64 = 1 << 4
	MaintenanceStateMAINTENANCE_START_NO_FAILOVER uint64 = 1 << 5
	MaintenanceStateCRM_REQUESTED                 uint64 = 1 << 6
	MaintenanceStateCRM_UNDER_MAINTENANCE         uint64 = 1 << 7
	MaintenanceStateCRM_ERROR                     uint64 = 1 << 8
	MaintenanceStateNORMAL_OPERATION_INIT         uint64 = 1 << 9
	MaintenanceStateUNDER_MAINTENANCE             uint64 = 1 << 10
)

var MaintenanceState_CamelName = map[int32]string{
	// NORMAL_OPERATION -> NormalOperation
	0: "NormalOperation",
	// MAINTENANCE_START -> MaintenanceStart
	1: "MaintenanceStart",
	// FAILOVER_REQUESTED -> FailoverRequested
	2: "FailoverRequested",
	// FAILOVER_DONE -> FailoverDone
	3: "FailoverDone",
	// FAILOVER_ERROR -> FailoverError
	4: "FailoverError",
	// MAINTENANCE_START_NO_FAILOVER -> MaintenanceStartNoFailover
	5: "MaintenanceStartNoFailover",
	// CRM_REQUESTED -> CrmRequested
	6: "CrmRequested",
	// CRM_UNDER_MAINTENANCE -> CrmUnderMaintenance
	7: "CrmUnderMaintenance",
	// CRM_ERROR -> CrmError
	8: "CrmError",
	// NORMAL_OPERATION_INIT -> NormalOperationInit
	9: "NormalOperationInit",
	// UNDER_MAINTENANCE -> UnderMaintenance
	31: "UnderMaintenance",
}
var MaintenanceState_CamelValue = map[string]int32{
	"NormalOperation":            0,
	"MaintenanceStart":           1,
	"FailoverRequested":          2,
	"FailoverDone":               3,
	"FailoverError":              4,
	"MaintenanceStartNoFailover": 5,
	"CrmRequested":               6,
	"CrmUnderMaintenance":        7,
	"CrmError":                   8,
	"NormalOperationInit":        9,
	"UnderMaintenance":           31,
}

func ParseMaintenanceState(data interface{}) (MaintenanceState, error) {
	if val, ok := data.(MaintenanceState); ok {
		return val, nil
	} else if str, ok := data.(string); ok {
		val, ok := MaintenanceState_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = MaintenanceState_CamelName[val]
			}
		}
		if !ok {
			return MaintenanceState(0), fmt.Errorf("Invalid MaintenanceState value %q", str)
		}
		return MaintenanceState(val), nil
	} else if ival, ok := data.(int32); ok {
		if _, ok := MaintenanceState_CamelName[ival]; ok {
			return MaintenanceState(ival), nil
		} else {
			return MaintenanceState(0), fmt.Errorf("Invalid MaintenanceState value %d", ival)
		}
	}
	return MaintenanceState(0), fmt.Errorf("Invalid MaintenanceState value %v", data)
}

func (e *MaintenanceState) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, err := ParseMaintenanceState(str)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

func (e MaintenanceState) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(MaintenanceState_CamelName, int32(e))
	return str, nil
}

// custom JSON encoding/decoding
func (e *MaintenanceState) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, err := ParseMaintenanceState(str)
		if err != nil {
			return &json.UnmarshalTypeError{
				Value: "string " + str,
				Type:  reflect.TypeOf(MaintenanceState(0)),
			}
		}
		*e = MaintenanceState(val)
		return nil
	}
	var ival int32
	err = json.Unmarshal(b, &ival)
	if err == nil {
		val, err := ParseMaintenanceState(ival)
		if err == nil {
			*e = val
			return nil
		}
	}
	return &json.UnmarshalTypeError{
		Value: "value " + string(b),
		Type:  reflect.TypeOf(MaintenanceState(0)),
	}
}

func (e MaintenanceState) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(MaintenanceState_CamelName, int32(e))
	return json.Marshal(str)
}

var ReplyStatusStrings = []string{
	"RS_UNDEFINED",
	"RS_SUCCESS",
	"RS_FAIL",
}

const (
	ReplyStatusRS_UNDEFINED uint64 = 1 << 0
	ReplyStatusRS_SUCCESS   uint64 = 1 << 1
	ReplyStatusRS_FAIL      uint64 = 1 << 2
)

var ReplyStatus_CamelName = map[int32]string{
	// RS_UNDEFINED -> RsUndefined
	0: "RsUndefined",
	// RS_SUCCESS -> RsSuccess
	1: "RsSuccess",
	// RS_FAIL -> RsFail
	2: "RsFail",
}
var ReplyStatus_CamelValue = map[string]int32{
	"RsUndefined": 0,
	"RsSuccess":   1,
	"RsFail":      2,
}

func ParseReplyStatus(data interface{}) (ReplyStatus, error) {
	if val, ok := data.(ReplyStatus); ok {
		return val, nil
	} else if str, ok := data.(string); ok {
		val, ok := ReplyStatus_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = ReplyStatus_CamelValue["Rs"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = ReplyStatus_CamelName[val]
			}
		}
		if !ok {
			return ReplyStatus(0), fmt.Errorf("Invalid ReplyStatus value %q", str)
		}
		return ReplyStatus(val), nil
	} else if ival, ok := data.(int32); ok {
		if _, ok := ReplyStatus_CamelName[ival]; ok {
			return ReplyStatus(ival), nil
		} else {
			return ReplyStatus(0), fmt.Errorf("Invalid ReplyStatus value %d", ival)
		}
	}
	return ReplyStatus(0), fmt.Errorf("Invalid ReplyStatus value %v", data)
}

func (e *ReplyStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, err := ParseReplyStatus(str)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

func (e ReplyStatus) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(ReplyStatus_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Rs")
	return str, nil
}

// custom JSON encoding/decoding
func (e *ReplyStatus) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, err := ParseReplyStatus(str)
		if err != nil {
			return &json.UnmarshalTypeError{
				Value: "string " + str,
				Type:  reflect.TypeOf(ReplyStatus(0)),
			}
		}
		*e = ReplyStatus(val)
		return nil
	}
	var ival int32
	err = json.Unmarshal(b, &ival)
	if err == nil {
		val, err := ParseReplyStatus(ival)
		if err == nil {
			*e = val
			return nil
		}
	}
	return &json.UnmarshalTypeError{
		Value: "value " + string(b),
		Type:  reflect.TypeOf(ReplyStatus(0)),
	}
}

func (e ReplyStatus) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(ReplyStatus_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Rs")
	return json.Marshal(str)
}

var ReplyStatusCommonPrefix = "Rs"

func (m *AppPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proto != 0 {
		n += 1 + sovAppcommon(uint64(m.Proto))
	}
	if m.InternalPort != 0 {
		n += 1 + sovAppcommon(uint64(m.InternalPort))
	}
	if m.PublicPort != 0 {
		n += 1 + sovAppcommon(uint64(m.PublicPort))
	}
	l = len(m.FqdnPrefix)
	if l > 0 {
		n += 1 + l + sovAppcommon(uint64(l))
	}
	if m.EndPort != 0 {
		n += 1 + sovAppcommon(uint64(m.EndPort))
	}
	if m.Tls {
		n += 2
	}
	if m.Nginx {
		n += 2
	}
	if m.MaxPktSize != 0 {
		n += 1 + sovAppcommon(uint64(m.MaxPktSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceInfoStatic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceOs)
	if l > 0 {
		n += 1 + l + sovAppcommon(uint64(l))
	}
	l = len(m.DeviceModel)
	if l > 0 {
		n += 1 + l + sovAppcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceInfoDynamic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataNetworkType)
	if l > 0 {
		n += 1 + l + sovAppcommon(uint64(l))
	}
	if m.SignalStrength != 0 {
		n += 1 + sovAppcommon(uint64(m.SignalStrength))
	}
	l = len(m.CarrierName)
	if l > 0 {
		n += 1 + l + sovAppcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAppcommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAppcommon(x uint64) (n int) {
	return sovAppcommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppPort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppPort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppPort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= LProto(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			m.InternalPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InternalPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicPort", wireType)
			}
			m.PublicPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FqdnPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FqdnPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPort", wireType)
			}
			m.EndPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tls = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nginx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nginx = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPktSize", wireType)
			}
			m.MaxPktSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPktSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceInfoStatic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceInfoStatic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceInfoStatic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceOs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceOs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceInfoDynamic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceInfoDynamic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceInfoDynamic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataNetworkType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataNetworkType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalStrength", wireType)
			}
			m.SignalStrength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignalStrength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarrierName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarrierName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAppcommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAppcommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAppcommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAppcommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAppcommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAppcommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAppcommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAppcommon = fmt.Errorf("proto: unexpected end of group")
)
