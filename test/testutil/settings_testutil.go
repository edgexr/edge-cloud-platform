// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: settings.proto

package testutil

import (
	"context"
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/cli"
	"github.com/edgexr/edge-cloud-platform/pkg/edgectl/wrapper"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func (r *Run) SettingsApi(obj *edgeproto.Settings, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for Settings", "mode", r.Mode)
	if r.Mode == "show" {
		obj = &edgeproto.Settings{}
		out, err := r.client.ShowSettings(r.ctx, obj)
		if err != nil {
			r.logErr("SettingsApi", err)
		} else {
			outp, ok := dataOut.(**edgeproto.Settings)
			if !ok {
				panic(fmt.Sprintf("RunSettingsApi expected dataOut type **edgeproto.Settings, but was %T", dataOut))
			}
			*outp = out
		}
		return
	}
	if obj == nil {
		return
	}
	switch r.Mode {
	case "update":
		fallthrough
	case "create":
		// set specified fields
		objMap, err := cli.GetGenericObj(dataMap)
		if err != nil {
			log.DebugLog(log.DebugLevelApi, "bad dataMap for Settings", "err", err)
			*r.Rc = false
			return
		}
		yamlData := cli.MapData{
			Namespace: cli.YamlNamespace,
			Data:      objMap,
		}
		obj.Fields = cli.GetSpecifiedFields(&yamlData, obj)

		out, err := r.client.UpdateSettings(r.ctx, obj)
		if err != nil {
			r.logErr("SettingsApi", err)
		} else {
			outp, ok := dataOut.(**edgeproto.Result)
			if !ok {
				panic(fmt.Sprintf("RunSettingsApi expected dataOut type **edgeproto.Result, but was %T", dataOut))
			}
			*outp = out
		}
	case "reset":
		fallthrough
	case "delete":
		out, err := r.client.ResetSettings(r.ctx, obj)
		if err != nil {
			r.logErr("SettingsApi", err)
		} else {
			outp, ok := dataOut.(**edgeproto.Result)
			if !ok {
				panic(fmt.Sprintf("RunSettingsApi expected dataOut type **edgeproto.Result, but was %T", dataOut))
			}
			*outp = out
		}
	case "showfiltered":
		out, err := r.client.ShowSettings(r.ctx, obj)
		if err != nil {
			r.logErr("SettingsApi", err)
		} else {
			outp, ok := dataOut.(**edgeproto.Settings)
			if !ok {
				panic(fmt.Sprintf("RunSettingsApi expected dataOut type **edgeproto.Settings, but was %T", dataOut))
			}
			*outp = out
		}
	}
}

func (s *DummyServer) UpdateSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.SettingsCache.Update(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) ResetSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) ShowSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Settings, error) {
	if s.CudNoop {
		return &edgeproto.Settings{}, nil
	}
	return &edgeproto.Settings{}, nil
}

func (s *ApiClient) UpdateSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Result, error) {
	api := edgeproto.NewSettingsApiClient(s.Conn)
	return api.UpdateSettings(ctx, in)
}

func (s *CliClient) UpdateSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "UpdateSettings")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) ResetSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Result, error) {
	api := edgeproto.NewSettingsApiClient(s.Conn)
	return api.ResetSettings(ctx, in)
}

func (s *CliClient) ResetSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "ResetSettings")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) ShowSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Settings, error) {
	api := edgeproto.NewSettingsApiClient(s.Conn)
	return api.ShowSettings(ctx, in)
}

func (s *CliClient) ShowSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Settings, error) {
	out := edgeproto.Settings{}
	args := append(s.BaseArgs, "controller", "ShowSettings")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

type SettingsApiClient interface {
	UpdateSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Result, error)
	ResetSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Result, error)
	ShowSettings(ctx context.Context, in *edgeproto.Settings) (*edgeproto.Settings, error)
}
