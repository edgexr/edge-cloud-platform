// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: autoprovpolicy.proto

package testutil

import (
	"context"
	fmt "fmt"
	_ "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/cli"
	"github.com/edgexr/edge-cloud-platform/pkg/edgectl/wrapper"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	"github.com/stretchr/testify/require"
	"google.golang.org/grpc"
	"io"
	math "math"
	"testing"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

type ShowAutoProvPolicy struct {
	Data map[string]edgeproto.AutoProvPolicy
	grpc.ServerStream
	Ctx context.Context
}

func (x *ShowAutoProvPolicy) Init() {
	x.Data = make(map[string]edgeproto.AutoProvPolicy)
}

func (x *ShowAutoProvPolicy) Send(m *edgeproto.AutoProvPolicy) error {
	x.Data[m.GetKey().GetKeyString()] = *m
	return nil
}

func (x *ShowAutoProvPolicy) Context() context.Context {
	return x.Ctx
}

var AutoProvPolicyShowExtraCount = 0

func (x *ShowAutoProvPolicy) ReadStream(stream edgeproto.AutoProvPolicyApi_ShowAutoProvPolicyClient, err error) {
	x.Data = make(map[string]edgeproto.AutoProvPolicy)
	if err != nil {
		return
	}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			break
		}
		x.Data[obj.GetKey().GetKeyString()] = *obj
	}
}

func (x *ShowAutoProvPolicy) CheckFound(obj *edgeproto.AutoProvPolicy) bool {
	_, found := x.Data[obj.GetKey().GetKeyString()]
	return found
}

func (x *ShowAutoProvPolicy) AssertFound(t *testing.T, obj *edgeproto.AutoProvPolicy) {
	check, found := x.Data[obj.GetKey().GetKeyString()]
	require.True(t, found, "find AutoProvPolicy %s", obj.GetKey().GetKeyString())
	if found && !check.Matches(obj, edgeproto.MatchIgnoreBackend(), edgeproto.MatchSortArrayedKeys()) {
		require.Equal(t, *obj, check, "AutoProvPolicy are equal")
	}
	if found {
		// remove in case there are dups in the list, so the
		// same object cannot be used again
		delete(x.Data, obj.GetKey().GetKeyString())
	}
}

func (x *ShowAutoProvPolicy) AssertNotFound(t *testing.T, obj *edgeproto.AutoProvPolicy) {
	_, found := x.Data[obj.GetKey().GetKeyString()]
	require.False(t, found, "do not find AutoProvPolicy %s", obj.GetKey().GetKeyString())
}

func WaitAssertFoundAutoProvPolicy(t *testing.T, api edgeproto.AutoProvPolicyApiClient, obj *edgeproto.AutoProvPolicy, count int, retry time.Duration) {
	show := ShowAutoProvPolicy{}
	for ii := 0; ii < count; ii++ {
		ctx, cancel := context.WithTimeout(context.Background(), retry)
		stream, err := api.ShowAutoProvPolicy(ctx, obj)
		show.ReadStream(stream, err)
		cancel()
		if show.CheckFound(obj) {
			break
		}
		time.Sleep(retry)
	}
	show.AssertFound(t, obj)
}

func WaitAssertNotFoundAutoProvPolicy(t *testing.T, api edgeproto.AutoProvPolicyApiClient, obj *edgeproto.AutoProvPolicy, count int, retry time.Duration) {
	show := ShowAutoProvPolicy{}
	filterNone := edgeproto.AutoProvPolicy{}
	for ii := 0; ii < count; ii++ {
		ctx, cancel := context.WithTimeout(context.Background(), retry)
		stream, err := api.ShowAutoProvPolicy(ctx, &filterNone)
		show.ReadStream(stream, err)
		cancel()
		if !show.CheckFound(obj) {
			break
		}
		time.Sleep(retry)
	}
	show.AssertNotFound(t, obj)
}

// Wrap the api with a common interface
type AutoProvPolicyCommonApi struct {
	internal_api edgeproto.AutoProvPolicyApiServer
	client_api   edgeproto.AutoProvPolicyApiClient
}

func (x *AutoProvPolicyCommonApi) CreateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	copy := &edgeproto.AutoProvPolicy{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.CreateAutoProvPolicy(ctx, copy)
	} else {
		res, err := x.client_api.CreateAutoProvPolicy(ctx, copy)
		return res, unwrapGrpcError(err)
	}
}

func (x *AutoProvPolicyCommonApi) DeleteAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	copy := &edgeproto.AutoProvPolicy{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.DeleteAutoProvPolicy(ctx, copy)
	} else {
		res, err := x.client_api.DeleteAutoProvPolicy(ctx, copy)
		return res, unwrapGrpcError(err)
	}
}

func (x *AutoProvPolicyCommonApi) UpdateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	copy := &edgeproto.AutoProvPolicy{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.UpdateAutoProvPolicy(ctx, copy)
	} else {
		res, err := x.client_api.UpdateAutoProvPolicy(ctx, copy)
		return res, unwrapGrpcError(err)
	}
}

func (x *AutoProvPolicyCommonApi) ShowAutoProvPolicy(ctx context.Context, filter *edgeproto.AutoProvPolicy, showData *ShowAutoProvPolicy) error {
	if x.internal_api != nil {
		showData.Ctx = ctx
		return x.internal_api.ShowAutoProvPolicy(filter, showData)
	} else {
		stream, err := x.client_api.ShowAutoProvPolicy(ctx, filter)
		showData.ReadStream(stream, err)
		return unwrapGrpcError(err)
	}
}

func NewInternalAutoProvPolicyApi(api edgeproto.AutoProvPolicyApiServer) *AutoProvPolicyCommonApi {
	apiWrap := AutoProvPolicyCommonApi{}
	apiWrap.internal_api = api
	return &apiWrap
}

func NewClientAutoProvPolicyApi(api edgeproto.AutoProvPolicyApiClient) *AutoProvPolicyCommonApi {
	apiWrap := AutoProvPolicyCommonApi{}
	apiWrap.client_api = api
	return &apiWrap
}

type AutoProvPolicyTestOptions struct {
	createdData []edgeproto.AutoProvPolicy
}

type AutoProvPolicyTestOp func(opts *AutoProvPolicyTestOptions)

func WithCreatedAutoProvPolicyTestData(createdData []edgeproto.AutoProvPolicy) AutoProvPolicyTestOp {
	return func(opts *AutoProvPolicyTestOptions) { opts.createdData = createdData }
}

func InternalAutoProvPolicyTest(t *testing.T, test string, api edgeproto.AutoProvPolicyApiServer, testData []edgeproto.AutoProvPolicy, ops ...AutoProvPolicyTestOp) {
	span := log.StartSpan(log.DebugLevelApi, "InternalAutoProvPolicyTest")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	switch test {
	case "cud":
		basicAutoProvPolicyCudTest(t, ctx, NewInternalAutoProvPolicyApi(api), testData, ops...)
	case "show":
		basicAutoProvPolicyShowTest(t, ctx, NewInternalAutoProvPolicyApi(api), testData)
	}
}

func ClientAutoProvPolicyTest(t *testing.T, test string, api edgeproto.AutoProvPolicyApiClient, testData []edgeproto.AutoProvPolicy, ops ...AutoProvPolicyTestOp) {
	span := log.StartSpan(log.DebugLevelApi, "ClientAutoProvPolicyTest")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	switch test {
	case "cud":
		basicAutoProvPolicyCudTest(t, ctx, NewClientAutoProvPolicyApi(api), testData, ops...)
	case "show":
		basicAutoProvPolicyShowTest(t, ctx, NewClientAutoProvPolicyApi(api), testData)
	}
}

func basicAutoProvPolicyShowTest(t *testing.T, ctx context.Context, api *AutoProvPolicyCommonApi, testData []edgeproto.AutoProvPolicy) {
	var err error

	show := ShowAutoProvPolicy{}
	show.Init()
	filterNone := edgeproto.AutoProvPolicy{}
	err = api.ShowAutoProvPolicy(ctx, &filterNone, &show)
	require.Nil(t, err, "show data")
	require.Equal(t, len(testData)+AutoProvPolicyShowExtraCount, len(show.Data), "Show count")
	for _, obj := range testData {
		show.AssertFound(t, &obj)
	}
}

func GetAutoProvPolicy(t *testing.T, ctx context.Context, api *AutoProvPolicyCommonApi, key *edgeproto.PolicyKey, out *edgeproto.AutoProvPolicy) bool {
	var err error

	show := ShowAutoProvPolicy{}
	show.Init()
	filter := edgeproto.AutoProvPolicy{}
	filter.SetKey(key)
	err = api.ShowAutoProvPolicy(ctx, &filter, &show)
	require.Nil(t, err, "show data")
	obj, found := show.Data[key.GetKeyString()]
	if found {
		*out = obj
	}
	return found
}

func basicAutoProvPolicyCudTest(t *testing.T, ctx context.Context, api *AutoProvPolicyCommonApi, testData []edgeproto.AutoProvPolicy, ops ...AutoProvPolicyTestOp) {
	var err error

	if len(testData) < 3 {
		require.True(t, false, "Need at least 3 test data objects")
		return
	}
	options := AutoProvPolicyTestOptions{}
	for _, op := range ops {
		op(&options)
	}
	createdData := testData
	if options.createdData != nil {
		createdData = options.createdData
	}

	// test create
	CreateAutoProvPolicyData(t, ctx, api, testData)

	// test duplicate Create - should fail
	_, err = api.CreateAutoProvPolicy(ctx, &testData[0])
	require.NotNil(t, err, "Create duplicate AutoProvPolicy")

	// test show all items
	basicAutoProvPolicyShowTest(t, ctx, api, createdData)

	// test Delete
	_, err = api.DeleteAutoProvPolicy(ctx, &createdData[0])
	require.Nil(t, err, "Delete AutoProvPolicy %s", testData[0].GetKey().GetKeyString())
	show := ShowAutoProvPolicy{}
	show.Init()
	filterNone := edgeproto.AutoProvPolicy{}
	err = api.ShowAutoProvPolicy(ctx, &filterNone, &show)
	require.Nil(t, err, "show data")
	require.Equal(t, len(createdData)-1+AutoProvPolicyShowExtraCount, len(show.Data), "Show count")
	show.AssertNotFound(t, &createdData[0])
	// test update of missing object
	_, err = api.UpdateAutoProvPolicy(ctx, &createdData[0])
	require.NotNil(t, err, "Update missing object")
	// Create it back
	_, err = api.CreateAutoProvPolicy(ctx, &testData[0])
	require.Nil(t, err, "Create AutoProvPolicy %s", testData[0].GetKey().GetKeyString())

	// test invalid keys
	bad := edgeproto.AutoProvPolicy{}
	_, err = api.CreateAutoProvPolicy(ctx, &bad)
	require.NotNil(t, err, "Create AutoProvPolicy with no key info")

	// test update
	updater := edgeproto.AutoProvPolicy{}
	updater.Key = createdData[0].Key
	updater.DeployIntervalCount = 1101
	updater.Fields = make([]string, 0)
	updater.Fields = append(updater.Fields, edgeproto.AutoProvPolicyFieldDeployIntervalCount)
	_, err = api.UpdateAutoProvPolicy(ctx, &updater)
	require.Nil(t, err, "Update AutoProvPolicy %s", createdData[0].GetKey().GetKeyString())

	show.Init()
	updater = createdData[0]
	updater.DeployIntervalCount = 1101
	err = api.ShowAutoProvPolicy(ctx, &filterNone, &show)
	require.Nil(t, err, "show AutoProvPolicy")
	show.AssertFound(t, &updater)

	// revert change
	updater.DeployIntervalCount = createdData[0].DeployIntervalCount
	_, err = api.UpdateAutoProvPolicy(ctx, &updater)
	require.Nil(t, err, "Update back AutoProvPolicy")
}

func InternalAutoProvPolicyCreate(t *testing.T, api edgeproto.AutoProvPolicyApiServer, testData []edgeproto.AutoProvPolicy) {
	span := log.StartSpan(log.DebugLevelApi, "InternalAutoProvPolicyCreate")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	CreateAutoProvPolicyData(t, ctx, NewInternalAutoProvPolicyApi(api), testData)
}

func ClientAutoProvPolicyCreate(t *testing.T, api edgeproto.AutoProvPolicyApiClient, testData []edgeproto.AutoProvPolicy) {
	span := log.StartSpan(log.DebugLevelApi, "ClientAutoProvPolicyCreate")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	CreateAutoProvPolicyData(t, ctx, NewClientAutoProvPolicyApi(api), testData)
}

func CreateAutoProvPolicyData(t *testing.T, ctx context.Context, api *AutoProvPolicyCommonApi, testData []edgeproto.AutoProvPolicy) {
	var err error

	for ii := range testData {
		obj := testData[ii]
		_, err = api.CreateAutoProvPolicy(ctx, &obj)
		require.Nil(t, err, "Create AutoProvPolicy %s", obj.GetKey().GetKeyString())
	}
}

func InternalAutoProvPolicyDelete(t *testing.T, api edgeproto.AutoProvPolicyApiServer, testData []edgeproto.AutoProvPolicy) {
	span := log.StartSpan(log.DebugLevelApi, "InternalAutoProvPolicyDelete")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	DeleteAutoProvPolicyData(t, ctx, NewInternalAutoProvPolicyApi(api), testData)
}

func InternalAutoProvPolicyDeleteAll(t *testing.T, ctx context.Context, api edgeproto.AutoProvPolicyApiServer, data []edgeproto.AutoProvPolicy) {
	intapi := NewInternalAutoProvPolicyApi(api)
	log.SpanLog(ctx, log.DebugLevelInfo, "deleting all AutoProvPolicys", "count", len(data))
	DeleteAutoProvPolicyData(t, ctx, intapi, data)
}

func ClientAutoProvPolicyDelete(t *testing.T, api edgeproto.AutoProvPolicyApiClient, testData []edgeproto.AutoProvPolicy) {
	span := log.StartSpan(log.DebugLevelApi, "ClientAutoProvPolicyDelete")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	DeleteAutoProvPolicyData(t, ctx, NewClientAutoProvPolicyApi(api), testData)
}

func DeleteAutoProvPolicyData(t *testing.T, ctx context.Context, api *AutoProvPolicyCommonApi, testData []edgeproto.AutoProvPolicy) {
	var err error

	for ii := range testData {
		obj := testData[ii]
		_, err = api.DeleteAutoProvPolicy(ctx, &obj)
		require.Nil(t, err, "Delete AutoProvPolicy %s", obj.GetKey().GetKeyString())
	}
}

func FindAutoProvPolicyData(key *edgeproto.PolicyKey, testData []edgeproto.AutoProvPolicy) (*edgeproto.AutoProvPolicy, bool) {
	for ii, _ := range testData {
		if testData[ii].GetKey().Matches(key) {
			return &testData[ii], true
		}
	}
	return nil, false
}

func (r *Run) AutoProvPolicyApi(data *[]edgeproto.AutoProvPolicy, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for AutoProvPolicy", "mode", r.Mode)
	if r.Mode == "show" {
		obj := &edgeproto.AutoProvPolicy{}
		out, err := r.client.ShowAutoProvPolicy(r.ctx, obj)
		if err != nil {
			r.logErr("AutoProvPolicyApi", err)
		} else {
			outp, ok := dataOut.(*[]edgeproto.AutoProvPolicy)
			if !ok {
				panic(fmt.Sprintf("RunAutoProvPolicyApi expected dataOut type *[]edgeproto.AutoProvPolicy, but was %T", dataOut))
			}
			*outp = append(*outp, out...)
		}
		return
	}
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "create":
			out, err := r.client.CreateAutoProvPolicy(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("AutoProvPolicyApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunAutoProvPolicyApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "delete":
			out, err := r.client.DeleteAutoProvPolicy(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("AutoProvPolicyApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunAutoProvPolicyApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "update":
			// set specified fields
			objMap, err := cli.GetGenericObjFromList(dataMap, ii)
			if err != nil {
				log.DebugLog(log.DebugLevelApi, "bad dataMap for AutoProvPolicy", "err", err)
				*r.Rc = false
				return
			}
			yamlData := cli.MapData{
				Namespace: cli.YamlNamespace,
				Data:      objMap,
			}
			obj.Fields = cli.GetSpecifiedFields(&yamlData, obj)

			out, err := r.client.UpdateAutoProvPolicy(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("AutoProvPolicyApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunAutoProvPolicyApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "showfiltered":
			out, err := r.client.ShowAutoProvPolicy(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("AutoProvPolicyApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.AutoProvPolicy)
				if !ok {
					panic(fmt.Sprintf("RunAutoProvPolicyApi expected dataOut type *[]edgeproto.AutoProvPolicy, but was %T", dataOut))
				}
				*outp = append(*outp, out...)
			}
		}
	}
}

func (r *Run) AutoProvPolicyApi_AutoProvPolicyZone(data *[]edgeproto.AutoProvPolicyZone, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for AutoProvPolicyZone", "mode", r.Mode)
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "add":
			out, err := r.client.AddAutoProvPolicyZone(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("AutoProvPolicyApi_AutoProvPolicyZone[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunAutoProvPolicyApi_AutoProvPolicyZone expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "remove":
			out, err := r.client.RemoveAutoProvPolicyZone(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("AutoProvPolicyApi_AutoProvPolicyZone[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunAutoProvPolicyApi_AutoProvPolicyZone expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		}
	}
}

func (s *DummyServer) CreateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.AutoProvPolicyCache.Update(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) DeleteAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.AutoProvPolicyCache.Delete(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) UpdateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.AutoProvPolicyCache.Update(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) ShowAutoProvPolicy(in *edgeproto.AutoProvPolicy, server edgeproto.AutoProvPolicyApi_ShowAutoProvPolicyServer) error {
	var err error
	obj := &edgeproto.AutoProvPolicy{}
	if obj.Matches(in, edgeproto.MatchFilter()) {
		for ii := 0; ii < s.ShowDummyCount; ii++ {
			server.Send(&edgeproto.AutoProvPolicy{})
		}
		if ch, ok := s.MidstreamFailChs["ShowAutoProvPolicy"]; ok {
			// Wait until client receives the SendMsg, since they
			// are buffered and dropped once we return err here.
			select {
			case <-ch:
			case <-time.After(5 * time.Second):
			}
			return fmt.Errorf("midstream failure!")
		}
	}
	err = s.AutoProvPolicyCache.Show(in, func(obj *edgeproto.AutoProvPolicy) error {
		err := server.Send(obj)
		return err
	})
	return err
}

func (s *ApiClient) CreateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	api := edgeproto.NewAutoProvPolicyApiClient(s.Conn)
	return api.CreateAutoProvPolicy(ctx, in)
}

func (s *CliClient) CreateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "CreateAutoProvPolicy")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) DeleteAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	api := edgeproto.NewAutoProvPolicyApiClient(s.Conn)
	return api.DeleteAutoProvPolicy(ctx, in)
}

func (s *CliClient) DeleteAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "DeleteAutoProvPolicy")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) UpdateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	api := edgeproto.NewAutoProvPolicyApiClient(s.Conn)
	return api.UpdateAutoProvPolicy(ctx, in)
}

func (s *CliClient) UpdateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "UpdateAutoProvPolicy")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

type AutoProvPolicyStream interface {
	Recv() (*edgeproto.AutoProvPolicy, error)
}

func AutoProvPolicyReadStream(stream AutoProvPolicyStream) ([]edgeproto.AutoProvPolicy, error) {
	output := []edgeproto.AutoProvPolicy{}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return output, fmt.Errorf("read AutoProvPolicy stream failed, %v", err)
		}
		output = append(output, *obj)
	}
	return output, nil
}

func (s *ApiClient) ShowAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) ([]edgeproto.AutoProvPolicy, error) {
	api := edgeproto.NewAutoProvPolicyApiClient(s.Conn)
	stream, err := api.ShowAutoProvPolicy(ctx, in)
	if err != nil {
		return nil, err
	}
	return AutoProvPolicyReadStream(stream)
}

func (s *CliClient) ShowAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) ([]edgeproto.AutoProvPolicy, error) {
	output := []edgeproto.AutoProvPolicy{}
	args := append(s.BaseArgs, "controller", "ShowAutoProvPolicy")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

func (s *ApiClient) AddAutoProvPolicyZone(ctx context.Context, in *edgeproto.AutoProvPolicyZone) (*edgeproto.Result, error) {
	api := edgeproto.NewAutoProvPolicyApiClient(s.Conn)
	return api.AddAutoProvPolicyZone(ctx, in)
}

func (s *CliClient) AddAutoProvPolicyZone(ctx context.Context, in *edgeproto.AutoProvPolicyZone) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "AddAutoProvPolicyZone")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) RemoveAutoProvPolicyZone(ctx context.Context, in *edgeproto.AutoProvPolicyZone) (*edgeproto.Result, error) {
	api := edgeproto.NewAutoProvPolicyApiClient(s.Conn)
	return api.RemoveAutoProvPolicyZone(ctx, in)
}

func (s *CliClient) RemoveAutoProvPolicyZone(ctx context.Context, in *edgeproto.AutoProvPolicyZone) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "RemoveAutoProvPolicyZone")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

type AutoProvPolicyApiClient interface {
	CreateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error)
	DeleteAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error)
	UpdateAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) (*edgeproto.Result, error)
	ShowAutoProvPolicy(ctx context.Context, in *edgeproto.AutoProvPolicy) ([]edgeproto.AutoProvPolicy, error)
	AddAutoProvPolicyZone(ctx context.Context, in *edgeproto.AutoProvPolicyZone) (*edgeproto.Result, error)
	RemoveAutoProvPolicyZone(ctx context.Context, in *edgeproto.AutoProvPolicyZone) (*edgeproto.Result, error)
}
