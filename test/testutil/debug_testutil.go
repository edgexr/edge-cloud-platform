// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: debug.proto

package testutil

import (
	"context"
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/edgectl/wrapper"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
type DebugDataOut struct {
	Requests [][]edgeproto.DebugReply
	Errors   []Err
}

// used to intersperse other creates/deletes/checks
// note the objs value is the previous one for create,
// but the next one for delete
type RunDebugDataApiCallback func(objs string)

func RunDebugDataApis(run *Run, in *edgeproto.DebugData, inMap map[string]interface{}, out *DebugDataOut, apicb RunDebugDataApiCallback) {
	apicb("")
	run.DebugApi_DebugRequest(&in.Requests, inMap["requests"], &out.Requests)
	apicb("requests")
	out.Errors = run.Errs
}

func RunDebugDataReverseApis(run *Run, in *edgeproto.DebugData, inMap map[string]interface{}, out *DebugDataOut, apicb RunDebugDataApiCallback) {
	apicb("requests")
	run.DebugApi_DebugRequest(&in.Requests, inMap["requests"], &out.Requests)
	apicb("")
	out.Errors = run.Errs
}

func RunDebugDataShowApis(run *Run, in *edgeproto.DebugData, selector edgeproto.AllSelector, out *edgeproto.DebugData) {
}

func (r *Run) DebugApi_DebugRequest(data *[]edgeproto.DebugRequest, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for DebugRequest", "mode", r.Mode)
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "enabledebuglevels":
			out, err := r.client.EnableDebugLevels(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("DebugApi_DebugRequest[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[][]edgeproto.DebugReply)
				if !ok {
					panic(fmt.Sprintf("RunDebugApi_DebugRequest expected dataOut type *[][]edgeproto.DebugReply, but was %T", dataOut))
				}
				*outp = append(*outp, out)
			}
		case "disabledebuglevels":
			out, err := r.client.DisableDebugLevels(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("DebugApi_DebugRequest[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[][]edgeproto.DebugReply)
				if !ok {
					panic(fmt.Sprintf("RunDebugApi_DebugRequest expected dataOut type *[][]edgeproto.DebugReply, but was %T", dataOut))
				}
				*outp = append(*outp, out)
			}
		case "showdebuglevels":
			out, err := r.client.ShowDebugLevels(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("DebugApi_DebugRequest[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[][]edgeproto.DebugReply)
				if !ok {
					panic(fmt.Sprintf("RunDebugApi_DebugRequest expected dataOut type *[][]edgeproto.DebugReply, but was %T", dataOut))
				}
				*outp = append(*outp, out)
			}
		case "rundebug":
			out, err := r.client.RunDebug(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("DebugApi_DebugRequest[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[][]edgeproto.DebugReply)
				if !ok {
					panic(fmt.Sprintf("RunDebugApi_DebugRequest expected dataOut type *[][]edgeproto.DebugReply, but was %T", dataOut))
				}
				*outp = append(*outp, out)
			}
		}
	}
}

type DebugReplyStream interface {
	Recv() (*edgeproto.DebugReply, error)
}

func DebugReplyReadStream(stream DebugReplyStream) ([]edgeproto.DebugReply, error) {
	output := []edgeproto.DebugReply{}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return output, fmt.Errorf("read DebugReply stream failed, %v", err)
		}
		output = append(output, *obj)
	}
	return output, nil
}

func (s *ApiClient) EnableDebugLevels(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error) {
	api := edgeproto.NewDebugApiClient(s.Conn)
	stream, err := api.EnableDebugLevels(ctx, in)
	if err != nil {
		return nil, err
	}
	return DebugReplyReadStream(stream)
}

func (s *CliClient) EnableDebugLevels(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error) {
	output := []edgeproto.DebugReply{}
	args := append(s.BaseArgs, "controller", "EnableDebugLevels")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

func (s *ApiClient) DisableDebugLevels(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error) {
	api := edgeproto.NewDebugApiClient(s.Conn)
	stream, err := api.DisableDebugLevels(ctx, in)
	if err != nil {
		return nil, err
	}
	return DebugReplyReadStream(stream)
}

func (s *CliClient) DisableDebugLevels(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error) {
	output := []edgeproto.DebugReply{}
	args := append(s.BaseArgs, "controller", "DisableDebugLevels")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

func (s *ApiClient) ShowDebugLevels(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error) {
	api := edgeproto.NewDebugApiClient(s.Conn)
	stream, err := api.ShowDebugLevels(ctx, in)
	if err != nil {
		return nil, err
	}
	return DebugReplyReadStream(stream)
}

func (s *CliClient) ShowDebugLevels(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error) {
	output := []edgeproto.DebugReply{}
	args := append(s.BaseArgs, "controller", "ShowDebugLevels")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

func (s *ApiClient) RunDebug(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error) {
	api := edgeproto.NewDebugApiClient(s.Conn)
	stream, err := api.RunDebug(ctx, in)
	if err != nil {
		return nil, err
	}
	return DebugReplyReadStream(stream)
}

func (s *CliClient) RunDebug(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error) {
	output := []edgeproto.DebugReply{}
	args := append(s.BaseArgs, "controller", "RunDebug")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

type DebugApiClient interface {
	EnableDebugLevels(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error)
	DisableDebugLevels(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error)
	ShowDebugLevels(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error)
	RunDebug(ctx context.Context, in *edgeproto.DebugRequest) ([]edgeproto.DebugReply, error)
}
