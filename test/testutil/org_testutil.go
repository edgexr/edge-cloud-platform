// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: org.proto

package testutil

import (
	"context"
	fmt "fmt"
	"github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/edgectl/wrapper"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
type OrganizationDataOut struct {
	Orgs   []edgeproto.Result
	Errors []Err
}

// used to intersperse other creates/deletes/checks
// note the objs value is the previous one for create,
// but the next one for delete
type RunOrganizationDataApiCallback func(objs string)

func RunOrganizationDataApis(run *Run, in *edgeproto.OrganizationData, inMap map[string]interface{}, out *OrganizationDataOut, apicb RunOrganizationDataApiCallback) {
	apicb("")
	run.OrganizationApi(&in.Orgs, inMap["orgs"], &out.Orgs)
	apicb("orgs")
	out.Errors = run.Errs
}

func RunOrganizationDataReverseApis(run *Run, in *edgeproto.OrganizationData, inMap map[string]interface{}, out *OrganizationDataOut, apicb RunOrganizationDataApiCallback) {
	apicb("orgs")
	run.OrganizationApi(&in.Orgs, inMap["orgs"], &out.Orgs)
	apicb("")
	out.Errors = run.Errs
}

func RunOrganizationDataShowApis(run *Run, in *edgeproto.OrganizationData, selector edgeproto.AllSelector, out *edgeproto.OrganizationData) {
}

func (r *Run) OrganizationApi(data *[]edgeproto.Organization, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for Organization", "mode", r.Mode)
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "organizationinuse":
			out, err := r.client.OrganizationInUse(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("OrganizationApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunOrganizationApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		}
	}
}

func (s *ApiClient) OrganizationInUse(ctx context.Context, in *edgeproto.Organization) (*edgeproto.Result, error) {
	api := edgeproto.NewOrganizationApiClient(s.Conn)
	return api.OrganizationInUse(ctx, in)
}

func (s *CliClient) OrganizationInUse(ctx context.Context, in *edgeproto.Organization) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "OrganizationInUse")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

type OrganizationApiClient interface {
	OrganizationInUse(ctx context.Context, in *edgeproto.Organization) (*edgeproto.Result, error)
}
