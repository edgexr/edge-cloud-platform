// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controller.proto

package testutil

import (
	"context"
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/edgectl/wrapper"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"io"
	math "math"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func (r *Run) ControllerApi(data *[]edgeproto.Controller, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for Controller", "mode", r.Mode)
	if r.Mode == "show" {
		obj := &edgeproto.Controller{}
		out, err := r.client.ShowController(r.ctx, obj)
		if err != nil {
			r.logErr("ControllerApi", err)
		} else {
			outp, ok := dataOut.(*[]edgeproto.Controller)
			if !ok {
				panic(fmt.Sprintf("RunControllerApi expected dataOut type *[]edgeproto.Controller, but was %T", dataOut))
			}
			*outp = append(*outp, out...)
		}
		return
	}
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "showfiltered":
			out, err := r.client.ShowController(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("ControllerApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Controller)
				if !ok {
					panic(fmt.Sprintf("RunControllerApi expected dataOut type *[]edgeproto.Controller, but was %T", dataOut))
				}
				*outp = append(*outp, out...)
			}
		}
	}
}

func (s *DummyServer) ShowController(in *edgeproto.Controller, server edgeproto.ControllerApi_ShowControllerServer) error {
	var err error
	obj := &edgeproto.Controller{}
	if obj.Matches(in, edgeproto.MatchFilter()) {
		for ii := 0; ii < s.ShowDummyCount; ii++ {
			server.Send(&edgeproto.Controller{})
		}
		if ch, ok := s.MidstreamFailChs["ShowController"]; ok {
			// Wait until client receives the SendMsg, since they
			// are buffered and dropped once we return err here.
			select {
			case <-ch:
			case <-time.After(5 * time.Second):
			}
			return fmt.Errorf("midstream failure!")
		}
	}
	err = s.ControllerCache.Show(in, func(obj *edgeproto.Controller) error {
		err := server.Send(obj)
		return err
	})
	return err
}

type ControllerStream interface {
	Recv() (*edgeproto.Controller, error)
}

func ControllerReadStream(stream ControllerStream) ([]edgeproto.Controller, error) {
	output := []edgeproto.Controller{}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return output, fmt.Errorf("read Controller stream failed, %v", err)
		}
		output = append(output, *obj)
	}
	return output, nil
}

func (s *ApiClient) ShowController(ctx context.Context, in *edgeproto.Controller) ([]edgeproto.Controller, error) {
	api := edgeproto.NewControllerApiClient(s.Conn)
	stream, err := api.ShowController(ctx, in)
	if err != nil {
		return nil, err
	}
	return ControllerReadStream(stream)
}

func (s *CliClient) ShowController(ctx context.Context, in *edgeproto.Controller) ([]edgeproto.Controller, error) {
	output := []edgeproto.Controller{}
	args := append(s.BaseArgs, "controller", "ShowController")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

type ControllerApiClient interface {
	ShowController(ctx context.Context, in *edgeproto.Controller) ([]edgeproto.Controller, error)
}
