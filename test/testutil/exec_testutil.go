// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exec.proto

package testutil

import (
	"context"
	fmt "fmt"
	"github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/edgectl/wrapper"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func (r *Run) ExecApi_ExecRequest(data *[]edgeproto.ExecRequest, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for ExecRequest", "mode", r.Mode)
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "runcommand":
			out, err := r.client.RunCommand(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("ExecApi_ExecRequest[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.ExecRequest)
				if !ok {
					panic(fmt.Sprintf("RunExecApi_ExecRequest expected dataOut type *[]edgeproto.ExecRequest, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "runconsole":
			out, err := r.client.RunConsole(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("ExecApi_ExecRequest[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.ExecRequest)
				if !ok {
					panic(fmt.Sprintf("RunExecApi_ExecRequest expected dataOut type *[]edgeproto.ExecRequest, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "showlogs":
			out, err := r.client.ShowLogs(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("ExecApi_ExecRequest[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.ExecRequest)
				if !ok {
					panic(fmt.Sprintf("RunExecApi_ExecRequest expected dataOut type *[]edgeproto.ExecRequest, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "accesscloudlet":
			out, err := r.client.AccessCloudlet(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("ExecApi_ExecRequest[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.ExecRequest)
				if !ok {
					panic(fmt.Sprintf("RunExecApi_ExecRequest expected dataOut type *[]edgeproto.ExecRequest, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "sendlocalrequest":
			out, err := r.client.SendLocalRequest(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("ExecApi_ExecRequest[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.ExecRequest)
				if !ok {
					panic(fmt.Sprintf("RunExecApi_ExecRequest expected dataOut type *[]edgeproto.ExecRequest, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		}
	}
}

func (s *ApiClient) RunCommand(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error) {
	api := edgeproto.NewExecApiClient(s.Conn)
	return api.RunCommand(ctx, in)
}

func (s *CliClient) RunCommand(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error) {
	out := edgeproto.ExecRequest{}
	args := append(s.BaseArgs, "controller", "RunCommand")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) RunConsole(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error) {
	api := edgeproto.NewExecApiClient(s.Conn)
	return api.RunConsole(ctx, in)
}

func (s *CliClient) RunConsole(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error) {
	out := edgeproto.ExecRequest{}
	args := append(s.BaseArgs, "controller", "RunConsole")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) ShowLogs(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error) {
	api := edgeproto.NewExecApiClient(s.Conn)
	return api.ShowLogs(ctx, in)
}

func (s *CliClient) ShowLogs(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error) {
	out := edgeproto.ExecRequest{}
	args := append(s.BaseArgs, "controller", "ShowLogs")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) AccessCloudlet(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error) {
	api := edgeproto.NewExecApiClient(s.Conn)
	return api.AccessCloudlet(ctx, in)
}

func (s *CliClient) AccessCloudlet(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error) {
	out := edgeproto.ExecRequest{}
	args := append(s.BaseArgs, "controller", "AccessCloudlet")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) SendLocalRequest(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error) {
	api := edgeproto.NewExecApiClient(s.Conn)
	return api.SendLocalRequest(ctx, in)
}

func (s *CliClient) SendLocalRequest(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error) {
	out := edgeproto.ExecRequest{}
	args := append(s.BaseArgs, "controller", "SendLocalRequest")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

type ExecApiClient interface {
	RunCommand(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error)
	RunConsole(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error)
	ShowLogs(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error)
	AccessCloudlet(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error)
	SendLocalRequest(ctx context.Context, in *edgeproto.ExecRequest) (*edgeproto.ExecRequest, error)
}
