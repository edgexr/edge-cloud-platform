// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package testutil

import (
	"context"
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/cli"
	"github.com/edgexr/edge-cloud-platform/pkg/edgectl/wrapper"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/stretchr/testify/require"
	"google.golang.org/grpc"
	"io"
	math "math"
	"testing"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

type ShowNode struct {
	Data map[string]edgeproto.Node
	grpc.ServerStream
	Ctx context.Context
}

func (x *ShowNode) Init() {
	x.Data = make(map[string]edgeproto.Node)
}

func (x *ShowNode) Send(m *edgeproto.Node) error {
	x.Data[m.GetKey().GetKeyString()] = *m
	return nil
}

func (x *ShowNode) Context() context.Context {
	return x.Ctx
}

var NodeShowExtraCount = 0

func (x *ShowNode) ReadStream(stream edgeproto.NodeApi_ShowNodeClient, err error) {
	x.Data = make(map[string]edgeproto.Node)
	if err != nil {
		return
	}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			break
		}
		x.Data[obj.GetKey().GetKeyString()] = *obj
	}
}

func (x *ShowNode) CheckFound(obj *edgeproto.Node) bool {
	_, found := x.Data[obj.GetKey().GetKeyString()]
	return found
}

func (x *ShowNode) AssertFound(t *testing.T, obj *edgeproto.Node) {
	check, found := x.Data[obj.GetKey().GetKeyString()]
	require.True(t, found, "find Node %s", obj.GetKey().GetKeyString())
	if found && !check.Matches(obj, edgeproto.MatchIgnoreBackend(), edgeproto.MatchSortArrayedKeys()) {
		require.Equal(t, *obj, check, "Node are equal")
	}
	if found {
		// remove in case there are dups in the list, so the
		// same object cannot be used again
		delete(x.Data, obj.GetKey().GetKeyString())
	}
}

func (x *ShowNode) AssertNotFound(t *testing.T, obj *edgeproto.Node) {
	_, found := x.Data[obj.GetKey().GetKeyString()]
	require.False(t, found, "do not find Node %s", obj.GetKey().GetKeyString())
}

func WaitAssertFoundNode(t *testing.T, api edgeproto.NodeApiClient, obj *edgeproto.Node, count int, retry time.Duration) {
	show := ShowNode{}
	for ii := 0; ii < count; ii++ {
		ctx, cancel := context.WithTimeout(context.Background(), retry)
		stream, err := api.ShowNode(ctx, obj)
		show.ReadStream(stream, err)
		cancel()
		if show.CheckFound(obj) {
			break
		}
		time.Sleep(retry)
	}
	show.AssertFound(t, obj)
}

func WaitAssertNotFoundNode(t *testing.T, api edgeproto.NodeApiClient, obj *edgeproto.Node, count int, retry time.Duration) {
	show := ShowNode{}
	filterNone := edgeproto.Node{}
	for ii := 0; ii < count; ii++ {
		ctx, cancel := context.WithTimeout(context.Background(), retry)
		stream, err := api.ShowNode(ctx, &filterNone)
		show.ReadStream(stream, err)
		cancel()
		if !show.CheckFound(obj) {
			break
		}
		time.Sleep(retry)
	}
	show.AssertNotFound(t, obj)
}

// Wrap the api with a common interface
type NodeCommonApi struct {
	internal_api edgeproto.NodeApiServer
	client_api   edgeproto.NodeApiClient
}

func (x *NodeCommonApi) CreateNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	copy := &edgeproto.Node{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.CreateNode(ctx, copy)
	} else {
		res, err := x.client_api.CreateNode(ctx, copy)
		return res, unwrapGrpcError(err)
	}
}

func (x *NodeCommonApi) DeleteNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	copy := &edgeproto.Node{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.DeleteNode(ctx, copy)
	} else {
		res, err := x.client_api.DeleteNode(ctx, copy)
		return res, unwrapGrpcError(err)
	}
}

func (x *NodeCommonApi) UpdateNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	copy := &edgeproto.Node{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.UpdateNode(ctx, copy)
	} else {
		res, err := x.client_api.UpdateNode(ctx, copy)
		return res, unwrapGrpcError(err)
	}
}

func (x *NodeCommonApi) ShowNode(ctx context.Context, filter *edgeproto.Node, showData *ShowNode) error {
	if x.internal_api != nil {
		showData.Ctx = ctx
		return x.internal_api.ShowNode(filter, showData)
	} else {
		stream, err := x.client_api.ShowNode(ctx, filter)
		showData.ReadStream(stream, err)
		return unwrapGrpcError(err)
	}
}

func NewInternalNodeApi(api edgeproto.NodeApiServer) *NodeCommonApi {
	apiWrap := NodeCommonApi{}
	apiWrap.internal_api = api
	return &apiWrap
}

func NewClientNodeApi(api edgeproto.NodeApiClient) *NodeCommonApi {
	apiWrap := NodeCommonApi{}
	apiWrap.client_api = api
	return &apiWrap
}

type NodeTestOptions struct {
	createdData []edgeproto.Node
}

type NodeTestOp func(opts *NodeTestOptions)

func WithCreatedNodeTestData(createdData []edgeproto.Node) NodeTestOp {
	return func(opts *NodeTestOptions) { opts.createdData = createdData }
}

func InternalNodeTest(t *testing.T, test string, api edgeproto.NodeApiServer, testData []edgeproto.Node, ops ...NodeTestOp) {
	span := log.StartSpan(log.DebugLevelApi, "InternalNodeTest")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	switch test {
	case "cud":
		basicNodeCudTest(t, ctx, NewInternalNodeApi(api), testData, ops...)
	case "show":
		basicNodeShowTest(t, ctx, NewInternalNodeApi(api), testData)
	}
}

func ClientNodeTest(t *testing.T, test string, api edgeproto.NodeApiClient, testData []edgeproto.Node, ops ...NodeTestOp) {
	span := log.StartSpan(log.DebugLevelApi, "ClientNodeTest")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	switch test {
	case "cud":
		basicNodeCudTest(t, ctx, NewClientNodeApi(api), testData, ops...)
	case "show":
		basicNodeShowTest(t, ctx, NewClientNodeApi(api), testData)
	}
}

func basicNodeShowTest(t *testing.T, ctx context.Context, api *NodeCommonApi, testData []edgeproto.Node) {
	var err error

	show := ShowNode{}
	show.Init()
	filterNone := edgeproto.Node{}
	err = api.ShowNode(ctx, &filterNone, &show)
	require.Nil(t, err, "show data")
	require.Equal(t, len(testData)+NodeShowExtraCount, len(show.Data), "Show count")
	for _, obj := range testData {
		show.AssertFound(t, &obj)
	}
}

func GetNode(t *testing.T, ctx context.Context, api *NodeCommonApi, key *edgeproto.NodeKey, out *edgeproto.Node) bool {
	var err error

	show := ShowNode{}
	show.Init()
	filter := edgeproto.Node{}
	filter.SetKey(key)
	err = api.ShowNode(ctx, &filter, &show)
	require.Nil(t, err, "show data")
	obj, found := show.Data[key.GetKeyString()]
	if found {
		*out = obj
	}
	return found
}

func basicNodeCudTest(t *testing.T, ctx context.Context, api *NodeCommonApi, testData []edgeproto.Node, ops ...NodeTestOp) {
	var err error

	if len(testData) < 3 {
		require.True(t, false, "Need at least 3 test data objects")
		return
	}
	options := NodeTestOptions{}
	for _, op := range ops {
		op(&options)
	}
	createdData := testData
	if options.createdData != nil {
		createdData = options.createdData
	}

	// test create
	CreateNodeData(t, ctx, api, testData)

	// test duplicate Create - should fail
	_, err = api.CreateNode(ctx, &testData[0])
	require.NotNil(t, err, "Create duplicate Node")

	// test show all items
	basicNodeShowTest(t, ctx, api, createdData)

	// test Delete
	_, err = api.DeleteNode(ctx, &createdData[0])
	require.Nil(t, err, "Delete Node %s", testData[0].GetKey().GetKeyString())
	show := ShowNode{}
	show.Init()
	filterNone := edgeproto.Node{}
	err = api.ShowNode(ctx, &filterNone, &show)
	require.Nil(t, err, "show data")
	require.Equal(t, len(createdData)-1+NodeShowExtraCount, len(show.Data), "Show count")
	show.AssertNotFound(t, &createdData[0])
	// test update of missing object
	_, err = api.UpdateNode(ctx, &createdData[0])
	require.NotNil(t, err, "Update missing object")
	// Create it back
	_, err = api.CreateNode(ctx, &testData[0])
	require.Nil(t, err, "Create Node %s", testData[0].GetKey().GetKeyString())

	// test invalid keys
	bad := edgeproto.Node{}
	_, err = api.CreateNode(ctx, &bad)
	require.NotNil(t, err, "Create Node with no key info")

}

func InternalNodeCreate(t *testing.T, api edgeproto.NodeApiServer, testData []edgeproto.Node) {
	span := log.StartSpan(log.DebugLevelApi, "InternalNodeCreate")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	CreateNodeData(t, ctx, NewInternalNodeApi(api), testData)
}

func ClientNodeCreate(t *testing.T, api edgeproto.NodeApiClient, testData []edgeproto.Node) {
	span := log.StartSpan(log.DebugLevelApi, "ClientNodeCreate")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	CreateNodeData(t, ctx, NewClientNodeApi(api), testData)
}

func CreateNodeData(t *testing.T, ctx context.Context, api *NodeCommonApi, testData []edgeproto.Node) {
	var err error

	for ii := range testData {
		obj := testData[ii]
		_, err = api.CreateNode(ctx, &obj)
		require.Nil(t, err, "Create Node %s", obj.GetKey().GetKeyString())
	}
}

func InternalNodeDelete(t *testing.T, api edgeproto.NodeApiServer, testData []edgeproto.Node) {
	span := log.StartSpan(log.DebugLevelApi, "InternalNodeDelete")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	DeleteNodeData(t, ctx, NewInternalNodeApi(api), testData)
}

func InternalNodeDeleteAll(t *testing.T, ctx context.Context, api edgeproto.NodeApiServer, data []edgeproto.Node) {
	intapi := NewInternalNodeApi(api)
	log.SpanLog(ctx, log.DebugLevelInfo, "deleting all Nodes", "count", len(data))
	DeleteNodeData(t, ctx, intapi, data)
}

func ClientNodeDelete(t *testing.T, api edgeproto.NodeApiClient, testData []edgeproto.Node) {
	span := log.StartSpan(log.DebugLevelApi, "ClientNodeDelete")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	DeleteNodeData(t, ctx, NewClientNodeApi(api), testData)
}

func DeleteNodeData(t *testing.T, ctx context.Context, api *NodeCommonApi, testData []edgeproto.Node) {
	var err error

	for ii := range testData {
		obj := testData[ii]
		_, err = api.DeleteNode(ctx, &obj)
		require.Nil(t, err, "Delete Node %s", obj.GetKey().GetKeyString())
	}
}

func FindNodeData(key *edgeproto.NodeKey, testData []edgeproto.Node) (*edgeproto.Node, bool) {
	for ii, _ := range testData {
		if testData[ii].GetKey().Matches(key) {
			return &testData[ii], true
		}
	}
	return nil, false
}

func (r *Run) NodeApi(data *[]edgeproto.Node, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for Node", "mode", r.Mode)
	if r.Mode == "show" {
		obj := &edgeproto.Node{}
		out, err := r.client.ShowNode(r.ctx, obj)
		if err != nil {
			r.logErr("NodeApi", err)
		} else {
			outp, ok := dataOut.(*[]edgeproto.Node)
			if !ok {
				panic(fmt.Sprintf("RunNodeApi expected dataOut type *[]edgeproto.Node, but was %T", dataOut))
			}
			*outp = append(*outp, out...)
		}
		return
	}
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "create":
			out, err := r.client.CreateNode(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("NodeApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunNodeApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "delete":
			out, err := r.client.DeleteNode(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("NodeApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunNodeApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "update":
			// set specified fields
			objMap, err := cli.GetGenericObjFromList(dataMap, ii)
			if err != nil {
				log.DebugLog(log.DebugLevelApi, "bad dataMap for Node", "err", err)
				*r.Rc = false
				return
			}
			yamlData := cli.MapData{
				Namespace: cli.YamlNamespace,
				Data:      objMap,
			}
			obj.Fields = cli.GetSpecifiedFields(&yamlData, obj)

			out, err := r.client.UpdateNode(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("NodeApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunNodeApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "showfiltered":
			out, err := r.client.ShowNode(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("NodeApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Node)
				if !ok {
					panic(fmt.Sprintf("RunNodeApi expected dataOut type *[]edgeproto.Node, but was %T", dataOut))
				}
				*outp = append(*outp, out...)
			}
		}
	}
}

func (s *DummyServer) CreateNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.NodeCache.Update(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) DeleteNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.NodeCache.Delete(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) UpdateNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.NodeCache.Update(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) ShowNode(in *edgeproto.Node, server edgeproto.NodeApi_ShowNodeServer) error {
	var err error
	obj := &edgeproto.Node{}
	if obj.Matches(in, edgeproto.MatchFilter()) {
		for ii := 0; ii < s.ShowDummyCount; ii++ {
			server.Send(&edgeproto.Node{})
		}
		if ch, ok := s.MidstreamFailChs["ShowNode"]; ok {
			// Wait until client receives the SendMsg, since they
			// are buffered and dropped once we return err here.
			select {
			case <-ch:
			case <-time.After(5 * time.Second):
			}
			return fmt.Errorf("midstream failure!")
		}
	}
	err = s.NodeCache.Show(in, func(obj *edgeproto.Node) error {
		err := server.Send(obj)
		return err
	})
	return err
}

func (s *ApiClient) CreateNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	api := edgeproto.NewNodeApiClient(s.Conn)
	return api.CreateNode(ctx, in)
}

func (s *CliClient) CreateNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "CreateNode")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) DeleteNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	api := edgeproto.NewNodeApiClient(s.Conn)
	return api.DeleteNode(ctx, in)
}

func (s *CliClient) DeleteNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "DeleteNode")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) UpdateNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	api := edgeproto.NewNodeApiClient(s.Conn)
	return api.UpdateNode(ctx, in)
}

func (s *CliClient) UpdateNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "UpdateNode")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

type NodeStream interface {
	Recv() (*edgeproto.Node, error)
}

func NodeReadStream(stream NodeStream) ([]edgeproto.Node, error) {
	output := []edgeproto.Node{}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return output, fmt.Errorf("read Node stream failed, %v", err)
		}
		output = append(output, *obj)
	}
	return output, nil
}

func (s *ApiClient) ShowNode(ctx context.Context, in *edgeproto.Node) ([]edgeproto.Node, error) {
	api := edgeproto.NewNodeApiClient(s.Conn)
	stream, err := api.ShowNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return NodeReadStream(stream)
}

func (s *CliClient) ShowNode(ctx context.Context, in *edgeproto.Node) ([]edgeproto.Node, error) {
	output := []edgeproto.Node{}
	args := append(s.BaseArgs, "controller", "ShowNode")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

type NodeApiClient interface {
	CreateNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error)
	DeleteNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error)
	UpdateNode(ctx context.Context, in *edgeproto.Node) (*edgeproto.Result, error)
	ShowNode(ctx context.Context, in *edgeproto.Node) ([]edgeproto.Node, error)
}
