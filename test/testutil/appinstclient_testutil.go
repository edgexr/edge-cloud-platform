// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: appinstclient.proto

package testutil

import (
	"context"
	fmt "fmt"
	_ "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	"github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/edgectl/wrapper"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"io"
	math "math"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func (r *Run) AppInstClientApi_AppInstClientKey(data *[]edgeproto.AppInstClientKey, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for AppInstClientKey", "mode", r.Mode)
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "showappinstclient":
			out, err := r.client.ShowAppInstClient(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("AppInstClientApi_AppInstClientKey[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[][]edgeproto.AppInstClient)
				if !ok {
					panic(fmt.Sprintf("RunAppInstClientApi_AppInstClientKey expected dataOut type *[][]edgeproto.AppInstClient, but was %T", dataOut))
				}
				*outp = append(*outp, out)
			}
		case "streamappinstclientslocal":
			out, err := r.client.StreamAppInstClientsLocal(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("AppInstClientApi_AppInstClientKey[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[][]edgeproto.AppInstClient)
				if !ok {
					panic(fmt.Sprintf("RunAppInstClientApi_AppInstClientKey expected dataOut type *[][]edgeproto.AppInstClient, but was %T", dataOut))
				}
				*outp = append(*outp, out)
			}
		}
	}
}

func (s *DummyServer) ShowAppInstClient(in *edgeproto.AppInstClientKey, server edgeproto.AppInstClientApi_ShowAppInstClientServer) error {
	var err error
	if true {
		for ii := 0; ii < s.ShowDummyCount; ii++ {
			server.Send(&edgeproto.AppInstClient{})
		}
		if ch, ok := s.MidstreamFailChs["ShowAppInstClient"]; ok {
			// Wait until client receives the SendMsg, since they
			// are buffered and dropped once we return err here.
			select {
			case <-ch:
			case <-time.After(5 * time.Second):
			}
			return fmt.Errorf("midstream failure!")
		}
	}
	return err
}

func (s *DummyServer) StreamAppInstClientsLocal(in *edgeproto.AppInstClientKey, server edgeproto.AppInstClientApi_StreamAppInstClientsLocalServer) error {
	var err error
	if true {
		for ii := 0; ii < s.ShowDummyCount; ii++ {
			server.Send(&edgeproto.AppInstClient{})
		}
		if ch, ok := s.MidstreamFailChs["StreamAppInstClientsLocal"]; ok {
			// Wait until client receives the SendMsg, since they
			// are buffered and dropped once we return err here.
			select {
			case <-ch:
			case <-time.After(5 * time.Second):
			}
			return fmt.Errorf("midstream failure!")
		}
	}
	return err
}

type AppInstClientStream interface {
	Recv() (*edgeproto.AppInstClient, error)
}

func AppInstClientReadStream(stream AppInstClientStream) ([]edgeproto.AppInstClient, error) {
	output := []edgeproto.AppInstClient{}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return output, fmt.Errorf("read AppInstClient stream failed, %v", err)
		}
		output = append(output, *obj)
	}
	return output, nil
}

func (s *ApiClient) ShowAppInstClient(ctx context.Context, in *edgeproto.AppInstClientKey) ([]edgeproto.AppInstClient, error) {
	api := edgeproto.NewAppInstClientApiClient(s.Conn)
	stream, err := api.ShowAppInstClient(ctx, in)
	if err != nil {
		return nil, err
	}
	return AppInstClientReadStream(stream)
}

func (s *CliClient) ShowAppInstClient(ctx context.Context, in *edgeproto.AppInstClientKey) ([]edgeproto.AppInstClient, error) {
	output := []edgeproto.AppInstClient{}
	args := append(s.BaseArgs, "controller", "ShowAppInstClient")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

func (s *ApiClient) StreamAppInstClientsLocal(ctx context.Context, in *edgeproto.AppInstClientKey) ([]edgeproto.AppInstClient, error) {
	api := edgeproto.NewAppInstClientApiClient(s.Conn)
	stream, err := api.StreamAppInstClientsLocal(ctx, in)
	if err != nil {
		return nil, err
	}
	return AppInstClientReadStream(stream)
}

func (s *CliClient) StreamAppInstClientsLocal(ctx context.Context, in *edgeproto.AppInstClientKey) ([]edgeproto.AppInstClient, error) {
	output := []edgeproto.AppInstClient{}
	args := append(s.BaseArgs, "controller", "StreamAppInstClientsLocal")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

type AppInstClientApiClient interface {
	ShowAppInstClient(ctx context.Context, in *edgeproto.AppInstClientKey) ([]edgeproto.AppInstClient, error)
	StreamAppInstClientsLocal(ctx context.Context, in *edgeproto.AppInstClientKey) ([]edgeproto.AppInstClient, error)
}
