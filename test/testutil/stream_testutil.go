// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stream.proto

package testutil

import (
	"context"
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/edgectl/wrapper"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func (r *Run) StreamObjApi_AppInstKey(data *[]edgeproto.AppInstKey, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for AppInstKey", "mode", r.Mode)
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "streamappinst":
			out, err := r.client.StreamAppInst(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("StreamObjApi_AppInstKey[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[][]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunStreamObjApi_AppInstKey expected dataOut type *[][]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, out)
			}
		}
	}
}

func (r *Run) StreamObjApi_CloudletKey(data *[]edgeproto.CloudletKey, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for CloudletKey", "mode", r.Mode)
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "streamcloudlet":
			out, err := r.client.StreamCloudlet(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("StreamObjApi_CloudletKey[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[][]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunStreamObjApi_CloudletKey expected dataOut type *[][]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, out)
			}
		}
	}
}

func (r *Run) StreamObjApi_ClusterInstKey(data *[]edgeproto.ClusterInstKey, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for ClusterInstKey", "mode", r.Mode)
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "streamclusterinst":
			out, err := r.client.StreamClusterInst(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("StreamObjApi_ClusterInstKey[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[][]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunStreamObjApi_ClusterInstKey expected dataOut type *[][]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, out)
			}
		}
	}
}

func (r *Run) StreamObjApi_GPUDriverKey(data *[]edgeproto.GPUDriverKey, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for GPUDriverKey", "mode", r.Mode)
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "streamgpudriver":
			out, err := r.client.StreamGPUDriver(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("StreamObjApi_GPUDriverKey[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[][]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunStreamObjApi_GPUDriverKey expected dataOut type *[][]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, out)
			}
		}
	}
}

func (s *ApiClient) StreamAppInst(ctx context.Context, in *edgeproto.AppInstKey) ([]edgeproto.Result, error) {
	api := edgeproto.NewStreamObjApiClient(s.Conn)
	stream, err := api.StreamAppInst(ctx, in)
	if err != nil {
		return nil, err
	}
	return ResultReadStream(stream)
}

func (s *CliClient) StreamAppInst(ctx context.Context, in *edgeproto.AppInstKey) ([]edgeproto.Result, error) {
	output := []edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "StreamAppInst")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

func (s *ApiClient) StreamClusterInst(ctx context.Context, in *edgeproto.ClusterInstKey) ([]edgeproto.Result, error) {
	api := edgeproto.NewStreamObjApiClient(s.Conn)
	stream, err := api.StreamClusterInst(ctx, in)
	if err != nil {
		return nil, err
	}
	return ResultReadStream(stream)
}

func (s *CliClient) StreamClusterInst(ctx context.Context, in *edgeproto.ClusterInstKey) ([]edgeproto.Result, error) {
	output := []edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "StreamClusterInst")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

func (s *ApiClient) StreamCloudlet(ctx context.Context, in *edgeproto.CloudletKey) ([]edgeproto.Result, error) {
	api := edgeproto.NewStreamObjApiClient(s.Conn)
	stream, err := api.StreamCloudlet(ctx, in)
	if err != nil {
		return nil, err
	}
	return ResultReadStream(stream)
}

func (s *CliClient) StreamCloudlet(ctx context.Context, in *edgeproto.CloudletKey) ([]edgeproto.Result, error) {
	output := []edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "StreamCloudlet")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

func (s *ApiClient) StreamGPUDriver(ctx context.Context, in *edgeproto.GPUDriverKey) ([]edgeproto.Result, error) {
	api := edgeproto.NewStreamObjApiClient(s.Conn)
	stream, err := api.StreamGPUDriver(ctx, in)
	if err != nil {
		return nil, err
	}
	return ResultReadStream(stream)
}

func (s *CliClient) StreamGPUDriver(ctx context.Context, in *edgeproto.GPUDriverKey) ([]edgeproto.Result, error) {
	output := []edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "StreamGPUDriver")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

type StreamObjApiClient interface {
	StreamAppInst(ctx context.Context, in *edgeproto.AppInstKey) ([]edgeproto.Result, error)
	StreamClusterInst(ctx context.Context, in *edgeproto.ClusterInstKey) ([]edgeproto.Result, error)
	StreamCloudlet(ctx context.Context, in *edgeproto.CloudletKey) ([]edgeproto.Result, error)
	StreamGPUDriver(ctx context.Context, in *edgeproto.GPUDriverKey) ([]edgeproto.Result, error)
}
