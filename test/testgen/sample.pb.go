// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sample.proto

package testgen

import (
	context "context"
	encoding_binary "encoding/binary"
	"encoding/json"
	"errors"
	fmt "fmt"
	distributed_match_engine "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	"github.com/edgexr/edge-cloud-platform/pkg/util"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"go.etcd.io/etcd/client/v3/concurrency"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	"sort"
	"strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OuterEnum int32

const (
	OuterEnum_OUTER0 OuterEnum = 0
	OuterEnum_OUTER1 OuterEnum = 1
	OuterEnum_OUTER2 OuterEnum = 2
	OuterEnum_OUTER3 OuterEnum = 3
)

var OuterEnum_name = map[int32]string{
	0: "OUTER0",
	1: "OUTER1",
	2: "OUTER2",
	3: "OUTER3",
}

var OuterEnum_value = map[string]int32{
	"OUTER0": 0,
	"OUTER1": 1,
	"OUTER2": 2,
	"OUTER3": 3,
}

func (x OuterEnum) String() string {
	return proto.EnumName(OuterEnum_name, int32(x))
}

func (OuterEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{0}
}

type TestGen_InnerEnum int32

const (
	TestGen_INNER0 TestGen_InnerEnum = 0
	TestGen_INNER1 TestGen_InnerEnum = 1
	TestGen_INNER2 TestGen_InnerEnum = 2
	TestGen_INNER3 TestGen_InnerEnum = 3
)

var TestGen_InnerEnum_name = map[int32]string{
	0: "INNER0",
	1: "INNER1",
	2: "INNER2",
	3: "INNER3",
}

var TestGen_InnerEnum_value = map[string]int32{
	"INNER0": 0,
	"INNER1": 1,
	"INNER2": 2,
	"INNER3": 3,
}

func (x TestGen_InnerEnum) String() string {
	return proto.EnumName(TestGen_InnerEnum_name, int32(x))
}

func (TestGen_InnerEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{3, 0}
}

type NestedMessage struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NestedMessage) Reset()         { *m = NestedMessage{} }
func (m *NestedMessage) String() string { return proto.CompactTextString(m) }
func (*NestedMessage) ProtoMessage()    {}
func (*NestedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{0}
}
func (m *NestedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NestedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedMessage.Merge(m, src)
}
func (m *NestedMessage) XXX_Size() int {
	return m.Size()
}
func (m *NestedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NestedMessage proto.InternalMessageInfo

type IncludeMessage struct {
	Name                 string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   uint64         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	NestedMsg            *NestedMessage `protobuf:"bytes,3,opt,name=nested_msg,json=nestedMsg,proto3" json:"nested_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *IncludeMessage) Reset()         { *m = IncludeMessage{} }
func (m *IncludeMessage) String() string { return proto.CompactTextString(m) }
func (*IncludeMessage) ProtoMessage()    {}
func (*IncludeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{1}
}
func (m *IncludeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncludeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncludeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncludeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncludeMessage.Merge(m, src)
}
func (m *IncludeMessage) XXX_Size() int {
	return m.Size()
}
func (m *IncludeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IncludeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IncludeMessage proto.InternalMessageInfo

type IncludeFields struct {
	Fields               []byte   `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncludeFields) Reset()         { *m = IncludeFields{} }
func (m *IncludeFields) String() string { return proto.CompactTextString(m) }
func (*IncludeFields) ProtoMessage()    {}
func (*IncludeFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{2}
}
func (m *IncludeFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncludeFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncludeFields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncludeFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncludeFields.Merge(m, src)
}
func (m *IncludeFields) XXX_Size() int {
	return m.Size()
}
func (m *IncludeFields) XXX_DiscardUnknown() {
	xxx_messageInfo_IncludeFields.DiscardUnknown(m)
}

var xxx_messageInfo_IncludeFields proto.InternalMessageInfo

type TestGen struct {
	Fields                  []string                        `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Name                    string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Db                      float64                         `protobuf:"fixed64,3,opt,name=db,proto3" json:"db,omitempty"`
	Fl                      float32                         `protobuf:"fixed32,4,opt,name=fl,proto3" json:"fl,omitempty"`
	I32                     int32                           `protobuf:"varint,5,opt,name=i32,proto3" json:"i32,omitempty"`
	I64                     int64                           `protobuf:"varint,6,opt,name=i64,proto3" json:"i64,omitempty"`
	U32                     uint32                          `protobuf:"varint,7,opt,name=u32,proto3" json:"u32,omitempty"`
	U64                     uint64                          `protobuf:"varint,8,opt,name=u64,proto3" json:"u64,omitempty"`
	S32                     int32                           `protobuf:"zigzag32,9,opt,name=s32,proto3" json:"s32,omitempty"`
	S64                     int64                           `protobuf:"zigzag64,10,opt,name=s64,proto3" json:"s64,omitempty"`
	F32                     uint32                          `protobuf:"fixed32,11,opt,name=f32,proto3" json:"f32,omitempty"`
	F64                     uint64                          `protobuf:"fixed64,12,opt,name=f64,proto3" json:"f64,omitempty"`
	Sf32                    int32                           `protobuf:"fixed32,13,opt,name=sf32,proto3" json:"sf32,omitempty"`
	Sf64                    int64                           `protobuf:"fixed64,14,opt,name=sf64,proto3" json:"sf64,omitempty"`
	Bb                      bool                            `protobuf:"varint,15,opt,name=bb,proto3" json:"bb,omitempty"`
	OuterEn                 OuterEnum                       `protobuf:"varint,16,opt,name=outer_en,json=outerEn,proto3,enum=testgen.OuterEnum" json:"outer_en,omitempty"`
	InnerEn                 TestGen_InnerEnum               `protobuf:"varint,17,opt,name=inner_en,json=innerEn,proto3,enum=testgen.TestGen_InnerEnum" json:"inner_en,omitempty"`
	InnerMsg                *TestGen_InnerMessage           `protobuf:"bytes,18,opt,name=inner_msg,json=innerMsg,proto3" json:"inner_msg,omitempty"`
	InnerMsgNonnull         TestGen_InnerMessage            `protobuf:"bytes,19,opt,name=inner_msg_nonnull,json=innerMsgNonnull,proto3" json:"inner_msg_nonnull"`
	IncludeMsg              *IncludeMessage                 `protobuf:"bytes,20,opt,name=include_msg,json=includeMsg,proto3" json:"include_msg,omitempty"`
	IncludeMsgNonnull       IncludeMessage                  `protobuf:"bytes,21,opt,name=include_msg_nonnull,json=includeMsgNonnull,proto3" json:"include_msg_nonnull"`
	IncludeFields           *IncludeFields                  `protobuf:"bytes,22,opt,name=include_fields,json=includeFields,proto3" json:"include_fields,omitempty"`
	IncludeFieldsNonnull    IncludeFields                   `protobuf:"bytes,23,opt,name=include_fields_nonnull,json=includeFieldsNonnull,proto3" json:"include_fields_nonnull"`
	Loc                     *distributed_match_engine.Loc   `protobuf:"bytes,24,opt,name=loc,proto3" json:"loc,omitempty"`
	LocNonnull              distributed_match_engine.Loc    `protobuf:"bytes,25,opt,name=loc_nonnull,json=locNonnull,proto3" json:"loc_nonnull"`
	RepeatedInt             []int64                         `protobuf:"varint,26,rep,packed,name=repeated_int,json=repeatedInt,proto3" json:"repeated_int,omitempty"`
	Ip                      []byte                          `protobuf:"bytes,27,opt,name=ip,proto3" json:"ip,omitempty"`
	Names                   []string                        `protobuf:"bytes,28,rep,name=names,proto3" json:"names,omitempty"`
	RepeatedMsg             []*IncludeMessage               `protobuf:"bytes,29,rep,name=repeated_msg,json=repeatedMsg,proto3" json:"repeated_msg,omitempty"`
	RepeatedMsgNonnull      []IncludeMessage                `protobuf:"bytes,30,rep,name=repeated_msg_nonnull,json=repeatedMsgNonnull,proto3" json:"repeated_msg_nonnull"`
	RepeatedFields          []*IncludeFields                `protobuf:"bytes,31,rep,name=repeated_fields,json=repeatedFields,proto3" json:"repeated_fields,omitempty"`
	RepeatedFieldsNonnull   []IncludeFields                 `protobuf:"bytes,32,rep,name=repeated_fields_nonnull,json=repeatedFieldsNonnull,proto3" json:"repeated_fields_nonnull"`
	RepeatedInnerMsg        []*TestGen_InnerMessage         `protobuf:"bytes,33,rep,name=repeated_inner_msg,json=repeatedInnerMsg,proto3" json:"repeated_inner_msg,omitempty"`
	RepeatedInnerMsgNonnull []TestGen_InnerMessage          `protobuf:"bytes,34,rep,name=repeated_inner_msg_nonnull,json=repeatedInnerMsgNonnull,proto3" json:"repeated_inner_msg_nonnull"`
	RepeatedLoc             []*distributed_match_engine.Loc `protobuf:"bytes,35,rep,name=repeated_loc,json=repeatedLoc,proto3" json:"repeated_loc,omitempty"`
	RepeatedLocNonnull      []distributed_match_engine.Loc  `protobuf:"bytes,36,rep,name=repeated_loc_nonnull,json=repeatedLocNonnull,proto3" json:"repeated_loc_nonnull"`
	IntMap                  map[int32]int32                 `protobuf:"bytes,37,rep,name=intMap,proto3" json:"intMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MsgMap                  map[int32]*NestedMessage        `protobuf:"bytes,38,rep,name=msgMap,proto3" json:"msgMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// xxx win import of strings. xxx
	Unused               string   `protobuf:"bytes,39,opt,name=unused,proto3" json:"unused,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestGen) Reset()         { *m = TestGen{} }
func (m *TestGen) String() string { return proto.CompactTextString(m) }
func (*TestGen) ProtoMessage()    {}
func (*TestGen) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{3}
}
func (m *TestGen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGen.Merge(m, src)
}
func (m *TestGen) XXX_Size() int {
	return m.Size()
}
func (m *TestGen) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGen.DiscardUnknown(m)
}

var xxx_messageInfo_TestGen proto.InternalMessageInfo

type TestGen_InnerMessage struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestGen_InnerMessage) Reset()         { *m = TestGen_InnerMessage{} }
func (m *TestGen_InnerMessage) String() string { return proto.CompactTextString(m) }
func (*TestGen_InnerMessage) ProtoMessage()    {}
func (*TestGen_InnerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{3, 0}
}
func (m *TestGen_InnerMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestGen_InnerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestGen_InnerMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestGen_InnerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestGen_InnerMessage.Merge(m, src)
}
func (m *TestGen_InnerMessage) XXX_Size() int {
	return m.Size()
}
func (m *TestGen_InnerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestGen_InnerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestGen_InnerMessage proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("testgen.OuterEnum", OuterEnum_name, OuterEnum_value)
	proto.RegisterEnum("testgen.TestGen_InnerEnum", TestGen_InnerEnum_name, TestGen_InnerEnum_value)
	proto.RegisterType((*NestedMessage)(nil), "testgen.NestedMessage")
	proto.RegisterType((*IncludeMessage)(nil), "testgen.IncludeMessage")
	proto.RegisterType((*IncludeFields)(nil), "testgen.IncludeFields")
	proto.RegisterType((*TestGen)(nil), "testgen.TestGen")
	proto.RegisterMapType((map[int32]int32)(nil), "testgen.TestGen.IntMapEntry")
	proto.RegisterMapType((map[int32]*NestedMessage)(nil), "testgen.TestGen.MsgMapEntry")
	proto.RegisterType((*TestGen_InnerMessage)(nil), "testgen.TestGen.InnerMessage")
}

func init() { proto.RegisterFile("sample.proto", fileDescriptor_2141552de9bf11d0) }

var fileDescriptor_2141552de9bf11d0 = []byte{
	// 1013 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xd1, 0x72, 0xdb, 0x44,
	0x17, 0xce, 0x4a, 0xb1, 0x1d, 0x1f, 0xc7, 0x8e, 0xb2, 0x4d, 0x93, 0xad, 0xff, 0xc6, 0x55, 0xdd,
	0xbf, 0xa0, 0x61, 0xc0, 0x2e, 0xb6, 0xeb, 0x29, 0xce, 0x30, 0x40, 0x86, 0xc0, 0x64, 0x88, 0x93,
	0x61, 0x27, 0xbd, 0x0e, 0xb6, 0xb5, 0x11, 0x9a, 0xca, 0x2b, 0x63, 0x49, 0xcc, 0xf4, 0x35, 0x78,
	0x0a, 0xae, 0x79, 0x8a, 0x5c, 0xf2, 0x04, 0x0c, 0xe4, 0x8a, 0x2b, 0x6e, 0xe0, 0x01, 0x98, 0x5d,
	0xad, 0x36, 0xb2, 0x9b, 0x98, 0xdc, 0x7d, 0x7b, 0xf6, 0x7c, 0xdf, 0x7e, 0xab, 0xb3, 0xc7, 0xc7,
	0xb0, 0x19, 0x8d, 0xa6, 0xb3, 0x80, 0xb5, 0x66, 0xf3, 0x30, 0x0e, 0x71, 0x29, 0x66, 0x51, 0xec,
	0x31, 0x5e, 0xdf, 0xf1, 0x42, 0x2f, 0x94, 0xb1, 0xb6, 0x40, 0xe9, 0x76, 0xbd, 0xea, 0x4e, 0x59,
	0x3b, 0x08, 0x27, 0x6a, 0xb9, 0x1f, 0x87, 0x61, 0x10, 0xb5, 0xe5, 0xc2, 0x63, 0x5c, 0x83, 0x74,
	0xbb, 0xf9, 0x0c, 0xaa, 0xa7, 0x2c, 0x8a, 0x99, 0x3b, 0x64, 0x51, 0x34, 0xf2, 0x18, 0xc6, 0xb0,
	0xce, 0x47, 0x53, 0x46, 0x90, 0x8d, 0x9c, 0x32, 0x95, 0xb8, 0xf9, 0x06, 0x6a, 0xc7, 0x7c, 0x12,
	0x24, 0x2e, 0x5b, 0x91, 0x85, 0x6b, 0x60, 0xf8, 0x2e, 0x31, 0x6c, 0xe4, 0xac, 0x53, 0xc3, 0x77,
	0xf1, 0x4b, 0x00, 0x2e, 0xa5, 0x2f, 0xa6, 0x91, 0x47, 0x4c, 0x1b, 0x39, 0x95, 0xce, 0x6e, 0x4b,
	0x99, 0x6f, 0x2d, 0x9c, 0x4a, 0xcb, 0x69, 0xe6, 0x30, 0xf2, 0x9a, 0x07, 0x50, 0x55, 0x87, 0x7d,
	0xe5, 0xb3, 0xc0, 0x8d, 0xf0, 0x2e, 0x14, 0x2f, 0x25, 0x92, 0xa7, 0x6d, 0x52, 0xb5, 0xd2, 0x1e,
	0x8c, 0x9c, 0xd3, 0xbf, 0xb6, 0xa0, 0x74, 0xce, 0xa2, 0xf8, 0x6b, 0xc6, 0x17, 0x78, 0xa6, 0x53,
	0x5e, 0xc5, 0x13, 0xde, 0xdd, 0xb1, 0xf4, 0x88, 0xa8, 0xe1, 0x8e, 0xc5, 0xfa, 0x32, 0x20, 0xeb,
	0x36, 0x72, 0x0c, 0x6a, 0x5c, 0x06, 0xd8, 0x02, 0xd3, 0xef, 0x76, 0x48, 0xc1, 0x46, 0x4e, 0x81,
	0x0a, 0x28, 0x23, 0xfd, 0x1e, 0x29, 0xda, 0xc8, 0x31, 0xa9, 0x80, 0x22, 0x92, 0x74, 0x3b, 0xa4,
	0x64, 0x23, 0xa7, 0x4a, 0x05, 0x94, 0x91, 0x7e, 0x8f, 0x6c, 0xc8, 0x4f, 0x22, 0xa0, 0x88, 0x44,
	0xdd, 0x0e, 0x29, 0xdb, 0xc8, 0xd9, 0xa6, 0x02, 0xca, 0x48, 0xbf, 0x47, 0xc0, 0x46, 0x0e, 0xa6,
	0x02, 0x8a, 0xc8, 0x65, 0xb7, 0x43, 0x2a, 0x36, 0x72, 0x4a, 0x54, 0x40, 0x19, 0xe9, 0xf7, 0xc8,
	0xa6, 0x8d, 0x9c, 0x22, 0x15, 0x50, 0xdc, 0x21, 0x12, 0x49, 0x55, 0x1b, 0x39, 0x5b, 0x54, 0xe2,
	0x34, 0xd6, 0xef, 0x91, 0x9a, 0x8d, 0x1c, 0x8b, 0x4a, 0x2c, 0xee, 0x31, 0x1e, 0x93, 0x2d, 0x1b,
	0x39, 0x1b, 0xd4, 0x18, 0x8f, 0xf1, 0x47, 0xb0, 0x11, 0x26, 0x31, 0x9b, 0x5f, 0x30, 0x4e, 0x2c,
	0x1b, 0x39, 0xb5, 0x0e, 0xd6, 0x15, 0x39, 0x13, 0x1b, 0x47, 0x3c, 0x99, 0xd2, 0x52, 0x98, 0x42,
	0xfc, 0x12, 0x36, 0x7c, 0xce, 0xd3, 0xf4, 0x6d, 0x99, 0x5e, 0xd7, 0xe9, 0xea, 0x33, 0xb7, 0x8e,
	0x45, 0x42, 0x4a, 0xf3, 0x53, 0x88, 0x07, 0x50, 0x4e, 0x69, 0xa2, 0xf0, 0x58, 0x16, 0x7e, 0xff,
	0x76, 0x5e, 0x56, 0xff, 0xf4, 0x98, 0x61, 0xe4, 0xe1, 0x33, 0xd8, 0xd6, 0xdc, 0x0b, 0x1e, 0x72,
	0x9e, 0x04, 0x01, 0x79, 0x70, 0x0f, 0x8d, 0xc3, 0xf5, 0xab, 0xdf, 0x9e, 0xac, 0xd1, 0xad, 0x4c,
	0xe9, 0x34, 0xe5, 0xe2, 0x57, 0x50, 0xf1, 0xd3, 0xf7, 0x24, 0xed, 0xec, 0x48, 0xa9, 0x3d, 0x2d,
	0xb5, 0xf8, 0xb0, 0x29, 0xa8, 0x5c, 0x61, 0x65, 0x08, 0x0f, 0x72, 0x4c, 0x6d, 0xe6, 0xe1, 0x4a,
	0x05, 0x65, 0x63, 0xfb, 0x46, 0x27, 0x33, 0xf2, 0x29, 0xd4, 0x32, 0x39, 0xf5, 0x2e, 0x77, 0x97,
	0x7a, 0x62, 0xe1, 0xdd, 0xd3, 0xaa, 0xbf, 0xd0, 0x06, 0x14, 0x76, 0x17, 0xe9, 0xda, 0xd0, 0xde,
	0x2a, 0x19, 0xe5, 0x67, 0x67, 0x41, 0x2c, 0xb3, 0xd4, 0x06, 0x33, 0x08, 0x27, 0x84, 0xa8, 0xcf,
	0xeb, 0xfa, 0x51, 0x3c, 0xf7, 0xc7, 0x89, 0xec, 0xd9, 0x51, 0x3c, 0xf9, 0xfe, 0x82, 0x71, 0xcf,
	0xe7, 0xac, 0x75, 0x12, 0x4e, 0xa8, 0xc8, 0xc4, 0x5f, 0x42, 0x25, 0x08, 0x27, 0xfa, 0xe4, 0x47,
	0xf7, 0x20, 0x2a, 0x03, 0x10, 0x84, 0x93, 0xec, 0xd8, 0xa7, 0xb0, 0x39, 0x67, 0x33, 0x36, 0x12,
	0xe9, 0x3e, 0x8f, 0x49, 0xdd, 0x36, 0x1d, 0x93, 0x56, 0xb2, 0xd8, 0x31, 0x8f, 0xe5, 0x8f, 0xc9,
	0x8c, 0xfc, 0x4f, 0x36, 0xbc, 0xe1, 0xcf, 0xf0, 0x0e, 0x14, 0x44, 0xa3, 0x46, 0xe4, 0xb1, 0xec,
	0xe5, 0x74, 0x81, 0x07, 0x39, 0x21, 0x51, 0xdc, 0x7d, 0xdb, 0x5c, 0x55, 0x5c, 0x7d, 0x42, 0xfa,
	0xd0, 0x76, 0xf2, 0x5c, 0x7d, 0xa7, 0xc6, 0x4a, 0x0d, 0x75, 0x1b, 0x9c, 0x53, 0xca, 0x6e, 0xf5,
	0x19, 0x6c, 0x69, 0x41, 0x55, 0xe0, 0x27, 0x52, 0xeb, 0xae, 0x02, 0xd7, 0xb2, 0x74, 0x55, 0xe1,
	0x73, 0xd8, 0x5b, 0x12, 0xd0, 0xa6, 0xec, 0x55, 0x42, 0xca, 0xd3, 0xc3, 0x45, 0xb9, 0xcc, 0xd6,
	0x37, 0x80, 0x73, 0x1f, 0x3b, 0xeb, 0xca, 0xa7, 0x52, 0xf0, 0x3f, 0xba, 0xd2, 0xba, 0xa9, 0x88,
	0xea, 0xce, 0xef, 0xa0, 0xfe, 0xae, 0x98, 0x76, 0xd9, 0xbc, 0x87, 0xa8, 0x32, 0xbb, 0xb7, 0x2c,
	0x9d, 0xd9, 0xfd, 0x3c, 0x57, 0x52, 0xf1, 0x36, 0x9f, 0x29, 0xcd, 0x95, 0x6f, 0x53, 0x17, 0xf6,
	0x24, 0x9c, 0xe0, 0xd7, 0xb9, 0xc2, 0xe6, 0x1f, 0xeb, 0xff, 0xef, 0xa1, 0xb4, 0x5c, 0xde, 0x93,
	0x9b, 0x47, 0xdb, 0x83, 0xa2, 0xcf, 0xe3, 0xe1, 0x68, 0x46, 0x9e, 0x4b, 0xa1, 0xc7, 0xb7, 0x5c,
	0x53, 0x6c, 0x1f, 0xf1, 0x78, 0xfe, 0x96, 0xaa, 0x5c, 0xc1, 0x9a, 0x46, 0x9e, 0x60, 0xbd, 0x77,
	0x07, 0x6b, 0x28, 0xb7, 0x15, 0x2b, 0xcd, 0xc5, 0xcf, 0xa1, 0x98, 0xf0, 0x24, 0x62, 0x2e, 0x79,
	0x5f, 0x0c, 0xa9, 0xc3, 0xea, 0xcf, 0xff, 0x10, 0xf4, 0xd3, 0x2f, 0x8f, 0x0a, 0x3c, 0x9c, 0x4c,
	0x67, 0x54, 0x6d, 0xd6, 0x5f, 0xc0, 0x66, 0xfe, 0xd3, 0xca, 0x79, 0x33, 0x0f, 0xd4, 0x50, 0x16,
	0x30, 0x37, 0x93, 0x4d, 0x31, 0x93, 0xeb, 0x9f, 0x40, 0x25, 0xe7, 0x52, 0x10, 0xde, 0xb0, 0xb7,
	0x92, 0x50, 0xa0, 0x02, 0x8a, 0x3e, 0xfb, 0x71, 0x14, 0x24, 0xe9, 0x74, 0x2c, 0xd0, 0x74, 0x31,
	0x30, 0x5e, 0xa1, 0xfa, 0xb7, 0x50, 0xc9, 0x59, 0xbd, 0x85, 0xfa, 0x61, 0x9e, 0x7a, 0xf7, 0xa8,
	0xbf, 0x91, 0x6c, 0x1e, 0x40, 0x59, 0x4f, 0x0f, 0x0c, 0x50, 0x3c, 0x3e, 0x3d, 0x3d, 0xa2, 0x2f,
	0xac, 0x35, 0x8d, 0x3f, 0xb6, 0x90, 0xc6, 0x1d, 0xcb, 0xd0, 0xb8, 0x6b, 0x99, 0x83, 0xf5, 0x3f,
	0xff, 0x26, 0xe8, 0x83, 0x03, 0x28, 0xeb, 0xb9, 0x25, 0xb6, 0xcf, 0x5e, 0x9f, 0x6b, 0x09, 0x89,
	0x95, 0x84, 0xc4, 0x4a, 0x42, 0xe2, 0xae, 0x65, 0x76, 0x06, 0xe9, 0x9f, 0x85, 0x2f, 0x66, 0x3e,
	0x6e, 0x43, 0x89, 0xb2, 0x1f, 0x12, 0x16, 0xc5, 0xd8, 0x5a, 0x2e, 0x51, 0xfd, 0x9d, 0x48, 0x73,
	0xed, 0xd0, 0xba, 0xfa, 0xa3, 0xb1, 0x76, 0x75, 0xdd, 0x40, 0xbf, 0x5e, 0x37, 0xd0, 0xef, 0xd7,
	0x0d, 0x34, 0x2e, 0xca, 0x7f, 0x54, 0xdd, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xeb, 0x04,
	0x1f, 0xae, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestApiClient is the client API for TestApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestApiClient interface {
	Request(ctx context.Context, in *TestGen, opts ...grpc.CallOption) (*TestGen, error)
}

type testApiClient struct {
	cc *grpc.ClientConn
}

func NewTestApiClient(cc *grpc.ClientConn) TestApiClient {
	return &testApiClient{cc}
}

func (c *testApiClient) Request(ctx context.Context, in *TestGen, opts ...grpc.CallOption) (*TestGen, error) {
	out := new(TestGen)
	err := c.cc.Invoke(ctx, "/testgen.TestApi/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestApiServer is the server API for TestApi service.
type TestApiServer interface {
	Request(context.Context, *TestGen) (*TestGen, error)
}

// UnimplementedTestApiServer can be embedded to have forward compatible implementations.
type UnimplementedTestApiServer struct {
}

func (*UnimplementedTestApiServer) Request(ctx context.Context, req *TestGen) (*TestGen, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}

func RegisterTestApiServer(s *grpc.Server, srv TestApiServer) {
	s.RegisterService(&_TestApi_serviceDesc, srv)
}

func _TestApi_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestGen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgen.TestApi/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiServer).Request(ctx, req.(*TestGen))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testgen.TestApi",
	HandlerType: (*TestApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _TestApi_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample.proto",
}

func (m *NestedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NestedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncludeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncludeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncludeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NestedMsg != nil {
		{
			size, err := m.NestedMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncludeFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncludeFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncludeFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fields) > 0 {
		i -= len(m.Fields)
		copy(dAtA[i:], m.Fields)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Fields)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestGen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Unused) > 0 {
		i -= len(m.Unused)
		copy(dAtA[i:], m.Unused)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Unused)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.MsgMap) > 0 {
		for k := range m.MsgMap {
			v := m.MsgMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSample(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSample(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSample(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.IntMap) > 0 {
		for k := range m.IntMap {
			v := m.IntMap[k]
			baseI := i
			i = encodeVarintSample(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintSample(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSample(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.RepeatedLocNonnull) > 0 {
		for iNdEx := len(m.RepeatedLocNonnull) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RepeatedLocNonnull[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.RepeatedLoc) > 0 {
		for iNdEx := len(m.RepeatedLoc) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RepeatedLoc[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.RepeatedInnerMsgNonnull) > 0 {
		for iNdEx := len(m.RepeatedInnerMsgNonnull) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RepeatedInnerMsgNonnull[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.RepeatedInnerMsg) > 0 {
		for iNdEx := len(m.RepeatedInnerMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RepeatedInnerMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.RepeatedFieldsNonnull) > 0 {
		for iNdEx := len(m.RepeatedFieldsNonnull) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RepeatedFieldsNonnull[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.RepeatedFields) > 0 {
		for iNdEx := len(m.RepeatedFields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RepeatedFields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.RepeatedMsgNonnull) > 0 {
		for iNdEx := len(m.RepeatedMsgNonnull) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RepeatedMsgNonnull[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.RepeatedMsg) > 0 {
		for iNdEx := len(m.RepeatedMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RepeatedMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintSample(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.RepeatedInt) > 0 {
		dAtA4 := make([]byte, len(m.RepeatedInt)*10)
		var j3 int
		for _, num1 := range m.RepeatedInt {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSample(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	{
		size, err := m.LocNonnull.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSample(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	if m.Loc != nil {
		{
			size, err := m.Loc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	{
		size, err := m.IncludeFieldsNonnull.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSample(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	if m.IncludeFields != nil {
		{
			size, err := m.IncludeFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	{
		size, err := m.IncludeMsgNonnull.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSample(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.IncludeMsg != nil {
		{
			size, err := m.IncludeMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	{
		size, err := m.InnerMsgNonnull.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSample(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if m.InnerMsg != nil {
		{
			size, err := m.InnerMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.InnerEn != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.InnerEn))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.OuterEn != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.OuterEn))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Bb {
		i--
		if m.Bb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.Sf64 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Sf64))
		i--
		dAtA[i] = 0x71
	}
	if m.Sf32 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Sf32))
		i--
		dAtA[i] = 0x6d
	}
	if m.F64 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.F64))
		i--
		dAtA[i] = 0x61
	}
	if m.F32 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.F32))
		i--
		dAtA[i] = 0x5d
	}
	if m.S64 != 0 {
		i = encodeVarintSample(dAtA, i, uint64((uint64(m.S64)<<1)^uint64((m.S64>>63))))
		i--
		dAtA[i] = 0x50
	}
	if m.S32 != 0 {
		i = encodeVarintSample(dAtA, i, uint64((uint32(m.S32)<<1)^uint32((m.S32>>31))))
		i--
		dAtA[i] = 0x48
	}
	if m.U64 != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.U64))
		i--
		dAtA[i] = 0x40
	}
	if m.U32 != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.U32))
		i--
		dAtA[i] = 0x38
	}
	if m.I64 != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.I64))
		i--
		dAtA[i] = 0x30
	}
	if m.I32 != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.I32))
		i--
		dAtA[i] = 0x28
	}
	if m.Fl != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fl))))
		i--
		dAtA[i] = 0x25
	}
	if m.Db != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Db))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintSample(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestGen_InnerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGen_InnerMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestGen_InnerMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSample(dAtA []byte, offset int, v uint64) int {
	offset -= sovSample(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NestedMessage) Clone() *NestedMessage {
	cp := &NestedMessage{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *NestedMessage) CopyInFields(src *NestedMessage) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *NestedMessage) DeepCopyIn(src *NestedMessage) {
	m.Name = src.Name
}

// Helper method to check that enums have valid values
func (m *NestedMessage) ValidateEnums() error {
	return nil
}

func (s *NestedMessage) ClearTagged(tags map[string]struct{}) {
}

func (m *IncludeMessage) Clone() *IncludeMessage {
	cp := &IncludeMessage{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *IncludeMessage) CopyInFields(src *IncludeMessage) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.Id != src.Id {
		m.Id = src.Id
		changed++
	}
	if src.NestedMsg != nil {
		if m.NestedMsg == nil {
			m.NestedMsg = &NestedMessage{}
		}
		if m.NestedMsg.Name != src.NestedMsg.Name {
			m.NestedMsg.Name = src.NestedMsg.Name
			changed++
		}
	} else if m.NestedMsg != nil {
		m.NestedMsg = nil
		changed++
	}
	return changed
}

func (m *IncludeMessage) DeepCopyIn(src *IncludeMessage) {
	m.Name = src.Name
	m.Id = src.Id
	if src.NestedMsg != nil {
		var tmp_NestedMsg NestedMessage
		tmp_NestedMsg.DeepCopyIn(src.NestedMsg)
		m.NestedMsg = &tmp_NestedMsg
	} else {
		m.NestedMsg = nil
	}
}

// Helper method to check that enums have valid values
func (m *IncludeMessage) ValidateEnums() error {
	if m.NestedMsg != nil {
		if err := m.NestedMsg.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *IncludeMessage) ClearTagged(tags map[string]struct{}) {
	if s.NestedMsg != nil {
		s.NestedMsg.ClearTagged(tags)
	}
}

func (m *IncludeFields) Clone() *IncludeFields {
	cp := &IncludeFields{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *IncludeFields) CopyInFields(src *IncludeFields) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *IncludeFields) DeepCopyIn(src *IncludeFields) {
	m.Name = src.Name
}

// Helper method to check that enums have valid values
func (m *IncludeFields) ValidateEnums() error {
	return nil
}

func (s *IncludeFields) ClearTagged(tags map[string]struct{}) {
}

func (m *TestGen) Matches(o *TestGen, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	if !opts.Filter || o.Db != 0 {
		if o.Db != m.Db {
			return false
		}
	}
	if !opts.Filter || o.Fl != 0 {
		if o.Fl != m.Fl {
			return false
		}
	}
	if !opts.Filter || o.I32 != 0 {
		if o.I32 != m.I32 {
			return false
		}
	}
	if !opts.Filter || o.I64 != 0 {
		if o.I64 != m.I64 {
			return false
		}
	}
	if !opts.Filter || o.U32 != 0 {
		if o.U32 != m.U32 {
			return false
		}
	}
	if !opts.Filter || o.U64 != 0 {
		if o.U64 != m.U64 {
			return false
		}
	}
	if !opts.Filter || o.S32 != 0 {
		if o.S32 != m.S32 {
			return false
		}
	}
	if !opts.Filter || o.S64 != 0 {
		if o.S64 != m.S64 {
			return false
		}
	}
	if !opts.Filter || o.F32 != 0 {
		if o.F32 != m.F32 {
			return false
		}
	}
	if !opts.Filter || o.F64 != 0 {
		if o.F64 != m.F64 {
			return false
		}
	}
	if !opts.Filter || o.Sf32 != 0 {
		if o.Sf32 != m.Sf32 {
			return false
		}
	}
	if !opts.Filter || o.Sf64 != 0 {
		if o.Sf64 != m.Sf64 {
			return false
		}
	}
	if !opts.Filter || o.Bb != false {
		if o.Bb != m.Bb {
			return false
		}
	}
	if !opts.Filter || o.OuterEn != 0 {
		if o.OuterEn != m.OuterEn {
			return false
		}
	}
	if !opts.Filter || o.InnerEn != 0 {
		if o.InnerEn != m.InnerEn {
			return false
		}
	}
	if !opts.Filter || o.InnerMsg != nil {
		if m.InnerMsg == nil && o.InnerMsg != nil || m.InnerMsg != nil && o.InnerMsg == nil {
			return false
		} else if m.InnerMsg != nil && o.InnerMsg != nil {
		}
	}
	if !opts.Filter || o.IncludeMsg != nil {
		if m.IncludeMsg == nil && o.IncludeMsg != nil || m.IncludeMsg != nil && o.IncludeMsg == nil {
			return false
		} else if m.IncludeMsg != nil && o.IncludeMsg != nil {
		}
	}
	if !opts.Filter || o.IncludeFields != nil {
		if m.IncludeFields == nil && o.IncludeFields != nil || m.IncludeFields != nil && o.IncludeFields == nil {
			return false
		} else if m.IncludeFields != nil && o.IncludeFields != nil {
		}
	}
	if !opts.Filter || o.Loc != nil {
		if m.Loc == nil && o.Loc != nil || m.Loc != nil && o.Loc == nil {
			return false
		} else if m.Loc != nil && o.Loc != nil {
		}
	}
	if !opts.Filter || o.RepeatedInt != nil {
		if len(m.RepeatedInt) == 0 && len(o.RepeatedInt) > 0 || len(m.RepeatedInt) > 0 && len(o.RepeatedInt) == 0 {
			return false
		} else if m.RepeatedInt != nil && o.RepeatedInt != nil {
			if !opts.Filter && len(m.RepeatedInt) != len(o.RepeatedInt) {
				return false
			}
			found := 0
			for oIndex, _ := range o.RepeatedInt {
				for mIndex, _ := range m.RepeatedInt {
					if o.RepeatedInt[oIndex] == m.RepeatedInt[mIndex] {
						found++
						break
					}
				}
			}
			if found != len(o.RepeatedInt) {
				return false
			}
		}
	}
	if !opts.Filter || o.Ip != nil {
		if len(m.Ip) == 0 && len(o.Ip) > 0 || len(m.Ip) > 0 && len(o.Ip) == 0 {
			return false
		} else if m.Ip != nil && o.Ip != nil {
			if !opts.Filter && len(m.Ip) != len(o.Ip) {
				return false
			}
			found := 0
			for oIndex, _ := range o.Ip {
				for mIndex, _ := range m.Ip {
					if o.Ip[oIndex] == m.Ip[mIndex] {
						found++
						break
					}
				}
			}
			if found != len(o.Ip) {
				return false
			}
		}
	}
	if !opts.Filter || o.Names != nil {
		if len(m.Names) == 0 && len(o.Names) > 0 || len(m.Names) > 0 && len(o.Names) == 0 {
			return false
		} else if m.Names != nil && o.Names != nil {
			if !opts.Filter && len(m.Names) != len(o.Names) {
				return false
			}
			found := 0
			for oIndex, _ := range o.Names {
				for mIndex, _ := range m.Names {
					if o.Names[oIndex] == m.Names[mIndex] {
						found++
						break
					}
				}
			}
			if found != len(o.Names) {
				return false
			}
		}
	}
	if !opts.Filter || o.RepeatedMsg != nil {
		if len(m.RepeatedMsg) == 0 && len(o.RepeatedMsg) > 0 || len(m.RepeatedMsg) > 0 && len(o.RepeatedMsg) == 0 {
			return false
		} else if m.RepeatedMsg != nil && o.RepeatedMsg != nil {
			if !opts.Filter && len(m.RepeatedMsg) != len(o.RepeatedMsg) {
				return false
			}
		}
	}
	if !opts.Filter || o.RepeatedMsgNonnull != nil {
		if len(m.RepeatedMsgNonnull) == 0 && len(o.RepeatedMsgNonnull) > 0 || len(m.RepeatedMsgNonnull) > 0 && len(o.RepeatedMsgNonnull) == 0 {
			return false
		} else if m.RepeatedMsgNonnull != nil && o.RepeatedMsgNonnull != nil {
			if !opts.Filter && len(m.RepeatedMsgNonnull) != len(o.RepeatedMsgNonnull) {
				return false
			}
		}
	}
	if !opts.Filter || o.RepeatedFields != nil {
		if len(m.RepeatedFields) == 0 && len(o.RepeatedFields) > 0 || len(m.RepeatedFields) > 0 && len(o.RepeatedFields) == 0 {
			return false
		} else if m.RepeatedFields != nil && o.RepeatedFields != nil {
			if !opts.Filter && len(m.RepeatedFields) != len(o.RepeatedFields) {
				return false
			}
		}
	}
	if !opts.Filter || o.RepeatedFieldsNonnull != nil {
		if len(m.RepeatedFieldsNonnull) == 0 && len(o.RepeatedFieldsNonnull) > 0 || len(m.RepeatedFieldsNonnull) > 0 && len(o.RepeatedFieldsNonnull) == 0 {
			return false
		} else if m.RepeatedFieldsNonnull != nil && o.RepeatedFieldsNonnull != nil {
			if !opts.Filter && len(m.RepeatedFieldsNonnull) != len(o.RepeatedFieldsNonnull) {
				return false
			}
		}
	}
	if !opts.Filter || o.RepeatedInnerMsg != nil {
		if len(m.RepeatedInnerMsg) == 0 && len(o.RepeatedInnerMsg) > 0 || len(m.RepeatedInnerMsg) > 0 && len(o.RepeatedInnerMsg) == 0 {
			return false
		} else if m.RepeatedInnerMsg != nil && o.RepeatedInnerMsg != nil {
			if !opts.Filter && len(m.RepeatedInnerMsg) != len(o.RepeatedInnerMsg) {
				return false
			}
		}
	}
	if !opts.Filter || o.RepeatedInnerMsgNonnull != nil {
		if len(m.RepeatedInnerMsgNonnull) == 0 && len(o.RepeatedInnerMsgNonnull) > 0 || len(m.RepeatedInnerMsgNonnull) > 0 && len(o.RepeatedInnerMsgNonnull) == 0 {
			return false
		} else if m.RepeatedInnerMsgNonnull != nil && o.RepeatedInnerMsgNonnull != nil {
			if !opts.Filter && len(m.RepeatedInnerMsgNonnull) != len(o.RepeatedInnerMsgNonnull) {
				return false
			}
		}
	}
	if !opts.Filter || o.RepeatedLoc != nil {
		if len(m.RepeatedLoc) == 0 && len(o.RepeatedLoc) > 0 || len(m.RepeatedLoc) > 0 && len(o.RepeatedLoc) == 0 {
			return false
		} else if m.RepeatedLoc != nil && o.RepeatedLoc != nil {
			if !opts.Filter && len(m.RepeatedLoc) != len(o.RepeatedLoc) {
				return false
			}
		}
	}
	if !opts.Filter || o.RepeatedLocNonnull != nil {
		if len(m.RepeatedLocNonnull) == 0 && len(o.RepeatedLocNonnull) > 0 || len(m.RepeatedLocNonnull) > 0 && len(o.RepeatedLocNonnull) == 0 {
			return false
		} else if m.RepeatedLocNonnull != nil && o.RepeatedLocNonnull != nil {
			if !opts.Filter && len(m.RepeatedLocNonnull) != len(o.RepeatedLocNonnull) {
				return false
			}
		}
	}
	if !opts.Filter || o.IntMap != nil {
		if len(m.IntMap) == 0 && len(o.IntMap) > 0 || len(m.IntMap) > 0 && len(o.IntMap) == 0 {
			return false
		} else if m.IntMap != nil && o.IntMap != nil {
			if !opts.Filter && len(m.IntMap) != len(o.IntMap) {
				return false
			}
			for k, _ := range o.IntMap {
				_, ok := m.IntMap[k]
				if !ok {
					return false
				}
				if o.IntMap[k] != m.IntMap[k] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.MsgMap != nil {
		if len(m.MsgMap) == 0 && len(o.MsgMap) > 0 || len(m.MsgMap) > 0 && len(o.MsgMap) == 0 {
			return false
		} else if m.MsgMap != nil && o.MsgMap != nil {
			if !opts.Filter && len(m.MsgMap) != len(o.MsgMap) {
				return false
			}
			for k, _ := range o.MsgMap {
				_, ok := m.MsgMap[k]
				if !ok {
					return false
				}
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Unused != "" {
			if o.Unused != m.Unused {
				return false
			}
		}
	}
	return true
}

const TestGenFieldName = "2"
const TestGenFieldDb = "3"
const TestGenFieldFl = "4"
const TestGenFieldI32 = "5"
const TestGenFieldI64 = "6"
const TestGenFieldU32 = "7"
const TestGenFieldU64 = "8"
const TestGenFieldS32 = "9"
const TestGenFieldS64 = "10"
const TestGenFieldF32 = "11"
const TestGenFieldF64 = "12"
const TestGenFieldSf32 = "13"
const TestGenFieldSf64 = "14"
const TestGenFieldBb = "15"
const TestGenFieldOuterEn = "16"
const TestGenFieldInnerEn = "17"
const TestGenFieldInnerMsg = "18"
const TestGenFieldInnerMsgUrl = "18.1"
const TestGenFieldInnerMsgId = "18.2"
const TestGenFieldInnerMsgNonnull = "19"
const TestGenFieldInnerMsgNonnullUrl = "19.1"
const TestGenFieldInnerMsgNonnullId = "19.2"
const TestGenFieldIncludeMsg = "20"
const TestGenFieldIncludeMsgName = "20.1"
const TestGenFieldIncludeMsgId = "20.2"
const TestGenFieldIncludeMsgNestedMsg = "20.3"
const TestGenFieldIncludeMsgNestedMsgName = "20.3.1"
const TestGenFieldIncludeMsgNonnull = "21"
const TestGenFieldIncludeMsgNonnullName = "21.1"
const TestGenFieldIncludeMsgNonnullId = "21.2"
const TestGenFieldIncludeMsgNonnullNestedMsg = "21.3"
const TestGenFieldIncludeMsgNonnullNestedMsgName = "21.3.1"
const TestGenFieldIncludeFields = "22"
const TestGenFieldIncludeFieldsName = "22.2"
const TestGenFieldIncludeFieldsNonnull = "23"
const TestGenFieldIncludeFieldsNonnullName = "23.2"
const TestGenFieldLoc = "24"
const TestGenFieldLocLatitude = "24.1"
const TestGenFieldLocLongitude = "24.2"
const TestGenFieldLocHorizontalAccuracy = "24.3"
const TestGenFieldLocVerticalAccuracy = "24.4"
const TestGenFieldLocAltitude = "24.5"
const TestGenFieldLocCourse = "24.6"
const TestGenFieldLocSpeed = "24.7"
const TestGenFieldLocTimestamp = "24.8"
const TestGenFieldLocTimestampSeconds = "24.8.1"
const TestGenFieldLocTimestampNanos = "24.8.2"
const TestGenFieldLocNonnull = "25"
const TestGenFieldLocNonnullLatitude = "25.1"
const TestGenFieldLocNonnullLongitude = "25.2"
const TestGenFieldLocNonnullHorizontalAccuracy = "25.3"
const TestGenFieldLocNonnullVerticalAccuracy = "25.4"
const TestGenFieldLocNonnullAltitude = "25.5"
const TestGenFieldLocNonnullCourse = "25.6"
const TestGenFieldLocNonnullSpeed = "25.7"
const TestGenFieldLocNonnullTimestamp = "25.8"
const TestGenFieldLocNonnullTimestampSeconds = "25.8.1"
const TestGenFieldLocNonnullTimestampNanos = "25.8.2"
const TestGenFieldRepeatedInt = "26"
const TestGenFieldIp = "27"
const TestGenFieldNames = "28"
const TestGenFieldRepeatedMsg = "29"
const TestGenFieldRepeatedMsgName = "29.1"
const TestGenFieldRepeatedMsgId = "29.2"
const TestGenFieldRepeatedMsgNestedMsg = "29.3"
const TestGenFieldRepeatedMsgNestedMsgName = "29.3.1"
const TestGenFieldRepeatedMsgNonnull = "30"
const TestGenFieldRepeatedMsgNonnullName = "30.1"
const TestGenFieldRepeatedMsgNonnullId = "30.2"
const TestGenFieldRepeatedMsgNonnullNestedMsg = "30.3"
const TestGenFieldRepeatedMsgNonnullNestedMsgName = "30.3.1"
const TestGenFieldRepeatedFields = "31"
const TestGenFieldRepeatedFieldsName = "31.2"
const TestGenFieldRepeatedFieldsNonnull = "32"
const TestGenFieldRepeatedFieldsNonnullName = "32.2"
const TestGenFieldRepeatedInnerMsg = "33"
const TestGenFieldRepeatedInnerMsgUrl = "33.1"
const TestGenFieldRepeatedInnerMsgId = "33.2"
const TestGenFieldRepeatedInnerMsgNonnull = "34"
const TestGenFieldRepeatedInnerMsgNonnullUrl = "34.1"
const TestGenFieldRepeatedInnerMsgNonnullId = "34.2"
const TestGenFieldRepeatedLoc = "35"
const TestGenFieldRepeatedLocLatitude = "35.1"
const TestGenFieldRepeatedLocLongitude = "35.2"
const TestGenFieldRepeatedLocHorizontalAccuracy = "35.3"
const TestGenFieldRepeatedLocVerticalAccuracy = "35.4"
const TestGenFieldRepeatedLocAltitude = "35.5"
const TestGenFieldRepeatedLocCourse = "35.6"
const TestGenFieldRepeatedLocSpeed = "35.7"
const TestGenFieldRepeatedLocTimestamp = "35.8"
const TestGenFieldRepeatedLocTimestampSeconds = "35.8.1"
const TestGenFieldRepeatedLocTimestampNanos = "35.8.2"
const TestGenFieldRepeatedLocNonnull = "36"
const TestGenFieldRepeatedLocNonnullLatitude = "36.1"
const TestGenFieldRepeatedLocNonnullLongitude = "36.2"
const TestGenFieldRepeatedLocNonnullHorizontalAccuracy = "36.3"
const TestGenFieldRepeatedLocNonnullVerticalAccuracy = "36.4"
const TestGenFieldRepeatedLocNonnullAltitude = "36.5"
const TestGenFieldRepeatedLocNonnullCourse = "36.6"
const TestGenFieldRepeatedLocNonnullSpeed = "36.7"
const TestGenFieldRepeatedLocNonnullTimestamp = "36.8"
const TestGenFieldRepeatedLocNonnullTimestampSeconds = "36.8.1"
const TestGenFieldRepeatedLocNonnullTimestampNanos = "36.8.2"
const TestGenFieldIntMap = "37"
const TestGenFieldIntMapKey = "37.1"
const TestGenFieldIntMapValue = "37.2"
const TestGenFieldMsgMap = "38"
const TestGenFieldMsgMapKey = "38.1"
const TestGenFieldMsgMapValue = "38.2"
const TestGenFieldMsgMapValueName = "38.2.1"
const TestGenFieldUnused = "39"

var TestGenAllFields = []string{
	TestGenFieldName,
	TestGenFieldDb,
	TestGenFieldFl,
	TestGenFieldI32,
	TestGenFieldI64,
	TestGenFieldU32,
	TestGenFieldU64,
	TestGenFieldS32,
	TestGenFieldS64,
	TestGenFieldF32,
	TestGenFieldF64,
	TestGenFieldSf32,
	TestGenFieldSf64,
	TestGenFieldBb,
	TestGenFieldOuterEn,
	TestGenFieldInnerEn,
	TestGenFieldInnerMsgUrl,
	TestGenFieldInnerMsgId,
	TestGenFieldInnerMsgNonnullUrl,
	TestGenFieldInnerMsgNonnullId,
	TestGenFieldIncludeMsgName,
	TestGenFieldIncludeMsgId,
	TestGenFieldIncludeMsgNestedMsgName,
	TestGenFieldIncludeMsgNonnullName,
	TestGenFieldIncludeMsgNonnullId,
	TestGenFieldIncludeMsgNonnullNestedMsgName,
	TestGenFieldIncludeFieldsName,
	TestGenFieldIncludeFieldsNonnullName,
	TestGenFieldLocLatitude,
	TestGenFieldLocLongitude,
	TestGenFieldLocHorizontalAccuracy,
	TestGenFieldLocVerticalAccuracy,
	TestGenFieldLocAltitude,
	TestGenFieldLocCourse,
	TestGenFieldLocSpeed,
	TestGenFieldLocTimestampSeconds,
	TestGenFieldLocTimestampNanos,
	TestGenFieldLocNonnullLatitude,
	TestGenFieldLocNonnullLongitude,
	TestGenFieldLocNonnullHorizontalAccuracy,
	TestGenFieldLocNonnullVerticalAccuracy,
	TestGenFieldLocNonnullAltitude,
	TestGenFieldLocNonnullCourse,
	TestGenFieldLocNonnullSpeed,
	TestGenFieldLocNonnullTimestampSeconds,
	TestGenFieldLocNonnullTimestampNanos,
	TestGenFieldRepeatedInt,
	TestGenFieldIp,
	TestGenFieldNames,
	TestGenFieldRepeatedMsgName,
	TestGenFieldRepeatedMsgId,
	TestGenFieldRepeatedMsgNestedMsgName,
	TestGenFieldRepeatedMsgNonnullName,
	TestGenFieldRepeatedMsgNonnullId,
	TestGenFieldRepeatedMsgNonnullNestedMsgName,
	TestGenFieldRepeatedFieldsName,
	TestGenFieldRepeatedFieldsNonnullName,
	TestGenFieldRepeatedInnerMsgUrl,
	TestGenFieldRepeatedInnerMsgId,
	TestGenFieldRepeatedInnerMsgNonnullUrl,
	TestGenFieldRepeatedInnerMsgNonnullId,
	TestGenFieldRepeatedLocLatitude,
	TestGenFieldRepeatedLocLongitude,
	TestGenFieldRepeatedLocHorizontalAccuracy,
	TestGenFieldRepeatedLocVerticalAccuracy,
	TestGenFieldRepeatedLocAltitude,
	TestGenFieldRepeatedLocCourse,
	TestGenFieldRepeatedLocSpeed,
	TestGenFieldRepeatedLocTimestampSeconds,
	TestGenFieldRepeatedLocTimestampNanos,
	TestGenFieldRepeatedLocNonnullLatitude,
	TestGenFieldRepeatedLocNonnullLongitude,
	TestGenFieldRepeatedLocNonnullHorizontalAccuracy,
	TestGenFieldRepeatedLocNonnullVerticalAccuracy,
	TestGenFieldRepeatedLocNonnullAltitude,
	TestGenFieldRepeatedLocNonnullCourse,
	TestGenFieldRepeatedLocNonnullSpeed,
	TestGenFieldRepeatedLocNonnullTimestampSeconds,
	TestGenFieldRepeatedLocNonnullTimestampNanos,
	TestGenFieldIntMapKey,
	TestGenFieldIntMapValue,
	TestGenFieldMsgMapKey,
	TestGenFieldMsgMapValueName,
	TestGenFieldUnused,
}

var TestGenAllFieldsMap = NewFieldMap(map[string]struct{}{
	TestGenFieldName:                                 struct{}{},
	TestGenFieldDb:                                   struct{}{},
	TestGenFieldFl:                                   struct{}{},
	TestGenFieldI32:                                  struct{}{},
	TestGenFieldI64:                                  struct{}{},
	TestGenFieldU32:                                  struct{}{},
	TestGenFieldU64:                                  struct{}{},
	TestGenFieldS32:                                  struct{}{},
	TestGenFieldS64:                                  struct{}{},
	TestGenFieldF32:                                  struct{}{},
	TestGenFieldF64:                                  struct{}{},
	TestGenFieldSf32:                                 struct{}{},
	TestGenFieldSf64:                                 struct{}{},
	TestGenFieldBb:                                   struct{}{},
	TestGenFieldOuterEn:                              struct{}{},
	TestGenFieldInnerEn:                              struct{}{},
	TestGenFieldInnerMsgUrl:                          struct{}{},
	TestGenFieldInnerMsgId:                           struct{}{},
	TestGenFieldInnerMsgNonnullUrl:                   struct{}{},
	TestGenFieldInnerMsgNonnullId:                    struct{}{},
	TestGenFieldIncludeMsgName:                       struct{}{},
	TestGenFieldIncludeMsgId:                         struct{}{},
	TestGenFieldIncludeMsgNestedMsgName:              struct{}{},
	TestGenFieldIncludeMsgNonnullName:                struct{}{},
	TestGenFieldIncludeMsgNonnullId:                  struct{}{},
	TestGenFieldIncludeMsgNonnullNestedMsgName:       struct{}{},
	TestGenFieldIncludeFieldsName:                    struct{}{},
	TestGenFieldIncludeFieldsNonnullName:             struct{}{},
	TestGenFieldLocLatitude:                          struct{}{},
	TestGenFieldLocLongitude:                         struct{}{},
	TestGenFieldLocHorizontalAccuracy:                struct{}{},
	TestGenFieldLocVerticalAccuracy:                  struct{}{},
	TestGenFieldLocAltitude:                          struct{}{},
	TestGenFieldLocCourse:                            struct{}{},
	TestGenFieldLocSpeed:                             struct{}{},
	TestGenFieldLocTimestampSeconds:                  struct{}{},
	TestGenFieldLocTimestampNanos:                    struct{}{},
	TestGenFieldLocNonnullLatitude:                   struct{}{},
	TestGenFieldLocNonnullLongitude:                  struct{}{},
	TestGenFieldLocNonnullHorizontalAccuracy:         struct{}{},
	TestGenFieldLocNonnullVerticalAccuracy:           struct{}{},
	TestGenFieldLocNonnullAltitude:                   struct{}{},
	TestGenFieldLocNonnullCourse:                     struct{}{},
	TestGenFieldLocNonnullSpeed:                      struct{}{},
	TestGenFieldLocNonnullTimestampSeconds:           struct{}{},
	TestGenFieldLocNonnullTimestampNanos:             struct{}{},
	TestGenFieldRepeatedInt:                          struct{}{},
	TestGenFieldIp:                                   struct{}{},
	TestGenFieldNames:                                struct{}{},
	TestGenFieldRepeatedMsgName:                      struct{}{},
	TestGenFieldRepeatedMsgId:                        struct{}{},
	TestGenFieldRepeatedMsgNestedMsgName:             struct{}{},
	TestGenFieldRepeatedMsgNonnullName:               struct{}{},
	TestGenFieldRepeatedMsgNonnullId:                 struct{}{},
	TestGenFieldRepeatedMsgNonnullNestedMsgName:      struct{}{},
	TestGenFieldRepeatedFieldsName:                   struct{}{},
	TestGenFieldRepeatedFieldsNonnullName:            struct{}{},
	TestGenFieldRepeatedInnerMsgUrl:                  struct{}{},
	TestGenFieldRepeatedInnerMsgId:                   struct{}{},
	TestGenFieldRepeatedInnerMsgNonnullUrl:           struct{}{},
	TestGenFieldRepeatedInnerMsgNonnullId:            struct{}{},
	TestGenFieldRepeatedLocLatitude:                  struct{}{},
	TestGenFieldRepeatedLocLongitude:                 struct{}{},
	TestGenFieldRepeatedLocHorizontalAccuracy:        struct{}{},
	TestGenFieldRepeatedLocVerticalAccuracy:          struct{}{},
	TestGenFieldRepeatedLocAltitude:                  struct{}{},
	TestGenFieldRepeatedLocCourse:                    struct{}{},
	TestGenFieldRepeatedLocSpeed:                     struct{}{},
	TestGenFieldRepeatedLocTimestampSeconds:          struct{}{},
	TestGenFieldRepeatedLocTimestampNanos:            struct{}{},
	TestGenFieldRepeatedLocNonnullLatitude:           struct{}{},
	TestGenFieldRepeatedLocNonnullLongitude:          struct{}{},
	TestGenFieldRepeatedLocNonnullHorizontalAccuracy: struct{}{},
	TestGenFieldRepeatedLocNonnullVerticalAccuracy:   struct{}{},
	TestGenFieldRepeatedLocNonnullAltitude:           struct{}{},
	TestGenFieldRepeatedLocNonnullCourse:             struct{}{},
	TestGenFieldRepeatedLocNonnullSpeed:              struct{}{},
	TestGenFieldRepeatedLocNonnullTimestampSeconds:   struct{}{},
	TestGenFieldRepeatedLocNonnullTimestampNanos:     struct{}{},
	TestGenFieldIntMapKey:                            struct{}{},
	TestGenFieldIntMapValue:                          struct{}{},
	TestGenFieldMsgMapKey:                            struct{}{},
	TestGenFieldMsgMapValueName:                      struct{}{},
	TestGenFieldUnused:                               struct{}{},
})

var TestGenAllFieldsStringMap = map[string]string{
	TestGenFieldName:                                 "Name",
	TestGenFieldDb:                                   "Db",
	TestGenFieldFl:                                   "Fl",
	TestGenFieldI32:                                  "I32",
	TestGenFieldI64:                                  "I64",
	TestGenFieldU32:                                  "U32",
	TestGenFieldU64:                                  "U64",
	TestGenFieldS32:                                  "S32",
	TestGenFieldS64:                                  "S64",
	TestGenFieldF32:                                  "F32",
	TestGenFieldF64:                                  "F64",
	TestGenFieldSf32:                                 "Sf32",
	TestGenFieldSf64:                                 "Sf64",
	TestGenFieldBb:                                   "Bb",
	TestGenFieldOuterEn:                              "Outer En",
	TestGenFieldInnerEn:                              "Inner En",
	TestGenFieldInnerMsgUrl:                          "Inner Msg Url",
	TestGenFieldInnerMsgId:                           "Inner Msg Id",
	TestGenFieldInnerMsgNonnullUrl:                   "Inner Msg Nonnull Url",
	TestGenFieldInnerMsgNonnullId:                    "Inner Msg Nonnull Id",
	TestGenFieldIncludeMsgName:                       "Include Msg Name",
	TestGenFieldIncludeMsgId:                         "Include Msg Id",
	TestGenFieldIncludeMsgNestedMsgName:              "Include Msg Nested Msg Name",
	TestGenFieldIncludeMsgNonnullName:                "Include Msg Nonnull Name",
	TestGenFieldIncludeMsgNonnullId:                  "Include Msg Nonnull Id",
	TestGenFieldIncludeMsgNonnullNestedMsgName:       "Include Msg Nonnull Nested Msg Name",
	TestGenFieldIncludeFieldsName:                    "Include Fields Name",
	TestGenFieldIncludeFieldsNonnullName:             "Include Fields Nonnull Name",
	TestGenFieldLocLatitude:                          "Loc Latitude",
	TestGenFieldLocLongitude:                         "Loc Longitude",
	TestGenFieldLocHorizontalAccuracy:                "Loc Horizontal Accuracy",
	TestGenFieldLocVerticalAccuracy:                  "Loc Vertical Accuracy",
	TestGenFieldLocAltitude:                          "Loc Altitude",
	TestGenFieldLocCourse:                            "Loc Course",
	TestGenFieldLocSpeed:                             "Loc Speed",
	TestGenFieldLocTimestampSeconds:                  "Loc Timestamp Seconds",
	TestGenFieldLocTimestampNanos:                    "Loc Timestamp Nanos",
	TestGenFieldLocNonnullLatitude:                   "Loc Nonnull Latitude",
	TestGenFieldLocNonnullLongitude:                  "Loc Nonnull Longitude",
	TestGenFieldLocNonnullHorizontalAccuracy:         "Loc Nonnull Horizontal Accuracy",
	TestGenFieldLocNonnullVerticalAccuracy:           "Loc Nonnull Vertical Accuracy",
	TestGenFieldLocNonnullAltitude:                   "Loc Nonnull Altitude",
	TestGenFieldLocNonnullCourse:                     "Loc Nonnull Course",
	TestGenFieldLocNonnullSpeed:                      "Loc Nonnull Speed",
	TestGenFieldLocNonnullTimestampSeconds:           "Loc Nonnull Timestamp Seconds",
	TestGenFieldLocNonnullTimestampNanos:             "Loc Nonnull Timestamp Nanos",
	TestGenFieldRepeatedInt:                          "Repeated Int",
	TestGenFieldIp:                                   "Ip",
	TestGenFieldNames:                                "Names",
	TestGenFieldRepeatedMsgName:                      "Repeated Msg Name",
	TestGenFieldRepeatedMsgId:                        "Repeated Msg Id",
	TestGenFieldRepeatedMsgNestedMsgName:             "Repeated Msg Nested Msg Name",
	TestGenFieldRepeatedMsgNonnullName:               "Repeated Msg Nonnull Name",
	TestGenFieldRepeatedMsgNonnullId:                 "Repeated Msg Nonnull Id",
	TestGenFieldRepeatedMsgNonnullNestedMsgName:      "Repeated Msg Nonnull Nested Msg Name",
	TestGenFieldRepeatedFieldsName:                   "Repeated Fields Name",
	TestGenFieldRepeatedFieldsNonnullName:            "Repeated Fields Nonnull Name",
	TestGenFieldRepeatedInnerMsgUrl:                  "Repeated Inner Msg Url",
	TestGenFieldRepeatedInnerMsgId:                   "Repeated Inner Msg Id",
	TestGenFieldRepeatedInnerMsgNonnullUrl:           "Repeated Inner Msg Nonnull Url",
	TestGenFieldRepeatedInnerMsgNonnullId:            "Repeated Inner Msg Nonnull Id",
	TestGenFieldRepeatedLocLatitude:                  "Repeated Loc Latitude",
	TestGenFieldRepeatedLocLongitude:                 "Repeated Loc Longitude",
	TestGenFieldRepeatedLocHorizontalAccuracy:        "Repeated Loc Horizontal Accuracy",
	TestGenFieldRepeatedLocVerticalAccuracy:          "Repeated Loc Vertical Accuracy",
	TestGenFieldRepeatedLocAltitude:                  "Repeated Loc Altitude",
	TestGenFieldRepeatedLocCourse:                    "Repeated Loc Course",
	TestGenFieldRepeatedLocSpeed:                     "Repeated Loc Speed",
	TestGenFieldRepeatedLocTimestampSeconds:          "Repeated Loc Timestamp Seconds",
	TestGenFieldRepeatedLocTimestampNanos:            "Repeated Loc Timestamp Nanos",
	TestGenFieldRepeatedLocNonnullLatitude:           "Repeated Loc Nonnull Latitude",
	TestGenFieldRepeatedLocNonnullLongitude:          "Repeated Loc Nonnull Longitude",
	TestGenFieldRepeatedLocNonnullHorizontalAccuracy: "Repeated Loc Nonnull Horizontal Accuracy",
	TestGenFieldRepeatedLocNonnullVerticalAccuracy:   "Repeated Loc Nonnull Vertical Accuracy",
	TestGenFieldRepeatedLocNonnullAltitude:           "Repeated Loc Nonnull Altitude",
	TestGenFieldRepeatedLocNonnullCourse:             "Repeated Loc Nonnull Course",
	TestGenFieldRepeatedLocNonnullSpeed:              "Repeated Loc Nonnull Speed",
	TestGenFieldRepeatedLocNonnullTimestampSeconds:   "Repeated Loc Nonnull Timestamp Seconds",
	TestGenFieldRepeatedLocNonnullTimestampNanos:     "Repeated Loc Nonnull Timestamp Nanos",
	TestGenFieldIntMapKey:                            "Int Map Key",
	TestGenFieldIntMapValue:                          "Int Map Value",
	TestGenFieldMsgMapKey:                            "Msg Map Key",
	TestGenFieldMsgMapValueName:                      "Msg Map Value Name",
	TestGenFieldUnused:                               "Unused",
}

func (m *TestGen) IsKeyField(s string) bool {
	return strings.HasPrefix(s, TestGenFieldName+".") || s == TestGenFieldName
}

func (m *TestGen) DiffFields(o *TestGen, fields *FieldMap) {
	if m.Name != o.Name {
		fields.Set(TestGenFieldName)
	}
	if m.Db != o.Db {
		fields.Set(TestGenFieldDb)
	}
	if m.Fl != o.Fl {
		fields.Set(TestGenFieldFl)
	}
	if m.I32 != o.I32 {
		fields.Set(TestGenFieldI32)
	}
	if m.I64 != o.I64 {
		fields.Set(TestGenFieldI64)
	}
	if m.U32 != o.U32 {
		fields.Set(TestGenFieldU32)
	}
	if m.U64 != o.U64 {
		fields.Set(TestGenFieldU64)
	}
	if m.S32 != o.S32 {
		fields.Set(TestGenFieldS32)
	}
	if m.S64 != o.S64 {
		fields.Set(TestGenFieldS64)
	}
	if m.F32 != o.F32 {
		fields.Set(TestGenFieldF32)
	}
	if m.F64 != o.F64 {
		fields.Set(TestGenFieldF64)
	}
	if m.Sf32 != o.Sf32 {
		fields.Set(TestGenFieldSf32)
	}
	if m.Sf64 != o.Sf64 {
		fields.Set(TestGenFieldSf64)
	}
	if m.Bb != o.Bb {
		fields.Set(TestGenFieldBb)
	}
	if m.OuterEn != o.OuterEn {
		fields.Set(TestGenFieldOuterEn)
	}
	if m.InnerEn != o.InnerEn {
		fields.Set(TestGenFieldInnerEn)
	}
	if m.InnerMsg != nil && o.InnerMsg != nil {
		if m.InnerMsg.Url != o.InnerMsg.Url {
			fields.Set(TestGenFieldInnerMsgUrl)
			fields.Set(TestGenFieldInnerMsg)
		}
		if m.InnerMsg.Id != o.InnerMsg.Id {
			fields.Set(TestGenFieldInnerMsgId)
			fields.Set(TestGenFieldInnerMsg)
		}
	} else if (m.InnerMsg != nil && o.InnerMsg == nil) || (m.InnerMsg == nil && o.InnerMsg != nil) {
		fields.Set(TestGenFieldInnerMsg)
	}
	if m.InnerMsgNonnull.Url != o.InnerMsgNonnull.Url {
		fields.Set(TestGenFieldInnerMsgNonnullUrl)
		fields.Set(TestGenFieldInnerMsgNonnull)
	}
	if m.InnerMsgNonnull.Id != o.InnerMsgNonnull.Id {
		fields.Set(TestGenFieldInnerMsgNonnullId)
		fields.Set(TestGenFieldInnerMsgNonnull)
	}
	if m.IncludeMsg != nil && o.IncludeMsg != nil {
		if m.IncludeMsg.Name != o.IncludeMsg.Name {
			fields.Set(TestGenFieldIncludeMsgName)
			fields.Set(TestGenFieldIncludeMsg)
		}
		if m.IncludeMsg.Id != o.IncludeMsg.Id {
			fields.Set(TestGenFieldIncludeMsgId)
			fields.Set(TestGenFieldIncludeMsg)
		}
		if m.IncludeMsg.NestedMsg != nil && o.IncludeMsg.NestedMsg != nil {
			if m.IncludeMsg.NestedMsg.Name != o.IncludeMsg.NestedMsg.Name {
				fields.Set(TestGenFieldIncludeMsgNestedMsgName)
				fields.Set(TestGenFieldIncludeMsgNestedMsg)
				fields.Set(TestGenFieldIncludeMsg)
			}
		} else if (m.IncludeMsg.NestedMsg != nil && o.IncludeMsg.NestedMsg == nil) || (m.IncludeMsg.NestedMsg == nil && o.IncludeMsg.NestedMsg != nil) {
			fields.Set(TestGenFieldIncludeMsgNestedMsg)
			fields.Set(TestGenFieldIncludeMsg)
		}
	} else if (m.IncludeMsg != nil && o.IncludeMsg == nil) || (m.IncludeMsg == nil && o.IncludeMsg != nil) {
		fields.Set(TestGenFieldIncludeMsg)
	}
	if m.IncludeMsgNonnull.Name != o.IncludeMsgNonnull.Name {
		fields.Set(TestGenFieldIncludeMsgNonnullName)
		fields.Set(TestGenFieldIncludeMsgNonnull)
	}
	if m.IncludeMsgNonnull.Id != o.IncludeMsgNonnull.Id {
		fields.Set(TestGenFieldIncludeMsgNonnullId)
		fields.Set(TestGenFieldIncludeMsgNonnull)
	}
	if m.IncludeMsgNonnull.NestedMsg != nil && o.IncludeMsgNonnull.NestedMsg != nil {
		if m.IncludeMsgNonnull.NestedMsg.Name != o.IncludeMsgNonnull.NestedMsg.Name {
			fields.Set(TestGenFieldIncludeMsgNonnullNestedMsgName)
			fields.Set(TestGenFieldIncludeMsgNonnullNestedMsg)
			fields.Set(TestGenFieldIncludeMsgNonnull)
		}
	} else if (m.IncludeMsgNonnull.NestedMsg != nil && o.IncludeMsgNonnull.NestedMsg == nil) || (m.IncludeMsgNonnull.NestedMsg == nil && o.IncludeMsgNonnull.NestedMsg != nil) {
		fields.Set(TestGenFieldIncludeMsgNonnullNestedMsg)
		fields.Set(TestGenFieldIncludeMsgNonnull)
	}
	if m.IncludeFields != nil && o.IncludeFields != nil {
		if m.IncludeFields.Name != o.IncludeFields.Name {
			fields.Set(TestGenFieldIncludeFieldsName)
			fields.Set(TestGenFieldIncludeFields)
		}
	} else if (m.IncludeFields != nil && o.IncludeFields == nil) || (m.IncludeFields == nil && o.IncludeFields != nil) {
		fields.Set(TestGenFieldIncludeFields)
	}
	if m.IncludeFieldsNonnull.Name != o.IncludeFieldsNonnull.Name {
		fields.Set(TestGenFieldIncludeFieldsNonnullName)
		fields.Set(TestGenFieldIncludeFieldsNonnull)
	}
	if m.Loc != nil && o.Loc != nil {
		if m.Loc.Latitude != o.Loc.Latitude {
			fields.Set(TestGenFieldLocLatitude)
			fields.Set(TestGenFieldLoc)
		}
		if m.Loc.Longitude != o.Loc.Longitude {
			fields.Set(TestGenFieldLocLongitude)
			fields.Set(TestGenFieldLoc)
		}
		if m.Loc.HorizontalAccuracy != o.Loc.HorizontalAccuracy {
			fields.Set(TestGenFieldLocHorizontalAccuracy)
			fields.Set(TestGenFieldLoc)
		}
		if m.Loc.VerticalAccuracy != o.Loc.VerticalAccuracy {
			fields.Set(TestGenFieldLocVerticalAccuracy)
			fields.Set(TestGenFieldLoc)
		}
		if m.Loc.Altitude != o.Loc.Altitude {
			fields.Set(TestGenFieldLocAltitude)
			fields.Set(TestGenFieldLoc)
		}
		if m.Loc.Course != o.Loc.Course {
			fields.Set(TestGenFieldLocCourse)
			fields.Set(TestGenFieldLoc)
		}
		if m.Loc.Speed != o.Loc.Speed {
			fields.Set(TestGenFieldLocSpeed)
			fields.Set(TestGenFieldLoc)
		}
		if m.Loc.Timestamp != nil && o.Loc.Timestamp != nil {
			if m.Loc.Timestamp.Seconds != o.Loc.Timestamp.Seconds {
				fields.Set(TestGenFieldLocTimestampSeconds)
				fields.Set(TestGenFieldLocTimestamp)
				fields.Set(TestGenFieldLoc)
			}
			if m.Loc.Timestamp.Nanos != o.Loc.Timestamp.Nanos {
				fields.Set(TestGenFieldLocTimestampNanos)
				fields.Set(TestGenFieldLocTimestamp)
				fields.Set(TestGenFieldLoc)
			}
		} else if (m.Loc.Timestamp != nil && o.Loc.Timestamp == nil) || (m.Loc.Timestamp == nil && o.Loc.Timestamp != nil) {
			fields.Set(TestGenFieldLocTimestamp)
			fields.Set(TestGenFieldLoc)
		}
	} else if (m.Loc != nil && o.Loc == nil) || (m.Loc == nil && o.Loc != nil) {
		fields.Set(TestGenFieldLoc)
	}
	if m.LocNonnull.Latitude != o.LocNonnull.Latitude {
		fields.Set(TestGenFieldLocNonnullLatitude)
		fields.Set(TestGenFieldLocNonnull)
	}
	if m.LocNonnull.Longitude != o.LocNonnull.Longitude {
		fields.Set(TestGenFieldLocNonnullLongitude)
		fields.Set(TestGenFieldLocNonnull)
	}
	if m.LocNonnull.HorizontalAccuracy != o.LocNonnull.HorizontalAccuracy {
		fields.Set(TestGenFieldLocNonnullHorizontalAccuracy)
		fields.Set(TestGenFieldLocNonnull)
	}
	if m.LocNonnull.VerticalAccuracy != o.LocNonnull.VerticalAccuracy {
		fields.Set(TestGenFieldLocNonnullVerticalAccuracy)
		fields.Set(TestGenFieldLocNonnull)
	}
	if m.LocNonnull.Altitude != o.LocNonnull.Altitude {
		fields.Set(TestGenFieldLocNonnullAltitude)
		fields.Set(TestGenFieldLocNonnull)
	}
	if m.LocNonnull.Course != o.LocNonnull.Course {
		fields.Set(TestGenFieldLocNonnullCourse)
		fields.Set(TestGenFieldLocNonnull)
	}
	if m.LocNonnull.Speed != o.LocNonnull.Speed {
		fields.Set(TestGenFieldLocNonnullSpeed)
		fields.Set(TestGenFieldLocNonnull)
	}
	if m.LocNonnull.Timestamp != nil && o.LocNonnull.Timestamp != nil {
		if m.LocNonnull.Timestamp.Seconds != o.LocNonnull.Timestamp.Seconds {
			fields.Set(TestGenFieldLocNonnullTimestampSeconds)
			fields.Set(TestGenFieldLocNonnullTimestamp)
			fields.Set(TestGenFieldLocNonnull)
		}
		if m.LocNonnull.Timestamp.Nanos != o.LocNonnull.Timestamp.Nanos {
			fields.Set(TestGenFieldLocNonnullTimestampNanos)
			fields.Set(TestGenFieldLocNonnullTimestamp)
			fields.Set(TestGenFieldLocNonnull)
		}
	} else if (m.LocNonnull.Timestamp != nil && o.LocNonnull.Timestamp == nil) || (m.LocNonnull.Timestamp == nil && o.LocNonnull.Timestamp != nil) {
		fields.Set(TestGenFieldLocNonnullTimestamp)
		fields.Set(TestGenFieldLocNonnull)
	}
	if len(m.RepeatedInt) != len(o.RepeatedInt) {
		fields.Set(TestGenFieldRepeatedInt)
	} else {
		for i0 := 0; i0 < len(m.RepeatedInt); i0++ {
			if m.RepeatedInt[i0] != o.RepeatedInt[i0] {
				fields.Set(TestGenFieldRepeatedInt)
				break
			}
		}
	}
	if len(m.Ip) != len(o.Ip) {
		fields.Set(TestGenFieldIp)
	} else {
		for i0 := 0; i0 < len(m.Ip); i0++ {
			if m.Ip[i0] != o.Ip[i0] {
				fields.Set(TestGenFieldIp)
				break
			}
		}
	}
	if len(m.Names) != len(o.Names) {
		fields.Set(TestGenFieldNames)
	} else {
		for i0 := 0; i0 < len(m.Names); i0++ {
			if m.Names[i0] != o.Names[i0] {
				fields.Set(TestGenFieldNames)
				break
			}
		}
	}
	if m.RepeatedMsg != nil && o.RepeatedMsg != nil {
		if len(m.RepeatedMsg) != len(o.RepeatedMsg) {
			fields.Set(TestGenFieldRepeatedMsg)
		} else {
			for i0 := 0; i0 < len(m.RepeatedMsg); i0++ {
				if m.RepeatedMsg[i0].Name != o.RepeatedMsg[i0].Name {
					fields.Set(TestGenFieldRepeatedMsgName)
					fields.Set(TestGenFieldRepeatedMsg)
				}
				if m.RepeatedMsg[i0].Id != o.RepeatedMsg[i0].Id {
					fields.Set(TestGenFieldRepeatedMsgId)
					fields.Set(TestGenFieldRepeatedMsg)
				}
				if m.RepeatedMsg[i0].NestedMsg != nil && o.RepeatedMsg[i0].NestedMsg != nil {
					if m.RepeatedMsg[i0].NestedMsg.Name != o.RepeatedMsg[i0].NestedMsg.Name {
						fields.Set(TestGenFieldRepeatedMsgNestedMsgName)
						fields.Set(TestGenFieldRepeatedMsgNestedMsg)
						fields.Set(TestGenFieldRepeatedMsg)
					}
				} else if (m.RepeatedMsg[i0].NestedMsg != nil && o.RepeatedMsg[i0].NestedMsg == nil) || (m.RepeatedMsg[i0].NestedMsg == nil && o.RepeatedMsg[i0].NestedMsg != nil) {
					fields.Set(TestGenFieldRepeatedMsgNestedMsg)
					fields.Set(TestGenFieldRepeatedMsg)
				}
			}
		}
	} else if (m.RepeatedMsg != nil && o.RepeatedMsg == nil) || (m.RepeatedMsg == nil && o.RepeatedMsg != nil) {
		fields.Set(TestGenFieldRepeatedMsg)
	}
	if len(m.RepeatedMsgNonnull) != len(o.RepeatedMsgNonnull) {
		fields.Set(TestGenFieldRepeatedMsgNonnull)
	} else {
		for i0 := 0; i0 < len(m.RepeatedMsgNonnull); i0++ {
			if m.RepeatedMsgNonnull[i0].Name != o.RepeatedMsgNonnull[i0].Name {
				fields.Set(TestGenFieldRepeatedMsgNonnullName)
				fields.Set(TestGenFieldRepeatedMsgNonnull)
			}
			if m.RepeatedMsgNonnull[i0].Id != o.RepeatedMsgNonnull[i0].Id {
				fields.Set(TestGenFieldRepeatedMsgNonnullId)
				fields.Set(TestGenFieldRepeatedMsgNonnull)
			}
			if m.RepeatedMsgNonnull[i0].NestedMsg != nil && o.RepeatedMsgNonnull[i0].NestedMsg != nil {
				if m.RepeatedMsgNonnull[i0].NestedMsg.Name != o.RepeatedMsgNonnull[i0].NestedMsg.Name {
					fields.Set(TestGenFieldRepeatedMsgNonnullNestedMsgName)
					fields.Set(TestGenFieldRepeatedMsgNonnullNestedMsg)
					fields.Set(TestGenFieldRepeatedMsgNonnull)
				}
			} else if (m.RepeatedMsgNonnull[i0].NestedMsg != nil && o.RepeatedMsgNonnull[i0].NestedMsg == nil) || (m.RepeatedMsgNonnull[i0].NestedMsg == nil && o.RepeatedMsgNonnull[i0].NestedMsg != nil) {
				fields.Set(TestGenFieldRepeatedMsgNonnullNestedMsg)
				fields.Set(TestGenFieldRepeatedMsgNonnull)
			}
		}
	}
	if m.RepeatedFields != nil && o.RepeatedFields != nil {
		if len(m.RepeatedFields) != len(o.RepeatedFields) {
			fields.Set(TestGenFieldRepeatedFields)
		} else {
			for i0 := 0; i0 < len(m.RepeatedFields); i0++ {
				if m.RepeatedFields[i0].Name != o.RepeatedFields[i0].Name {
					fields.Set(TestGenFieldRepeatedFieldsName)
					fields.Set(TestGenFieldRepeatedFields)
				}
			}
		}
	} else if (m.RepeatedFields != nil && o.RepeatedFields == nil) || (m.RepeatedFields == nil && o.RepeatedFields != nil) {
		fields.Set(TestGenFieldRepeatedFields)
	}
	if len(m.RepeatedFieldsNonnull) != len(o.RepeatedFieldsNonnull) {
		fields.Set(TestGenFieldRepeatedFieldsNonnull)
	} else {
		for i0 := 0; i0 < len(m.RepeatedFieldsNonnull); i0++ {
			if m.RepeatedFieldsNonnull[i0].Name != o.RepeatedFieldsNonnull[i0].Name {
				fields.Set(TestGenFieldRepeatedFieldsNonnullName)
				fields.Set(TestGenFieldRepeatedFieldsNonnull)
			}
		}
	}
	if m.RepeatedInnerMsg != nil && o.RepeatedInnerMsg != nil {
		if len(m.RepeatedInnerMsg) != len(o.RepeatedInnerMsg) {
			fields.Set(TestGenFieldRepeatedInnerMsg)
		} else {
			for i0 := 0; i0 < len(m.RepeatedInnerMsg); i0++ {
				if m.RepeatedInnerMsg[i0].Url != o.RepeatedInnerMsg[i0].Url {
					fields.Set(TestGenFieldRepeatedInnerMsgUrl)
					fields.Set(TestGenFieldRepeatedInnerMsg)
				}
				if m.RepeatedInnerMsg[i0].Id != o.RepeatedInnerMsg[i0].Id {
					fields.Set(TestGenFieldRepeatedInnerMsgId)
					fields.Set(TestGenFieldRepeatedInnerMsg)
				}
			}
		}
	} else if (m.RepeatedInnerMsg != nil && o.RepeatedInnerMsg == nil) || (m.RepeatedInnerMsg == nil && o.RepeatedInnerMsg != nil) {
		fields.Set(TestGenFieldRepeatedInnerMsg)
	}
	if len(m.RepeatedInnerMsgNonnull) != len(o.RepeatedInnerMsgNonnull) {
		fields.Set(TestGenFieldRepeatedInnerMsgNonnull)
	} else {
		for i0 := 0; i0 < len(m.RepeatedInnerMsgNonnull); i0++ {
			if m.RepeatedInnerMsgNonnull[i0].Url != o.RepeatedInnerMsgNonnull[i0].Url {
				fields.Set(TestGenFieldRepeatedInnerMsgNonnullUrl)
				fields.Set(TestGenFieldRepeatedInnerMsgNonnull)
			}
			if m.RepeatedInnerMsgNonnull[i0].Id != o.RepeatedInnerMsgNonnull[i0].Id {
				fields.Set(TestGenFieldRepeatedInnerMsgNonnullId)
				fields.Set(TestGenFieldRepeatedInnerMsgNonnull)
			}
		}
	}
	if m.RepeatedLoc != nil && o.RepeatedLoc != nil {
		if len(m.RepeatedLoc) != len(o.RepeatedLoc) {
			fields.Set(TestGenFieldRepeatedLoc)
		} else {
			for i0 := 0; i0 < len(m.RepeatedLoc); i0++ {
				if m.RepeatedLoc[i0].Latitude != o.RepeatedLoc[i0].Latitude {
					fields.Set(TestGenFieldRepeatedLocLatitude)
					fields.Set(TestGenFieldRepeatedLoc)
				}
				if m.RepeatedLoc[i0].Longitude != o.RepeatedLoc[i0].Longitude {
					fields.Set(TestGenFieldRepeatedLocLongitude)
					fields.Set(TestGenFieldRepeatedLoc)
				}
				if m.RepeatedLoc[i0].HorizontalAccuracy != o.RepeatedLoc[i0].HorizontalAccuracy {
					fields.Set(TestGenFieldRepeatedLocHorizontalAccuracy)
					fields.Set(TestGenFieldRepeatedLoc)
				}
				if m.RepeatedLoc[i0].VerticalAccuracy != o.RepeatedLoc[i0].VerticalAccuracy {
					fields.Set(TestGenFieldRepeatedLocVerticalAccuracy)
					fields.Set(TestGenFieldRepeatedLoc)
				}
				if m.RepeatedLoc[i0].Altitude != o.RepeatedLoc[i0].Altitude {
					fields.Set(TestGenFieldRepeatedLocAltitude)
					fields.Set(TestGenFieldRepeatedLoc)
				}
				if m.RepeatedLoc[i0].Course != o.RepeatedLoc[i0].Course {
					fields.Set(TestGenFieldRepeatedLocCourse)
					fields.Set(TestGenFieldRepeatedLoc)
				}
				if m.RepeatedLoc[i0].Speed != o.RepeatedLoc[i0].Speed {
					fields.Set(TestGenFieldRepeatedLocSpeed)
					fields.Set(TestGenFieldRepeatedLoc)
				}
				if m.RepeatedLoc[i0].Timestamp != nil && o.RepeatedLoc[i0].Timestamp != nil {
					if m.RepeatedLoc[i0].Timestamp.Seconds != o.RepeatedLoc[i0].Timestamp.Seconds {
						fields.Set(TestGenFieldRepeatedLocTimestampSeconds)
						fields.Set(TestGenFieldRepeatedLocTimestamp)
						fields.Set(TestGenFieldRepeatedLoc)
					}
					if m.RepeatedLoc[i0].Timestamp.Nanos != o.RepeatedLoc[i0].Timestamp.Nanos {
						fields.Set(TestGenFieldRepeatedLocTimestampNanos)
						fields.Set(TestGenFieldRepeatedLocTimestamp)
						fields.Set(TestGenFieldRepeatedLoc)
					}
				} else if (m.RepeatedLoc[i0].Timestamp != nil && o.RepeatedLoc[i0].Timestamp == nil) || (m.RepeatedLoc[i0].Timestamp == nil && o.RepeatedLoc[i0].Timestamp != nil) {
					fields.Set(TestGenFieldRepeatedLocTimestamp)
					fields.Set(TestGenFieldRepeatedLoc)
				}
			}
		}
	} else if (m.RepeatedLoc != nil && o.RepeatedLoc == nil) || (m.RepeatedLoc == nil && o.RepeatedLoc != nil) {
		fields.Set(TestGenFieldRepeatedLoc)
	}
	if len(m.RepeatedLocNonnull) != len(o.RepeatedLocNonnull) {
		fields.Set(TestGenFieldRepeatedLocNonnull)
	} else {
		for i0 := 0; i0 < len(m.RepeatedLocNonnull); i0++ {
			if m.RepeatedLocNonnull[i0].Latitude != o.RepeatedLocNonnull[i0].Latitude {
				fields.Set(TestGenFieldRepeatedLocNonnullLatitude)
				fields.Set(TestGenFieldRepeatedLocNonnull)
			}
			if m.RepeatedLocNonnull[i0].Longitude != o.RepeatedLocNonnull[i0].Longitude {
				fields.Set(TestGenFieldRepeatedLocNonnullLongitude)
				fields.Set(TestGenFieldRepeatedLocNonnull)
			}
			if m.RepeatedLocNonnull[i0].HorizontalAccuracy != o.RepeatedLocNonnull[i0].HorizontalAccuracy {
				fields.Set(TestGenFieldRepeatedLocNonnullHorizontalAccuracy)
				fields.Set(TestGenFieldRepeatedLocNonnull)
			}
			if m.RepeatedLocNonnull[i0].VerticalAccuracy != o.RepeatedLocNonnull[i0].VerticalAccuracy {
				fields.Set(TestGenFieldRepeatedLocNonnullVerticalAccuracy)
				fields.Set(TestGenFieldRepeatedLocNonnull)
			}
			if m.RepeatedLocNonnull[i0].Altitude != o.RepeatedLocNonnull[i0].Altitude {
				fields.Set(TestGenFieldRepeatedLocNonnullAltitude)
				fields.Set(TestGenFieldRepeatedLocNonnull)
			}
			if m.RepeatedLocNonnull[i0].Course != o.RepeatedLocNonnull[i0].Course {
				fields.Set(TestGenFieldRepeatedLocNonnullCourse)
				fields.Set(TestGenFieldRepeatedLocNonnull)
			}
			if m.RepeatedLocNonnull[i0].Speed != o.RepeatedLocNonnull[i0].Speed {
				fields.Set(TestGenFieldRepeatedLocNonnullSpeed)
				fields.Set(TestGenFieldRepeatedLocNonnull)
			}
			if m.RepeatedLocNonnull[i0].Timestamp != nil && o.RepeatedLocNonnull[i0].Timestamp != nil {
				if m.RepeatedLocNonnull[i0].Timestamp.Seconds != o.RepeatedLocNonnull[i0].Timestamp.Seconds {
					fields.Set(TestGenFieldRepeatedLocNonnullTimestampSeconds)
					fields.Set(TestGenFieldRepeatedLocNonnullTimestamp)
					fields.Set(TestGenFieldRepeatedLocNonnull)
				}
				if m.RepeatedLocNonnull[i0].Timestamp.Nanos != o.RepeatedLocNonnull[i0].Timestamp.Nanos {
					fields.Set(TestGenFieldRepeatedLocNonnullTimestampNanos)
					fields.Set(TestGenFieldRepeatedLocNonnullTimestamp)
					fields.Set(TestGenFieldRepeatedLocNonnull)
				}
			} else if (m.RepeatedLocNonnull[i0].Timestamp != nil && o.RepeatedLocNonnull[i0].Timestamp == nil) || (m.RepeatedLocNonnull[i0].Timestamp == nil && o.RepeatedLocNonnull[i0].Timestamp != nil) {
				fields.Set(TestGenFieldRepeatedLocNonnullTimestamp)
				fields.Set(TestGenFieldRepeatedLocNonnull)
			}
		}
	}
	if m.IntMap != nil && o.IntMap != nil {
		if len(m.IntMap) != len(o.IntMap) {
			fields.Set(TestGenFieldIntMap)
		} else {
			for k0, _ := range m.IntMap {
				_, vok0 := o.IntMap[k0]
				if !vok0 {
					fields.Set(TestGenFieldIntMap)
				} else {
					if m.IntMap[k0] != o.IntMap[k0] {
						fields.Set(TestGenFieldIntMap)
						break
					}
				}
			}
		}
	} else if (m.IntMap != nil && o.IntMap == nil) || (m.IntMap == nil && o.IntMap != nil) {
		fields.Set(TestGenFieldIntMap)
	}
	if m.MsgMap != nil && o.MsgMap != nil {
		if len(m.MsgMap) != len(o.MsgMap) {
			fields.Set(TestGenFieldMsgMap)
		} else {
			for k0, _ := range m.MsgMap {
				_, vok0 := o.MsgMap[k0]
				if !vok0 {
					fields.Set(TestGenFieldMsgMap)
				} else {
					if m.MsgMap[k0].Name != o.MsgMap[k0].Name {
						fields.Set(TestGenFieldMsgMapValueName)
						fields.Set(TestGenFieldMsgMapValue)
						fields.Set(TestGenFieldMsgMap)
					}
				}
			}
		}
	} else if (m.MsgMap != nil && o.MsgMap == nil) || (m.MsgMap == nil && o.MsgMap != nil) {
		fields.Set(TestGenFieldMsgMap)
	}
	if m.Unused != o.Unused {
		fields.Set(TestGenFieldUnused)
	}
}

func (m *TestGen) GetDiffFields(o *TestGen) *FieldMap {
	diffFields := NewFieldMap(nil)
	m.DiffFields(o, diffFields)
	return diffFields
}

func (m *TestGen) Clone() *TestGen {
	cp := &TestGen{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *TestGen) AddRepeatedInt(vals ...int64) int {
	changes := 0
	cur := make(map[int64]struct{})
	for _, v := range m.RepeatedInt {
		cur[v] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v]; found {
			continue // duplicate
		}
		m.RepeatedInt = append(m.RepeatedInt, v)
		changes++
	}
	return changes
}

func (m *TestGen) RemoveRepeatedInt(vals ...int64) int {
	changes := 0
	remove := make(map[int64]struct{})
	for _, v := range vals {
		remove[v] = struct{}{}
	}
	for i := len(m.RepeatedInt); i >= 0; i-- {
		if _, found := remove[m.RepeatedInt[i]]; found {
			m.RepeatedInt = append(m.RepeatedInt[:i], m.RepeatedInt[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *TestGen) AddNames(vals ...string) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.Names {
		cur[v] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v]; found {
			continue // duplicate
		}
		m.Names = append(m.Names, v)
		changes++
	}
	return changes
}

func (m *TestGen) RemoveNames(vals ...string) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v] = struct{}{}
	}
	for i := len(m.Names); i >= 0; i-- {
		if _, found := remove[m.Names[i]]; found {
			m.Names = append(m.Names[:i], m.Names[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *TestGen) AddRepeatedMsg(vals ...*IncludeMessage) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.RepeatedMsg {
		cur[v.String()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.String()]; found {
			continue // duplicate
		}
		m.RepeatedMsg = append(m.RepeatedMsg, v)
		changes++
	}
	return changes
}

func (m *TestGen) RemoveRepeatedMsg(vals ...*IncludeMessage) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.String()] = struct{}{}
	}
	for i := len(m.RepeatedMsg); i >= 0; i-- {
		if _, found := remove[m.RepeatedMsg[i].String()]; found {
			m.RepeatedMsg = append(m.RepeatedMsg[:i], m.RepeatedMsg[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *TestGen) AddRepeatedMsgNonnull(vals ...IncludeMessage) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.RepeatedMsgNonnull {
		cur[v.String()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.String()]; found {
			continue // duplicate
		}
		m.RepeatedMsgNonnull = append(m.RepeatedMsgNonnull, v)
		changes++
	}
	return changes
}

func (m *TestGen) RemoveRepeatedMsgNonnull(vals ...IncludeMessage) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.String()] = struct{}{}
	}
	for i := len(m.RepeatedMsgNonnull); i >= 0; i-- {
		if _, found := remove[m.RepeatedMsgNonnull[i].String()]; found {
			m.RepeatedMsgNonnull = append(m.RepeatedMsgNonnull[:i], m.RepeatedMsgNonnull[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *TestGen) AddRepeatedFields(vals ...*IncludeFields) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.RepeatedFields {
		cur[v.String()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.String()]; found {
			continue // duplicate
		}
		m.RepeatedFields = append(m.RepeatedFields, v)
		changes++
	}
	return changes
}

func (m *TestGen) RemoveRepeatedFields(vals ...*IncludeFields) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.String()] = struct{}{}
	}
	for i := len(m.RepeatedFields); i >= 0; i-- {
		if _, found := remove[m.RepeatedFields[i].String()]; found {
			m.RepeatedFields = append(m.RepeatedFields[:i], m.RepeatedFields[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *TestGen) AddRepeatedFieldsNonnull(vals ...IncludeFields) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.RepeatedFieldsNonnull {
		cur[v.String()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.String()]; found {
			continue // duplicate
		}
		m.RepeatedFieldsNonnull = append(m.RepeatedFieldsNonnull, v)
		changes++
	}
	return changes
}

func (m *TestGen) RemoveRepeatedFieldsNonnull(vals ...IncludeFields) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.String()] = struct{}{}
	}
	for i := len(m.RepeatedFieldsNonnull); i >= 0; i-- {
		if _, found := remove[m.RepeatedFieldsNonnull[i].String()]; found {
			m.RepeatedFieldsNonnull = append(m.RepeatedFieldsNonnull[:i], m.RepeatedFieldsNonnull[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *TestGen) AddRepeatedInnerMsg(vals ...*TestGen_InnerMessage) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.RepeatedInnerMsg {
		cur[v.String()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.String()]; found {
			continue // duplicate
		}
		m.RepeatedInnerMsg = append(m.RepeatedInnerMsg, v)
		changes++
	}
	return changes
}

func (m *TestGen) RemoveRepeatedInnerMsg(vals ...*TestGen_InnerMessage) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.String()] = struct{}{}
	}
	for i := len(m.RepeatedInnerMsg); i >= 0; i-- {
		if _, found := remove[m.RepeatedInnerMsg[i].String()]; found {
			m.RepeatedInnerMsg = append(m.RepeatedInnerMsg[:i], m.RepeatedInnerMsg[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *TestGen) AddRepeatedInnerMsgNonnull(vals ...TestGen_InnerMessage) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.RepeatedInnerMsgNonnull {
		cur[v.String()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.String()]; found {
			continue // duplicate
		}
		m.RepeatedInnerMsgNonnull = append(m.RepeatedInnerMsgNonnull, v)
		changes++
	}
	return changes
}

func (m *TestGen) RemoveRepeatedInnerMsgNonnull(vals ...TestGen_InnerMessage) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.String()] = struct{}{}
	}
	for i := len(m.RepeatedInnerMsgNonnull); i >= 0; i-- {
		if _, found := remove[m.RepeatedInnerMsgNonnull[i].String()]; found {
			m.RepeatedInnerMsgNonnull = append(m.RepeatedInnerMsgNonnull[:i], m.RepeatedInnerMsgNonnull[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *TestGen) AddRepeatedLoc(vals ...*distributed_match_engine.Loc) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.RepeatedLoc {
		cur[v.String()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.String()]; found {
			continue // duplicate
		}
		m.RepeatedLoc = append(m.RepeatedLoc, v)
		changes++
	}
	return changes
}

func (m *TestGen) RemoveRepeatedLoc(vals ...*distributed_match_engine.Loc) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.String()] = struct{}{}
	}
	for i := len(m.RepeatedLoc); i >= 0; i-- {
		if _, found := remove[m.RepeatedLoc[i].String()]; found {
			m.RepeatedLoc = append(m.RepeatedLoc[:i], m.RepeatedLoc[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *TestGen) AddRepeatedLocNonnull(vals ...distributed_match_engine.Loc) int {
	changes := 0
	cur := make(map[string]struct{})
	for _, v := range m.RepeatedLocNonnull {
		cur[v.String()] = struct{}{}
	}
	for _, v := range vals {
		if _, found := cur[v.String()]; found {
			continue // duplicate
		}
		m.RepeatedLocNonnull = append(m.RepeatedLocNonnull, v)
		changes++
	}
	return changes
}

func (m *TestGen) RemoveRepeatedLocNonnull(vals ...distributed_match_engine.Loc) int {
	changes := 0
	remove := make(map[string]struct{})
	for _, v := range vals {
		remove[v.String()] = struct{}{}
	}
	for i := len(m.RepeatedLocNonnull); i >= 0; i-- {
		if _, found := remove[m.RepeatedLocNonnull[i].String()]; found {
			m.RepeatedLocNonnull = append(m.RepeatedLocNonnull[:i], m.RepeatedLocNonnull[i+1:]...)
			changes++
		}
	}
	return changes
}

func (m *TestGen) CopyInFields(src *TestGen) int {
	updateListAction := "replace"
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if fmap.Has("2") {
		if m.Name != src.Name {
			m.Name = src.Name
			changed++
		}
	}
	if fmap.Has("3") {
		if m.Db != src.Db {
			m.Db = src.Db
			changed++
		}
	}
	if fmap.Has("4") {
		if m.Fl != src.Fl {
			m.Fl = src.Fl
			changed++
		}
	}
	if fmap.Has("5") {
		if m.I32 != src.I32 {
			m.I32 = src.I32
			changed++
		}
	}
	if fmap.Has("6") {
		if m.I64 != src.I64 {
			m.I64 = src.I64
			changed++
		}
	}
	if fmap.Has("7") {
		if m.U32 != src.U32 {
			m.U32 = src.U32
			changed++
		}
	}
	if fmap.Has("8") {
		if m.U64 != src.U64 {
			m.U64 = src.U64
			changed++
		}
	}
	if fmap.Has("9") {
		if m.S32 != src.S32 {
			m.S32 = src.S32
			changed++
		}
	}
	if fmap.Has("10") {
		if m.S64 != src.S64 {
			m.S64 = src.S64
			changed++
		}
	}
	if fmap.Has("11") {
		if m.F32 != src.F32 {
			m.F32 = src.F32
			changed++
		}
	}
	if fmap.Has("12") {
		if m.F64 != src.F64 {
			m.F64 = src.F64
			changed++
		}
	}
	if fmap.Has("13") {
		if m.Sf32 != src.Sf32 {
			m.Sf32 = src.Sf32
			changed++
		}
	}
	if fmap.Has("14") {
		if m.Sf64 != src.Sf64 {
			m.Sf64 = src.Sf64
			changed++
		}
	}
	if fmap.Has("15") {
		if m.Bb != src.Bb {
			m.Bb = src.Bb
			changed++
		}
	}
	if fmap.Has("16") {
		if m.OuterEn != src.OuterEn {
			m.OuterEn = src.OuterEn
			changed++
		}
	}
	if fmap.Has("17") {
		if m.InnerEn != src.InnerEn {
			m.InnerEn = src.InnerEn
			changed++
		}
	}
	if fmap.HasOrHasChild("18") {
		if src.InnerMsg != nil {
			if m.InnerMsg == nil {
				m.InnerMsg = &TestGen_InnerMessage{}
			}
			if fmap.Has("18.1") {
				if m.InnerMsg.Url != src.InnerMsg.Url {
					m.InnerMsg.Url = src.InnerMsg.Url
					changed++
				}
			}
			if fmap.Has("18.2") {
				if m.InnerMsg.Id != src.InnerMsg.Id {
					m.InnerMsg.Id = src.InnerMsg.Id
					changed++
				}
			}
		} else if m.InnerMsg != nil {
			m.InnerMsg = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("19") {
		if fmap.Has("19.1") {
			if m.InnerMsgNonnull.Url != src.InnerMsgNonnull.Url {
				m.InnerMsgNonnull.Url = src.InnerMsgNonnull.Url
				changed++
			}
		}
		if fmap.Has("19.2") {
			if m.InnerMsgNonnull.Id != src.InnerMsgNonnull.Id {
				m.InnerMsgNonnull.Id = src.InnerMsgNonnull.Id
				changed++
			}
		}
	}
	if fmap.HasOrHasChild("20") {
		if src.IncludeMsg != nil {
			if m.IncludeMsg == nil {
				m.IncludeMsg = &IncludeMessage{}
			}
			if fmap.Has("20.1") {
				if m.IncludeMsg.Name != src.IncludeMsg.Name {
					m.IncludeMsg.Name = src.IncludeMsg.Name
					changed++
				}
			}
			if fmap.Has("20.2") {
				if m.IncludeMsg.Id != src.IncludeMsg.Id {
					m.IncludeMsg.Id = src.IncludeMsg.Id
					changed++
				}
			}
			if fmap.HasOrHasChild("20.3") {
				if src.IncludeMsg.NestedMsg != nil {
					if m.IncludeMsg.NestedMsg == nil {
						m.IncludeMsg.NestedMsg = &NestedMessage{}
					}
					if fmap.Has("20.3.1") {
						if m.IncludeMsg.NestedMsg.Name != src.IncludeMsg.NestedMsg.Name {
							m.IncludeMsg.NestedMsg.Name = src.IncludeMsg.NestedMsg.Name
							changed++
						}
					}
				} else if m.IncludeMsg.NestedMsg != nil {
					m.IncludeMsg.NestedMsg = nil
					changed++
				}
			}
		} else if m.IncludeMsg != nil {
			m.IncludeMsg = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("21") {
		if fmap.Has("21.1") {
			if m.IncludeMsgNonnull.Name != src.IncludeMsgNonnull.Name {
				m.IncludeMsgNonnull.Name = src.IncludeMsgNonnull.Name
				changed++
			}
		}
		if fmap.Has("21.2") {
			if m.IncludeMsgNonnull.Id != src.IncludeMsgNonnull.Id {
				m.IncludeMsgNonnull.Id = src.IncludeMsgNonnull.Id
				changed++
			}
		}
		if fmap.HasOrHasChild("21.3") {
			if src.IncludeMsgNonnull.NestedMsg != nil {
				if m.IncludeMsgNonnull.NestedMsg == nil {
					m.IncludeMsgNonnull.NestedMsg = &NestedMessage{}
				}
				if fmap.Has("21.3.1") {
					if m.IncludeMsgNonnull.NestedMsg.Name != src.IncludeMsgNonnull.NestedMsg.Name {
						m.IncludeMsgNonnull.NestedMsg.Name = src.IncludeMsgNonnull.NestedMsg.Name
						changed++
					}
				}
			} else if m.IncludeMsgNonnull.NestedMsg != nil {
				m.IncludeMsgNonnull.NestedMsg = nil
				changed++
			}
		}
	}
	if fmap.HasOrHasChild("22") {
		if src.IncludeFields != nil {
			if m.IncludeFields == nil {
				m.IncludeFields = &IncludeFields{}
			}
			if fmap.Has("22.2") {
				if m.IncludeFields.Name != src.IncludeFields.Name {
					m.IncludeFields.Name = src.IncludeFields.Name
					changed++
				}
			}
		} else if m.IncludeFields != nil {
			m.IncludeFields = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("23") {
		if fmap.Has("23.2") {
			if m.IncludeFieldsNonnull.Name != src.IncludeFieldsNonnull.Name {
				m.IncludeFieldsNonnull.Name = src.IncludeFieldsNonnull.Name
				changed++
			}
		}
	}
	if fmap.HasOrHasChild("24") {
		if src.Loc != nil {
			if m.Loc == nil {
				m.Loc = &distributed_match_engine.Loc{}
			}
			if fmap.Has("24.1") {
				if m.Loc.Latitude != src.Loc.Latitude {
					m.Loc.Latitude = src.Loc.Latitude
					changed++
				}
			}
			if fmap.Has("24.2") {
				if m.Loc.Longitude != src.Loc.Longitude {
					m.Loc.Longitude = src.Loc.Longitude
					changed++
				}
			}
			if fmap.Has("24.3") {
				if m.Loc.HorizontalAccuracy != src.Loc.HorizontalAccuracy {
					m.Loc.HorizontalAccuracy = src.Loc.HorizontalAccuracy
					changed++
				}
			}
			if fmap.Has("24.4") {
				if m.Loc.VerticalAccuracy != src.Loc.VerticalAccuracy {
					m.Loc.VerticalAccuracy = src.Loc.VerticalAccuracy
					changed++
				}
			}
			if fmap.Has("24.5") {
				if m.Loc.Altitude != src.Loc.Altitude {
					m.Loc.Altitude = src.Loc.Altitude
					changed++
				}
			}
			if fmap.Has("24.6") {
				if m.Loc.Course != src.Loc.Course {
					m.Loc.Course = src.Loc.Course
					changed++
				}
			}
			if fmap.Has("24.7") {
				if m.Loc.Speed != src.Loc.Speed {
					m.Loc.Speed = src.Loc.Speed
					changed++
				}
			}
			if fmap.HasOrHasChild("24.8") {
				if src.Loc.Timestamp != nil {
					if m.Loc.Timestamp == nil {
						m.Loc.Timestamp = &distributed_match_engine.Timestamp{}
					}
					if fmap.Has("24.8.1") {
						if m.Loc.Timestamp.Seconds != src.Loc.Timestamp.Seconds {
							m.Loc.Timestamp.Seconds = src.Loc.Timestamp.Seconds
							changed++
						}
					}
					if fmap.Has("24.8.2") {
						if m.Loc.Timestamp.Nanos != src.Loc.Timestamp.Nanos {
							m.Loc.Timestamp.Nanos = src.Loc.Timestamp.Nanos
							changed++
						}
					}
				} else if m.Loc.Timestamp != nil {
					m.Loc.Timestamp = nil
					changed++
				}
			}
		} else if m.Loc != nil {
			m.Loc = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("25") {
		if fmap.Has("25.1") {
			if m.LocNonnull.Latitude != src.LocNonnull.Latitude {
				m.LocNonnull.Latitude = src.LocNonnull.Latitude
				changed++
			}
		}
		if fmap.Has("25.2") {
			if m.LocNonnull.Longitude != src.LocNonnull.Longitude {
				m.LocNonnull.Longitude = src.LocNonnull.Longitude
				changed++
			}
		}
		if fmap.Has("25.3") {
			if m.LocNonnull.HorizontalAccuracy != src.LocNonnull.HorizontalAccuracy {
				m.LocNonnull.HorizontalAccuracy = src.LocNonnull.HorizontalAccuracy
				changed++
			}
		}
		if fmap.Has("25.4") {
			if m.LocNonnull.VerticalAccuracy != src.LocNonnull.VerticalAccuracy {
				m.LocNonnull.VerticalAccuracy = src.LocNonnull.VerticalAccuracy
				changed++
			}
		}
		if fmap.Has("25.5") {
			if m.LocNonnull.Altitude != src.LocNonnull.Altitude {
				m.LocNonnull.Altitude = src.LocNonnull.Altitude
				changed++
			}
		}
		if fmap.Has("25.6") {
			if m.LocNonnull.Course != src.LocNonnull.Course {
				m.LocNonnull.Course = src.LocNonnull.Course
				changed++
			}
		}
		if fmap.Has("25.7") {
			if m.LocNonnull.Speed != src.LocNonnull.Speed {
				m.LocNonnull.Speed = src.LocNonnull.Speed
				changed++
			}
		}
		if fmap.HasOrHasChild("25.8") {
			if src.LocNonnull.Timestamp != nil {
				if m.LocNonnull.Timestamp == nil {
					m.LocNonnull.Timestamp = &distributed_match_engine.Timestamp{}
				}
				if fmap.Has("25.8.1") {
					if m.LocNonnull.Timestamp.Seconds != src.LocNonnull.Timestamp.Seconds {
						m.LocNonnull.Timestamp.Seconds = src.LocNonnull.Timestamp.Seconds
						changed++
					}
				}
				if fmap.Has("25.8.2") {
					if m.LocNonnull.Timestamp.Nanos != src.LocNonnull.Timestamp.Nanos {
						m.LocNonnull.Timestamp.Nanos = src.LocNonnull.Timestamp.Nanos
						changed++
					}
				}
			} else if m.LocNonnull.Timestamp != nil {
				m.LocNonnull.Timestamp = nil
				changed++
			}
		}
	}
	if fmap.Has("26") {
		if src.RepeatedInt != nil {
			if updateListAction == "add" {
				changed += m.AddRepeatedInt(src.RepeatedInt...)
			} else if updateListAction == "remove" {
				changed += m.RemoveRepeatedInt(src.RepeatedInt...)
			} else {
				m.RepeatedInt = make([]int64, 0)
				m.RepeatedInt = append(m.RepeatedInt, src.RepeatedInt...)
				changed++
			}
		} else if m.RepeatedInt != nil {
			m.RepeatedInt = nil
			changed++
		}
	}
	if fmap.Has("27") {
		if src.Ip != nil {
			m.Ip = src.Ip
			changed++
		}
	}
	if fmap.Has("28") {
		if src.Names != nil {
			if updateListAction == "add" {
				changed += m.AddNames(src.Names...)
			} else if updateListAction == "remove" {
				changed += m.RemoveNames(src.Names...)
			} else {
				m.Names = make([]string, 0)
				m.Names = append(m.Names, src.Names...)
				changed++
			}
		} else if m.Names != nil {
			m.Names = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("29") {
		if src.RepeatedMsg != nil {
			if updateListAction == "add" {
				changed += m.AddRepeatedMsg(src.RepeatedMsg...)
			} else if updateListAction == "remove" {
				changed += m.RemoveRepeatedMsg(src.RepeatedMsg...)
			} else {
				m.RepeatedMsg = make([]*IncludeMessage, 0)
				for k0, _ := range src.RepeatedMsg {
					m.RepeatedMsg = append(m.RepeatedMsg, src.RepeatedMsg[k0].Clone())
				}
				changed++
			}
		} else if m.RepeatedMsg != nil {
			m.RepeatedMsg = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("30") {
		if src.RepeatedMsgNonnull != nil {
			if updateListAction == "add" {
				changed += m.AddRepeatedMsgNonnull(src.RepeatedMsgNonnull...)
			} else if updateListAction == "remove" {
				changed += m.RemoveRepeatedMsgNonnull(src.RepeatedMsgNonnull...)
			} else {
				m.RepeatedMsgNonnull = make([]IncludeMessage, 0)
				for k0, _ := range src.RepeatedMsgNonnull {
					m.RepeatedMsgNonnull = append(m.RepeatedMsgNonnull, *src.RepeatedMsgNonnull[k0].Clone())
				}
				changed++
			}
		} else if m.RepeatedMsgNonnull != nil {
			m.RepeatedMsgNonnull = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("31") {
		if src.RepeatedFields != nil {
			if updateListAction == "add" {
				changed += m.AddRepeatedFields(src.RepeatedFields...)
			} else if updateListAction == "remove" {
				changed += m.RemoveRepeatedFields(src.RepeatedFields...)
			} else {
				m.RepeatedFields = make([]*IncludeFields, 0)
				for k0, _ := range src.RepeatedFields {
					m.RepeatedFields = append(m.RepeatedFields, src.RepeatedFields[k0].Clone())
				}
				changed++
			}
		} else if m.RepeatedFields != nil {
			m.RepeatedFields = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("32") {
		if src.RepeatedFieldsNonnull != nil {
			if updateListAction == "add" {
				changed += m.AddRepeatedFieldsNonnull(src.RepeatedFieldsNonnull...)
			} else if updateListAction == "remove" {
				changed += m.RemoveRepeatedFieldsNonnull(src.RepeatedFieldsNonnull...)
			} else {
				m.RepeatedFieldsNonnull = make([]IncludeFields, 0)
				for k0, _ := range src.RepeatedFieldsNonnull {
					m.RepeatedFieldsNonnull = append(m.RepeatedFieldsNonnull, *src.RepeatedFieldsNonnull[k0].Clone())
				}
				changed++
			}
		} else if m.RepeatedFieldsNonnull != nil {
			m.RepeatedFieldsNonnull = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("33") {
		if src.RepeatedInnerMsg != nil {
			if updateListAction == "add" {
				changed += m.AddRepeatedInnerMsg(src.RepeatedInnerMsg...)
			} else if updateListAction == "remove" {
				changed += m.RemoveRepeatedInnerMsg(src.RepeatedInnerMsg...)
			} else {
				m.RepeatedInnerMsg = make([]*TestGen_InnerMessage, 0)
				for k0, _ := range src.RepeatedInnerMsg {
					m.RepeatedInnerMsg = append(m.RepeatedInnerMsg, src.RepeatedInnerMsg[k0].Clone())
				}
				changed++
			}
		} else if m.RepeatedInnerMsg != nil {
			m.RepeatedInnerMsg = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("34") {
		if src.RepeatedInnerMsgNonnull != nil {
			if updateListAction == "add" {
				changed += m.AddRepeatedInnerMsgNonnull(src.RepeatedInnerMsgNonnull...)
			} else if updateListAction == "remove" {
				changed += m.RemoveRepeatedInnerMsgNonnull(src.RepeatedInnerMsgNonnull...)
			} else {
				m.RepeatedInnerMsgNonnull = make([]TestGen_InnerMessage, 0)
				for k0, _ := range src.RepeatedInnerMsgNonnull {
					m.RepeatedInnerMsgNonnull = append(m.RepeatedInnerMsgNonnull, *src.RepeatedInnerMsgNonnull[k0].Clone())
				}
				changed++
			}
		} else if m.RepeatedInnerMsgNonnull != nil {
			m.RepeatedInnerMsgNonnull = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("35") {
		if src.RepeatedLoc != nil {
			if updateListAction == "add" {
				changed += m.AddRepeatedLoc(src.RepeatedLoc...)
			} else if updateListAction == "remove" {
				changed += m.RemoveRepeatedLoc(src.RepeatedLoc...)
			} else {
				m.RepeatedLoc = make([]*distributed_match_engine.Loc, 0)
				for k0, _ := range src.RepeatedLoc {
					m.RepeatedLoc = append(m.RepeatedLoc, src.RepeatedLoc[k0].Clone())
				}
				changed++
			}
		} else if m.RepeatedLoc != nil {
			m.RepeatedLoc = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("36") {
		if src.RepeatedLocNonnull != nil {
			if updateListAction == "add" {
				changed += m.AddRepeatedLocNonnull(src.RepeatedLocNonnull...)
			} else if updateListAction == "remove" {
				changed += m.RemoveRepeatedLocNonnull(src.RepeatedLocNonnull...)
			} else {
				m.RepeatedLocNonnull = make([]distributed_match_engine.Loc, 0)
				for k0, _ := range src.RepeatedLocNonnull {
					m.RepeatedLocNonnull = append(m.RepeatedLocNonnull, *src.RepeatedLocNonnull[k0].Clone())
				}
				changed++
			}
		} else if m.RepeatedLocNonnull != nil {
			m.RepeatedLocNonnull = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("37") {
		if src.IntMap != nil {
			if updateListAction == "add" {
				for k0, v := range src.IntMap {
					m.IntMap[k0] = v
					changed++
				}
			} else if updateListAction == "remove" {
				for k0, _ := range src.IntMap {
					if _, ok := m.IntMap[k0]; ok {
						delete(m.IntMap, k0)
						changed++
					}
				}
			} else {
				m.IntMap = make(map[int32]int32)
				for k0, v := range src.IntMap {
					m.IntMap[k0] = v
				}
				changed++
			}
		} else if m.IntMap != nil {
			m.IntMap = nil
			changed++
		}
	}
	if fmap.HasOrHasChild("38") {
		if src.MsgMap != nil {
			if updateListAction == "add" {
				for k0, v := range src.MsgMap {
					v = v.Clone()
					m.MsgMap[k0] = v
					changed++
				}
			} else if updateListAction == "remove" {
				for k0, _ := range src.MsgMap {
					if _, ok := m.MsgMap[k0]; ok {
						delete(m.MsgMap, k0)
						changed++
					}
				}
			} else {
				m.MsgMap = make(map[int32]*NestedMessage)
				for k0, v := range src.MsgMap {
					m.MsgMap[k0] = v.Clone()
				}
				changed++
			}
		} else if m.MsgMap != nil {
			m.MsgMap = nil
			changed++
		}
	}
	if fmap.Has("39") {
		if m.Unused != src.Unused {
			m.Unused = src.Unused
			changed++
		}
	}
	return changed
}

func (m *TestGen) DeepCopyIn(src *TestGen) {
	m.Name = src.Name
	m.Db = src.Db
	m.Fl = src.Fl
	m.I32 = src.I32
	m.I64 = src.I64
	m.U32 = src.U32
	m.U64 = src.U64
	m.S32 = src.S32
	m.S64 = src.S64
	m.F32 = src.F32
	m.F64 = src.F64
	m.Sf32 = src.Sf32
	m.Sf64 = src.Sf64
	m.Bb = src.Bb
	m.OuterEn = src.OuterEn
	m.InnerEn = src.InnerEn
	if src.InnerMsg != nil {
		var tmp_InnerMsg TestGen_InnerMessage
		tmp_InnerMsg.DeepCopyIn(src.InnerMsg)
		m.InnerMsg = &tmp_InnerMsg
	} else {
		m.InnerMsg = nil
	}
	m.InnerMsgNonnull.DeepCopyIn(&src.InnerMsgNonnull)
	if src.IncludeMsg != nil {
		var tmp_IncludeMsg IncludeMessage
		tmp_IncludeMsg.DeepCopyIn(src.IncludeMsg)
		m.IncludeMsg = &tmp_IncludeMsg
	} else {
		m.IncludeMsg = nil
	}
	m.IncludeMsgNonnull.DeepCopyIn(&src.IncludeMsgNonnull)
	if src.IncludeFields != nil {
		var tmp_IncludeFields IncludeFields
		tmp_IncludeFields.DeepCopyIn(src.IncludeFields)
		m.IncludeFields = &tmp_IncludeFields
	} else {
		m.IncludeFields = nil
	}
	m.IncludeFieldsNonnull.DeepCopyIn(&src.IncludeFieldsNonnull)
	if src.Loc != nil {
		var tmp_Loc distributed_match_engine.Loc
		tmp_Loc = *src.Loc
		m.Loc = &tmp_Loc
	} else {
		m.Loc = nil
	}
	m.LocNonnull = src.LocNonnull
	if src.RepeatedInt != nil {
		m.RepeatedInt = make([]int64, len(src.RepeatedInt), len(src.RepeatedInt))
		for ii, s := range src.RepeatedInt {
			m.RepeatedInt[ii] = s
		}
	} else {
		m.RepeatedInt = nil
	}
	m.Ip = src.Ip
	if src.Names != nil {
		m.Names = make([]string, len(src.Names), len(src.Names))
		for ii, s := range src.Names {
			m.Names[ii] = s
		}
	} else {
		m.Names = nil
	}
	if src.RepeatedMsg != nil {
		m.RepeatedMsg = make([]*IncludeMessage, len(src.RepeatedMsg), len(src.RepeatedMsg))
		for ii, s := range src.RepeatedMsg {
			var tmp_s IncludeMessage
			tmp_s.DeepCopyIn(s)
			m.RepeatedMsg[ii] = &tmp_s
		}
	} else {
		m.RepeatedMsg = nil
	}
	if src.RepeatedMsgNonnull != nil {
		m.RepeatedMsgNonnull = make([]IncludeMessage, len(src.RepeatedMsgNonnull), len(src.RepeatedMsgNonnull))
		for ii, s := range src.RepeatedMsgNonnull {
			m.RepeatedMsgNonnull[ii].DeepCopyIn(&s)
		}
	} else {
		m.RepeatedMsgNonnull = nil
	}
	if src.RepeatedFields != nil {
		m.RepeatedFields = make([]*IncludeFields, len(src.RepeatedFields), len(src.RepeatedFields))
		for ii, s := range src.RepeatedFields {
			var tmp_s IncludeFields
			tmp_s.DeepCopyIn(s)
			m.RepeatedFields[ii] = &tmp_s
		}
	} else {
		m.RepeatedFields = nil
	}
	if src.RepeatedFieldsNonnull != nil {
		m.RepeatedFieldsNonnull = make([]IncludeFields, len(src.RepeatedFieldsNonnull), len(src.RepeatedFieldsNonnull))
		for ii, s := range src.RepeatedFieldsNonnull {
			m.RepeatedFieldsNonnull[ii].DeepCopyIn(&s)
		}
	} else {
		m.RepeatedFieldsNonnull = nil
	}
	if src.RepeatedInnerMsg != nil {
		m.RepeatedInnerMsg = make([]*TestGen_InnerMessage, len(src.RepeatedInnerMsg), len(src.RepeatedInnerMsg))
		for ii, s := range src.RepeatedInnerMsg {
			var tmp_s TestGen_InnerMessage
			tmp_s.DeepCopyIn(s)
			m.RepeatedInnerMsg[ii] = &tmp_s
		}
	} else {
		m.RepeatedInnerMsg = nil
	}
	if src.RepeatedInnerMsgNonnull != nil {
		m.RepeatedInnerMsgNonnull = make([]TestGen_InnerMessage, len(src.RepeatedInnerMsgNonnull), len(src.RepeatedInnerMsgNonnull))
		for ii, s := range src.RepeatedInnerMsgNonnull {
			m.RepeatedInnerMsgNonnull[ii].DeepCopyIn(&s)
		}
	} else {
		m.RepeatedInnerMsgNonnull = nil
	}
	if src.RepeatedLoc != nil {
		m.RepeatedLoc = make([]*distributed_match_engine.Loc, len(src.RepeatedLoc), len(src.RepeatedLoc))
		for ii, s := range src.RepeatedLoc {
			var tmp_s distributed_match_engine.Loc
			tmp_s = *s
			m.RepeatedLoc[ii] = &tmp_s
		}
	} else {
		m.RepeatedLoc = nil
	}
	if src.RepeatedLocNonnull != nil {
		m.RepeatedLocNonnull = make([]distributed_match_engine.Loc, len(src.RepeatedLocNonnull), len(src.RepeatedLocNonnull))
		for ii, s := range src.RepeatedLocNonnull {
			m.RepeatedLocNonnull[ii] = s
		}
	} else {
		m.RepeatedLocNonnull = nil
	}
	if src.IntMap != nil {
		m.IntMap = make(map[int32]int32)
		for k, v := range src.IntMap {
			m.IntMap[k] = v
		}
	} else {
		m.IntMap = nil
	}
	if src.MsgMap != nil {
		m.MsgMap = make(map[int32]*NestedMessage)
		for k, v := range src.MsgMap {
			var tmp_v NestedMessage
			tmp_v.DeepCopyIn(v)
			m.MsgMap[k] = &tmp_v
		}
	} else {
		m.MsgMap = nil
	}
	m.Unused = src.Unused
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *TestGen) ValidateEnums() error {
	if _, ok := OuterEnum_name[int32(m.OuterEn)]; !ok {
		return errors.New("invalid OuterEn")
	}
	if _, ok := TestGen_InnerEnum_name[int32(m.InnerEn)]; !ok {
		return errors.New("invalid InnerEn")
	}
	if m.IncludeMsg != nil {
		if err := m.IncludeMsg.ValidateEnums(); err != nil {
			return err
		}
	}
	if err := m.IncludeMsgNonnull.ValidateEnums(); err != nil {
		return err
	}
	if m.IncludeFields != nil {
		if err := m.IncludeFields.ValidateEnums(); err != nil {
			return err
		}
	}
	if err := m.IncludeFieldsNonnull.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.RepeatedMsg {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.RepeatedMsgNonnull {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.RepeatedFields {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.RepeatedFieldsNonnull {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *TestGen) ClearTagged(tags map[string]struct{}) {
	if s.InnerMsg != nil {
		s.InnerMsg.ClearTagged(tags)
	}
	s.InnerMsgNonnull.ClearTagged(tags)
	if s.IncludeMsg != nil {
		s.IncludeMsg.ClearTagged(tags)
	}
	s.IncludeMsgNonnull.ClearTagged(tags)
	if s.IncludeFields != nil {
		s.IncludeFields.ClearTagged(tags)
	}
	s.IncludeFieldsNonnull.ClearTagged(tags)
	if s.RepeatedMsg != nil {
		for ii := 0; ii < len(s.RepeatedMsg); ii++ {
			s.RepeatedMsg[ii].ClearTagged(tags)
		}
	}
	if s.RepeatedMsgNonnull != nil {
		for ii := 0; ii < len(s.RepeatedMsgNonnull); ii++ {
			s.RepeatedMsgNonnull[ii].ClearTagged(tags)
		}
	}
	if s.RepeatedFields != nil {
		for ii := 0; ii < len(s.RepeatedFields); ii++ {
			s.RepeatedFields[ii].ClearTagged(tags)
		}
	}
	if s.RepeatedFieldsNonnull != nil {
		for ii := 0; ii < len(s.RepeatedFieldsNonnull); ii++ {
			s.RepeatedFieldsNonnull[ii].ClearTagged(tags)
		}
	}
	if s.RepeatedInnerMsg != nil {
		for ii := 0; ii < len(s.RepeatedInnerMsg); ii++ {
			s.RepeatedInnerMsg[ii].ClearTagged(tags)
		}
	}
	if s.RepeatedInnerMsgNonnull != nil {
		for ii := 0; ii < len(s.RepeatedInnerMsgNonnull); ii++ {
			s.RepeatedInnerMsgNonnull[ii].ClearTagged(tags)
		}
	}
	if _, found := tags["nocmp"]; found {
		s.Unused = ""
	}
}

func IgnoreTestGenFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Unused")
	}
	return cmpopts.IgnoreFields(TestGen{}, names...)
}

func (m *TestGen_InnerMessage) Clone() *TestGen_InnerMessage {
	cp := &TestGen_InnerMessage{}
	cp.DeepCopyIn(m)
	return cp
}

func (m *TestGen_InnerMessage) CopyInFields(src *TestGen_InnerMessage) int {
	changed := 0
	if m.Url != src.Url {
		m.Url = src.Url
		changed++
	}
	if m.Id != src.Id {
		m.Id = src.Id
		changed++
	}
	return changed
}

func (m *TestGen_InnerMessage) DeepCopyIn(src *TestGen_InnerMessage) {
	m.Url = src.Url
	m.Id = src.Id
}

// Helper method to check that enums have valid values
func (m *TestGen_InnerMessage) ValidateEnums() error {
	return nil
}

func (s *TestGen_InnerMessage) ClearTagged(tags map[string]struct{}) {
}

var OuterEnumStrings = []string{
	"OUTER0",
	"OUTER1",
	"OUTER2",
	"OUTER3",
}

const (
	OuterEnumOUTER0 uint64 = 1 << 0
	OuterEnumOUTER1 uint64 = 1 << 1
	OuterEnumOUTER2 uint64 = 1 << 2
	OuterEnumOUTER3 uint64 = 1 << 3
)

var OuterEnum_CamelName = map[int32]string{
	// OUTER0 -> Outer0
	0: "Outer0",
	// OUTER1 -> Outer1
	1: "Outer1",
	// OUTER2 -> Outer2
	2: "Outer2",
	// OUTER3 -> Outer3
	3: "Outer3",
}
var OuterEnum_CamelValue = map[string]int32{
	"Outer0": 0,
	"Outer1": 1,
	"Outer2": 2,
	"Outer3": 3,
}

func ParseOuterEnum(data interface{}) (OuterEnum, error) {
	if val, ok := data.(OuterEnum); ok {
		return val, nil
	} else if str, ok := data.(string); ok {
		val, ok := OuterEnum_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = OuterEnum_CamelValue["Outer"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = OuterEnum_CamelName[val]
			}
		}
		if !ok {
			return OuterEnum(0), fmt.Errorf("Invalid OuterEnum value %q", str)
		}
		return OuterEnum(val), nil
	} else if ival, ok := data.(int32); ok {
		if _, ok := OuterEnum_CamelName[ival]; ok {
			return OuterEnum(ival), nil
		} else {
			return OuterEnum(0), fmt.Errorf("Invalid OuterEnum value %d", ival)
		}
	}
	return OuterEnum(0), fmt.Errorf("Invalid OuterEnum value %v", data)
}

func (e *OuterEnum) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, err := ParseOuterEnum(str)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

func (e OuterEnum) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(OuterEnum_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Outer")
	return str, nil
}

// custom JSON encoding/decoding
func (e *OuterEnum) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, err := ParseOuterEnum(str)
		if err != nil {
			return &json.UnmarshalTypeError{
				Value: "string " + str,
				Type:  reflect.TypeOf(OuterEnum(0)),
			}
		}
		*e = OuterEnum(val)
		return nil
	}
	var ival int32
	err = json.Unmarshal(b, &ival)
	if err == nil {
		val, err := ParseOuterEnum(ival)
		if err == nil {
			*e = val
			return nil
		}
	}
	return &json.UnmarshalTypeError{
		Value: "value " + string(b),
		Type:  reflect.TypeOf(OuterEnum(0)),
	}
}

func (e OuterEnum) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(OuterEnum_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Outer")
	return json.Marshal(str)
}

var OuterEnumCommonPrefix = "Outer"

var InnerEnumStrings = []string{
	"INNER0",
	"INNER1",
	"INNER2",
	"INNER3",
}

const (
	InnerEnumINNER0 uint64 = 1 << 0
	InnerEnumINNER1 uint64 = 1 << 1
	InnerEnumINNER2 uint64 = 1 << 2
	InnerEnumINNER3 uint64 = 1 << 3
)

var TestGen_InnerEnum_CamelName = map[int32]string{
	// INNER0 -> Inner0
	0: "Inner0",
	// INNER1 -> Inner1
	1: "Inner1",
	// INNER2 -> Inner2
	2: "Inner2",
	// INNER3 -> Inner3
	3: "Inner3",
}
var TestGen_InnerEnum_CamelValue = map[string]int32{
	"Inner0": 0,
	"Inner1": 1,
	"Inner2": 2,
	"Inner3": 3,
}

func ParseTestGen_InnerEnum(data interface{}) (TestGen_InnerEnum, error) {
	if val, ok := data.(TestGen_InnerEnum); ok {
		return val, nil
	} else if str, ok := data.(string); ok {
		val, ok := TestGen_InnerEnum_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = TestGen_InnerEnum_CamelValue["Inner"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = TestGen_InnerEnum_CamelName[val]
			}
		}
		if !ok {
			return TestGen_InnerEnum(0), fmt.Errorf("Invalid TestGen_InnerEnum value %q", str)
		}
		return TestGen_InnerEnum(val), nil
	} else if ival, ok := data.(int32); ok {
		if _, ok := TestGen_InnerEnum_CamelName[ival]; ok {
			return TestGen_InnerEnum(ival), nil
		} else {
			return TestGen_InnerEnum(0), fmt.Errorf("Invalid TestGen_InnerEnum value %d", ival)
		}
	}
	return TestGen_InnerEnum(0), fmt.Errorf("Invalid TestGen_InnerEnum value %v", data)
}

func (e *TestGen_InnerEnum) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, err := ParseTestGen_InnerEnum(str)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

func (e TestGen_InnerEnum) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(TestGen_InnerEnum_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Inner")
	return str, nil
}

// custom JSON encoding/decoding
func (e *TestGen_InnerEnum) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, err := ParseTestGen_InnerEnum(str)
		if err != nil {
			return &json.UnmarshalTypeError{
				Value: "string " + str,
				Type:  reflect.TypeOf(TestGen_InnerEnum(0)),
			}
		}
		*e = TestGen_InnerEnum(val)
		return nil
	}
	var ival int32
	err = json.Unmarshal(b, &ival)
	if err == nil {
		val, err := ParseTestGen_InnerEnum(ival)
		if err == nil {
			*e = val
			return nil
		}
	}
	return &json.UnmarshalTypeError{
		Value: "value " + string(b),
		Type:  reflect.TypeOf(TestGen_InnerEnum(0)),
	}
}

func (e TestGen_InnerEnum) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(TestGen_InnerEnum_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Inner")
	return json.Marshal(str)
}

var InnerEnumCommonPrefix = "Inner"

func (m *TestGen) IsValidArgsForRequest() error {
	return nil
}

type MatchOptions struct {
	// Filter will ignore 0 or nil fields on the passed in object
	Filter bool
	// IgnoreBackend will ignore fields that were marked backend in .proto
	IgnoreBackend bool
	// Sort repeated (arrays) of Key objects so matching does not
	// fail due to order.
	SortArrayedKeys bool
}

type MatchOpt func(*MatchOptions)

func MatchFilter() MatchOpt {
	return func(opts *MatchOptions) {
		opts.Filter = true
	}
}

func MatchIgnoreBackend() MatchOpt {
	return func(opts *MatchOptions) {
		opts.IgnoreBackend = true
	}
}

func MatchSortArrayedKeys() MatchOpt {
	return func(opts *MatchOptions) {
		opts.SortArrayedKeys = true
	}
}

func applyMatchOptions(opts *MatchOptions, args ...MatchOpt) {
	for _, f := range args {
		f(opts)
	}
}

type FieldMap struct {
	fields map[string]struct{}
}

func MakeFieldMap(fields []string) *FieldMap {
	fmap := &FieldMap{}
	fmap.fields = map[string]struct{}{}
	if fields == nil {
		return fmap
	}
	for _, set := range fields {
		fmap.fields[set] = struct{}{}
	}
	return fmap
}

func NewFieldMap(fields map[string]struct{}) *FieldMap {
	if fields == nil {
		fields = map[string]struct{}{}
	}
	return &FieldMap{
		fields: fields,
	}
}

// Has checks if the key is set. Note that setting
// a parent key implies that all child keys are also set.
func (s *FieldMap) Has(key string) bool {
	// key or parent is specified
	for {
		if _, ok := s.fields[key]; ok {
			return true
		}
		idx := strings.LastIndex(key, ".")
		if idx == -1 {
			break
		}
		key = key[:idx]
	}
	return false
}

// HasOrHasChild checks if the key, or any child
// of the key is set. Note that as with Has(), if
// a parent of the key is set, this returns true.
func (s *FieldMap) HasOrHasChild(key string) bool {
	if s.Has(key) {
		return true
	}
	prefix := key + "."
	for k := range s.fields {
		if strings.HasPrefix(k, prefix) {
			return true
		}
	}
	return false
}

func (s *FieldMap) Set(key string) {
	s.fields[key] = struct{}{}
}

func (s *FieldMap) Clear(key string) {
	delete(s.fields, key)
}

func (s *FieldMap) Fields() []string {
	fields := []string{}
	for k := range s.fields {
		fields = append(fields, k)
	}
	sort.Strings(fields)
	return fields
}

func (s *FieldMap) Count() int {
	return len(s.fields)
}

// OptionalSTM is for operations that use either the cache or the store.
type OptionalSTM struct {
	// STM may be nil to force using the cache instead of the store
	stm concurrency.STM
}

// NewOptionalSTM creates a new optional STM for operations that
// use either the cache or the store. Set the stm to force using
// the store, or leave nil to force using the cache.
func NewOptionalSTM(stm concurrency.STM) *OptionalSTM {
	return &OptionalSTM{
		stm: stm,
	}
}

// DecodeHook for use with the mapstructure package.
// Allows decoding to handle protobuf enums that are
// represented as strings.
func EnumDecodeHook(from, to reflect.Type, data interface{}) (interface{}, error) {
	switch to {
	case reflect.TypeOf(OuterEnum(0)):
		return ParseOuterEnum(data)
	}
	return data, nil
}

// GetEnumParseHelp gets end-user specific messages for
// enum parse errors.
// It returns the enum type name, a help message with
// valid values, and a bool that indicates if a type was matched.
func GetEnumParseHelp(t reflect.Type) (string, string, bool) {
	switch t {
	case reflect.TypeOf(OuterEnum(0)):
		return "OuterEnum", ", valid values are one of 0, 1, 2, 3, or 0, 1, 2, 3", true
	}
	return "", "", false
}

var ShowMethodNames = map[string]struct{}{}

func IsShow(cmd string) bool {
	_, found := ShowMethodNames[cmd]
	return found
}

func (m *NestedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncludeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSample(uint64(m.Id))
	}
	if m.NestedMsg != nil {
		l = m.NestedMsg.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncludeFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestGen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovSample(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Db != 0 {
		n += 9
	}
	if m.Fl != 0 {
		n += 5
	}
	if m.I32 != 0 {
		n += 1 + sovSample(uint64(m.I32))
	}
	if m.I64 != 0 {
		n += 1 + sovSample(uint64(m.I64))
	}
	if m.U32 != 0 {
		n += 1 + sovSample(uint64(m.U32))
	}
	if m.U64 != 0 {
		n += 1 + sovSample(uint64(m.U64))
	}
	if m.S32 != 0 {
		n += 1 + sozSample(uint64(m.S32))
	}
	if m.S64 != 0 {
		n += 1 + sozSample(uint64(m.S64))
	}
	if m.F32 != 0 {
		n += 5
	}
	if m.F64 != 0 {
		n += 9
	}
	if m.Sf32 != 0 {
		n += 5
	}
	if m.Sf64 != 0 {
		n += 9
	}
	if m.Bb {
		n += 2
	}
	if m.OuterEn != 0 {
		n += 2 + sovSample(uint64(m.OuterEn))
	}
	if m.InnerEn != 0 {
		n += 2 + sovSample(uint64(m.InnerEn))
	}
	if m.InnerMsg != nil {
		l = m.InnerMsg.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.InnerMsgNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if m.IncludeMsg != nil {
		l = m.IncludeMsg.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.IncludeMsgNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if m.IncludeFields != nil {
		l = m.IncludeFields.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.IncludeFieldsNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if m.Loc != nil {
		l = m.Loc.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.LocNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if len(m.RepeatedInt) > 0 {
		l = 0
		for _, e := range m.RepeatedInt {
			l += sovSample(uint64(e))
		}
		n += 2 + sovSample(uint64(l)) + l
	}
	l = len(m.Ip)
	if l > 0 {
		n += 2 + l + sovSample(uint64(l))
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedMsg) > 0 {
		for _, e := range m.RepeatedMsg {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedMsgNonnull) > 0 {
		for _, e := range m.RepeatedMsgNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedFields) > 0 {
		for _, e := range m.RepeatedFields {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedFieldsNonnull) > 0 {
		for _, e := range m.RepeatedFieldsNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedInnerMsg) > 0 {
		for _, e := range m.RepeatedInnerMsg {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedInnerMsgNonnull) > 0 {
		for _, e := range m.RepeatedInnerMsgNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedLoc) > 0 {
		for _, e := range m.RepeatedLoc {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedLocNonnull) > 0 {
		for _, e := range m.RepeatedLocNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.IntMap) > 0 {
		for k, v := range m.IntMap {
			_ = k
			_ = v
			mapEntrySize := 1 + sovSample(uint64(k)) + 1 + sovSample(uint64(v))
			n += mapEntrySize + 2 + sovSample(uint64(mapEntrySize))
		}
	}
	if len(m.MsgMap) > 0 {
		for k, v := range m.MsgMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSample(uint64(l))
			}
			mapEntrySize := 1 + sovSample(uint64(k)) + l
			n += mapEntrySize + 2 + sovSample(uint64(mapEntrySize))
		}
	}
	l = len(m.Unused)
	if l > 0 {
		n += 2 + l + sovSample(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestGen_InnerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSample(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSample(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSample(x uint64) (n int) {
	return sovSample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NestedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncludeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncludeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncludeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NestedMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NestedMsg == nil {
				m.NestedMsg = &NestedMessage{}
			}
			if err := m.NestedMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncludeFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncludeFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncludeFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields[:0], dAtA[iNdEx:postIndex]...)
			if m.Fields == nil {
				m.Fields = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Db = float64(math.Float64frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fl", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fl = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
			}
			m.I32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I32 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			m.I64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U32", wireType)
			}
			m.U32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U64", wireType)
			}
			m.U64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U64 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.S32 = v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.S64 = int64(v)
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field F32", wireType)
			}
			m.F32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.F32 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field F64", wireType)
			}
			m.F64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.F64 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sf32", wireType)
			}
			m.Sf32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sf32 = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sf64", wireType)
			}
			m.Sf64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sf64 = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bb = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterEn", wireType)
			}
			m.OuterEn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OuterEn |= OuterEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerEn", wireType)
			}
			m.InnerEn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InnerEn |= TestGen_InnerEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InnerMsg == nil {
				m.InnerMsg = &TestGen_InnerMessage{}
			}
			if err := m.InnerMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InnerMsgNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncludeMsg == nil {
				m.IncludeMsg = &IncludeMessage{}
			}
			if err := m.IncludeMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncludeMsgNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncludeFields == nil {
				m.IncludeFields = &IncludeFields{}
			}
			if err := m.IncludeFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeFieldsNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncludeFieldsNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loc == nil {
				m.Loc = &distributed_match_engine.Loc{}
			}
			if err := m.Loc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RepeatedInt = append(m.RepeatedInt, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSample
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSample
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RepeatedInt) == 0 {
					m.RepeatedInt = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RepeatedInt = append(m.RepeatedInt, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedInt", wireType)
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip[:0], dAtA[iNdEx:postIndex]...)
			if m.Ip == nil {
				m.Ip = []byte{}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedMsg = append(m.RepeatedMsg, &IncludeMessage{})
			if err := m.RepeatedMsg[len(m.RepeatedMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedMsgNonnull = append(m.RepeatedMsgNonnull, IncludeMessage{})
			if err := m.RepeatedMsgNonnull[len(m.RepeatedMsgNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedFields = append(m.RepeatedFields, &IncludeFields{})
			if err := m.RepeatedFields[len(m.RepeatedFields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedFieldsNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedFieldsNonnull = append(m.RepeatedFieldsNonnull, IncludeFields{})
			if err := m.RepeatedFieldsNonnull[len(m.RepeatedFieldsNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedInnerMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedInnerMsg = append(m.RepeatedInnerMsg, &TestGen_InnerMessage{})
			if err := m.RepeatedInnerMsg[len(m.RepeatedInnerMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedInnerMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedInnerMsgNonnull = append(m.RepeatedInnerMsgNonnull, TestGen_InnerMessage{})
			if err := m.RepeatedInnerMsgNonnull[len(m.RepeatedInnerMsgNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedLoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedLoc = append(m.RepeatedLoc, &distributed_match_engine.Loc{})
			if err := m.RepeatedLoc[len(m.RepeatedLoc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedLocNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedLocNonnull = append(m.RepeatedLocNonnull, distributed_match_engine.Loc{})
			if err := m.RepeatedLocNonnull[len(m.RepeatedLocNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IntMap == nil {
				m.IntMap = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSample(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSample
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IntMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgMap == nil {
				m.MsgMap = make(map[int32]*NestedMessage)
			}
			var mapkey int32
			var mapvalue *NestedMessage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSample
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSample
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NestedMessage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSample(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSample
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MsgMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unused", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unused = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGen_InnerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSample
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSample
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSample
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSample        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSample          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSample = fmt.Errorf("proto: unexpected end of group")
)
