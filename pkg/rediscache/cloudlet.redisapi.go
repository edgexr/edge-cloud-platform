// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudlet.proto

package rediscache

import (
	"context"
	fmt "fmt"
	_ "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	"github.com/go-redis/redis/v8"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CCRMAPIServer interface {
	GetCloudletManifest(ctx context.Context, in *edgeproto.CloudletKey) (*edgeproto.CloudletManifest, error)
	GetRestrictedCloudletStatus(ctx context.Context, in *edgeproto.CloudletKey, send func(*edgeproto.StreamStatus) error) error
}

type CCRMAPIClient interface {
	GetCloudletManifest(ctx context.Context, in *edgeproto.CloudletKey) (*edgeproto.CloudletManifest, error)
	GetRestrictedCloudletStatus(ctx context.Context, in *edgeproto.CloudletKey, recv func(*edgeproto.StreamStatus) error) error
}

type CCRMAPIClientHandler struct {
	api         *UnaryAPI
	serviceType string
}

func GetCCRMAPIClient(client *redis.Client, serviceType string) CCRMAPIClient {
	handler := &CCRMAPIClientHandler{
		api:         NewUnaryAPI(client),
		serviceType: serviceType,
	}
	return handler
}

func (s *CCRMAPIClientHandler) GetCloudletManifest(ctx context.Context, in *edgeproto.CloudletKey) (*edgeproto.CloudletManifest, error) {
	methodName := s.serviceType + "/CCRMAPI/GetCloudletManifest"
	replyBuf := &edgeproto.CloudletManifest{}
	err := s.api.DoRequest(ctx, methodName, in, replyBuf)
	return replyBuf, err
}

func (s *CCRMAPIClientHandler) GetRestrictedCloudletStatus(ctx context.Context, in *edgeproto.CloudletKey, recv func(*edgeproto.StreamStatus) error) error {
	methodName := s.serviceType + "/CCRMAPI/GetRestrictedCloudletStatus"
	replyBuf := &edgeproto.StreamStatus{}
	cb := func() error {
		return recv(replyBuf)
	}
	return s.api.DoStreamRequest(ctx, methodName, in, replyBuf, cb)
}

type CCRMAPIServerHandler struct {
	api         *UnaryAPI
	serviceType string
	server      CCRMAPIServer
}

func GetCCRMAPIServer(client *redis.Client, serviceType string, server CCRMAPIServer) *CCRMAPIServerHandler {
	handler := &CCRMAPIServerHandler{
		api:         NewUnaryAPI(client),
		serviceType: serviceType,
		server:      server,
	}
	return handler
}

// Start the server, use context cancel to stop.
func (s *CCRMAPIServerHandler) Start(ctx context.Context) {
	// CCRMAPI GetCloudletManifest
	GetCloudletManifest := s.serviceType + "/CCRMAPI/GetCloudletManifest"
	getGetCloudletManifestReqBuf := func() interface{} {
		return &edgeproto.CloudletKey{}
	}
	GetCloudletManifestHandler := func(ctx context.Context, req interface{}) (interface{}, error) {
		in, _ := req.(*edgeproto.CloudletKey)
		return s.server.GetCloudletManifest(ctx, in)
	}
	go s.api.HandleRequests(ctx, GetCloudletManifest, getGetCloudletManifestReqBuf, GetCloudletManifestHandler)

	// CCRMAPI GetRestrictedCloudletStatus
	GetRestrictedCloudletStatus := s.serviceType + "/CCRMAPI/GetRestrictedCloudletStatus"
	getGetRestrictedCloudletStatusReqBuf := func() interface{} {
		return &edgeproto.CloudletKey{}
	}
	GetRestrictedCloudletStatusHandler := func(ctx context.Context, req interface{}, sendReply StreamReplyCb) error {
		in, _ := req.(*edgeproto.CloudletKey)
		cb := func(reply *edgeproto.StreamStatus) error {
			return sendReply(reply)
		}
		return s.server.GetRestrictedCloudletStatus(ctx, in, cb)
	}
	go s.api.HandleStreamRequests(ctx, GetRestrictedCloudletStatus, getGetRestrictedCloudletStatusReqBuf, GetRestrictedCloudletStatusHandler)
}

// Auto-generated code: DO NOT EDIT
