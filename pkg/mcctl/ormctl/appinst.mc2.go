// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: appinst.proto

package ormctl

import (
	fmt "fmt"
	_ "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/api/ormapi"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateAppInstCmd = &ApiCommand{
	Name:                 "CreateAppInst",
	Use:                  "create",
	Short:                "Create Application Instance. Creates an instance of an App on a Cloudlet where it is defined by an App plus a ClusterInst key. Many of the fields here are inherited from the App definition.",
	RequiredArgs:         "region " + strings.Join(CreateAppInstRequiredArgs, " "),
	OptionalArgs:         strings.Join(CreateAppInstOptionalArgs, " "),
	AliasArgs:            strings.Join(AppInstAliasArgs, " "),
	SpecialArgs:          &AppInstSpecialArgs,
	Comments:             addRegionComment(AppInstComments),
	NoConfig:             "CloudletLoc,Uri,MappedPorts,Liveness,CreatedAt,Revision,Errors,RuntimeInfo,VmFlavor,ExternalVolumeSize,AvailabilityZone,State,UpdatedAt,OptRes,SharedVolumeSize,AutoClusterIpAccess,InternalPortToLbIp,UniqueId,DnsLabel,FedKey,AppKey.Organization,CompatibilityVersion,VirtualClusterKey,UpdateMultiple,ForceUpdate,PowerState",
	ReqData:              &ormapi.RegionAppInst{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/CreateAppInst",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var DeleteAppInstCmd = &ApiCommand{
	Name:                 "DeleteAppInst",
	Use:                  "delete",
	Short:                "Delete Application Instance. Deletes an instance of the App from the Cloudlet.",
	RequiredArgs:         "region " + strings.Join(DeleteAppInstRequiredArgs, " "),
	OptionalArgs:         strings.Join(DeleteAppInstOptionalArgs, " "),
	AliasArgs:            strings.Join(AppInstAliasArgs, " "),
	SpecialArgs:          &AppInstSpecialArgs,
	Comments:             addRegionComment(AppInstComments),
	NoConfig:             "CloudletLoc,Uri,MappedPorts,Liveness,CreatedAt,Revision,Errors,RuntimeInfo,VmFlavor,ExternalVolumeSize,AvailabilityZone,State,UpdatedAt,OptRes,SharedVolumeSize,AutoClusterIpAccess,InternalPortToLbIp,UniqueId,DnsLabel,FedKey,AppKey.Organization,CompatibilityVersion,VirtualClusterKey,PowerState",
	ReqData:              &ormapi.RegionAppInst{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/DeleteAppInst",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var RefreshAppInstCmd = &ApiCommand{
	Name:                 "RefreshAppInst",
	Use:                  "refresh",
	Short:                "Refresh Application Instance. Restarts an App instance with new App settings or image.",
	RequiredArgs:         "region " + strings.Join(RefreshAppInstRequiredArgs, " "),
	OptionalArgs:         strings.Join(RefreshAppInstOptionalArgs, " "),
	AliasArgs:            strings.Join(AppInstAliasArgs, " "),
	SpecialArgs:          &AppInstSpecialArgs,
	Comments:             addRegionComment(AppInstComments),
	NoConfig:             "CloudletLoc,Uri,MappedPorts,Liveness,CreatedAt,Revision,Errors,RuntimeInfo,VmFlavor,ExternalVolumeSize,AvailabilityZone,State,UpdatedAt,OptRes,SharedVolumeSize,AutoClusterIpAccess,InternalPortToLbIp,UniqueId,DnsLabel,FedKey,AppKey.Organization,CompatibilityVersion,VirtualClusterKey,Flavor,AutoClusterIpAccess,Configs,PowerState,HealthCheck,SharedVolumeSize,VmFlavor",
	ReqData:              &ormapi.RegionAppInst{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/RefreshAppInst",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var UpdateAppInstCmd = &ApiCommand{
	Name:                 "UpdateAppInst",
	Use:                  "update",
	Short:                "Update Application Instance. Updates an Application instance and then refreshes it.",
	RequiredArgs:         "region " + strings.Join(UpdateAppInstRequiredArgs, " "),
	OptionalArgs:         strings.Join(UpdateAppInstOptionalArgs, " "),
	AliasArgs:            strings.Join(AppInstAliasArgs, " "),
	SpecialArgs:          &AppInstSpecialArgs,
	Comments:             addRegionComment(AppInstComments),
	NoConfig:             "CloudletLoc,Uri,MappedPorts,Liveness,CreatedAt,Revision,Errors,RuntimeInfo,VmFlavor,ExternalVolumeSize,AvailabilityZone,State,UpdatedAt,OptRes,SharedVolumeSize,AutoClusterIpAccess,InternalPortToLbIp,UniqueId,DnsLabel,FedKey,AppKey.Organization,CompatibilityVersion,VirtualClusterKey,Flavor,AutoClusterIpAccess,UpdateMultiple,ForceUpdate,HealthCheck,SharedVolumeSize,VmFlavor,AppKey,ClusterKey",
	ReqData:              &ormapi.RegionAppInst{},
	ReplyData:            &edgeproto.Result{},
	Path:                 "/auth/ctrl/UpdateAppInst",
	StreamOut:            true,
	StreamOutIncremental: true,
	ProtobufApi:          true,
}

var ShowAppInstCmd = &ApiCommand{
	Name:         "ShowAppInst",
	Use:          "show",
	Short:        "Show Application Instances. Lists all the Application instances managed by the Edge Controller. Any fields specified will be used to filter results.",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(AppInstRequiredArgs, AppInstOptionalArgs...), " "),
	AliasArgs:    strings.Join(AppInstAliasArgs, " "),
	SpecialArgs:  &AppInstSpecialArgs,
	Comments:     addRegionComment(AppInstComments),
	NoConfig:     "CloudletLoc,Uri,MappedPorts,Liveness,CreatedAt,Revision,Errors,RuntimeInfo,VmFlavor,ExternalVolumeSize,AvailabilityZone,State,UpdatedAt,OptRes,SharedVolumeSize,AutoClusterIpAccess,InternalPortToLbIp,UniqueId,DnsLabel,FedKey,AppKey.Organization,CompatibilityVersion,VirtualClusterKey",
	ReqData:      &ormapi.RegionAppInst{},
	ReplyData:    &edgeproto.AppInst{},
	Path:         "/auth/ctrl/ShowAppInst",
	StreamOut:    true,
	ProtobufApi:  true,
}
var AppInstApiCmds = []*ApiCommand{
	CreateAppInstCmd,
	DeleteAppInstCmd,
	RefreshAppInstCmd,
	UpdateAppInstCmd,
	ShowAppInstCmd,
}

const AppInstGroup = "AppInst"

func init() {
	AllApis.AddGroup(AppInstGroup, "Manage AppInsts", AppInstApiCmds)
}

var CreateAppInstRequiredArgs = []string{
	"appinstname",
	"appinstorg",
	"cloudletorg",
	"cloudlet",
	"federatedorg",
}
var CreateAppInstOptionalArgs = []string{
	"appname",
	"appvers",
	"cluster",
	"clusterorg",
	"flavor",
	"cloudletflavor",
	"crmoverride",
	"configs:#.kind",
	"configs:#.config",
	"healthcheck",
	"realclustername",
	"dedicatedip",
	"enableipv6",
}
var DeleteAppInstRequiredArgs = []string{
	"appinstname",
	"appinstorg",
	"cloudletorg",
	"cloudlet",
	"federatedorg",
}
var DeleteAppInstOptionalArgs = []string{
	"appname",
	"appvers",
	"cluster",
	"clusterorg",
	"flavor",
	"cloudletflavor",
	"crmoverride",
	"forceupdate",
	"updatemultiple",
	"configs:#.kind",
	"configs:#.config",
	"healthcheck",
	"realclustername",
	"dedicatedip",
	"enableipv6",
}
var RefreshAppInstRequiredArgs = []string{
	"appinstname",
	"appinstorg",
	"cloudletorg",
	"cloudlet",
	"federatedorg",
}
var RefreshAppInstOptionalArgs = []string{
	"appname",
	"appvers",
	"cluster",
	"clusterorg",
	"cloudletflavor",
	"crmoverride",
	"forceupdate",
	"updatemultiple",
	"realclustername",
	"dedicatedip",
	"enableipv6",
}
var UpdateAppInstRequiredArgs = []string{
	"appinstname",
	"appinstorg",
	"cloudletorg",
	"cloudlet",
	"federatedorg",
}
var UpdateAppInstOptionalArgs = []string{
	"cloudletflavor",
	"crmoverride",
	"configs:empty",
	"configs:#.kind",
	"configs:#.config",
	"powerstate",
	"realclustername",
	"dedicatedip",
	"enableipv6",
}

var RequestAppInstLatencyCmd = &ApiCommand{
	Name:         "RequestAppInstLatency",
	Use:          "request",
	Short:        "Request Latency measurements for clients connected to AppInst",
	RequiredArgs: "region " + strings.Join(AppInstLatencyRequiredArgs, " "),
	OptionalArgs: strings.Join(AppInstLatencyOptionalArgs, " "),
	AliasArgs:    strings.Join(AppInstLatencyAliasArgs, " "),
	SpecialArgs:  &AppInstLatencySpecialArgs,
	Comments:     addRegionComment(AppInstLatencyComments),
	ReqData:      &ormapi.RegionAppInstLatency{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/RequestAppInstLatency",
	ProtobufApi:  true,
}
var AppInstLatencyApiCmds = []*ApiCommand{
	RequestAppInstLatencyCmd,
}

const AppInstLatencyGroup = "AppInstLatency"

func init() {
	AllApis.AddGroup(AppInstLatencyGroup, "Manage AppInstLatencys", AppInstLatencyApiCmds)
}

var AppInstKeyRequiredArgs = []string{}
var AppInstKeyOptionalArgs = []string{
	"name",
	"organization",
	"cloudletkey.organization",
	"cloudletkey.name",
	"cloudletkey.federatedorganization",
}
var AppInstKeyAliasArgs = []string{
	"name=appinstkey.name",
	"organization=appinstkey.organization",
	"cloudletkey.organization=appinstkey.cloudletkey.organization",
	"cloudletkey.name=appinstkey.cloudletkey.name",
	"cloudletkey.federatedorganization=appinstkey.cloudletkey.federatedorganization",
}
var AppInstKeyComments = map[string]string{
	"name":                              "App Instance name",
	"organization":                      "App Instance organization",
	"cloudletkey.organization":          "Organization of the cloudlet site",
	"cloudletkey.name":                  "Name of the cloudlet",
	"cloudletkey.federatedorganization": "Federated operator organization who shared this cloudlet",
}
var AppInstKeySpecialArgs = map[string]string{}
var AppInstRequiredArgs = []string{
	"appinstname",
	"appinstorg",
	"cloudletorg",
	"cloudlet",
	"federatedorg",
}
var AppInstOptionalArgs = []string{
	"appname",
	"appvers",
	"cluster",
	"clusterorg",
	"flavor",
	"cloudletflavor",
	"crmoverride",
	"forceupdate",
	"updatemultiple",
	"configs:empty",
	"configs:#.kind",
	"configs:#.config",
	"healthcheck",
	"powerstate",
	"realclustername",
	"dedicatedip",
	"enableipv6",
}
var AppInstAliasArgs = []string{
	"fields=appinst.fields",
	"appinstname=appinst.key.name",
	"appinstorg=appinst.key.organization",
	"cloudletorg=appinst.key.cloudletkey.organization",
	"cloudlet=appinst.key.cloudletkey.name",
	"federatedorg=appinst.key.cloudletkey.federatedorganization",
	"appkey.organization=appinst.appkey.organization",
	"appname=appinst.appkey.name",
	"appvers=appinst.appkey.version",
	"cluster=appinst.clusterkey.name",
	"clusterorg=appinst.clusterkey.organization",
	"cloudletloc.latitude=appinst.cloudletloc.latitude",
	"cloudletloc.longitude=appinst.cloudletloc.longitude",
	"cloudletloc.horizontalaccuracy=appinst.cloudletloc.horizontalaccuracy",
	"cloudletloc.verticalaccuracy=appinst.cloudletloc.verticalaccuracy",
	"cloudletloc.altitude=appinst.cloudletloc.altitude",
	"cloudletloc.course=appinst.cloudletloc.course",
	"cloudletloc.speed=appinst.cloudletloc.speed",
	"cloudletloc.timestamp=appinst.cloudletloc.timestamp",
	"uri=appinst.uri",
	"liveness=appinst.liveness",
	"mappedports:empty=appinst.mappedports:empty",
	"mappedports:#.proto=appinst.mappedports:#.proto",
	"mappedports:#.internalport=appinst.mappedports:#.internalport",
	"mappedports:#.publicport=appinst.mappedports:#.publicport",
	"mappedports:#.fqdnprefix=appinst.mappedports:#.fqdnprefix",
	"mappedports:#.endport=appinst.mappedports:#.endport",
	"mappedports:#.tls=appinst.mappedports:#.tls",
	"mappedports:#.nginx=appinst.mappedports:#.nginx",
	"mappedports:#.maxpktsize=appinst.mappedports:#.maxpktsize",
	"flavor=appinst.flavor.name",
	"cloudletflavor=appinst.cloudletflavor",
	"state=appinst.state",
	"errors=appinst.errors",
	"crmoverride=appinst.crmoverride",
	"runtimeinfo.containerids=appinst.runtimeinfo.containerids",
	"createdat=appinst.createdat",
	"autoclusteripaccess=appinst.autoclusteripaccess",
	"revision=appinst.revision",
	"forceupdate=appinst.forceupdate",
	"updatemultiple=appinst.updatemultiple",
	"configs:empty=appinst.configs:empty",
	"configs:#.kind=appinst.configs:#.kind",
	"configs:#.config=appinst.configs:#.config",
	"healthcheck=appinst.healthcheck",
	"powerstate=appinst.powerstate",
	"externalvolumesize=appinst.externalvolumesize",
	"availabilityzone=appinst.availabilityzone",
	"vmflavor=appinst.vmflavor",
	"optres=appinst.optres",
	"updatedat=appinst.updatedat",
	"realclustername=appinst.realclustername",
	"internalporttolbip=appinst.internalporttolbip",
	"dedicatedip=appinst.dedicatedip",
	"uniqueid=appinst.uniqueid",
	"dnslabel=appinst.dnslabel",
	"fedkey.federationname=appinst.fedkey.federationname",
	"fedkey.appinstid=appinst.fedkey.appinstid",
	"compatibilityversion=appinst.compatibilityversion",
	"virtualclusterkey.name=appinst.virtualclusterkey.name",
	"virtualclusterkey.organization=appinst.virtualclusterkey.organization",
	"enableipv6=appinst.enableipv6",
}
var AppInstComments = map[string]string{
	"fields":                         "Fields are used for the Update API to specify which fields to apply",
	"appinstname":                    "App Instance name",
	"appinstorg":                     "App Instance organization",
	"cloudletorg":                    "Organization of the cloudlet site",
	"cloudlet":                       "Name of the cloudlet",
	"federatedorg":                   "Federated operator organization who shared this cloudlet",
	"appkey.organization":            "App developer organization",
	"appname":                        "App name",
	"appvers":                        "App version",
	"cluster":                        "Cluster name",
	"clusterorg":                     "Name of the organization that this cluster belongs to",
	"cloudletloc.latitude":           "Latitude in WGS 84 coordinates",
	"cloudletloc.longitude":          "Longitude in WGS 84 coordinates",
	"cloudletloc.horizontalaccuracy": "Horizontal accuracy (radius in meters)",
	"cloudletloc.verticalaccuracy":   "Vertical accuracy (meters)",
	"cloudletloc.altitude":           "On android only lat and long are guaranteed to be supplied Altitude in meters",
	"cloudletloc.course":             "Course (IOS) / bearing (Android) (degrees east relative to true north)",
	"cloudletloc.speed":              "Speed (IOS) / velocity (Android) (meters/sec)",
	"cloudletloc.timestamp":          "Timestamp",
	"uri":                            "Base FQDN (not really URI) for the App. See Service FQDN for endpoint access.",
	"liveness":                       "Liveness of instance (see Liveness), one of Unknown, Static, Dynamic, Autoprov",
	"mappedports:empty":              "For instances accessible via a shared load balancer, defines the external ports on the shared load balancer that map to the internal ports External ports should be appended to the Uri for L4 access., specify mappedports:empty=true to clear",
	"mappedports:#.proto":            "TCP (L4) or UDP (L4) protocol, one of Unknown, Tcp, Udp",
	"mappedports:#.internalport":     "Container port",
	"mappedports:#.publicport":       "Public facing port for TCP/UDP (may be mapped on shared LB reverse proxy)",
	"mappedports:#.fqdnprefix":       "FQDN prefix to append to base FQDN in FindCloudlet response. May be empty.",
	"mappedports:#.endport":          "A non-zero end port indicates a port range from internal port to end port, inclusive.",
	"mappedports:#.tls":              "TLS termination for this port",
	"mappedports:#.nginx":            "Use nginx proxy for this port if you really need a transparent proxy (udp only)",
	"mappedports:#.maxpktsize":       "Maximum datagram size (udp only)",
	"flavor":                         "Flavor name",
	"cloudletflavor":                 "Cloudlet-specific flavor instead of regional flavor",
	"state":                          "Current state of the AppInst on the Cloudlet, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"errors":                         "Any errors trying to create, update, or delete the AppInst on the Cloudlet, specify errors:empty=true to clear",
	"crmoverride":                    "Override actions to CRM, one of NoOverride, IgnoreCrmErrors, IgnoreCrm, IgnoreTransientState, IgnoreCrmAndTransientState",
	"runtimeinfo.containerids":       "List of container names, specify runtimeinfo.containerids:empty=true to clear",
	"createdat":                      "Created at time",
	"autoclusteripaccess":            "(Deprecated) IpAccess for auto-clusters. Ignored otherwise., one of Unknown, Dedicated, Shared",
	"revision":                       "Revision changes each time the App is updated.  Refreshing the App Instance will sync the revision with that of the App",
	"forceupdate":                    "Force Appinst refresh even if revision number matches App revision number.",
	"updatemultiple":                 "Allow multiple instances to be updated at once",
	"configs:empty":                  "Customization files passed through to implementing services, specify configs:empty=true to clear",
	"configs:#.kind":                 "Kind (type) of config, i.e. envVarsYaml, helmCustomizationYaml",
	"configs:#.config":               "Config file contents or URI reference",
	"healthcheck":                    "Health Check status, one of Unknown, RootlbOffline, ServerFail, Ok, CloudletOffline",
	"powerstate":                     "Power State of the AppInst, one of PowerOn, PowerOff, Reboot",
	"externalvolumesize":             "Size of external volume to be attached to nodes.  This is for the root partition",
	"availabilityzone":               "Optional Availability Zone if any",
	"vmflavor":                       "OS node flavor to use",
	"optres":                         "Optional Resources required by OS flavor if any",
	"updatedat":                      "Updated at time",
	"realclustername":                "(_deprecated_) Real ClusterInst name",
	"internalporttolbip":             "mapping of ports to load balancer IPs, specify internalporttolbip:empty=true to clear",
	"dedicatedip":                    "Dedicated IP assigns an IP for this AppInst but requires platform support",
	"uniqueid":                       "A unique id for the AppInst within the region to be used by platforms",
	"dnslabel":                       "DNS label that is unique within the cloudlet and among other AppInsts/ClusterInsts",
	"fedkey.federationname":          "Federation name",
	"fedkey.appinstid":               "Federated AppInst ID",
	"compatibilityversion":           "Internal compatibility version",
	"virtualclusterkey.name":         "Cluster name",
	"virtualclusterkey.organization": "Name of the organization that this cluster belongs to",
	"enableipv6":                     "Enable IPv6 addressing, requires platform and cloudlet support, defaults to platform setting for VM Apps and auto-clusters, otherwise defaults to target cluster instance setting.",
}
var AppInstSpecialArgs = map[string]string{
	"appinst.errors":                   "StringArray",
	"appinst.fields":                   "StringArray",
	"appinst.internalporttolbip":       "StringToString",
	"appinst.runtimeinfo.containerids": "StringArray",
}
var AppInstLatencyRequiredArgs = []string{
	"appinstname",
	"appinstorg",
	"cloudletorg",
	"cloudlet",
	"cloudletfedorg",
}
var AppInstLatencyOptionalArgs = []string{}
var AppInstLatencyAliasArgs = []string{
	"appinstname=appinstlatency.key.name",
	"appinstorg=appinstlatency.key.organization",
	"cloudletorg=appinstlatency.key.cloudletkey.organization",
	"cloudlet=appinstlatency.key.cloudletkey.name",
	"cloudletfedorg=appinstlatency.key.cloudletkey.federatedorganization",
}
var AppInstLatencyComments = map[string]string{
	"appinstname":    "App Instance name",
	"appinstorg":     "App Instance organization",
	"cloudletorg":    "Organization of the cloudlet site",
	"cloudlet":       "Name of the cloudlet",
	"cloudletfedorg": "Federated operator organization who shared this cloudlet",
}
var AppInstLatencySpecialArgs = map[string]string{}
