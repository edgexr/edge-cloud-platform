// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletnode.proto

package ormctl

import (
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/api/ormapi"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var CreateCloudletNodeCmd = &ApiCommand{
	Name:         "CreateCloudletNode",
	Use:          "create",
	Short:        "Create cloudlet node, should only be used for testing/debug",
	RequiredArgs: "region " + strings.Join(CloudletNodeRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletNodeOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletNodeAliasArgs, " "),
	SpecialArgs:  &CloudletNodeSpecialArgs,
	Comments:     addRegionComment(CloudletNodeComments),
	NoConfig:     "PasswordHash,Salt,Iter",
	ReqData:      &ormapi.RegionCloudletNode{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/CreateCloudletNode",
	ProtobufApi:  true,
}

var UpdateCloudletNodeCmd = &ApiCommand{
	Name:         "UpdateCloudletNode",
	Use:          "update",
	Short:        "Update cloudlet node, should only be used for testing/debug",
	RequiredArgs: "region " + strings.Join(CloudletNodeRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletNodeOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletNodeAliasArgs, " "),
	SpecialArgs:  &CloudletNodeSpecialArgs,
	Comments:     addRegionComment(CloudletNodeComments),
	NoConfig:     "PasswordHash,Salt,Iter",
	ReqData:      &ormapi.RegionCloudletNode{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/UpdateCloudletNode",
	ProtobufApi:  true,
}

var ShowCloudletNodeCmd = &ApiCommand{
	Name:         "ShowCloudletNode",
	Use:          "show",
	Short:        "Show cloudlet nodes",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(CloudletNodeRequiredArgs, CloudletNodeOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletNodeAliasArgs, " "),
	SpecialArgs:  &CloudletNodeSpecialArgs,
	Comments:     addRegionComment(CloudletNodeComments),
	NoConfig:     "PasswordHash,Salt,Iter",
	ReqData:      &ormapi.RegionCloudletNode{},
	ReplyData:    &edgeproto.CloudletNode{},
	Path:         "/auth/ctrl/ShowCloudletNode",
	StreamOut:    true,
	ProtobufApi:  true,
}

var DeleteCloudletNodeCmd = &ApiCommand{
	Name:         "DeleteCloudletNode",
	Use:          "delete",
	Short:        "Delete cloudlet node, in case it was not cleaned up properly",
	RequiredArgs: "region " + strings.Join(CloudletNodeRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletNodeOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletNodeAliasArgs, " "),
	SpecialArgs:  &CloudletNodeSpecialArgs,
	Comments:     addRegionComment(CloudletNodeComments),
	NoConfig:     "PasswordHash,Salt,Iter",
	ReqData:      &ormapi.RegionCloudletNode{},
	ReplyData:    &edgeproto.Result{},
	Path:         "/auth/ctrl/DeleteCloudletNode",
	ProtobufApi:  true,
}
var CloudletNodeApiCmds = []*ApiCommand{
	CreateCloudletNodeCmd,
	UpdateCloudletNodeCmd,
	ShowCloudletNodeCmd,
	DeleteCloudletNodeCmd,
}

const CloudletNodeGroup = "CloudletNode"

func init() {
	AllApis.AddGroup(CloudletNodeGroup, "Manage CloudletNodes", CloudletNodeApiCmds)
}

var CloudletNodeRequiredArgs = []string{
	"cloudletnode",
	"cloudletorg",
	"cloudlet",
}
var CloudletNodeOptionalArgs = []string{
	"federatedorg",
	"nodetype",
	"noderole",
	"ownertags",
	"attributes",
}
var CloudletNodeAliasArgs = []string{
	"fields=cloudletnode.fields",
	"cloudletnode=cloudletnode.key.name",
	"cloudletorg=cloudletnode.key.cloudletkey.organization",
	"cloudlet=cloudletnode.key.cloudletkey.name",
	"federatedorg=cloudletnode.key.cloudletkey.federatedorganization",
	"nodetype=cloudletnode.nodetype",
	"noderole=cloudletnode.noderole",
	"passwordhash=cloudletnode.passwordhash",
	"salt=cloudletnode.salt",
	"iter=cloudletnode.iter",
	"ownertags=cloudletnode.ownertags",
	"attributes=cloudletnode.attributes",
}
var CloudletNodeComments = map[string]string{
	"fields":       "Fields are used for the Update API to specify which fields to apply",
	"cloudletnode": "Node name",
	"cloudletorg":  "Organization of the cloudlet site",
	"cloudlet":     "Name of the cloudlet",
	"federatedorg": "Federated operator organization who shared this cloudlet",
	"nodetype":     "Type of node",
	"noderole":     "Node role for provisioning",
	"passwordhash": "Password hash",
	"salt":         "Salt of password",
	"iter":         "Iterations of password",
	"ownertags":    "Owner (ClusterInst, etc) tags, specify ownertags:empty=true to clear",
	"attributes":   "Attributes of node set by platform, specify attributes:empty=true to clear",
}
var CloudletNodeSpecialArgs = map[string]string{
	"cloudletnode.attributes": "StringToString",
	"cloudletnode.fields":     "StringArray",
	"cloudletnode.ownertags":  "StringToString",
}
