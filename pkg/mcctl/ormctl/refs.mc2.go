// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: refs.proto

package ormctl

import (
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/api/ormapi"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

var ShowCloudletRefsCmd = &ApiCommand{
	Name:         "ShowCloudletRefs",
	Use:          "show",
	Short:        "Show CloudletRefs (debug only)",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(CloudletRefsRequiredArgs, CloudletRefsOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletRefsAliasArgs, " "),
	SpecialArgs:  &CloudletRefsSpecialArgs,
	Comments:     addRegionComment(CloudletRefsComments),
	ReqData:      &ormapi.RegionCloudletRefs{},
	ReplyData:    &edgeproto.CloudletRefs{},
	Path:         "/auth/ctrl/ShowCloudletRefs",
	StreamOut:    true,
	ProtobufApi:  true,
}
var CloudletRefsApiCmds = []*ApiCommand{
	ShowCloudletRefsCmd,
}

const CloudletRefsGroup = "CloudletRefs"

func init() {
	AllApis.AddGroup(CloudletRefsGroup, "Manage CloudletRefs", CloudletRefsApiCmds)
}

var ShowClusterRefsCmd = &ApiCommand{
	Name:         "ShowClusterRefs",
	Use:          "show",
	Short:        "Show ClusterRefs (debug only)",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(ClusterRefsRequiredArgs, ClusterRefsOptionalArgs...), " "),
	AliasArgs:    strings.Join(ClusterRefsAliasArgs, " "),
	SpecialArgs:  &ClusterRefsSpecialArgs,
	Comments:     addRegionComment(ClusterRefsComments),
	ReqData:      &ormapi.RegionClusterRefs{},
	ReplyData:    &edgeproto.ClusterRefs{},
	Path:         "/auth/ctrl/ShowClusterRefs",
	StreamOut:    true,
	ProtobufApi:  true,
}
var ClusterRefsApiCmds = []*ApiCommand{
	ShowClusterRefsCmd,
}

const ClusterRefsGroup = "ClusterRefs"

func init() {
	AllApis.AddGroup(ClusterRefsGroup, "Manage ClusterRefs", ClusterRefsApiCmds)
}

var ShowAppInstRefsCmd = &ApiCommand{
	Name:         "ShowAppInstRefs",
	Use:          "show",
	Short:        "Show AppInstRefs (debug only)",
	RequiredArgs: "region",
	OptionalArgs: strings.Join(append(AppInstRefsRequiredArgs, AppInstRefsOptionalArgs...), " "),
	AliasArgs:    strings.Join(AppInstRefsAliasArgs, " "),
	SpecialArgs:  &AppInstRefsSpecialArgs,
	Comments:     addRegionComment(AppInstRefsComments),
	ReqData:      &ormapi.RegionAppInstRefs{},
	ReplyData:    &edgeproto.AppInstRefs{},
	Path:         "/auth/ctrl/ShowAppInstRefs",
	StreamOut:    true,
	ProtobufApi:  true,
}
var AppInstRefsApiCmds = []*ApiCommand{
	ShowAppInstRefsCmd,
}

const AppInstRefsGroup = "AppInstRefs"

func init() {
	AllApis.AddGroup(AppInstRefsGroup, "Manage AppInstRefs", AppInstRefsApiCmds)
}

var CloudletRefsRequiredArgs = []string{
	"key.organization",
	"key.name",
	"key.federatedorganization",
}
var CloudletRefsOptionalArgs = []string{
	"useddynamicips",
	"usedstaticips",
	"reservedautoclusterids",
	"clusterinsts:#.name",
	"clusterinsts:#.organization",
	"vmappinsts:#.name",
	"vmappinsts:#.organization",
	"k8sappinsts:#.name",
	"k8sappinsts:#.organization",
}
var CloudletRefsAliasArgs = []string{
	"key.organization=cloudletrefs.key.organization",
	"key.name=cloudletrefs.key.name",
	"key.federatedorganization=cloudletrefs.key.federatedorganization",
	"useddynamicips=cloudletrefs.useddynamicips",
	"usedstaticips=cloudletrefs.usedstaticips",
	"reservedautoclusterids=cloudletrefs.reservedautoclusterids",
	"clusterinsts:#.name=cloudletrefs.clusterinsts:#.name",
	"clusterinsts:#.organization=cloudletrefs.clusterinsts:#.organization",
	"vmappinsts:#.name=cloudletrefs.vmappinsts:#.name",
	"vmappinsts:#.organization=cloudletrefs.vmappinsts:#.organization",
	"k8sappinsts:#.name=cloudletrefs.k8sappinsts:#.name",
	"k8sappinsts:#.organization=cloudletrefs.k8sappinsts:#.organization",
}
var CloudletRefsComments = map[string]string{
	"key.organization":            "Organization of the cloudlet site",
	"key.name":                    "Name of the cloudlet",
	"key.federatedorganization":   "Federated operator organization who shared this cloudlet",
	"useddynamicips":              "Used dynamic IPs",
	"usedstaticips":               "Used static IPs",
	"reservedautoclusterids":      "Track reservable autoclusterinsts ids in use. This is a bitmap.",
	"clusterinsts:#.name":         "Cluster name",
	"clusterinsts:#.organization": "Name of the organization that this cluster belongs to",
	"vmappinsts:#.name":           "AppInst name",
	"vmappinsts:#.organization":   "AppInst organization",
	"k8sappinsts:#.name":          "AppInst name",
	"k8sappinsts:#.organization":  "AppInst organization",
}
var CloudletRefsSpecialArgs = map[string]string{}
var ClusterRefsRequiredArgs = []string{
	"key.clusterkey.name",
	"key.clusterkey.organization",
	"key.cloudletkey.organization",
	"key.cloudletkey.name",
	"key.cloudletkey.federatedorganization",
}
var ClusterRefsOptionalArgs = []string{
	"apps:#.name",
	"apps:#.organization",
}
var ClusterRefsAliasArgs = []string{
	"key.clusterkey.name=clusterrefs.key.clusterkey.name",
	"key.clusterkey.organization=clusterrefs.key.clusterkey.organization",
	"key.cloudletkey.organization=clusterrefs.key.cloudletkey.organization",
	"key.cloudletkey.name=clusterrefs.key.cloudletkey.name",
	"key.cloudletkey.federatedorganization=clusterrefs.key.cloudletkey.federatedorganization",
	"apps:#.name=clusterrefs.apps:#.name",
	"apps:#.organization=clusterrefs.apps:#.organization",
}
var ClusterRefsComments = map[string]string{
	"key.clusterkey.name":                   "Cluster name",
	"key.clusterkey.organization":           "Name of the organization that this cluster belongs to",
	"key.cloudletkey.organization":          "Organization of the cloudlet site",
	"key.cloudletkey.name":                  "Name of the cloudlet",
	"key.cloudletkey.federatedorganization": "Federated operator organization who shared this cloudlet",
	"apps:#.name":                           "AppInst name",
	"apps:#.organization":                   "AppInst organization",
}
var ClusterRefsSpecialArgs = map[string]string{}
var AppInstRefsRequiredArgs = []string{
	"key.organization",
	"key.name",
	"key.version",
}
var AppInstRefsOptionalArgs = []string{}
var AppInstRefsAliasArgs = []string{
	"key.organization=appinstrefs.key.organization",
	"key.name=appinstrefs.key.name",
	"key.version=appinstrefs.key.version",
}
var AppInstRefsComments = map[string]string{
	"key.organization": "App developer organization",
	"key.name":         "App name",
	"key.version":      "App version",
}
var AppInstRefsSpecialArgs = map[string]string{}
