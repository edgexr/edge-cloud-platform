// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vmpool.proto

package notify

import (
	"context"
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/gogo/protobuf/types"
	_ "github.com/gogo/protobuf/types"
	opentracing "github.com/opentracing/opentracing-go"
	math "math"
	"sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

type SendVMPoolHandler interface {
	GetAllKeys(ctx context.Context, cb func(key *edgeproto.VMPoolKey, modRev int64))
	GetWithRev(key *edgeproto.VMPoolKey, buf *edgeproto.VMPool, modRev *int64) bool
	GetForCloudlet(cloudlet *edgeproto.Cloudlet, cb func(key *edgeproto.VMPoolKey, modRev int64))
}

type RecvVMPoolHandler interface {
	Update(ctx context.Context, in *edgeproto.VMPool, rev int64)
	Delete(ctx context.Context, in *edgeproto.VMPool, rev int64)
	Prune(ctx context.Context, keys map[edgeproto.VMPoolKey]struct{})
	Flush(ctx context.Context, notifyId int64)
}

type VMPoolCacheHandler interface {
	SendVMPoolHandler
	RecvVMPoolHandler
	AddNotifyCb(fn func(ctx context.Context, obj *edgeproto.VMPoolKey, old *edgeproto.VMPool, modRev int64))
}

type VMPoolSend struct {
	Name        string
	MessageName string
	handler     SendVMPoolHandler
	Keys        map[edgeproto.VMPoolKey]VMPoolSendContext
	keysToSend  map[edgeproto.VMPoolKey]VMPoolSendContext
	notifyId    int64
	Mux         sync.Mutex
	buf         edgeproto.VMPool
	SendCount   uint64
	sendrecv    *SendRecv
}

type VMPoolSendContext struct {
	ctx         context.Context
	modRev      int64
	forceDelete bool
}

func NewVMPoolSend(handler SendVMPoolHandler) *VMPoolSend {
	send := &VMPoolSend{}
	send.Name = "VMPool"
	send.MessageName = proto.MessageName((*edgeproto.VMPool)(nil))
	send.handler = handler
	send.Keys = make(map[edgeproto.VMPoolKey]VMPoolSendContext)
	return send
}

func (s *VMPoolSend) SetSendRecv(sendrecv *SendRecv) {
	s.sendrecv = sendrecv
}

func (s *VMPoolSend) GetMessageName() string {
	return s.MessageName
}

func (s *VMPoolSend) GetName() string {
	return s.Name
}

func (s *VMPoolSend) GetSendCount() uint64 {
	return s.SendCount
}

func (s *VMPoolSend) GetNotifyId() int64 {
	return s.notifyId
}
func (s *VMPoolSend) UpdateAll(ctx context.Context) {
	if !s.sendrecv.isRemoteWanted(s.MessageName) {
		return
	}
	s.Mux.Lock()
	s.handler.GetAllKeys(ctx, func(key *edgeproto.VMPoolKey, modRev int64) {
		if !s.UpdateAllOkLocked(key) { // to be implemented by hand
			return
		}
		s.Keys[*key] = VMPoolSendContext{
			ctx:    ctx,
			modRev: modRev,
		}
	})
	s.Mux.Unlock()
}

func (s *VMPoolSend) Update(ctx context.Context, key *edgeproto.VMPoolKey, old *edgeproto.VMPool, modRev int64) {
	if !s.sendrecv.isRemoteWanted(s.MessageName) {
		return
	}
	if !s.UpdateOk(ctx, key) { // to be implemented by hand
		return
	}
	forceDelete := false
	s.updateInternal(ctx, key, modRev, forceDelete)
}

func (s *VMPoolSend) ForceDelete(ctx context.Context, key *edgeproto.VMPoolKey, modRev int64) {
	forceDelete := true
	s.updateInternal(ctx, key, modRev, forceDelete)
}

func (s *VMPoolSend) updateInternal(ctx context.Context, key *edgeproto.VMPoolKey, modRev int64, forceDelete bool) {
	s.Mux.Lock()
	log.SpanLog(ctx, log.DebugLevelNotify, "updateInternal VMPool", "key", key, "modRev", modRev)
	s.Keys[*key] = VMPoolSendContext{
		ctx:         ctx,
		modRev:      modRev,
		forceDelete: forceDelete,
	}
	s.Mux.Unlock()
	s.sendrecv.wakeup()
}

func (s *VMPoolSend) SendForCloudlet(ctx context.Context, action edgeproto.NoticeAction, cloudlet *edgeproto.Cloudlet) {
	keys := make(map[edgeproto.VMPoolKey]int64)
	s.handler.GetForCloudlet(cloudlet, func(objKey *edgeproto.VMPoolKey, modRev int64) {
		keys[*objKey] = modRev
	})
	for k, modRev := range keys {
		if action == edgeproto.NoticeAction_UPDATE {
			s.Update(ctx, &k, nil, modRev)
		} else if action == edgeproto.NoticeAction_DELETE {
			s.ForceDelete(ctx, &k, modRev)
		}
	}
}

func (s *VMPoolSend) Send(stream StreamNotify, notice *edgeproto.Notice, peer string) error {
	s.Mux.Lock()
	keys := s.keysToSend
	s.keysToSend = nil
	s.Mux.Unlock()
	for key, sendContext := range keys {
		ctx := sendContext.ctx
		found := s.handler.GetWithRev(&key, &s.buf, &notice.ModRev)
		if found && !sendContext.forceDelete {
			notice.Action = edgeproto.NoticeAction_UPDATE
		} else {
			notice.Action = edgeproto.NoticeAction_DELETE
			notice.ModRev = sendContext.modRev
			s.buf.Reset()
			s.buf.SetKey(&key)
		}
		any, err := types.MarshalAny(&s.buf)
		if err != nil {
			s.sendrecv.stats.MarshalErrors++
			err = nil
			continue
		}
		notice.Any = *any
		notice.Span = log.SpanToString(ctx)
		log.SpanLog(ctx, log.DebugLevelNotify,
			fmt.Sprintf("%s send VMPool", s.sendrecv.cliserv),
			"peerAddr", peer,
			"peer", s.sendrecv.peer,
			"local", s.sendrecv.name,
			"action", notice.Action,
			"key", key,
			"modRev", notice.ModRev)
		err = stream.Send(notice)
		if err != nil {
			s.sendrecv.stats.SendErrors++
			return err
		}
		s.sendrecv.stats.Send++
		// object specific counter
		s.SendCount++
	}
	return nil
}

func (s *VMPoolSend) PrepData() bool {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	if len(s.Keys) > 0 {
		s.keysToSend = s.Keys
		s.Keys = make(map[edgeproto.VMPoolKey]VMPoolSendContext)
		return true
	}
	return false
}

// Server accepts multiple clients so needs to track multiple
// peers to send to.
type VMPoolSendMany struct {
	handler SendVMPoolHandler
	Mux     sync.Mutex
	sends   map[string]*VMPoolSend
}

func NewVMPoolSendMany(handler SendVMPoolHandler) *VMPoolSendMany {
	s := &VMPoolSendMany{}
	s.handler = handler
	s.sends = make(map[string]*VMPoolSend)
	return s
}

func (s *VMPoolSendMany) NewSend(peerAddr string, notifyId int64) NotifySend {
	send := NewVMPoolSend(s.handler)
	send.notifyId = notifyId
	s.Mux.Lock()
	s.sends[peerAddr] = send
	s.Mux.Unlock()
	return send
}

func (s *VMPoolSendMany) DoneSend(peerAddr string, send NotifySend) {
	asend, ok := send.(*VMPoolSend)
	if !ok {
		return
	}
	// another connection may come from the same client so remove
	// only if it matches
	s.Mux.Lock()
	if remove, _ := s.sends[peerAddr]; remove == asend {
		delete(s.sends, peerAddr)
	}
	s.Mux.Unlock()
}
func (s *VMPoolSendMany) Update(ctx context.Context, key *edgeproto.VMPoolKey, old *edgeproto.VMPool, modRev int64) {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	for _, send := range s.sends {
		send.Update(ctx, key, old, modRev)
	}
}

func (s *VMPoolSendMany) GetTypeString() string {
	return "VMPool"
}

type VMPoolRecv struct {
	Name        string
	MessageName string
	handler     RecvVMPoolHandler
	sendAllKeys map[edgeproto.VMPoolKey]struct{}
	Mux         sync.Mutex
	buf         edgeproto.VMPool
	RecvCount   uint64
	sendrecv    *SendRecv
}

func NewVMPoolRecv(handler RecvVMPoolHandler) *VMPoolRecv {
	recv := &VMPoolRecv{}
	recv.Name = "VMPool"
	recv.MessageName = proto.MessageName((*edgeproto.VMPool)(nil))
	recv.handler = handler
	return recv
}

func (s *VMPoolRecv) SetSendRecv(sendrecv *SendRecv) {
	s.sendrecv = sendrecv
}

func (s *VMPoolRecv) GetMessageName() string {
	return s.MessageName
}

func (s *VMPoolRecv) GetName() string {
	return s.Name
}

func (s *VMPoolRecv) GetRecvCount() uint64 {
	return s.RecvCount
}

func (s *VMPoolRecv) Recv(ctx context.Context, notice *edgeproto.Notice, notifyId int64, peerAddr string) {
	span := opentracing.SpanFromContext(ctx)
	if span != nil {
		span.SetTag("objtype", "VMPool")
	}

	buf := &edgeproto.VMPool{}
	err := types.UnmarshalAny(&notice.Any, buf)
	if err != nil {
		s.sendrecv.stats.UnmarshalErrors++
		log.SpanLog(ctx, log.DebugLevelNotify, "Unmarshal Error", "err", err)
		return
	}
	if span != nil {
		log.SetTags(span, buf.GetKey().GetTags())
	}
	log.SpanLog(ctx, log.DebugLevelNotify,
		fmt.Sprintf("%s recv VMPool", s.sendrecv.cliserv),
		"peerAddr", peerAddr,
		"peer", s.sendrecv.peer,
		"local", s.sendrecv.name,
		"action", notice.Action,
		"key", buf.GetKeyVal(),
		"modRev", notice.ModRev)
	if notice.Action == edgeproto.NoticeAction_UPDATE {
		s.handler.Update(ctx, buf, notice.ModRev)
		s.Mux.Lock()
		if s.sendAllKeys != nil {
			s.sendAllKeys[buf.GetKeyVal()] = struct{}{}
		}
		s.Mux.Unlock()
	} else if notice.Action == edgeproto.NoticeAction_DELETE {
		s.handler.Delete(ctx, buf, notice.ModRev)
	}
	s.sendrecv.stats.Recv++
	// object specific counter
	s.RecvCount++
}

func (s *VMPoolRecv) RecvAllStart() {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	s.sendAllKeys = make(map[edgeproto.VMPoolKey]struct{})
}

func (s *VMPoolRecv) RecvAllEnd(ctx context.Context, cleanup Cleanup) {
	s.Mux.Lock()
	validKeys := s.sendAllKeys
	s.sendAllKeys = nil
	s.Mux.Unlock()
	if cleanup == CleanupPrune {
		s.handler.Prune(ctx, validKeys)
	}
}
func (s *VMPoolRecv) Flush(ctx context.Context, notifyId int64) {
	s.handler.Flush(ctx, notifyId)
}

type VMPoolRecvMany struct {
	handler RecvVMPoolHandler
}

func NewVMPoolRecvMany(handler RecvVMPoolHandler) *VMPoolRecvMany {
	s := &VMPoolRecvMany{}
	s.handler = handler
	return s
}

func (s *VMPoolRecvMany) NewRecv() NotifyRecv {
	recv := NewVMPoolRecv(s.handler)
	return recv
}

func (s *VMPoolRecvMany) Flush(ctx context.Context, notifyId int64) {
	s.handler.Flush(ctx, notifyId)
}
func (mgr *ServerMgr) RegisterSendVMPoolCache(cache VMPoolCacheHandler) {
	send := NewVMPoolSendMany(cache)
	mgr.RegisterSend(send)
	cache.AddNotifyCb(send.Update)
}

func (mgr *ServerMgr) RegisterRecvVMPoolCache(cache VMPoolCacheHandler) {
	recv := NewVMPoolRecvMany(cache)
	mgr.RegisterRecv(recv)
}

func (s *Client) RegisterSendVMPoolCache(cache VMPoolCacheHandler) {
	send := NewVMPoolSend(cache)
	s.RegisterSend(send)
	cache.AddNotifyCb(send.Update)
}

func (s *Client) RegisterRecvVMPoolCache(cache VMPoolCacheHandler) {
	recv := NewVMPoolRecv(cache)
	s.RegisterRecv(recv)
}

type SendVMPoolInfoHandler interface {
	GetAllKeys(ctx context.Context, cb func(key *edgeproto.VMPoolKey, modRev int64))
	GetWithRev(key *edgeproto.VMPoolKey, buf *edgeproto.VMPoolInfo, modRev *int64) bool
}

type RecvVMPoolInfoHandler interface {
	Update(ctx context.Context, in *edgeproto.VMPoolInfo, rev int64)
	Delete(ctx context.Context, in *edgeproto.VMPoolInfo, rev int64)
	Prune(ctx context.Context, keys map[edgeproto.VMPoolKey]struct{})
	Flush(ctx context.Context, notifyId int64)
}

type VMPoolInfoCacheHandler interface {
	SendVMPoolInfoHandler
	RecvVMPoolInfoHandler
	AddNotifyCb(fn func(ctx context.Context, obj *edgeproto.VMPoolKey, old *edgeproto.VMPoolInfo, modRev int64))
}

type VMPoolInfoSend struct {
	Name        string
	MessageName string
	handler     SendVMPoolInfoHandler
	Keys        map[edgeproto.VMPoolKey]VMPoolInfoSendContext
	keysToSend  map[edgeproto.VMPoolKey]VMPoolInfoSendContext
	notifyId    int64
	Mux         sync.Mutex
	buf         edgeproto.VMPoolInfo
	SendCount   uint64
	sendrecv    *SendRecv
}

type VMPoolInfoSendContext struct {
	ctx         context.Context
	modRev      int64
	forceDelete bool
}

func NewVMPoolInfoSend(handler SendVMPoolInfoHandler) *VMPoolInfoSend {
	send := &VMPoolInfoSend{}
	send.Name = "VMPoolInfo"
	send.MessageName = proto.MessageName((*edgeproto.VMPoolInfo)(nil))
	send.handler = handler
	send.Keys = make(map[edgeproto.VMPoolKey]VMPoolInfoSendContext)
	return send
}

func (s *VMPoolInfoSend) SetSendRecv(sendrecv *SendRecv) {
	s.sendrecv = sendrecv
}

func (s *VMPoolInfoSend) GetMessageName() string {
	return s.MessageName
}

func (s *VMPoolInfoSend) GetName() string {
	return s.Name
}

func (s *VMPoolInfoSend) GetSendCount() uint64 {
	return s.SendCount
}

func (s *VMPoolInfoSend) GetNotifyId() int64 {
	return s.notifyId
}
func (s *VMPoolInfoSend) UpdateAll(ctx context.Context) {
	if !s.sendrecv.isRemoteWanted(s.MessageName) {
		return
	}
	s.Mux.Lock()
	s.handler.GetAllKeys(ctx, func(key *edgeproto.VMPoolKey, modRev int64) {
		s.Keys[*key] = VMPoolInfoSendContext{
			ctx:    ctx,
			modRev: modRev,
		}
	})
	s.Mux.Unlock()
}

func (s *VMPoolInfoSend) Update(ctx context.Context, key *edgeproto.VMPoolKey, old *edgeproto.VMPoolInfo, modRev int64) {
	if !s.sendrecv.isRemoteWanted(s.MessageName) {
		return
	}
	forceDelete := false
	s.updateInternal(ctx, key, modRev, forceDelete)
}

func (s *VMPoolInfoSend) ForceDelete(ctx context.Context, key *edgeproto.VMPoolKey, modRev int64) {
	forceDelete := true
	s.updateInternal(ctx, key, modRev, forceDelete)
}

func (s *VMPoolInfoSend) updateInternal(ctx context.Context, key *edgeproto.VMPoolKey, modRev int64, forceDelete bool) {
	s.Mux.Lock()
	log.SpanLog(ctx, log.DebugLevelNotify, "updateInternal VMPoolInfo", "key", key, "modRev", modRev)
	s.Keys[*key] = VMPoolInfoSendContext{
		ctx:         ctx,
		modRev:      modRev,
		forceDelete: forceDelete,
	}
	s.Mux.Unlock()
	s.sendrecv.wakeup()
}

func (s *VMPoolInfoSend) SendForCloudlet(ctx context.Context, action edgeproto.NoticeAction, cloudlet *edgeproto.Cloudlet) {
}

func (s *VMPoolInfoSend) Send(stream StreamNotify, notice *edgeproto.Notice, peer string) error {
	s.Mux.Lock()
	keys := s.keysToSend
	s.keysToSend = nil
	s.Mux.Unlock()
	for key, sendContext := range keys {
		ctx := sendContext.ctx
		found := s.handler.GetWithRev(&key, &s.buf, &notice.ModRev)
		if found && !sendContext.forceDelete {
			notice.Action = edgeproto.NoticeAction_UPDATE
		} else {
			notice.Action = edgeproto.NoticeAction_DELETE
			notice.ModRev = sendContext.modRev
			s.buf.Reset()
			s.buf.SetKey(&key)
		}
		any, err := types.MarshalAny(&s.buf)
		if err != nil {
			s.sendrecv.stats.MarshalErrors++
			err = nil
			continue
		}
		notice.Any = *any
		notice.Span = log.SpanToString(ctx)
		log.SpanLog(ctx, log.DebugLevelNotify,
			fmt.Sprintf("%s send VMPoolInfo", s.sendrecv.cliserv),
			"peerAddr", peer,
			"peer", s.sendrecv.peer,
			"local", s.sendrecv.name,
			"action", notice.Action,
			"key", key,
			"modRev", notice.ModRev)
		err = stream.Send(notice)
		if err != nil {
			s.sendrecv.stats.SendErrors++
			return err
		}
		s.sendrecv.stats.Send++
		// object specific counter
		s.SendCount++
	}
	return nil
}

func (s *VMPoolInfoSend) PrepData() bool {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	if len(s.Keys) > 0 {
		s.keysToSend = s.Keys
		s.Keys = make(map[edgeproto.VMPoolKey]VMPoolInfoSendContext)
		return true
	}
	return false
}

// Server accepts multiple clients so needs to track multiple
// peers to send to.
type VMPoolInfoSendMany struct {
	handler SendVMPoolInfoHandler
	Mux     sync.Mutex
	sends   map[string]*VMPoolInfoSend
}

func NewVMPoolInfoSendMany(handler SendVMPoolInfoHandler) *VMPoolInfoSendMany {
	s := &VMPoolInfoSendMany{}
	s.handler = handler
	s.sends = make(map[string]*VMPoolInfoSend)
	return s
}

func (s *VMPoolInfoSendMany) NewSend(peerAddr string, notifyId int64) NotifySend {
	send := NewVMPoolInfoSend(s.handler)
	send.notifyId = notifyId
	s.Mux.Lock()
	s.sends[peerAddr] = send
	s.Mux.Unlock()
	return send
}

func (s *VMPoolInfoSendMany) DoneSend(peerAddr string, send NotifySend) {
	asend, ok := send.(*VMPoolInfoSend)
	if !ok {
		return
	}
	// another connection may come from the same client so remove
	// only if it matches
	s.Mux.Lock()
	if remove, _ := s.sends[peerAddr]; remove == asend {
		delete(s.sends, peerAddr)
	}
	s.Mux.Unlock()
}
func (s *VMPoolInfoSendMany) Update(ctx context.Context, key *edgeproto.VMPoolKey, old *edgeproto.VMPoolInfo, modRev int64) {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	for _, send := range s.sends {
		send.Update(ctx, key, old, modRev)
	}
}

func (s *VMPoolInfoSendMany) GetTypeString() string {
	return "VMPoolInfo"
}

type VMPoolInfoRecv struct {
	Name        string
	MessageName string
	handler     RecvVMPoolInfoHandler
	sendAllKeys map[edgeproto.VMPoolKey]struct{}
	Mux         sync.Mutex
	buf         edgeproto.VMPoolInfo
	RecvCount   uint64
	sendrecv    *SendRecv
}

func NewVMPoolInfoRecv(handler RecvVMPoolInfoHandler) *VMPoolInfoRecv {
	recv := &VMPoolInfoRecv{}
	recv.Name = "VMPoolInfo"
	recv.MessageName = proto.MessageName((*edgeproto.VMPoolInfo)(nil))
	recv.handler = handler
	return recv
}

func (s *VMPoolInfoRecv) SetSendRecv(sendrecv *SendRecv) {
	s.sendrecv = sendrecv
}

func (s *VMPoolInfoRecv) GetMessageName() string {
	return s.MessageName
}

func (s *VMPoolInfoRecv) GetName() string {
	return s.Name
}

func (s *VMPoolInfoRecv) GetRecvCount() uint64 {
	return s.RecvCount
}

func (s *VMPoolInfoRecv) Recv(ctx context.Context, notice *edgeproto.Notice, notifyId int64, peerAddr string) {
	span := opentracing.SpanFromContext(ctx)
	if span != nil {
		span.SetTag("objtype", "VMPoolInfo")
	}

	buf := &edgeproto.VMPoolInfo{}
	err := types.UnmarshalAny(&notice.Any, buf)
	if err != nil {
		s.sendrecv.stats.UnmarshalErrors++
		log.SpanLog(ctx, log.DebugLevelNotify, "Unmarshal Error", "err", err)
		return
	}
	buf.NotifyId = notifyId
	if span != nil {
		log.SetTags(span, buf.GetKey().GetTags())
	}
	log.SpanLog(ctx, log.DebugLevelNotify,
		fmt.Sprintf("%s recv VMPoolInfo", s.sendrecv.cliserv),
		"peerAddr", peerAddr,
		"peer", s.sendrecv.peer,
		"local", s.sendrecv.name,
		"action", notice.Action,
		"key", buf.GetKeyVal(),
		"modRev", notice.ModRev)
	if notice.Action == edgeproto.NoticeAction_UPDATE {
		s.handler.Update(ctx, buf, notice.ModRev)
		s.Mux.Lock()
		if s.sendAllKeys != nil {
			s.sendAllKeys[buf.GetKeyVal()] = struct{}{}
		}
		s.Mux.Unlock()
	} else if notice.Action == edgeproto.NoticeAction_DELETE {
		s.handler.Delete(ctx, buf, notice.ModRev)
	}
	s.sendrecv.stats.Recv++
	// object specific counter
	s.RecvCount++
}

func (s *VMPoolInfoRecv) RecvAllStart() {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	s.sendAllKeys = make(map[edgeproto.VMPoolKey]struct{})
}

func (s *VMPoolInfoRecv) RecvAllEnd(ctx context.Context, cleanup Cleanup) {
	s.Mux.Lock()
	validKeys := s.sendAllKeys
	s.sendAllKeys = nil
	s.Mux.Unlock()
	if cleanup == CleanupPrune {
		s.handler.Prune(ctx, validKeys)
	}
}
func (s *VMPoolInfoRecv) Flush(ctx context.Context, notifyId int64) {
	s.handler.Flush(ctx, notifyId)
}

type VMPoolInfoRecvMany struct {
	handler RecvVMPoolInfoHandler
}

func NewVMPoolInfoRecvMany(handler RecvVMPoolInfoHandler) *VMPoolInfoRecvMany {
	s := &VMPoolInfoRecvMany{}
	s.handler = handler
	return s
}

func (s *VMPoolInfoRecvMany) NewRecv() NotifyRecv {
	recv := NewVMPoolInfoRecv(s.handler)
	return recv
}

func (s *VMPoolInfoRecvMany) Flush(ctx context.Context, notifyId int64) {
	s.handler.Flush(ctx, notifyId)
}
func (mgr *ServerMgr) RegisterSendVMPoolInfoCache(cache VMPoolInfoCacheHandler) {
	send := NewVMPoolInfoSendMany(cache)
	mgr.RegisterSend(send)
	cache.AddNotifyCb(send.Update)
}

func (mgr *ServerMgr) RegisterRecvVMPoolInfoCache(cache VMPoolInfoCacheHandler) {
	recv := NewVMPoolInfoRecvMany(cache)
	mgr.RegisterRecv(recv)
}

func (s *Client) RegisterSendVMPoolInfoCache(cache VMPoolInfoCacheHandler) {
	send := NewVMPoolInfoSend(cache)
	s.RegisterSend(send)
	cache.AddNotifyCb(send.Update)
}

func (s *Client) RegisterRecvVMPoolInfoCache(cache VMPoolInfoCacheHandler) {
	recv := NewVMPoolInfoRecv(cache)
	s.RegisterRecv(recv)
}
