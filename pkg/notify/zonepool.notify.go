// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zonepool.proto

package notify

import (
	"context"
	fmt "fmt"
	_ "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/gogo/protobuf/types"
	opentracing "github.com/opentracing/opentracing-go"
	math "math"
	"sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

type SendZonePoolHandler interface {
	GetAllLocked(ctx context.Context, cb func(key *edgeproto.ZonePool, modRev int64))
	GetWithRev(key *edgeproto.ZonePoolKey, buf *edgeproto.ZonePool, modRev *int64) bool
}

type RecvZonePoolHandler interface {
	Update(ctx context.Context, in *edgeproto.ZonePool, rev int64)
	Delete(ctx context.Context, in *edgeproto.ZonePool, rev int64)
	Prune(ctx context.Context, keys map[edgeproto.ZonePoolKey]struct{})
	Flush(ctx context.Context, notifyId int64)
}

type ZonePoolCacheHandler interface {
	SendZonePoolHandler
	RecvZonePoolHandler
	AddNotifyCb(fn func(ctx context.Context, obj *edgeproto.ZonePool, modRev int64))
}

type ZonePoolSend struct {
	Name        string
	MessageName string
	handler     SendZonePoolHandler
	Keys        map[edgeproto.ZonePoolKey]ZonePoolSendContext
	keysToSend  map[edgeproto.ZonePoolKey]ZonePoolSendContext
	notifyId    int64
	Mux         sync.Mutex
	buf         edgeproto.ZonePool
	SendCount   uint64
	sendrecv    *SendRecv
}

type ZonePoolSendContext struct {
	ctx         context.Context
	modRev      int64
	forceDelete bool
}

func NewZonePoolSend(handler SendZonePoolHandler) *ZonePoolSend {
	send := &ZonePoolSend{}
	send.Name = "ZonePool"
	send.MessageName = proto.MessageName((*edgeproto.ZonePool)(nil))
	send.handler = handler
	send.Keys = make(map[edgeproto.ZonePoolKey]ZonePoolSendContext)
	return send
}

func (s *ZonePoolSend) SetSendRecv(sendrecv *SendRecv) {
	s.sendrecv = sendrecv
}

func (s *ZonePoolSend) GetMessageName() string {
	return s.MessageName
}

func (s *ZonePoolSend) GetName() string {
	return s.Name
}

func (s *ZonePoolSend) GetSendCount() uint64 {
	return s.SendCount
}

func (s *ZonePoolSend) GetNotifyId() int64 {
	return s.notifyId
}
func (s *ZonePoolSend) UpdateAll(ctx context.Context) {
	if !s.sendrecv.isRemoteWanted(s.MessageName) {
		return
	}
	s.Mux.Lock()
	s.handler.GetAllLocked(ctx, func(obj *edgeproto.ZonePool, modRev int64) {
		s.Keys[*obj.GetKey()] = ZonePoolSendContext{
			ctx:    ctx,
			modRev: modRev,
		}
	})
	s.Mux.Unlock()
}

func (s *ZonePoolSend) Update(ctx context.Context, obj *edgeproto.ZonePool, modRev int64) {
	if !s.sendrecv.isRemoteWanted(s.MessageName) {
		return
	}
	forceDelete := false
	s.updateInternal(ctx, obj.GetKey(), modRev, forceDelete)
}

func (s *ZonePoolSend) ForceDelete(ctx context.Context, key *edgeproto.ZonePoolKey, modRev int64) {
	forceDelete := true
	s.updateInternal(ctx, key, modRev, forceDelete)
}

func (s *ZonePoolSend) updateInternal(ctx context.Context, key *edgeproto.ZonePoolKey, modRev int64, forceDelete bool) {
	s.Mux.Lock()
	log.SpanLog(ctx, log.DebugLevelNotify, "updateInternal ZonePool", "key", key, "modRev", modRev)
	s.Keys[*key] = ZonePoolSendContext{
		ctx:         ctx,
		modRev:      modRev,
		forceDelete: forceDelete,
	}
	s.Mux.Unlock()
	s.sendrecv.wakeup()
}

func (s *ZonePoolSend) SendForCloudlet(ctx context.Context, action edgeproto.NoticeAction, cloudlet *edgeproto.Cloudlet) {
}

func (s *ZonePoolSend) Send(stream StreamNotify, notice *edgeproto.Notice, peer string) error {
	s.Mux.Lock()
	keys := s.keysToSend
	s.keysToSend = nil
	s.Mux.Unlock()
	for key, sendContext := range keys {
		ctx := sendContext.ctx
		found := s.handler.GetWithRev(&key, &s.buf, &notice.ModRev)
		if found && !sendContext.forceDelete {
			notice.Action = edgeproto.NoticeAction_UPDATE
		} else {
			notice.Action = edgeproto.NoticeAction_DELETE
			notice.ModRev = sendContext.modRev
			s.buf.Reset()
			s.buf.SetKey(&key)
		}
		any, err := types.MarshalAny(&s.buf)
		if err != nil {
			s.sendrecv.stats.MarshalErrors++
			err = nil
			continue
		}
		notice.Any = *any
		notice.Span = log.SpanToString(ctx)
		log.SpanLog(ctx, log.DebugLevelNotify,
			fmt.Sprintf("%s send ZonePool", s.sendrecv.cliserv),
			"peerAddr", peer,
			"peer", s.sendrecv.peer,
			"local", s.sendrecv.name,
			"action", notice.Action,
			"key", key,
			"modRev", notice.ModRev)
		err = stream.Send(notice)
		if err != nil {
			s.sendrecv.stats.SendErrors++
			return err
		}
		s.sendrecv.stats.Send++
		// object specific counter
		s.SendCount++
	}
	return nil
}

func (s *ZonePoolSend) PrepData() bool {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	if len(s.Keys) > 0 {
		s.keysToSend = s.Keys
		s.Keys = make(map[edgeproto.ZonePoolKey]ZonePoolSendContext)
		return true
	}
	return false
}

// Server accepts multiple clients so needs to track multiple
// peers to send to.
type ZonePoolSendMany struct {
	handler SendZonePoolHandler
	Mux     sync.Mutex
	sends   map[string]*ZonePoolSend
}

func NewZonePoolSendMany(handler SendZonePoolHandler) *ZonePoolSendMany {
	s := &ZonePoolSendMany{}
	s.handler = handler
	s.sends = make(map[string]*ZonePoolSend)
	return s
}

func (s *ZonePoolSendMany) NewSend(peerAddr string, notifyId int64) NotifySend {
	send := NewZonePoolSend(s.handler)
	send.notifyId = notifyId
	s.Mux.Lock()
	s.sends[peerAddr] = send
	s.Mux.Unlock()
	return send
}

func (s *ZonePoolSendMany) DoneSend(peerAddr string, send NotifySend) {
	asend, ok := send.(*ZonePoolSend)
	if !ok {
		return
	}
	// another connection may come from the same client so remove
	// only if it matches
	s.Mux.Lock()
	if remove, _ := s.sends[peerAddr]; remove == asend {
		delete(s.sends, peerAddr)
	}
	s.Mux.Unlock()
}
func (s *ZonePoolSendMany) Update(ctx context.Context, obj *edgeproto.ZonePool, modRev int64) {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	for _, send := range s.sends {
		send.Update(ctx, obj, modRev)
	}
}

func (s *ZonePoolSendMany) GetTypeString() string {
	return "ZonePool"
}

type ZonePoolRecv struct {
	Name        string
	MessageName string
	handler     RecvZonePoolHandler
	sendAllKeys map[edgeproto.ZonePoolKey]struct{}
	Mux         sync.Mutex
	buf         edgeproto.ZonePool
	RecvCount   uint64
	sendrecv    *SendRecv
}

func NewZonePoolRecv(handler RecvZonePoolHandler) *ZonePoolRecv {
	recv := &ZonePoolRecv{}
	recv.Name = "ZonePool"
	recv.MessageName = proto.MessageName((*edgeproto.ZonePool)(nil))
	recv.handler = handler
	return recv
}

func (s *ZonePoolRecv) SetSendRecv(sendrecv *SendRecv) {
	s.sendrecv = sendrecv
}

func (s *ZonePoolRecv) GetMessageName() string {
	return s.MessageName
}

func (s *ZonePoolRecv) GetName() string {
	return s.Name
}

func (s *ZonePoolRecv) GetRecvCount() uint64 {
	return s.RecvCount
}

func (s *ZonePoolRecv) Recv(ctx context.Context, notice *edgeproto.Notice, notifyId int64, peerAddr string) {
	span := opentracing.SpanFromContext(ctx)
	if span != nil {
		span.SetTag("objtype", "ZonePool")
	}

	buf := &edgeproto.ZonePool{}
	err := types.UnmarshalAny(&notice.Any, buf)
	if err != nil {
		s.sendrecv.stats.UnmarshalErrors++
		log.SpanLog(ctx, log.DebugLevelNotify, "Unmarshal Error", "err", err)
		return
	}
	if span != nil {
		log.SetTags(span, buf.GetKey().GetTags())
	}
	log.SpanLog(ctx, log.DebugLevelNotify,
		fmt.Sprintf("%s recv ZonePool", s.sendrecv.cliserv),
		"peerAddr", peerAddr,
		"peer", s.sendrecv.peer,
		"local", s.sendrecv.name,
		"action", notice.Action,
		"key", buf.GetKeyVal(),
		"modRev", notice.ModRev)
	if notice.Action == edgeproto.NoticeAction_UPDATE {
		s.handler.Update(ctx, buf, notice.ModRev)
		s.Mux.Lock()
		if s.sendAllKeys != nil {
			s.sendAllKeys[buf.GetKeyVal()] = struct{}{}
		}
		s.Mux.Unlock()
	} else if notice.Action == edgeproto.NoticeAction_DELETE {
		s.handler.Delete(ctx, buf, notice.ModRev)
	}
	s.sendrecv.stats.Recv++
	// object specific counter
	s.RecvCount++
}

func (s *ZonePoolRecv) RecvAllStart() {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	s.sendAllKeys = make(map[edgeproto.ZonePoolKey]struct{})
}

func (s *ZonePoolRecv) RecvAllEnd(ctx context.Context, cleanup Cleanup) {
	s.Mux.Lock()
	validKeys := s.sendAllKeys
	s.sendAllKeys = nil
	s.Mux.Unlock()
	if cleanup == CleanupPrune {
		s.handler.Prune(ctx, validKeys)
	}
}
func (s *ZonePoolRecv) Flush(ctx context.Context, notifyId int64) {
	s.handler.Flush(ctx, notifyId)
}

type ZonePoolRecvMany struct {
	handler RecvZonePoolHandler
}

func NewZonePoolRecvMany(handler RecvZonePoolHandler) *ZonePoolRecvMany {
	s := &ZonePoolRecvMany{}
	s.handler = handler
	return s
}

func (s *ZonePoolRecvMany) NewRecv() NotifyRecv {
	recv := NewZonePoolRecv(s.handler)
	return recv
}

func (s *ZonePoolRecvMany) Flush(ctx context.Context, notifyId int64) {
	s.handler.Flush(ctx, notifyId)
}
func (mgr *ServerMgr) RegisterSendZonePoolCache(cache ZonePoolCacheHandler) {
	send := NewZonePoolSendMany(cache)
	mgr.RegisterSend(send)
	cache.AddNotifyCb(send.Update)
}

func (mgr *ServerMgr) RegisterRecvZonePoolCache(cache ZonePoolCacheHandler) {
	recv := NewZonePoolRecvMany(cache)
	mgr.RegisterRecv(recv)
}

func (s *Client) RegisterSendZonePoolCache(cache ZonePoolCacheHandler) {
	send := NewZonePoolSend(cache)
	s.RegisterSend(send)
	cache.AddNotifyCb(send.Update)
}

func (s *Client) RegisterRecvZonePoolCache(cache ZonePoolCacheHandler) {
	recv := NewZonePoolRecv(cache)
	s.RegisterRecv(recv)
}
