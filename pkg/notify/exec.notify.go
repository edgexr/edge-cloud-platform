// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exec.proto

package notify

import (
	"context"
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/log"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/gogo/protobuf/types"
	opentracing "github.com/opentracing/opentracing-go"
	math "math"
	"sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

type RecvExecRequestHandler interface {
	RecvExecRequest(ctx context.Context, msg *edgeproto.ExecRequest)
}

type ExecRequestSend struct {
	Name        string
	MessageName string
	Data        []*edgeproto.ExecRequest
	dataToSend  []*edgeproto.ExecRequest
	Ctxs        []context.Context
	ctxsToSend  []context.Context
	notifyId    int64
	Mux         sync.Mutex
	buf         edgeproto.ExecRequest
	SendCount   uint64
	sendrecv    *SendRecv
}

type ExecRequestSendContext struct {
	ctx    context.Context
	modRev int64
}

func NewExecRequestSend() *ExecRequestSend {
	send := &ExecRequestSend{}
	send.Name = "ExecRequest"
	send.MessageName = proto.MessageName((*edgeproto.ExecRequest)(nil))
	send.Data = make([]*edgeproto.ExecRequest, 0)
	return send
}

func (s *ExecRequestSend) SetSendRecv(sendrecv *SendRecv) {
	s.sendrecv = sendrecv
}

func (s *ExecRequestSend) GetMessageName() string {
	return s.MessageName
}

func (s *ExecRequestSend) GetName() string {
	return s.Name
}

func (s *ExecRequestSend) GetSendCount() uint64 {
	return s.SendCount
}

func (s *ExecRequestSend) GetNotifyId() int64 {
	return s.notifyId
}
func (s *ExecRequestSend) UpdateAll(ctx context.Context) {}

func (s *ExecRequestSend) Update(ctx context.Context, msg *edgeproto.ExecRequest) bool {
	if !s.sendrecv.isRemoteWanted(s.MessageName) {
		return false
	}
	if !s.UpdateOk(ctx, msg) { // to be implemented by hand
		return false
	}
	s.Mux.Lock()
	s.Data = append(s.Data, msg)
	s.Ctxs = append(s.Ctxs, ctx)
	s.Mux.Unlock()
	s.sendrecv.wakeup()
	return true
}

func (s *ExecRequestSend) Send(stream StreamNotify, notice *edgeproto.Notice, peer string) error {
	s.Mux.Lock()
	data := s.dataToSend
	s.dataToSend = nil
	ctxs := s.ctxsToSend
	s.ctxsToSend = nil
	s.Mux.Unlock()
	for ii, msg := range data {
		any, err := types.MarshalAny(msg)
		ctx := ctxs[ii]
		if err != nil {
			s.sendrecv.stats.MarshalErrors++
			err = nil
			continue
		}
		notice.Any = *any
		notice.Span = log.SpanToString(ctx)
		log.SpanLog(ctx, log.DebugLevelNotify,
			fmt.Sprintf("%s send ExecRequest", s.sendrecv.cliserv),
			"peerAddr", peer,
			"peer", s.sendrecv.peer,
			"message", msg)
		err = stream.Send(notice)
		if err != nil {
			s.sendrecv.stats.SendErrors++
			return err
		}
		s.sendrecv.stats.Send++
		// object specific counter
		s.SendCount++
	}
	return nil
}

func (s *ExecRequestSend) PrepData() bool {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	if len(s.Data) > 0 {
		s.dataToSend = s.Data
		s.Data = make([]*edgeproto.ExecRequest, 0)
		s.ctxsToSend = s.Ctxs
		s.Ctxs = make([]context.Context, 0)
		return true
	}
	return false
}

// Server accepts multiple clients so needs to track multiple
// peers to send to.
type ExecRequestSendMany struct {
	Mux   sync.Mutex
	sends map[string]*ExecRequestSend
}

func NewExecRequestSendMany() *ExecRequestSendMany {
	s := &ExecRequestSendMany{}
	s.sends = make(map[string]*ExecRequestSend)
	return s
}

func (s *ExecRequestSendMany) NewSend(peerAddr string, notifyId int64) NotifySend {
	send := NewExecRequestSend()
	send.notifyId = notifyId
	s.Mux.Lock()
	s.sends[peerAddr] = send
	s.Mux.Unlock()
	return send
}

func (s *ExecRequestSendMany) DoneSend(peerAddr string, send NotifySend) {
	asend, ok := send.(*ExecRequestSend)
	if !ok {
		return
	}
	// another connection may come from the same client so remove
	// only if it matches
	s.Mux.Lock()
	if remove, _ := s.sends[peerAddr]; remove == asend {
		delete(s.sends, peerAddr)
	}
	s.Mux.Unlock()
}
func (s *ExecRequestSendMany) Update(ctx context.Context, msg *edgeproto.ExecRequest) int {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	count := 0
	for _, send := range s.sends {
		if send.Update(ctx, msg) {
			count++
		}
	}
	return count
}

func (s *ExecRequestSendMany) UpdateFiltered(ctx context.Context, msg *edgeproto.ExecRequest, sendOk func(ctx context.Context, send *ExecRequestSend, msg *edgeproto.ExecRequest) bool) int {
	s.Mux.Lock()
	defer s.Mux.Unlock()
	count := 0
	for _, send := range s.sends {
		if !sendOk(ctx, send, msg) {
			continue
		}
		if send.Update(ctx, msg) {
			count++
		}
	}
	return count
}

func (s *ExecRequestSendMany) GetTypeString() string {
	return "ExecRequest"
}

type ExecRequestRecv struct {
	Name        string
	MessageName string
	handler     RecvExecRequestHandler
	Mux         sync.Mutex
	buf         edgeproto.ExecRequest
	RecvCount   uint64
	sendrecv    *SendRecv
}

func NewExecRequestRecv(handler RecvExecRequestHandler) *ExecRequestRecv {
	recv := &ExecRequestRecv{}
	recv.Name = "ExecRequest"
	recv.MessageName = proto.MessageName((*edgeproto.ExecRequest)(nil))
	recv.handler = handler
	return recv
}

func (s *ExecRequestRecv) SetSendRecv(sendrecv *SendRecv) {
	s.sendrecv = sendrecv
}

func (s *ExecRequestRecv) GetMessageName() string {
	return s.MessageName
}

func (s *ExecRequestRecv) GetName() string {
	return s.Name
}

func (s *ExecRequestRecv) GetRecvCount() uint64 {
	return s.RecvCount
}

func (s *ExecRequestRecv) Recv(ctx context.Context, notice *edgeproto.Notice, notifyId int64, peerAddr string) {
	span := opentracing.SpanFromContext(ctx)
	if span != nil {
		span.SetTag("objtype", "ExecRequest")
	}

	buf := &edgeproto.ExecRequest{}
	err := types.UnmarshalAny(&notice.Any, buf)
	if err != nil {
		s.sendrecv.stats.UnmarshalErrors++
		log.SpanLog(ctx, log.DebugLevelNotify, "Unmarshal Error", "err", err)
		return
	}
	if span != nil {
		span.SetTag("msg", buf)
	}
	log.SpanLog(ctx, log.DebugLevelNotify,
		fmt.Sprintf("%s recv ExecRequest", s.sendrecv.cliserv),
		"peerAddr", peerAddr,
		"peer", s.sendrecv.peer,
		"message", buf)
	s.handler.RecvExecRequest(ctx, buf)
	s.sendrecv.stats.Recv++
	// object specific counter
	s.RecvCount++
}

func (s *ExecRequestRecv) RecvAllStart() {
}

func (s *ExecRequestRecv) RecvAllEnd(ctx context.Context, cleanup Cleanup) {
}

type ExecRequestRecvMany struct {
	handler RecvExecRequestHandler
}

func NewExecRequestRecvMany(handler RecvExecRequestHandler) *ExecRequestRecvMany {
	s := &ExecRequestRecvMany{}
	s.handler = handler
	return s
}

func (s *ExecRequestRecvMany) NewRecv() NotifyRecv {
	recv := NewExecRequestRecv(s.handler)
	return recv
}

func (s *ExecRequestRecvMany) Flush(ctx context.Context, notifyId int64) {
}
