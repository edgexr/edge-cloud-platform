// Package osmapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package osmapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AuthenticationschemaAuthType.
const (
	Basic AuthenticationschemaAuthType = "basic"
)

// Defines values for CancelNSLCMOpOccRequestCancelMode.
const (
	FORCEFUL CancelNSLCMOpOccRequestCancelMode = "FORCEFUL"
	GRACEFUL CancelNSLCMOpOccRequestCancelMode = "GRACEFUL"
)

// Defines values for InstantiateNsRequestVnfInternalVldIpProfileIpVersion.
const (
	InstantiateNsRequestVnfInternalVldIpProfileIpVersionIpv4 InstantiateNsRequestVnfInternalVldIpProfileIpVersion = "ipv4"
	InstantiateNsRequestVnfInternalVldIpProfileIpVersionIpv6 InstantiateNsRequestVnfInternalVldIpProfileIpVersion = "ipv6"
)

// Defines values for InstantiateNsiRequestNetsliceSubnetVnfInternalVldIpProfileIpVersion.
const (
	InstantiateNsiRequestNetsliceSubnetVnfInternalVldIpProfileIpVersionIpv4 InstantiateNsiRequestNetsliceSubnetVnfInternalVldIpProfileIpVersion = "ipv4"
	InstantiateNsiRequestNetsliceSubnetVnfInternalVldIpProfileIpVersionIpv6 InstantiateNsiRequestNetsliceSubnetVnfInternalVldIpProfileIpVersion = "ipv6"
)

// Defines values for K8sRepoType.
const (
	Bundle K8sRepoType = "bundle"
	Chart  K8sRepoType = "chart"
)

// Defines values for NslcmsubschemaLcmOpNameImpactingNsComponent.
const (
	NSHEAL           NslcmsubschemaLcmOpNameImpactingNsComponent = "NS_HEAL"
	NSINSTANTIATE    NslcmsubschemaLcmOpNameImpactingNsComponent = "NS_INSTANTIATE"
	NSSCALE          NslcmsubschemaLcmOpNameImpactingNsComponent = "NS_SCALE"
	NSTERMINATE      NslcmsubschemaLcmOpNameImpactingNsComponent = "NS_TERMINATE"
	NSUPDATE         NslcmsubschemaLcmOpNameImpactingNsComponent = "NS_UPDATE"
	VNFCHANGEEXTCONN NslcmsubschemaLcmOpNameImpactingNsComponent = "VNF_CHANGE_EXT_CONN"
	VNFCHANGEFLAVOUR NslcmsubschemaLcmOpNameImpactingNsComponent = "VNF_CHANGE_FLAVOUR"
	VNFHEAL          NslcmsubschemaLcmOpNameImpactingNsComponent = "VNF_HEAL"
	VNFINSTANTIATE   NslcmsubschemaLcmOpNameImpactingNsComponent = "VNF_INSTANTIATE"
	VNFMODIFYINFO    NslcmsubschemaLcmOpNameImpactingNsComponent = "VNF_MODIFY_INFO"
	VNFOPERATE       NslcmsubschemaLcmOpNameImpactingNsComponent = "VNF_OPERATE"
	VNFSCALE         NslcmsubschemaLcmOpNameImpactingNsComponent = "VNF_SCALE"
	VNFSCALETOLEVEL  NslcmsubschemaLcmOpNameImpactingNsComponent = "VNF_SCALE_TO_LEVEL"
	VNFTERMINATE     NslcmsubschemaLcmOpNameImpactingNsComponent = "VNF_TERMINATE"
)

// Defines values for NslcmsubschemaLcmOpOccStatusImpactingNsComponent.
const (
	NslcmsubschemaLcmOpOccStatusImpactingNsComponentCOMPLETED          NslcmsubschemaLcmOpOccStatusImpactingNsComponent = "COMPLETED"
	NslcmsubschemaLcmOpOccStatusImpactingNsComponentFAILED             NslcmsubschemaLcmOpOccStatusImpactingNsComponent = "FAILED"
	NslcmsubschemaLcmOpOccStatusImpactingNsComponentPARTIALLYCOMPLETED NslcmsubschemaLcmOpOccStatusImpactingNsComponent = "PARTIALLY_COMPLETED"
	NslcmsubschemaLcmOpOccStatusImpactingNsComponentROLLEDBACK         NslcmsubschemaLcmOpOccStatusImpactingNsComponent = "ROLLED_BACK"
	NslcmsubschemaLcmOpOccStatusImpactingNsComponentSTART              NslcmsubschemaLcmOpOccStatusImpactingNsComponent = "START"
)

// Defines values for NslcmsubschemaNotificationTypes.
const (
	NsChangeNotification                 NslcmsubschemaNotificationTypes = "NsChangeNotification"
	NsIdentifierCreationNotification     NslcmsubschemaNotificationTypes = "NsIdentifierCreationNotification"
	NsIdentifierDeletionNotification     NslcmsubschemaNotificationTypes = "NsIdentifierDeletionNotification"
	NsLcmOperationOccurrenceNotification NslcmsubschemaNotificationTypes = "NsLcmOperationOccurrenceNotification"
)

// Defines values for NslcmsubschemaNsComponentTypes.
const (
	NS  NslcmsubschemaNsComponentTypes = "NS"
	PNF NslcmsubschemaNsComponentTypes = "PNF"
	VNF NslcmsubschemaNsComponentTypes = "VNF"
)

// Defines values for NslcmsubschemaOperationStates.
const (
	NslcmsubschemaOperationStatesCOMPLETED          NslcmsubschemaOperationStates = "COMPLETED"
	NslcmsubschemaOperationStatesFAILED             NslcmsubschemaOperationStates = "FAILED"
	NslcmsubschemaOperationStatesFAILEDTEMP         NslcmsubschemaOperationStates = "FAILED_TEMP"
	NslcmsubschemaOperationStatesPARTIALLYCOMPLETED NslcmsubschemaOperationStates = "PARTIALLY_COMPLETED"
	NslcmsubschemaOperationStatesPROCESSING         NslcmsubschemaOperationStates = "PROCESSING"
	NslcmsubschemaOperationStatesROLLEDBACK         NslcmsubschemaOperationStates = "ROLLED_BACK"
	NslcmsubschemaOperationStatesROLLINGBACK        NslcmsubschemaOperationStates = "ROLLING_BACK"
)

// Defines values for NslcmsubschemaOperationTypes.
const (
	HEAL        NslcmsubschemaOperationTypes = "HEAL"
	INSTANTIATE NslcmsubschemaOperationTypes = "INSTANTIATE"
	SCALE       NslcmsubschemaOperationTypes = "SCALE"
	TERMINATE   NslcmsubschemaOperationTypes = "TERMINATE"
	UPDATE      NslcmsubschemaOperationTypes = "UPDATE"
)

// Defines values for PduInterfacesType.
const (
	Overlay  PduInterfacesType = "overlay"
	Underlay PduInterfacesType = "underlay"
)

// Defines values for ScaleNsRequestScaleType.
const (
	SCALEVNF ScaleNsRequestScaleType = "SCALE_VNF"
)

// Defines values for ScaleNsRequestScaleVnfDataScaleVnfType.
const (
	SCALEIN  ScaleNsRequestScaleVnfDataScaleVnfType = "SCALE_IN"
	SCALEOUT ScaleNsRequestScaleVnfDataScaleVnfType = "SCALE_OUT"
)

// Defines values for SdnBasicPropertiesType.
const (
	SdnBasicPropertiesTypeFloodlight   SdnBasicPropertiesType = "floodlight"
	SdnBasicPropertiesTypeOnos         SdnBasicPropertiesType = "onos"
	SdnBasicPropertiesTypeOpendaylight SdnBasicPropertiesType = "opendaylight"
)

// Defines values for SdnInfoType.
const (
	SdnInfoTypeFloodlight   SdnInfoType = "floodlight"
	SdnInfoTypeOnos         SdnInfoType = "onos"
	SdnInfoTypeOpendaylight SdnInfoType = "opendaylight"
)

// Defines values for UpdateNsRequestUpdateType.
const (
	CHANGEVNFPKG         UpdateNsRequestUpdateType = "CHANGE_VNFPKG"
	MODIFYVNFINFORMATION UpdateNsRequestUpdateType = "MODIFY_VNF_INFORMATION"
	OPERATEVNF           UpdateNsRequestUpdateType = "OPERATE_VNF"
	REMOVEVNF            UpdateNsRequestUpdateType = "REMOVE_VNF"
	VERTICALSCALE        UpdateNsRequestUpdateType = "VERTICAL_SCALE"
)

// Defines values for VimType.
const (
	Aws        VimType = "aws"
	Azure      VimType = "azure"
	Fos        VimType = "fos"
	Opennebula VimType = "opennebula"
	Openstack  VimType = "openstack"
	Openvim    VimType = "openvim"
	Vmware     VimType = "vmware"
)

// Defines values for WimType.
const (
	Dynpac WimType = "dynpac"
	Fake   WimType = "fake"
	Odl    WimType = "odl"
	Onos   WimType = "onos"
	Tapi   WimType = "tapi"
)

// Alarm Alarm Information
type Alarm struct {
	// Id Identifier of the Alarm.
	Uid openapi_types.UUID `json:"_id"`

	// Action Action to be taken.
	Action *string `json:"action,omitempty"`

	// Id Identifier of the Alarm.
	Id openapi_types.UUID `json:"id"`

	// Metric Alarm metric.
	Metric string `json:"metric"`

	// Operation Operation to be applied.
	Operation string `json:"operation"`

	// Status Current status of the alarm.
	Status *string `json:"status,omitempty"`

	// Threshold Threshold value of the Alarm.
	Threshold float32 `json:"threshold"`
}

// AlarmInfoModifications Alarm Information
type AlarmInfoModifications struct {
	// Id UUID
	Id *string `json:"id,omitempty"`

	// IsEnable To enable/disable the alarm.
	IsEnable *string `json:"is_enable,omitempty"`

	// Threshold Threshold value of the Alarm
	Threshold *string `json:"threshold,omitempty"`
}

// ArrayEditionSchema Array edition keys must start with '$'
// and follow the syntax defined in: https://osm.etsi.org/wikipub/index.php/NBI_API_Description
type ArrayEditionSchema map[string]interface{}

// ArrayOfAlarm defines model for ArrayOfAlarm.
type ArrayOfAlarm = []Alarm

// ArrayOfK8sClusterInfo defines model for ArrayOfK8sClusterInfo.
type ArrayOfK8sClusterInfo = []K8sClusterInfo

// ArrayOfK8sRepoInfo defines model for ArrayOfK8sRepoInfo.
type ArrayOfK8sRepoInfo = []K8sRepoInfo

// ArrayOfNetSliceInstance defines model for ArrayOfNetSliceInstance.
type ArrayOfNetSliceInstance = []NetSliceInstance

// ArrayOfNsConfigTemplateInfo defines model for ArrayOfNsConfigTemplateInfo.
type ArrayOfNsConfigTemplateInfo = []NsConfigTemplateInfo

// ArrayOfNsInstance defines model for ArrayOfNsInstance.
type ArrayOfNsInstance = []NsInstance

// ArrayOfNsLcmOpOcc defines model for ArrayOfNsLcmOpOcc.
type ArrayOfNsLcmOpOcc = []NsLcmOpOcc

// ArrayOfNsdInfo defines model for ArrayOfNsdInfo.
type ArrayOfNsdInfo = []NsdInfo

// ArrayOfNsiLcmOpOcc defines model for ArrayOfNsiLcmOpOcc.
type ArrayOfNsiLcmOpOcc = []NsiLcmOpOcc

// ArrayOfNslcmSubscriptionInfo defines model for ArrayOfNslcmSubscriptionInfo.
type ArrayOfNslcmSubscriptionInfo = []NslcmSubscriptionInfo

// ArrayOfNstInfo defines model for ArrayOfNstInfo.
type ArrayOfNstInfo = []NstInfo

// ArrayOfPduInfo defines model for ArrayOfPduInfo.
type ArrayOfPduInfo = []PduInfo

// ArrayOfProjectInfo defines model for ArrayOfProjectInfo.
type ArrayOfProjectInfo = []ProjectInfo

// ArrayOfRoleInfo defines model for ArrayOfRoleInfo.
type ArrayOfRoleInfo = []RoleInfo

// ArrayOfSdnInfo defines model for ArrayOfSdnInfo.
type ArrayOfSdnInfo = []SdnInfo

// ArrayOfTokenInfo defines model for ArrayOfTokenInfo.
type ArrayOfTokenInfo = []TokenInfo

// ArrayOfUserInfo defines model for ArrayOfUserInfo.
type ArrayOfUserInfo = []UserInfo

// ArrayOfVcaInfo defines model for ArrayOfVcaInfo.
type ArrayOfVcaInfo = []VcaInfo

// ArrayOfVimInfo defines model for ArrayOfVimInfo.
type ArrayOfVimInfo = []VimInfo

// ArrayOfVnfInstanceInfo defines model for ArrayOfVnfInstanceInfo.
type ArrayOfVnfInstanceInfo = []VnfInstanceInfo

// ArrayOfVnfPkgInfo defines model for ArrayOfVnfPkgInfo.
type ArrayOfVnfPkgInfo = []VnfPkgInfo

// ArrayOfWimInfo defines model for ArrayOfWimInfo.
type ArrayOfWimInfo = []WimInfo

// AttachDetachProfile defines model for AttachDetachProfile.
type AttachDetachProfile struct {
	AddProfile *[]struct {
		Uid *string `json:"_id,omitempty"`
	} `json:"add_profile,omitempty"`
	RemoveProfile *[]struct {
		Uid *string `json:"_id,omitempty"`
	} `json:"remove_profile,omitempty"`
}

// Authenticationschema defines model for Authenticationschema.
type Authenticationschema struct {
	AuthType    *AuthenticationschemaAuthType `json:"authType,omitempty"`
	ParamsBasic *struct {
		Password *string `json:"password,omitempty"`
		UserName *string `json:"userName,omitempty"`
	} `json:"paramsBasic,omitempty"`
}

// AuthenticationschemaAuthType defines model for Authenticationschema.AuthType.
type AuthenticationschemaAuthType string

// CancelNSLCMOpOccRequest defines model for CancelNSLCMOpOccRequest.
type CancelNSLCMOpOccRequest struct {
	CancelMode *CancelNSLCMOpOccRequestCancelMode `json:"cancelMode,omitempty"`
}

// CancelNSLCMOpOccRequestCancelMode defines model for CancelNSLCMOpOccRequest.CancelMode.
type CancelNSLCMOpOccRequestCancelMode string

// CloneKsu defines model for CloneKsu.
type CloneKsu struct {
	Name    *string `json:"name,omitempty"`
	Profile *struct {
		Uid          *string `json:"_id,omitempty"`
		ProfileType *string `json:"profile_type,omitempty"`
	} `json:"profile,omitempty"`
}

// CreateClusterInfo defines model for CreateClusterInfo.
type CreateClusterInfo struct {
	AppProfiles             *[]string `json:"app_profiles,omitempty"`
	Bootstrap               *bool     `json:"bootstrap,omitempty"`
	Description             *string   `json:"description,omitempty"`
	InfraConfigProfiles     *[]string `json:"infra_config_profiles,omitempty"`
	InfraControllerProfiles *[]string `json:"infra_controller_profiles,omitempty"`
	K8sVersion              *string   `json:"k8s_version,omitempty"`
	Location                *string   `json:"location,omitempty"`
	Name                    *string   `json:"name,omitempty"`
	NodeCount               *int      `json:"node_count,omitempty"`
	NodeSize                *string   `json:"node_size,omitempty"`
	RegionName              *string   `json:"region_name,omitempty"`
	ResourceGroup           *string   `json:"resource_group,omitempty"`
	ResourceProfiles        *[]string `json:"resource_profiles,omitempty"`
	VimAccount              *string   `json:"vim_account,omitempty"`
}

// CreateK8sClusterRequest defines model for CreateK8sClusterRequest.
type CreateK8sClusterRequest struct {
	Cni           *[]string              `json:"cni,omitempty"`
	Credentials   map[string]interface{} `json:"credentials"`
	Description   *string                `json:"description,omitempty"`
	K8sVersion    string                 `json:"k8s_version"`
	Name          string                 `json:"name"`
	Namespace     *string                `json:"namespace,omitempty"`
	Nets          K8sClusterNetList      `json:"nets"`
	SchemaType    *string                `json:"schema_type,omitempty"`
	SchemaVersion *string                `json:"schema_version,omitempty"`
	VimAccount    openapi_types.UUID     `json:"vim_account"`
}

// CreateK8sRepoRequest defines model for CreateK8sRepoRequest.
type CreateK8sRepoRequest struct {
	Description *string     `json:"description,omitempty"`
	Name        string      `json:"name"`
	Type        K8sRepoType `json:"type"`
	Url         string      `json:"url"`
}

// CreateNSinstanceContentResp defines model for CreateNSinstanceContentResp.
type CreateNSinstanceContentResp struct {
	Id        *openapi_types.UUID `json:"id,omitempty"`
	NslcmopId *openapi_types.UUID `json:"nslcmop_id,omitempty"`
}

// CreateNsdInfoRequest defines model for CreateNsdInfoRequest.
type CreateNsdInfoRequest map[string]interface{}

// CreateNsiContentResponse defines model for CreateNsiContentResponse.
type CreateNsiContentResponse struct {
	Id         *openapi_types.UUID `json:"id,omitempty"`
	NsilcmopId *openapi_types.UUID `json:"nsilcmop_id,omitempty"`
}

// CreateNstInfoRequest defines model for CreateNstInfoRequest.
type CreateNstInfoRequest map[string]interface{}

// CreatePduRequest defines model for CreatePduRequest.
type CreatePduRequest struct {
	Description *string       `json:"description,omitempty"`
	Interfaces  PduInterfaces `json:"interfaces"`
	Name        string        `json:"name"`
	Shared      *bool         `json:"shared,omitempty"`
	Type        string        `json:"type"`
	VimAccounts *[]string     `json:"vim_accounts,omitempty"`
	Vims        *[]string     `json:"vims,omitempty"`
}

// CreateProjectRequest defines model for CreateProjectRequest.
type CreateProjectRequest struct {
	Admin  *bool       `json:"admin,omitempty"`
	Name   string      `json:"name"`
	Quotas *QuotasInfo `json:"quotas,omitempty"`
}

// CreateRoleRequest defines model for CreateRoleRequest.
type CreateRoleRequest struct {
	Name string `json:"name"`

	// Permissions Permissions keys must follow the syntax 'main_topic[:subtopic[:id[:component|action|etc]]]'
	// Permission values are either true or false
	Permissions *PermissionsInfo `json:"permissions,omitempty"`
}

// CreateSdnRequest defines model for CreateSdnRequest.
type CreateSdnRequest = SdnBasicProperties

// CreateTokenRequest defines model for CreateTokenRequest.
type CreateTokenRequest struct {
	Password  string  `json:"password"`
	ProjectId *string `json:"project_id,omitempty"`
	Username  string  `json:"username"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Password            string               `json:"password"`
	ProjectRoleMappings *ProjectRoleMappings `json:"project_role_mappings,omitempty"`
	Projects            *[]string            `json:"projects,omitempty"`
	Username            string               `json:"username"`
}

// CreateVcaRequest defines model for CreateVcaRequest.
type CreateVcaRequest struct {
	Cacert         string                  `json:"cacert"`
	Description    *string                 `json:"description,omitempty"`
	Endpoints      string                  `json:"endpoints"`
	K8sCloud       string                  `json:"k8s-cloud"`
	K8sCredentials string                  `json:"k8s-credentials"`
	LxdCloud       string                  `json:"lxd-cloud"`
	LxdCredentials string                  `json:"lxd-credentials"`
	ModelConfig    *map[string]interface{} `json:"model-config,omitempty"`
	Name           string                  `json:"name"`
	SchemaType     *string                 `json:"schema_type,omitempty"`
	SchemaVersion  *string                 `json:"schema_version,omitempty"`
	Secret         string                  `json:"secret"`
	User           string                  `json:"user"`
}

// CreateVimRequest defines model for CreateVimRequest.
type CreateVimRequest struct {
	Config           *map[string]interface{} `json:"config,omitempty"`
	Creds            *string                 `json:"creds,omitempty"`
	Datacenter       *string                 `json:"datacenter,omitempty"`
	Description      *string                 `json:"description,omitempty"`
	Name             string                  `json:"name"`
	PrometheusConfig *map[string]interface{} `json:"prometheus-config,omitempty"`
	Resources        *map[string]interface{} `json:"resources,omitempty"`
	SchemaType       *string                 `json:"schema_type,omitempty"`
	SchemaVersion    *string                 `json:"schema_version,omitempty"`
	Vca              *openapi_types.UUID     `json:"vca,omitempty"`
	Vim              *string                 `json:"vim,omitempty"`
	VimPassword      string                  `json:"vim_password"`
	VimTenantName    string                  `json:"vim_tenant_name"`
	VimType          VimType                 `json:"vim_type"`
	VimUrl           string                  `json:"vim_url"`
	VimUser          string                  `json:"vim_user"`
}

// CreateVnfPkgInfoRequest defines model for CreateVnfPkgInfoRequest.
type CreateVnfPkgInfoRequest map[string]interface{}

// CreateWimRequest defines model for CreateWimRequest.
type CreateWimRequest struct {
	Config        *map[string]interface{} `json:"config,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	Name          string                  `json:"name"`
	Password      *string                 `json:"password,omitempty"`
	SchemaType    *string                 `json:"schema_type,omitempty"`
	SchemaVersion *string                 `json:"schema_version,omitempty"`
	User          *string                 `json:"user,omitempty"`
	Wim           *string                 `json:"wim,omitempty"`
	WimType       WimType                 `json:"wim_type"`
	WimUrl        string                  `json:"wim_url"`
}

// DeleteMultipleKsu defines model for DeleteMultipleKsu.
type DeleteMultipleKsu struct {
	Ksus *[]struct {
		Uid *string `json:"_id,omitempty"`
	} `json:"ksus,omitempty"`
}

// EditK8sClusterRequest defines model for EditK8sClusterRequest.
type EditK8sClusterRequest struct {
	Cni         *[]string               `json:"cni,omitempty"`
	Credentials *map[string]interface{} `json:"credentials,omitempty"`
	Description *string                 `json:"description,omitempty"`
	K8sVersion  *string                 `json:"k8s_version,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Namespace   *string                 `json:"namespace,omitempty"`
	Nets        *K8sClusterNetList      `json:"nets,omitempty"`
	VimAccount  *openapi_types.UUID     `json:"vim_account,omitempty"`
}

// EditPduRequest defines model for EditPduRequest.
type EditPduRequest struct {
	Description *string        `json:"description,omitempty"`
	Interfaces  *PduInterfaces `json:"interfaces,omitempty"`
	Name        *string        `json:"name,omitempty"`
	Shared      *bool          `json:"shared,omitempty"`
	Type        *string        `json:"type,omitempty"`
	VimAccounts *[]string      `json:"vim_accounts,omitempty"`
	Vims        *[]string      `json:"vims,omitempty"`
}

// EditPermissionsInfo Permissions keys must follow the syntax 'main_topic[:subtopic[:id[:component|action|etc]]]'
// Permission values are either true, false, or null
type EditPermissionsInfo map[string]*bool

// EditProjectRequest defines model for EditProjectRequest.
type EditProjectRequest struct {
	Admin  *bool           `json:"admin,omitempty"`
	Name   *string         `json:"name,omitempty"`
	Quotas *EditQuotasInfo `json:"quotas,omitempty"`
}

// EditQuotasInfo defines model for EditQuotasInfo.
type EditQuotasInfo struct {
	K8sclusters    *int `json:"k8sclusters"`
	K8srepos       *int `json:"k8srepos"`
	NsInstances    *int `json:"ns_instances"`
	Nsds           *int `json:"nsds"`
	Osmrepos       *int `json:"osmrepos"`
	Pduds          *int `json:"pduds"`
	SdnControllers *int `json:"sdn_controllers"`
	SliceInstances *int `json:"slice_instances"`
	SliceTemplates *int `json:"slice_templates"`
	Vca            *int `json:"vca"`
	VimAccounts    *int `json:"vim_accounts"`
	Vnfds          *int `json:"vnfds"`
	WimAccounts    *int `json:"wim_accounts"`
}

// EditRoleRequest defines model for EditRoleRequest.
type EditRoleRequest struct {
	Name *string `json:"name,omitempty"`

	// Permissions Permissions keys must follow the syntax 'main_topic[:subtopic[:id[:component|action|etc]]]'
	// Permission values are either true, false, or null
	Permissions *EditPermissionsInfo `json:"permissions,omitempty"`
}

// EditSdnRequest defines model for EditSdnRequest.
type EditSdnRequest = SdnBasicProperties

// EditUserRequest defines model for EditUserRequest.
type EditUserRequest struct {
	AddProjectRoleMappings    *ProjectRoleMappings      `json:"add_project_role_mappings,omitempty"`
	OldPassword               *string                   `json:"old_password,omitempty"`
	Password                  *string                   `json:"password,omitempty"`
	ProjectRoleMappings       *ProjectRoleMappings      `json:"project_role_mappings,omitempty"`
	Projects                  *EditUserRequest_Projects `json:"projects,omitempty"`
	RemoveProjectRoleMappings *ProjectRoleMappingsOpt   `json:"remove_project_role_mappings,omitempty"`
	Renew                     *bool                     `json:"renew,omitempty"`
	SystemAdminId             *openapi_types.UUID       `json:"system_admin_id,omitempty"`
	Unlock                    *bool                     `json:"unlock,omitempty"`
	Username                  *string                   `json:"username,omitempty"`
}

// EditUserRequest_Projects defines model for EditUserRequest.Projects.
type EditUserRequest_Projects struct {
	union json.RawMessage
}

// EditVcaRequest defines model for EditVcaRequest.
type EditVcaRequest struct {
	Cacert         *string                 `json:"cacert,omitempty"`
	Description    *string                 `json:"description,omitempty"`
	Endpoints      *string                 `json:"endpoints,omitempty"`
	K8sCloud       *string                 `json:"k8s-cloud,omitempty"`
	K8sCredentials *string                 `json:"k8s-credentials,omitempty"`
	LxdCloud       *string                 `json:"lxd-cloud,omitempty"`
	LxdCredentials *string                 `json:"lxd-credentials,omitempty"`
	ModelConfig    *map[string]interface{} `json:"model-config,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	Secret         *string                 `json:"secret,omitempty"`
	User           *string                 `json:"user,omitempty"`
}

// EditVimRequest defines model for EditVimRequest.
type EditVimRequest struct {
	Config           *map[string]interface{} `json:"config,omitempty"`
	Datacenter       *string                 `json:"datacenter,omitempty"`
	Description      *string                 `json:"description,omitempty"`
	Name             *string                 `json:"name,omitempty"`
	PrometheusConfig *map[string]interface{} `json:"prometheus-config,omitempty"`
	Vca              *openapi_types.UUID     `json:"vca,omitempty"`
	Vim              *string                 `json:"vim,omitempty"`
	VimPassword      *string                 `json:"vim_password,omitempty"`
	VimTenantName    *string                 `json:"vim_tenant_name,omitempty"`
	VimType          *VimType                `json:"vim_type,omitempty"`
	VimUrl           *string                 `json:"vim_url,omitempty"`
	VimUser          *string                 `json:"vim_user,omitempty"`
}

// EditWimRequest defines model for EditWimRequest.
type EditWimRequest struct {
	Config      *map[string]interface{} `json:"config,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Password    *string                 `json:"password,omitempty"`
	User        *string                 `json:"user,omitempty"`
	Wim         *string                 `json:"wim,omitempty"`
	WimType     *string                 `json:"wim_type,omitempty"`
	WimUrl      *string                 `json:"wim_url,omitempty"`
}

// HealNsRequest This type represents request parameters for the "Heal NS" operation. This operation supports the healing of an NS instance by healing one or more of the VNF that are part of this NS.
type HealNsRequest struct {
	// HealVnfData List of VNF to be healed, together with the information needed to heal each.
	HealVnfData []HealVnfData `json:"healVnfData"`

	// TimeoutNsHeal timeout for the heal operation in seconds
	TimeoutNsHeal *int `json:"timeout_ns_heal,omitempty"`
}

// HealVduData This type represents the information to heal a VDU that is part of a VNF.
type HealVduData struct {
	// CountIndex Indicates the VDU number when the VDU is part of a scale-group.
	CountIndex *int `json:"count-index,omitempty"`

	// RunDay1 Flag to indicate whether or not to run day1 primitives for the VDU (default: false).
	RunDay1 *bool `json:"run-day1,omitempty"`

	// VduId Identifies the VDU id, part of the VNF, requiring a healing action.
	VduId openapi_types.UUID `json:"vdu-id"`
}

// HealVnfData This type represents the information to heal a VNF that is part of an NS.
type HealVnfData struct {
	// AdditionalParams Additional parameters passed by the NFVO as input to the healing process, specific to the VNF being healed.
	AdditionalParams *struct {
		// RunDay1 Flag to indicate whether or not to run day1 primitives for the VNF (default: false).
		RunDay1 *bool `json:"run-day1,omitempty"`

		// Vdu List of VDU to be healed, together with the information needed to heal each.
		Vdu *[]HealVduData `json:"vdu,omitempty"`
	} `json:"additionalParams,omitempty"`

	// Cause Indicates the reason why a healing procedure is required.
	Cause *string `json:"cause,omitempty"`

	// VnfInstanceId Identifies the VNF instance, part of the NS, requiring a healing action.
	VnfInstanceId openapi_types.UUID `json:"vnfInstanceId"`
}

// InstantiateNsRequest defines model for InstantiateNsRequest.
type InstantiateNsRequest struct {
	AdditionalParamsForNs  *map[string]interface{} `json:"additionalParamsForNs,omitempty"`
	AdditionalParamsForVnf *[]struct {
		AdditionalParams       *map[string]interface{} `json:"additionalParams,omitempty"`
		AdditionalParamsForKdu *[]struct {
			AdditionalParams *map[string]interface{} `json:"additionalParams,omitempty"`

			// K8sNamespace use this namespace for this KDU
			K8sNamespace *string `json:"k8s-namespace,omitempty"`
			KduModel     *string `json:"kdu_model,omitempty"`
			KduName      string  `json:"kdu_name"`
		} `json:"additionalParamsForKdu,omitempty"`
		AdditionalParamsForVdu *[]struct {
			AdditionalParams map[string]interface{} `json:"additionalParams"`
			VduId            string                 `json:"vdu_id"`
		} `json:"additionalParamsForVdu,omitempty"`

		// K8sNamespace use this namespace for all the KDU deployed in this VNF
		// (if any). By default it is used the id of the project
		K8sNamespace   *string `json:"k8s-namespace,omitempty"`
		MemberVnfIndex string  `json:"member-vnf-index"`
	} `json:"additionalParamsForVnf,omitempty"`
	K8sNamespace       *string             `json:"k8s-namespace,omitempty"`
	LcmOperationType   *string             `json:"lcmOperationType,omitempty"`
	NetsliceInstanceId *openapi_types.UUID `json:"netsliceInstanceId,omitempty"`

	// NsConfigTemplateId Identifier of the Ns config template which is selected
	// while instantiation
	NsConfigTemplateId *openapi_types.UUID `json:"nsConfigTemplateId,omitempty"`
	NsDescription      *string             `json:"nsDescription"`
	NsInstanceId       *openapi_types.UUID `json:"nsInstanceId,omitempty"`

	// NsName Human-readable name of the NS instance to be created.
	NsName string `json:"nsName"`

	// NsdId Identifier of the NSD that defines the NS instance to be created.
	NsdId                openapi_types.UUID      `json:"nsdId"`
	NsrId                *openapi_types.UUID     `json:"nsr_id,omitempty"`
	PlacementConstraints *map[string]interface{} `json:"placement-constraints,omitempty"`

	// PlacementEngine To compute automatically the target VIM for each VNF based on
	// constrains, e.g. latency. Currently only 'PLA' is supported
	PlacementEngine *string   `json:"placement-engine,omitempty"`
	SshKeys         *[]string `json:"ssh_keys,omitempty"`
	TimeoutNsDeploy *int      `json:"timeout_ns_deploy,omitempty"`
	VduImage        *string   `json:"vduImage,omitempty"`

	// VimAccountId Identifier of the VIM Account where the NS instance shall be created.
	VimAccountId openapi_types.UUID `json:"vimAccountId"`
	Vld          *[]struct {
		IpProfile       *map[string]interface{} `json:"ip-profile,omitempty"`
		Name            string                  `json:"name"`
		NsNet           *map[string]interface{} `json:"ns-net,omitempty"`
		ProviderNetwork *struct {
			PhysicalNetwork *string `json:"physical-network,omitempty"`
			SegmentationId  *string `json:"segmentation-id,omitempty"`
		} `json:"provider-network,omitempty"`
		VimNetworkId           *InstantiateNsRequest_Vld_VimNetworkId   `json:"vim-network-id,omitempty"`
		VimNetworkName         *InstantiateNsRequest_Vld_VimNetworkName `json:"vim-network-name,omitempty"`
		VnfdConnectionPointRef *[]struct {
			IpAddress              *string `json:"ip-address,omitempty"`
			MemberVnfIndexRef      string  `json:"member-vnf-index-ref"`
			VnfdConnectionPointRef string  `json:"vnfd-connection-point-ref"`
		} `json:"vnfd-connection-point-ref,omitempty"`
		WimAccountId *InstantiateNsRequest_Vld_WimAccountId `json:"wimAccountId"`
	} `json:"vld,omitempty"`
	Vnf *[]struct {
		InternalVld *[]struct {
			InternalConnectionPoint *[]struct {
				IdRef     string  `json:"id-ref"`
				IpAddress *string `json:"ip-address,omitempty"`
			} `json:"internal-connection-point,omitempty"`
			IpProfile *struct {
				DhcpParams *struct {
					Count        *int    `json:"count,omitempty"`
					Enabled      *bool   `json:"enabled,omitempty"`
					StartAddress *string `json:"start-address,omitempty"`
				} `json:"dhcp-params"`
				DnsServer *[]struct {
					Address string `json:"address"`
				} `json:"dns-server"`
				GatewayAddress *string                                               `json:"gateway-address"`
				IpVersion      *InstantiateNsRequestVnfInternalVldIpProfileIpVersion `json:"ip-version,omitempty"`
				SubnetAddress  *string                                               `json:"subnet-address"`
			} `json:"ip-profile,omitempty"`
			Name            string `json:"name"`
			ProviderNetwork *struct {
				NetworkType     *string `json:"network-type,omitempty"`
				PhysicalNetwork *string `json:"physical-network,omitempty"`

				// SdnPorts connect additional ports to the created underlay SDN connectivity.
				// Normally for external connectivy.
				SdnPorts       *[]InstantiateNsRequest_Vnf_InternalVld_ProviderNetwork_SdnPorts_Item `json:"sdn-ports,omitempty"`
				SegmentationId *string                                                               `json:"segmentation-id,omitempty"`
			} `json:"provider-network,omitempty"`
			VimNetworkId   *string `json:"vim-network-id,omitempty"`
			VimNetworkName *string `json:"vim-network-name,omitempty"`
		} `json:"internal-vld,omitempty"`
		MemberVnfIndex string `json:"member-vnf-index"`
		Vdu            *[]struct {
			Id        string `json:"id"`
			Interface *[]struct {
				FloatingIpRequired *bool   `json:"floating-ip-required,omitempty"`
				IpAddress          *string `json:"ip-address,omitempty"`
				MacAddress         *string `json:"mac-address,omitempty"`
				Name               string  `json:"name"`
			} `json:"interface,omitempty"`
			Volume *[]struct {
				Name        string `json:"name"`
				VimVolumeId string `json:"vim-volume-id"`
			} `json:"volume,omitempty"`
		} `json:"vdu,omitempty"`
		VimAccountId *openapi_types.UUID `json:"vimAccountId,omitempty"`
	} `json:"vnf,omitempty"`
	WimAccountId *InstantiateNsRequest_WimAccountId `json:"wimAccountId"`
}

// InstantiateNsRequestVldVimNetworkId0 defines model for .
type InstantiateNsRequestVldVimNetworkId0 = string

// InstantiateNsRequestVldVimNetworkId1 defines model for .
type InstantiateNsRequestVldVimNetworkId1 = map[string]interface{}

// InstantiateNsRequest_Vld_VimNetworkId defines model for InstantiateNsRequest.Vld.VimNetworkId.
type InstantiateNsRequest_Vld_VimNetworkId struct {
	union json.RawMessage
}

// InstantiateNsRequestVldVimNetworkName0 defines model for .
type InstantiateNsRequestVldVimNetworkName0 = string

// InstantiateNsRequestVldVimNetworkName1 defines model for .
type InstantiateNsRequestVldVimNetworkName1 = map[string]interface{}

// InstantiateNsRequest_Vld_VimNetworkName defines model for InstantiateNsRequest.Vld.VimNetworkName.
type InstantiateNsRequest_Vld_VimNetworkName struct {
	union json.RawMessage
}

// InstantiateNsRequestVldWimAccountId0 defines model for .
type InstantiateNsRequestVldWimAccountId0 = string

// InstantiateNsRequestVldWimAccountId1 defines model for .
type InstantiateNsRequestVldWimAccountId1 = bool

// InstantiateNsRequest_Vld_WimAccountId defines model for InstantiateNsRequest.Vld.WimAccountId.
type InstantiateNsRequest_Vld_WimAccountId struct {
	union json.RawMessage
}

// InstantiateNsRequestVnfInternalVldIpProfileIpVersion defines model for InstantiateNsRequest.Vnf.InternalVld.IpProfile.IpVersion.
type InstantiateNsRequestVnfInternalVldIpProfileIpVersion string

// InstantiateNsRequest_Vnf_InternalVld_ProviderNetwork_SdnPorts_Item defines model for InstantiateNsRequest.Vnf.InternalVld.ProviderNetwork.SdnPorts.Item.
type InstantiateNsRequest_Vnf_InternalVld_ProviderNetwork_SdnPorts_Item struct {
	MacAddress           *string                `json:"mac_address,omitempty"`
	SwitchId             string                 `json:"switch_id"`
	SwitchPort           string                 `json:"switch_port"`
	Vlan                 *int                   `json:"vlan,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// InstantiateNsRequestWimAccountId0 defines model for .
type InstantiateNsRequestWimAccountId0 = string

// InstantiateNsRequestWimAccountId1 defines model for .
type InstantiateNsRequestWimAccountId1 = bool

// InstantiateNsRequest_WimAccountId defines model for InstantiateNsRequest.WimAccountId.
type InstantiateNsRequest_WimAccountId struct {
	union json.RawMessage
}

// InstantiateNsiRequest defines model for InstantiateNsiRequest.
type InstantiateNsiRequest struct {
	AdditionalParamsForNsi *map[string]interface{} `json:"additionalParamsForNsi,omitempty"`
	LcmOperationType       *string                 `json:"lcmOperationType,omitempty"`
	NetsliceSubnet         *[]struct {
		AdditionalParamsForNs  *map[string]interface{} `json:"additionalParamsForNs,omitempty"`
		AdditionalParamsForVnf *[]struct {
			AdditionalParams       *map[string]interface{} `json:"additionalParams,omitempty"`
			AdditionalParamsForKdu *[]struct {
				AdditionalParams *map[string]interface{} `json:"additionalParams,omitempty"`

				// K8sNamespace use this namespace for this KDU
				K8sNamespace *string `json:"k8s-namespace,omitempty"`
				KduModel     *string `json:"kdu_model,omitempty"`
				KduName      string  `json:"kdu_name"`
			} `json:"additionalParamsForKdu,omitempty"`
			AdditionalParamsForVdu *[]struct {
				AdditionalParams map[string]interface{} `json:"additionalParams"`
				VduId            string                 `json:"vdu_id"`
			} `json:"additionalParamsForVdu,omitempty"`

			// K8sNamespace use this namespace for all the KDU deployed in this VNF
			// (if any). By default it is used the id of the project
			K8sNamespace   *string `json:"k8s-namespace,omitempty"`
			MemberVnfIndex string  `json:"member-vnf-index"`
		} `json:"additionalParamsForVnf,omitempty"`
		Id                 *string             `json:"id,omitempty"`
		LcmOperationType   *string             `json:"lcmOperationType,omitempty"`
		NetsliceInstanceId *openapi_types.UUID `json:"netsliceInstanceId,omitempty"`
		NsDescription      *string             `json:"nsDescription"`
		NsInstanceId       *openapi_types.UUID `json:"nsInstanceId,omitempty"`
		NsName             *string             `json:"nsName,omitempty"`
		NsdId              *openapi_types.UUID `json:"nsdId,omitempty"`
		NsrId              *openapi_types.UUID `json:"nsr_id,omitempty"`
		SshKeys            *[]string           `json:"ssh_keys,omitempty"`
		VduImage           *string             `json:"vduImage,omitempty"`
		VimAccountId       *openapi_types.UUID `json:"vimAccountId,omitempty"`
		Vld                *[]struct {
			IpProfile       *map[string]interface{} `json:"ip-profile,omitempty"`
			Name            string                  `json:"name"`
			NsNet           *map[string]interface{} `json:"ns-net,omitempty"`
			ProviderNetwork *struct {
				PhysicalNetwork *string `json:"physical-network,omitempty"`
				SegmentationId  *string `json:"segmentation-id,omitempty"`
			} `json:"provider-network,omitempty"`
			VimNetworkId           *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId   `json:"vim-network-id,omitempty"`
			VimNetworkName         *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName `json:"vim-network-name,omitempty"`
			VnfdConnectionPointRef *[]struct {
				IpAddress              *string `json:"ip-address,omitempty"`
				MemberVnfIndexRef      string  `json:"member-vnf-index-ref"`
				VnfdConnectionPointRef string  `json:"vnfd-connection-point-ref"`
			} `json:"vnfd-connection-point-ref,omitempty"`
			WimAccountId *InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId `json:"wimAccountId"`
		} `json:"vld,omitempty"`
		Vnf *[]struct {
			InternalVld *[]struct {
				InternalConnectionPoint *[]struct {
					IdRef     string  `json:"id-ref"`
					IpAddress *string `json:"ip-address,omitempty"`
				} `json:"internal-connection-point,omitempty"`
				IpProfile *struct {
					DhcpParams *struct {
						Count        *int    `json:"count,omitempty"`
						Enabled      *bool   `json:"enabled,omitempty"`
						StartAddress *string `json:"start-address,omitempty"`
					} `json:"dhcp-params"`
					DnsServer *[]struct {
						Address string `json:"address"`
					} `json:"dns-server"`
					GatewayAddress *string                                                              `json:"gateway-address"`
					IpVersion      *InstantiateNsiRequestNetsliceSubnetVnfInternalVldIpProfileIpVersion `json:"ip-version,omitempty"`
					SubnetAddress  *string                                                              `json:"subnet-address"`
				} `json:"ip-profile,omitempty"`
				Name            string `json:"name"`
				ProviderNetwork *struct {
					PhysicalNetwork *string `json:"physical-network,omitempty"`
					SegmentationId  *string `json:"segmentation-id,omitempty"`
				} `json:"provider-network,omitempty"`
				VimNetworkId   *string `json:"vim-network-id,omitempty"`
				VimNetworkName *string `json:"vim-network-name,omitempty"`
			} `json:"internal-vld,omitempty"`
			MemberVnfIndex string `json:"member-vnf-index"`
			Vdu            *[]struct {
				Id        string `json:"id"`
				Interface *[]struct {
					FloatingIpRequired *bool   `json:"floating-ip-required,omitempty"`
					IpAddress          *string `json:"ip-address,omitempty"`
					MacAddress         *string `json:"mac-address,omitempty"`
					Name               string  `json:"name"`
				} `json:"interface,omitempty"`
				Volume *[]struct {
					Name        string `json:"name"`
					VimVolumeId string `json:"vim-volume-id"`
				} `json:"volume,omitempty"`
			} `json:"vdu,omitempty"`
			VimAccountId *openapi_types.UUID `json:"vimAccountId,omitempty"`
		} `json:"vnf,omitempty"`
		WimAccountId *InstantiateNsiRequest_NetsliceSubnet_WimAccountId `json:"wimAccountId"`
	} `json:"netslice-subnet,omitempty"`
	NetsliceVld *[]struct {
		IpProfile      *map[string]interface{}                           `json:"ip-profile,omitempty"`
		Name           string                                            `json:"name"`
		VimNetworkId   *InstantiateNsiRequest_NetsliceVld_VimNetworkId   `json:"vim-network-id,omitempty"`
		VimNetworkName *InstantiateNsiRequest_NetsliceVld_VimNetworkName `json:"vim-network-name,omitempty"`
	} `json:"netslice-vld,omitempty"`
	NetsliceInstanceId *openapi_types.UUID `json:"netsliceInstanceId,omitempty"`
	NsiDescription     *string             `json:"nsiDescription"`

	// NsiName Human-readable name of the NetSlice instance to be created.
	NsiName string              `json:"nsiName"`
	NsiId   *openapi_types.UUID `json:"nsi_id,omitempty"`

	// NstId Identifier of the NST that defines the NetSlice instance to be created.
	NstId   openapi_types.UUID `json:"nstId"`
	SshKeys *string            `json:"ssh_keys,omitempty"`

	// VimAccountId Identifier of the VIM Account where the NetSlice instance shall be created.
	VimAccountId openapi_types.UUID `json:"vimAccountId"`
}

// InstantiateNsiRequestNetsliceSubnetVldVimNetworkId0 defines model for .
type InstantiateNsiRequestNetsliceSubnetVldVimNetworkId0 = string

// InstantiateNsiRequestNetsliceSubnetVldVimNetworkId1 defines model for .
type InstantiateNsiRequestNetsliceSubnetVldVimNetworkId1 = map[string]interface{}

// InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId defines model for InstantiateNsiRequest.NetsliceSubnet.Vld.VimNetworkId.
type InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId struct {
	union json.RawMessage
}

// InstantiateNsiRequestNetsliceSubnetVldVimNetworkName0 defines model for .
type InstantiateNsiRequestNetsliceSubnetVldVimNetworkName0 = string

// InstantiateNsiRequestNetsliceSubnetVldVimNetworkName1 defines model for .
type InstantiateNsiRequestNetsliceSubnetVldVimNetworkName1 = map[string]interface{}

// InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName defines model for InstantiateNsiRequest.NetsliceSubnet.Vld.VimNetworkName.
type InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName struct {
	union json.RawMessage
}

// InstantiateNsiRequestNetsliceSubnetVldWimAccountId0 defines model for .
type InstantiateNsiRequestNetsliceSubnetVldWimAccountId0 = string

// InstantiateNsiRequestNetsliceSubnetVldWimAccountId1 defines model for .
type InstantiateNsiRequestNetsliceSubnetVldWimAccountId1 = bool

// InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId defines model for InstantiateNsiRequest.NetsliceSubnet.Vld.WimAccountId.
type InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId struct {
	union json.RawMessage
}

// InstantiateNsiRequestNetsliceSubnetVnfInternalVldIpProfileIpVersion defines model for InstantiateNsiRequest.NetsliceSubnet.Vnf.InternalVld.IpProfile.IpVersion.
type InstantiateNsiRequestNetsliceSubnetVnfInternalVldIpProfileIpVersion string

// InstantiateNsiRequestNetsliceSubnetWimAccountId0 defines model for .
type InstantiateNsiRequestNetsliceSubnetWimAccountId0 = string

// InstantiateNsiRequestNetsliceSubnetWimAccountId1 defines model for .
type InstantiateNsiRequestNetsliceSubnetWimAccountId1 = bool

// InstantiateNsiRequest_NetsliceSubnet_WimAccountId defines model for InstantiateNsiRequest.NetsliceSubnet.WimAccountId.
type InstantiateNsiRequest_NetsliceSubnet_WimAccountId struct {
	union json.RawMessage
}

// InstantiateNsiRequestNetsliceVldVimNetworkId0 defines model for .
type InstantiateNsiRequestNetsliceVldVimNetworkId0 = string

// InstantiateNsiRequestNetsliceVldVimNetworkId1 defines model for .
type InstantiateNsiRequestNetsliceVldVimNetworkId1 = map[string]interface{}

// InstantiateNsiRequest_NetsliceVld_VimNetworkId defines model for InstantiateNsiRequest.NetsliceVld.VimNetworkId.
type InstantiateNsiRequest_NetsliceVld_VimNetworkId struct {
	union json.RawMessage
}

// InstantiateNsiRequestNetsliceVldVimNetworkName0 defines model for .
type InstantiateNsiRequestNetsliceVldVimNetworkName0 = string

// InstantiateNsiRequestNetsliceVldVimNetworkName1 defines model for .
type InstantiateNsiRequestNetsliceVldVimNetworkName1 = map[string]interface{}

// InstantiateNsiRequest_NetsliceVld_VimNetworkName defines model for InstantiateNsiRequest.NetsliceVld.VimNetworkName.
type InstantiateNsiRequest_NetsliceVld_VimNetworkName struct {
	union json.RawMessage
}

// K8sClusterDeploymentMethods defines model for K8sClusterDeploymentMethods.
type K8sClusterDeploymentMethods struct {
	HelmChartV3 *bool `json:"helm-chart-v3,omitempty"`
	JujuBundle  *bool `json:"juju-bundle,omitempty"`
}

// K8sClusterInfo defines model for K8sClusterInfo.
type K8sClusterInfo struct {
	Uid                *openapi_types.UUID          `json:"_id,omitempty"`
	Cni               *[]string                    `json:"cni,omitempty"`
	Credentials       *map[string]interface{}      `json:"credentials,omitempty"`
	DeploymentMethods *K8sClusterDeploymentMethods `json:"deployment_methods,omitempty"`
	Description       *string                      `json:"description,omitempty"`
	K8sVersion        *string                      `json:"k8s_version,omitempty"`
	Name              *string                      `json:"name,omitempty"`
	Namespace         *string                      `json:"namespace,omitempty"`
	Nets              *K8sClusterNetList           `json:"nets,omitempty"`
	SchemaType        *string                      `json:"schema_type,omitempty"`
	SchemaVersion     *string                      `json:"schema_version,omitempty"`
	VimAccount        *openapi_types.UUID          `json:"vim_account,omitempty"`
}

// K8sClusterNetList defines model for K8sClusterNetList.
type K8sClusterNetList = []map[string]interface{}

// K8sRepoInfo defines model for K8sRepoInfo.
type K8sRepoInfo struct {
	Uid *openapi_types.UUID `json:"_id,omitempty"`

	// CaFile verify certificates of HTTPS-enabled servers using this CA bundle
	CaFile *string `json:"ca-file,omitempty"`

	// CertFile identify HTTPS client using this SSL certificate file
	CertFile    *string `json:"cert-file,omitempty"`
	Description *string `json:"description,omitempty"`

	// KeyFile identify HTTPS client using this SSL key file
	KeyFile *string `json:"key-file,omitempty"`
	Name    string  `json:"name"`

	// Oci Flag to indicate whether or not it is an OCI-enabled repo (default: false)
	Oci *bool `json:"oci,omitempty"`

	// Password repository password
	Password *string `json:"password,omitempty"`

	// SkipTlsVerify skip tls certificate checks for the repository
	SkipTlsVerify *bool       `json:"skip-tls-verify,omitempty"`
	Type          K8sRepoType `json:"type"`
	Url           string      `json:"url"`

	// Username repository username
	Username *string `json:"username,omitempty"`
}

// K8sRepoType defines model for K8sRepoType.
type K8sRepoType string

// KeyValuePairs defines model for KeyValuePairs.
type KeyValuePairs map[string]interface{}

// Ksu defines model for Ksu.
type Ksu struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Oka         *[]struct {
		Uid             *string                 `json:"_id,omitempty"`
		SwCatalogPath  *string                 `json:"sw_catalog_path,omitempty"`
		Transformation *map[string]interface{} `json:"transformation,omitempty"`
	} `json:"oka,omitempty"`
	Profile *struct {
		Id          *string `json:"id,omitempty"`
		ProfileType *string `json:"profile_type,omitempty"`
	} `json:"profile,omitempty"`
}

// MoveKsu defines model for MoveKsu.
type MoveKsu struct {
	Profile *struct {
		Uid          *string `json:"_id,omitempty"`
		ProfileType *string `json:"profile_type,omitempty"`
	} `json:"profile,omitempty"`
}

// MultiNsTerminateRequest defines model for MultiNsTerminateRequest.
type MultiNsTerminateRequest struct {
	// Autoremove remove network service if termination end without error
	Autoremove *bool `json:"autoremove,omitempty"`

	// NsIds List of Ns instance Ids to be deleted
	NsIds *[]openapi_types.UUID `json:"ns_ids,omitempty"`
}

// MultipleKsu defines model for MultipleKsu.
type MultipleKsu struct {
	Ksus *[]struct {
		Description *string `json:"description,omitempty"`
		Name        *string `json:"name,omitempty"`
		Oka         *[]struct {
			Uid             *string                 `json:"_id,omitempty"`
			SwCatalogPath  *string                 `json:"sw_catalog_path,omitempty"`
			Transformation *map[string]interface{} `json:"transformation,omitempty"`
		} `json:"oka,omitempty"`
		Profile *struct {
			Uid          *string `json:"_id,omitempty"`
			ProfileType *string `json:"profile_type,omitempty"`
		} `json:"profile,omitempty"`
	} `json:"ksus,omitempty"`
}

// NSinstanceActionRequest defines model for NSinstanceActionRequest.
type NSinstanceActionRequest struct {
	// KduName provide if the target action is for a kdu
	KduName *string `json:"kdu_name,omitempty"`

	// MemberVnfIndex provide if the target action is for a vnf, vdu or kdu
	MemberVnfIndex *string `json:"member_vnf_index,omitempty"`

	// Primitive name of the primitive in the 'config-descriptor'. If the target is
	// a kdu it can be also 'status', 'rollback' or 'upgrade'
	Primitive       string        `json:"primitive"`
	PrimitiveParams KeyValuePairs `json:"primitive_params"`

	// TimeoutNsAction timeout for the day 1/2 operation
	TimeoutNsAction *int `json:"timeout_ns_action,omitempty"`
	VduCountIndex   *int `json:"vdu_count_index,omitempty"`

	// VduId provide if the target action is for a vdu
	VduId *string `json:"vdu_id,omitempty"`
}

// NSinstanceMigrateRequest This type represents request parameters for the "Migrate" operation. This operation supports the migration of an NS instance by migrating one or more of the VDUs that are part of this NS.
type NSinstanceMigrateRequest struct {
	MigrateToHost *string `json:"migrateToHost,omitempty"`
	Vdu           *struct {
		VduCountIndex *int   `json:"vduCountIndex,omitempty"`
		VduId         string `json:"vduId"`
	} `json:"vdu,omitempty"`
	VnfInstanceId string `json:"vnfInstanceId"`
}

// NetSliceInstance NetSlice Instance Information
// Only generic fields (_id, id, name, description) are described
// For a full specification of the NetSlice Instance see:
// http://osm-download.etsi.org/ftp/osm-doc/nsi.html
type NetSliceInstance struct {
	// Id Identifier of the NetSlice instance.
	Uid openapi_types.UUID `json:"_id"`

	// Description Human readable description of the NetSlice instance.
	Description *string `json:"description,omitempty"`

	// Id Identifier of the NetSlice instance.
	Id openapi_types.UUID `json:"id"`

	// Name Human readable name of the NetSlice instance.
	Name string `json:"name"`
}

// NetSlicePackage defines model for NetSlicePackage.
type NetSlicePackage = openapi_types.File

// NetSliceTemplate defines model for NetSliceTemplate.
type NetSliceTemplate = string

// NsConfigTemplateInfo Ns Config template information includes NSD ID, name
// and instantiation parameters of vld, vnf, additionParamForVnf,
// additionalParamsForNs.
type NsConfigTemplateInfo struct {
	// Id Identifier of the inboarded Ns config template resource.
	Uid *openapi_types.UUID `json:"_id,omitempty"`

	// Config It includes instantiation parameters such as
	// vld, vnf, additionalParamforVnf.
	Config *map[string]interface{} `json:"config,omitempty"`

	// Name Name of the onboarded Ns config template. This information
	// is given by the user and it is unique.
	Name *string `json:"name,omitempty"`

	// NsdId Identifier of the NS descriptor, which is associated
	// with Ns config template
	NsdId *string `json:"nsdId,omitempty"`
}

// NsDescriptor defines model for NsDescriptor.
type NsDescriptor = string

// NsInstance NS Instance Information
// Only generic fields (_id, id, name, description) are described
// For a full specification of the NS Instance see:
// http://osm-download.etsi.org/ftp/osm-doc/nsr.html
type NsInstance struct {
	// Id Identifier of the NS instance.
	Uid openapi_types.UUID `json:"_id"`

	// Description Human readable description of the NS instance.
	Description *string `json:"description,omitempty"`

	// Id Identifier of the NS instance.
	Id openapi_types.UUID `json:"id"`

	// Name Human readable name of the NS instance.
	Name string `json:"name"`
}

// NsInstanceSubscriptionFilter used to identify the network service
type NsInstanceSubscriptionFilter struct {
	union json.RawMessage
}

// NsLcmOpOcc defines model for NsLcmOpOcc.
type NsLcmOpOcc struct {
	Uid                    *openapi_types.UUID `json:"_id,omitempty"`
	DetailedStatus        *string             `json:"detailed-status,omitempty"`
	Id                    *openapi_types.UUID `json:"id,omitempty"`
	IsAutomaticInvocation *bool               `json:"isAutomaticInvocation,omitempty"`
	IsCancelPending       *bool               `json:"isCancelPending,omitempty"`
	LcmOperationType      *string             `json:"lcmOperationType,omitempty"`
	Links                 *struct {
		NsInstance *string `json:"nsInstance,omitempty"`
		Self       *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	NsInstanceId    *openapi_types.UUID `json:"nsInstanceId,omitempty"`
	OperationParams *struct {
		LcmOperationType *string             `json:"lcmOperationType,omitempty"`
		NsInstanceId     *openapi_types.UUID `json:"nsInstanceId,omitempty"`
		NsName           *string             `json:"nsName,omitempty"`
		NsdId            *openapi_types.UUID `json:"nsdId,omitempty"`
		VimAccountId     *openapi_types.UUID `json:"vimAccountId,omitempty"`
	} `json:"operationParams,omitempty"`
	OperationState    *string  `json:"operationState,omitempty"`
	StartTime         *float32 `json:"startTime,omitempty"`
	StatusEnteredTime *float32 `json:"statusEnteredTime,omitempty"`
}

// NsPackage defines model for NsPackage.
type NsPackage = openapi_types.File

// NsPmJobReportInfo defines model for NsPmJobReportInfo.
type NsPmJobReportInfo struct {
	Entries *[]struct {
		ObjectInstanceId  *openapi_types.UUID `json:"objectInstanceId,omitempty"`
		PerformanceMetric *string             `json:"performanceMetric,omitempty"`
		PerformanceValue  *struct {
			PerformanceValue *struct {
				PerformanceValue *float32 `json:"performanceValue,omitempty"`
				VduName          *string  `json:"vduName,omitempty"`
				VnfMemberIndex   *string  `json:"vnfMemberIndex,omitempty"`
			} `json:"performanceValue,omitempty"`
			Timestamp *float32 `json:"timestamp,omitempty"`
		} `json:"performanceValue,omitempty"`
	} `json:"entries,omitempty"`
}

// NsdInfo NS Descriptor Information
// Only generic fields (_id, id, name, description) are described
// For a full specification of the NS Descriptor see:
// http://osm-download.etsi.org/ftp/osm-doc/nsd.html
type NsdInfo struct {
	// Id Identifier of the onboarded individual NS descriptor
	// resource. This identifier is allocated by the NFVO.
	Uid openapi_types.UUID `json:"_id"`

	// Description Description of the onboarded NSD.
	// This information is copied from the NSD content.
	Description *string `json:"description,omitempty"`

	// Id This identifier, which is allocated by the NSD
	// designer, identifies the NSD in a globally unique
	// way. It is copied from the NSD content and shall be
	// present after the NSD content is on-boarded.
	Id string `json:"id"`

	// Name Name of the onboarded NSD. This information is
	// copied from the NSD content and shall be present
	// after the NSD content is on-boarded.
	Name *string `json:"name,omitempty"`
}

// NsdInfoModifications NS Descriptor Information
// Only generic fields (id, name, description) are described
// For a full specification of the NS Descriptor see:
// http://osm-download.etsi.org/ftp/osm-doc/nsd.html
type NsdInfoModifications struct {
	// Description NSD Description
	Description *string `json:"description,omitempty"`

	// Id NSD Identifier
	Id *string `json:"id,omitempty"`

	// Name NSD Name
	Name *string `json:"name,omitempty"`
}

// NsiActionRequest defines model for NsiActionRequest.
type NsiActionRequest struct {
	LcmOperationType   *string             `json:"lcmOperationType,omitempty"`
	NetsliceInstanceId *openapi_types.UUID `json:"netsliceInstanceId,omitempty"`
	Primitive          string              `json:"primitive"`
	PrimitiveParams    KeyValuePairs       `json:"primitive_params"`
}

// NsiLcmOpOcc defines model for NsiLcmOpOcc.
type NsiLcmOpOcc struct {
	Uid                    *openapi_types.UUID `json:"_id,omitempty"`
	DetailedStatus        *string             `json:"detailed-status,omitempty"`
	Id                    *openapi_types.UUID `json:"id,omitempty"`
	IsAutomaticInvocation *bool               `json:"isAutomaticInvocation,omitempty"`
	IsCancelPending       *bool               `json:"isCancelPending,omitempty"`
	LcmOperationType      *string             `json:"lcmOperationType,omitempty"`
	Links                 *struct {
		NetsliceInstanceId *string `json:"netsliceInstanceId,omitempty"`
		Self               *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	NetsliceInstanceId *openapi_types.UUID `json:"netsliceInstanceId,omitempty"`
	OperationParams    *struct {
		LcmOperationType   *string               `json:"lcmOperationType,omitempty"`
		NetsliceInstanceId *openapi_types.UUID   `json:"netsliceInstanceId,omitempty"`
		NsiName            *string               `json:"nsiName,omitempty"`
		NslcmopsIds        *[]openapi_types.UUID `json:"nslcmops_ids,omitempty"`
		NstId              *openapi_types.UUID   `json:"nstId,omitempty"`
		VimAccountId       *openapi_types.UUID   `json:"vimAccountId,omitempty"`
	} `json:"operationParams,omitempty"`
	OperationState    *string  `json:"operationState,omitempty"`
	StartTime         *float32 `json:"startTime,omitempty"`
	StatusEnteredTime *float32 `json:"statusEnteredTime,omitempty"`
}

// NslcmSubscriptionInfo defines model for NslcmSubscriptionInfo.
type NslcmSubscriptionInfo struct {
	CallbackUri    *string                 `json:"CallbackUri,omitempty"`
	Admin          *map[string]interface{} `json:"_admin,omitempty"`
	Uid             *openapi_types.UUID     `json:"_id,omitempty"`
	Authentication *Authenticationschema   `json:"authentication,omitempty"`
	Filter         *map[string]interface{} `json:"filter,omitempty"`
	SchemaVersion  *string                 `json:"schema_version,omitempty"`
}

// NslcmSubscriptionRequest defines model for NslcmSubscriptionRequest.
type NslcmSubscriptionRequest struct {
	CallbackUri    string                `json:"CallbackUri"`
	Authentication *Authenticationschema `json:"authentication,omitempty"`
	Filter         *Nslcmsubschema       `json:"filter,omitempty"`
}

// NslcmSubscriptionResponse defines model for NslcmSubscriptionResponse.
type NslcmSubscriptionResponse struct {
	CallbackUri *string                 `json:"CallbackUri,omitempty"`
	Links       *map[string]interface{} `json:"_links,omitempty"`
	Filter      *map[string]interface{} `json:"filter,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
}

// Nslcmsubschema defines model for Nslcmsubschema.
type Nslcmsubschema struct {
	LcmOpNameImpactingNsComponent      *[]NslcmsubschemaLcmOpNameImpactingNsComponent      `json:"lcmOpNameImpactingNsComponent,omitempty"`
	LcmOpOccStatusImpactingNsComponent *[]NslcmsubschemaLcmOpOccStatusImpactingNsComponent `json:"lcmOpOccStatusImpactingNsComponent,omitempty"`

	// NotificationTypes If NsLcmOperationOccurrenceNotification is selected then at least operationTypes or states is required. If NsLcmOperationOccurrenceNotification is selected then at least nsComponentTypes, lcmOpName and lcmOpOccStatus is required
	NotificationTypes *[]NslcmsubschemaNotificationTypes `json:"notificationTypes,omitempty"`
	NsComponentTypes  *[]NslcmsubschemaNsComponentTypes  `json:"nsComponentTypes,omitempty"`

	// NsInstanceSubscriptionFilter used to identify the network service
	NsInstanceSubscriptionFilter *NsInstanceSubscriptionFilter    `json:"nsInstanceSubscriptionFilter,omitempty"`
	OperationStates              *[]NslcmsubschemaOperationStates `json:"operationStates,omitempty"`
	OperationTypes               *[]NslcmsubschemaOperationTypes  `json:"operationTypes,omitempty"`
}

// NslcmsubschemaLcmOpNameImpactingNsComponent defines model for Nslcmsubschema.LcmOpNameImpactingNsComponent.
type NslcmsubschemaLcmOpNameImpactingNsComponent string

// NslcmsubschemaLcmOpOccStatusImpactingNsComponent defines model for Nslcmsubschema.LcmOpOccStatusImpactingNsComponent.
type NslcmsubschemaLcmOpOccStatusImpactingNsComponent string

// NslcmsubschemaNotificationTypes defines model for Nslcmsubschema.NotificationTypes.
type NslcmsubschemaNotificationTypes string

// NslcmsubschemaNsComponentTypes defines model for Nslcmsubschema.NsComponentTypes.
type NslcmsubschemaNsComponentTypes string

// NslcmsubschemaOperationStates defines model for Nslcmsubschema.OperationStates.
type NslcmsubschemaOperationStates string

// NslcmsubschemaOperationTypes defines model for Nslcmsubschema.OperationTypes.
type NslcmsubschemaOperationTypes string

// NstInfo NetSlice Template Information
// Only generic fields (_id, id, name) are described
// For a full specification of the NetSlice Template see:
// http://osm-download.etsi.org/ftp/osm-doc/nst.html
type NstInfo struct {
	// Id NetSlice Template Identifier
	Uid *openapi_types.UUID `json:"_id,omitempty"`

	// Id Human readable NetSlice Template Identifier
	Id *string `json:"id,omitempty"`

	// Name Human readable name of the NetSlice Template
	Name *string `json:"name,omitempty"`
}

// NstInfoModifications NetSlice Template Information
// Only generic fields (id, name) are described
// For a full specification of the NetSlice Template see:
// http://osm-download.etsi.org/ftp/osm-doc/nst.html
type NstInfoModifications struct {
	// Id NST Identifier
	Id *string `json:"id,omitempty"`

	// Name NST Name
	Name *string `json:"name,omitempty"`
}

// ObjectId defines model for ObjectId.
type ObjectId struct {
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// ObjectIdList defines model for ObjectIdList.
type ObjectIdList struct {
	NsIds *[]openapi_types.UUID `json:"ns_ids,omitempty"`
}

// ObjectIdPlusOpId defines model for ObjectId_plus_OpId.
type ObjectIdPlusOpId struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	OpId *openapi_types.UUID `json:"op_id,omitempty"`
}

// OkaPackage defines model for OkaPackage.
type OkaPackage struct {
	Description *string             `json:"description,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Package     *openapi_types.File `json:"package,omitempty"`
}

// OpId defines model for OpId.
type OpId struct {
	OpId *openapi_types.UUID `json:"op_id,omitempty"`
}

// PasswordExpiryInfo defines model for PasswordExpiryInfo.
type PasswordExpiryInfo struct {
	Id      *string             `json:"id,omitempty"`
	Message *string             `json:"message,omitempty"`
	UserId  *openapi_types.UUID `json:"user_id,omitempty"`
}

// PduInfo defines model for PduInfo.
type PduInfo struct {
	Uid          *openapi_types.UUID `json:"_id,omitempty"`
	Description *string             `json:"description,omitempty"`
	Interfaces  *PduInterfaces      `json:"interfaces,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Shared      *bool               `json:"shared,omitempty"`
	Type        *string             `json:"type,omitempty"`
	VimAccounts *[]string           `json:"vim_accounts,omitempty"`
	Vims        *[]string           `json:"vims,omitempty"`
}

// PduInterfaces defines model for PduInterfaces.
type PduInterfaces = []struct {
	IpAddress      string             `json:"ip-address"`
	MacAddress     *string            `json:"mac-address,omitempty"`
	Mgmt           bool               `json:"mgmt"`
	Name           string             `json:"name"`
	Type           *PduInterfacesType `json:"type,omitempty"`
	VimNetworkId   *string            `json:"vim-network-id,omitempty"`
	VimNetworkName *string            `json:"vim-network-name,omitempty"`
}

// PduInterfacesType defines model for PduInterfaces.Type.
type PduInterfacesType string

// PermissionsInfo Permissions keys must follow the syntax 'main_topic[:subtopic[:id[:component|action|etc]]]'
// Permission values are either true or false
type PermissionsInfo map[string]bool

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	Detail               string                 `json:"detail"`
	Instance             *string                `json:"instance,omitempty"`
	Status               int                    `json:"status"`
	Title                *string                `json:"title,omitempty"`
	Type                 *string                `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProfileInfo defines model for ProfileInfo.
type ProfileInfo struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ProjectInfo defines model for ProjectInfo.
type ProjectInfo struct {
	Uid     *openapi_types.UUID `json:"_id,omitempty"`
	Name   *string             `json:"name,omitempty"`
	Quotas *QuotasInfo         `json:"quotas,omitempty"`
}

// ProjectRoleMappings defines model for ProjectRoleMappings.
type ProjectRoleMappings = []struct {
	Project *string `json:"project,omitempty"`
	Role    *string `json:"role,omitempty"`
}

// ProjectRoleMappingsOpt defines model for ProjectRoleMappingsOpt.
type ProjectRoleMappingsOpt = []struct {
	Project *string `json:"project,omitempty"`
	Role    *string `json:"role,omitempty"`
}

// QuotasInfo defines model for QuotasInfo.
type QuotasInfo struct {
	K8sclusters    *int `json:"k8sclusters,omitempty"`
	K8srepos       *int `json:"k8srepos,omitempty"`
	NsInstances    *int `json:"ns_instances,omitempty"`
	Nsds           *int `json:"nsds,omitempty"`
	Osmrepos       *int `json:"osmrepos,omitempty"`
	Pduds          *int `json:"pduds,omitempty"`
	SdnControllers *int `json:"sdn_controllers,omitempty"`
	SliceInstances *int `json:"slice_instances,omitempty"`
	SliceTemplates *int `json:"slice_templates,omitempty"`
	Vca            *int `json:"vca,omitempty"`
	VimAccounts    *int `json:"vim_accounts,omitempty"`
	Vnfds          *int `json:"vnfds,omitempty"`
	WimAccounts    *int `json:"wim_accounts,omitempty"`
}

// RoleInfo defines model for RoleInfo.
type RoleInfo struct {
	Uid   *openapi_types.UUID `json:"_id,omitempty"`
	Name *string             `json:"name,omitempty"`

	// Permissions Permissions keys must follow the syntax 'main_topic[:subtopic[:id[:component|action|etc]]]'
	// Permission values are either true or false
	Permissions *PermissionsInfo `json:"permissions,omitempty"`
}

// ScaleNodeInfo defines model for ScaleNodeInfo.
type ScaleNodeInfo struct {
	NodeCount *int `json:"node_count,omitempty"`
}

// ScaleNsRequest defines model for ScaleNsRequest.
type ScaleNsRequest struct {
	ScaleType    ScaleNsRequestScaleType `json:"scaleType"`
	ScaleVnfData struct {
		ScaleByStepData struct {
			MemberVnfIndex         string  `json:"member-vnf-index"`
			ScalingGroupDescriptor string  `json:"scaling-group-descriptor"`
			ScalingPolicy          *string `json:"scaling-policy,omitempty"`
		} `json:"scaleByStepData"`
		ScaleVnfType ScaleNsRequestScaleVnfDataScaleVnfType `json:"scaleVnfType"`
	} `json:"scaleVnfData"`

	// TimeoutNsScale timeout for the scale operation
	TimeoutNsScale *int `json:"timeout_ns_scale,omitempty"`
}

// ScaleNsRequestScaleType defines model for ScaleNsRequest.ScaleType.
type ScaleNsRequestScaleType string

// ScaleNsRequestScaleVnfDataScaleVnfType defines model for ScaleNsRequest.ScaleVnfData.ScaleVnfType.
type ScaleNsRequestScaleVnfDataScaleVnfType string

// SdnBasicProperties defines model for SdnBasicProperties.
type SdnBasicProperties struct {
	Description *string                 `json:"description,omitempty"`
	Dpid        *string                 `json:"dpid,omitempty"`
	Ip          *string                 `json:"ip,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Password    *string                 `json:"password,omitempty"`
	Port        *int                    `json:"port,omitempty"`
	Type        *SdnBasicPropertiesType `json:"type,omitempty"`
	User        *string                 `json:"user,omitempty"`
	Version     *string                 `json:"version,omitempty"`
}

// SdnBasicPropertiesType defines model for SdnBasicProperties.Type.
type SdnBasicPropertiesType string

// SdnExtraProperties defines model for SdnExtraProperties.
type SdnExtraProperties struct {
	Uid            *openapi_types.UUID `json:"_id,omitempty"`
	SchemaVersion *string             `json:"schema_version,omitempty"`
}

// SdnInfo defines model for SdnInfo.
type SdnInfo struct {
	Uid            *openapi_types.UUID `json:"_id,omitempty"`
	Description   *string             `json:"description,omitempty"`
	Dpid          *string             `json:"dpid,omitempty"`
	Ip            *string             `json:"ip,omitempty"`
	Name          *string             `json:"name,omitempty"`
	Password      *string             `json:"password,omitempty"`
	Port          *int                `json:"port,omitempty"`
	SchemaVersion *string             `json:"schema_version,omitempty"`
	Type          *SdnInfoType        `json:"type,omitempty"`
	User          *string             `json:"user,omitempty"`
	Version       *string             `json:"version,omitempty"`
}

// SdnInfoType defines model for SdnInfo.Type.
type SdnInfoType string

// ShortNameList defines model for ShortNameList.
type ShortNameList = []string

// TerminateNsRequest defines model for TerminateNsRequest.
type TerminateNsRequest struct {
	// Autoremove remove network service if termination end without error
	Autoremove *bool `json:"autoremove,omitempty"`

	// SkipTerminatePrimitives Do not execute network service termination primitives
	SkipTerminatePrimitives *bool `json:"skip_terminate_primitives,omitempty"`

	// TimeoutNsTerminate timeout for terminate operation
	TimeoutNsTerminate *int `json:"timeout_ns_terminate,omitempty"`
}

// TerminateNsiRequest defines model for TerminateNsiRequest.
type TerminateNsiRequest struct {
	// TerminationTime Timestamp indicating the end time of the NSI, i.e. the NSI will be terminated
	// automatically at this timestamp. Cardinality "0" indicates the NSI termination
	// takes place immediately.
	TerminationTime *time.Time `json:"terminationTime,omitempty"`
}

// TokenInfo defines model for TokenInfo.
type TokenInfo struct {
	Uid          *string             `json:"_id,omitempty"`
	Admin       *bool               `json:"admin,omitempty"`
	AdminShow   *bool               `json:"admin_show,omitempty"`
	Expires     *float32            `json:"expires,omitempty"`
	Id          *string             `json:"id,omitempty"`
	IssuedAt    *float32            `json:"issued_at,omitempty"`
	LastLogin   *float32            `json:"last_login,omitempty"`
	LoginCount  *float32            `json:"login_count,omitempty"`
	ProjectId   *openapi_types.UUID `json:"project_id,omitempty"`
	ProjectName *string             `json:"project_name,omitempty"`
	RemoteHost  *string             `json:"remote_host,omitempty"`
	RemotePort  *int                `json:"remote_port,omitempty"`
	Roles       *[]struct {
		Id   *openapi_types.UUID `json:"id,omitempty"`
		Name *string             `json:"name,omitempty"`
	} `json:"roles,omitempty"`
	UserId   *openapi_types.UUID `json:"user_id,omitempty"`
	UserShow *bool               `json:"user_show,omitempty"`
	Username *string             `json:"username,omitempty"`
}

// UpdateNsRequest This type represents request parameters for the "Update NS" operation. This operation supports the update of an NS instance by updating one or more of the VNFs that are part of this NS.
type UpdateNsRequest struct {
	ChangeVnfPackageData *struct {
		VnfInstanceId string `json:"vnfInstanceId"`
		VnfdId        string `json:"vnfdId"`
	} `json:"changeVnfPackageData,omitempty"`
	ModifyVnfInfoData *struct {
		VnfInstanceId string `json:"vnfInstanceId"`
		VnfdId        string `json:"vnfdId"`
	} `json:"modifyVnfInfoData,omitempty"`
	OperateVnfData *struct {
		AdditionalParam *struct {
			CountIndex float32 `json:"count-index"`
			RunDay1    *bool   `json:"run-day1,omitempty"`
			VduId      string  `json:"vdu_id"`
		} `json:"additionalParam,omitempty"`
		ChangeStateTo string `json:"changeStateTo"`
		VnfInstanceId string `json:"vnfInstanceId"`
	} `json:"operateVnfData,omitempty"`
	RemoveVnfInstanceId *string                   `json:"removeVnfInstanceId,omitempty"`
	UpdateType          UpdateNsRequestUpdateType `json:"updateType"`
	VerticalScaleVnf    *struct {
		CountIndex    *float32 `json:"countIndex,omitempty"`
		VduId         string   `json:"vduId"`
		VnfInstanceId string   `json:"vnfInstanceId"`
		VnfdId        string   `json:"vnfdId"`
	} `json:"verticalScaleVnf,omitempty"`
}

// UpdateNsRequestUpdateType defines model for UpdateNsRequest.UpdateType.
type UpdateNsRequestUpdateType string

// UpgradeClusterInfo defines model for UpgradeClusterInfo.
type UpgradeClusterInfo struct {
	K8sVersion *string `json:"k8s_version,omitempty"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Uid                  *openapi_types.UUID `json:"_id,omitempty"`
	Password            *string             `json:"password,omitempty"`
	ProjectRoleMappings *[]struct {
		Project     *openapi_types.UUID `json:"project,omitempty"`
		ProjectName *string             `json:"project_name,omitempty"`
		Role        *openapi_types.UUID `json:"role,omitempty"`
		RoleName    *string             `json:"role_name,omitempty"`
	} `json:"project_role_mappings,omitempty"`
	Projects *[]string `json:"projects,omitempty"`
	Username *string   `json:"username,omitempty"`
}

// VcaInfo defines model for VcaInfo.
type VcaInfo struct {
	Uid             *openapi_types.UUID     `json:"_id,omitempty"`
	Cacert         *string                 `json:"cacert,omitempty"`
	Description    *string                 `json:"description,omitempty"`
	Endpoints      *string                 `json:"endpoints,omitempty"`
	K8sCloud       *string                 `json:"k8s-cloud,omitempty"`
	K8sCredentials *string                 `json:"k8s-credentials,omitempty"`
	LxdCloud       *string                 `json:"lxd-cloud,omitempty"`
	LxdCredentials *string                 `json:"lxd-credentials,omitempty"`
	ModelConfig    *map[string]interface{} `json:"model-config,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	SchemaType     *string                 `json:"schema_type,omitempty"`
	SchemaVersion  *string                 `json:"schema_version,omitempty"`
	Secret         *string                 `json:"secret,omitempty"`
	User           *string                 `json:"user,omitempty"`
}

// VimInfo defines model for VimInfo.
type VimInfo struct {
	Uid            *openapi_types.UUID     `json:"_id,omitempty"`
	Config        *map[string]interface{} `json:"config,omitempty"`
	Datacenter    *string                 `json:"datacenter,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Resources     *map[string]interface{} `json:"resources,omitempty"`
	SchemaType    *string                 `json:"schema_type,omitempty"`
	SchemaVersion *string                 `json:"schema_version,omitempty"`
	Vca           *openapi_types.UUID     `json:"vca,omitempty"`
	Vim           *string                 `json:"vim,omitempty"`
	VimPassword   *string                 `json:"vim_password,omitempty"`
	VimTenantName *string                 `json:"vim_tenant_name,omitempty"`
	VimType       *VimType                `json:"vim_type,omitempty"`
	VimUrl        *string                 `json:"vim_url,omitempty"`
	VimUser       *string                 `json:"vim_user,omitempty"`
}

// VimType defines model for VimType.
type VimType string

// VnfDescriptor defines model for VnfDescriptor.
type VnfDescriptor = string

// VnfInstanceInfo VNF Instance Information
// Only generic fields (_id, id) are described
// For a full specification of the VNF Instance see:
// http://osm-download.etsi.org/ftp/osm-doc/vnfr.html
type VnfInstanceInfo struct {
	Uid *openapi_types.UUID `json:"_id,omitempty"`
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// VnfPackage defines model for VnfPackage.
type VnfPackage = openapi_types.File

// VnfPkgInfo VNF Package Information
// Only generic fields (_id, id, name, description) are described
// For a full specification of the VNF Descriptor see:
// http://osm-download.etsi.org/ftp/osm-doc/vnfd.html
type VnfPkgInfo struct {
	// Id Identifier of the VNF package. This identifier is allocated by the NFVO.
	Uid openapi_types.UUID `json:"_id"`

	// Description VNF Package description
	Description *string `json:"description,omitempty"`

	// Id VNF Package Identifier
	Id string `json:"id"`

	// Name VNF Package Name
	Name *string `json:"name,omitempty"`
}

// VnfPkgInfoModifications VNF Package Information
// Only generic fields (id, name, description) are described
// For a full specification of the VNF Descriptor see:
// http://osm-download.etsi.org/ftp/osm-doc/vnfd.html
type VnfPkgInfoModifications struct {
	// Description VNF Package description
	Description *string `json:"description,omitempty"`

	// Id VNF Package Identifier
	Id *string `json:"id,omitempty"`

	// Name VNF Package Name
	Name *string `json:"name,omitempty"`
}

// WimInfo defines model for WimInfo.
type WimInfo struct {
	Uid            *openapi_types.UUID     `json:"_id,omitempty"`
	Config        *map[string]interface{} `json:"config,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Password      *string                 `json:"password,omitempty"`
	SchemaType    *string                 `json:"schema_type,omitempty"`
	SchemaVersion *string                 `json:"schema_version,omitempty"`
	User          *string                 `json:"user,omitempty"`
	Wim           *string                 `json:"wim,omitempty"`
	WimType       *WimType                `json:"wim_type,omitempty"`
	WimUrl        *string                 `json:"wim_url,omitempty"`
}

// WimType defines model for WimType.
type WimType string

// NsInstanceIds defines model for nsInstanceIds.
type NsInstanceIds = []string

// NsInstanceNames defines model for nsInstanceNames.
type NsInstanceNames = []string

// NsdIds defines model for nsdIds.
type NsdIds = []string

// PnfdIds defines model for pnfdIds.
type PnfdIds = []string

// VnfdIds defines model for vnfdIds.
type VnfdIds = []string

// BadRequest defines model for BadRequest.
type BadRequest = ProblemDetails

// Conflict defines model for Conflict.
type Conflict = ProblemDetails

// Forbidden defines model for Forbidden.
type Forbidden = ProblemDetails

// InternalServerError defines model for InternalServerError.
type InternalServerError = ProblemDetails

// MethodNotAllowed defines model for MethodNotAllowed.
type MethodNotAllowed = ProblemDetails

// NotAcceptable defines model for NotAcceptable.
type NotAcceptable = ProblemDetails

// NotFound defines model for NotFound.
type NotFound = ProblemDetails

// ServiceUnavailable defines model for ServiceUnavailable.
type ServiceUnavailable = ProblemDetails

// Unauthorized defines model for Unauthorized.
type Unauthorized = ProblemDetails

// UnexpectedError defines model for UnexpectedError.
type UnexpectedError = ProblemDetails

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = ProblemDetails

// CreateCluster defines model for CreateCluster.
type CreateCluster = CreateClusterInfo

// CreateNsConfigTemplateInfoRequest defines model for CreateNsConfigTemplateInfoRequest.
type CreateNsConfigTemplateInfoRequest = CreateNsdInfoRequest

// NsConfigTemplateInfoModifications NS Descriptor Information
// Only generic fields (id, name, description) are described
// For a full specification of the NS Descriptor see:
// http://osm-download.etsi.org/ftp/osm-doc/nsd.html
type NsConfigTemplateInfoModifications = NsdInfoModifications

// ScaleNode defines model for ScaleNode.
type ScaleNode = ScaleNodeInfo

// UpgradeCluster defines model for UpgradeCluster.
type UpgradeCluster = UpgradeClusterInfo

// DeleteNSinstanceParams defines parameters for DeleteNSinstance.
type DeleteNSinstanceParams struct {
	// VcaStatusRefresh Set to true if vca status needs to be refreshed.
	VcaStatusRefresh *bool `form:"vcaStatusRefresh,omitempty" json:"vcaStatusRefresh,omitempty"`
}

// GetNSinstanceParams defines parameters for GetNSinstance.
type GetNSinstanceParams struct {
	// VcaStatusRefresh Set to true if vca status needs to be refreshed.
	VcaStatusRefresh *bool `form:"vcaStatusRefresh,omitempty" json:"vcaStatusRefresh,omitempty"`
}

// CreateK8sClusterJSONRequestBody defines body for CreateK8sCluster for application/json ContentType.
type CreateK8sClusterJSONRequestBody = CreateK8sClusterRequest

// EditK8sClusterJSONRequestBody defines body for EditK8sCluster for application/json ContentType.
type EditK8sClusterJSONRequestBody = EditK8sClusterRequest

// CreateK8sRepoJSONRequestBody defines body for CreateK8sRepo for application/json ContentType.
type CreateK8sRepoJSONRequestBody = CreateK8sRepoRequest

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = CreateProjectRequest

// EditProjectJSONRequestBody defines body for EditProject for application/json ContentType.
type EditProjectJSONRequestBody = EditProjectRequest

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleRequest

// EditRoleJSONRequestBody defines body for EditRole for application/json ContentType.
type EditRoleJSONRequestBody = EditRoleRequest

// CreateSDNJSONRequestBody defines body for CreateSDN for application/json ContentType.
type CreateSDNJSONRequestBody = CreateSdnRequest

// EditSDNJSONRequestBody defines body for EditSDN for application/json ContentType.
type EditSDNJSONRequestBody = EditSdnRequest

// CreateTokenJSONRequestBody defines body for CreateToken for application/json ContentType.
type CreateTokenJSONRequestBody = CreateTokenRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// EditUserJSONRequestBody defines body for EditUser for application/json ContentType.
type EditUserJSONRequestBody = EditUserRequest

// CreateVcaJSONRequestBody defines body for CreateVca for application/json ContentType.
type CreateVcaJSONRequestBody = CreateVcaRequest

// EditVcaJSONRequestBody defines body for EditVca for application/json ContentType.
type EditVcaJSONRequestBody = EditVcaRequest

// CreateVimAccountJSONRequestBody defines body for CreateVimAccount for application/json ContentType.
type CreateVimAccountJSONRequestBody = CreateVimRequest

// EditVimAccountJSONRequestBody defines body for EditVimAccount for application/json ContentType.
type EditVimAccountJSONRequestBody = EditVimRequest

// CreateVIMJSONRequestBody defines body for CreateVIM for application/json ContentType.
type CreateVIMJSONRequestBody = CreateVimRequest

// EditVIMJSONRequestBody defines body for EditVIM for application/json ContentType.
type EditVIMJSONRequestBody = EditVimRequest

// CreateWimAccountJSONRequestBody defines body for CreateWimAccount for application/json ContentType.
type CreateWimAccountJSONRequestBody = CreateWimRequest

// EditWimAccountJSONRequestBody defines body for EditWimAccount for application/json ContentType.
type EditWimAccountJSONRequestBody = EditWimRequest

// CreateAppProfileJSONRequestBody defines body for CreateAppProfile for application/json ContentType.
type CreateAppProfileJSONRequestBody = ProfileInfo

// PatchAppProfileJSONRequestBody defines body for PatchAppProfile for application/json ContentType.
type PatchAppProfileJSONRequestBody = ProfileInfo

// Createk8sClusterJSONRequestBody defines body for Createk8sCluster for application/json ContentType.
type Createk8sClusterJSONRequestBody = CreateClusterInfo

// AddRemoveAppProfileJSONRequestBody defines body for AddRemoveAppProfile for application/json ContentType.
type AddRemoveAppProfileJSONRequestBody = AttachDetachProfile

// AddremoveInfraConfigProfileJSONRequestBody defines body for AddremoveInfraConfigProfile for application/json ContentType.
type AddremoveInfraConfigProfileJSONRequestBody = AttachDetachProfile

// AddremoveInfraControllerProfileJSONRequestBody defines body for AddremoveInfraControllerProfile for application/json ContentType.
type AddremoveInfraControllerProfileJSONRequestBody = AttachDetachProfile

// AddremoveResourceProfileJSONRequestBody defines body for AddremoveResourceProfile for application/json ContentType.
type AddremoveResourceProfileJSONRequestBody = AttachDetachProfile

// NodeScalingJSONRequestBody defines body for NodeScaling for application/json ContentType.
type NodeScalingJSONRequestBody = ScaleNodeInfo

// UpgradeClusterJSONRequestBody defines body for UpgradeCluster for application/json ContentType.
type UpgradeClusterJSONRequestBody = UpgradeClusterInfo

// CreateInfraConfigProfileJSONRequestBody defines body for CreateInfraConfigProfile for application/json ContentType.
type CreateInfraConfigProfileJSONRequestBody = ProfileInfo

// PatchInfraConfigProfileJSONRequestBody defines body for PatchInfraConfigProfile for application/json ContentType.
type PatchInfraConfigProfileJSONRequestBody = ProfileInfo

// CreateInfraControllerProfileJSONRequestBody defines body for CreateInfraControllerProfile for application/json ContentType.
type CreateInfraControllerProfileJSONRequestBody = ProfileInfo

// PatchInfraControllerProfileJSONRequestBody defines body for PatchInfraControllerProfile for application/json ContentType.
type PatchInfraControllerProfileJSONRequestBody = ProfileInfo

// CreateResourceProfileJSONRequestBody defines body for CreateResourceProfile for application/json ContentType.
type CreateResourceProfileJSONRequestBody = ProfileInfo

// PatchResourceProfileJSONRequestBody defines body for PatchResourceProfile for application/json ContentType.
type PatchResourceProfileJSONRequestBody = ProfileInfo

// AddKSUJSONRequestBody defines body for AddKSU for application/json ContentType.
type AddKSUJSONRequestBody = MultipleKsu

// DeleteMultipleKSUJSONRequestBody defines body for DeleteMultipleKSU for application/json ContentType.
type DeleteMultipleKSUJSONRequestBody = DeleteMultipleKsu

// UpdateMultipleKSUJSONRequestBody defines body for UpdateMultipleKSU for application/json ContentType.
type UpdateMultipleKSUJSONRequestBody = MultipleKsu

// UpdateKSUJSONRequestBody defines body for UpdateKSU for application/json ContentType.
type UpdateKSUJSONRequestBody = Ksu

// CloneKSUJSONRequestBody defines body for CloneKSU for application/json ContentType.
type CloneKSUJSONRequestBody = CloneKsu

// MoveKSUJSONRequestBody defines body for MoveKSU for application/json ContentType.
type MoveKSUJSONRequestBody = MoveKsu

// AddNsconfigtemplateJSONRequestBody defines body for AddNsconfigtemplate for application/json ContentType.
type AddNsconfigtemplateJSONRequestBody = CreateNsdInfoRequest

// UpdateTemplatecontentJSONRequestBody defines body for UpdateTemplatecontent for application/json ContentType.
type UpdateTemplatecontentJSONRequestBody = NsdInfoModifications

// AddNSDJSONRequestBody defines body for AddNSD for application/json ContentType.
type AddNSDJSONRequestBody = CreateNsdInfoRequest

// UpdateNSDJSONRequestBody defines body for UpdateNSD for application/json ContentType.
type UpdateNSDJSONRequestBody = NsdInfoModifications

// UpdateNsPkgsIdContentJSONRequestBody defines body for UpdateNsPkgsIdContent for application/json ContentType.
type UpdateNsPkgsIdContentJSONRequestBody = NsdInfoModifications

// UpdateAlarmJSONRequestBody defines body for UpdateAlarm for application/json ContentType.
type UpdateAlarmJSONRequestBody = AlarmInfoModifications

// AddNSIJSONRequestBody defines body for AddNSI for application/json ContentType.
type AddNSIJSONRequestBody = InstantiateNsiRequest

// ActionOnNSIJSONRequestBody defines body for ActionOnNSI for application/json ContentType.
type ActionOnNSIJSONRequestBody = NsiActionRequest

// InstantiateNSIJSONRequestBody defines body for InstantiateNSI for application/json ContentType.
type InstantiateNSIJSONRequestBody = InstantiateNsiRequest

// TerminateNSIJSONRequestBody defines body for TerminateNSI for application/json ContentType.
type TerminateNSIJSONRequestBody = TerminateNsiRequest

// CreateNSIContentJSONRequestBody defines body for CreateNSIContent for application/json ContentType.
type CreateNSIContentJSONRequestBody = InstantiateNsiRequest

// AddNSinstanceJSONRequestBody defines body for AddNSinstance for application/json ContentType.
type AddNSinstanceJSONRequestBody = InstantiateNsRequest

// ActionOnNSinstanceJSONRequestBody defines body for ActionOnNSinstance for application/json ContentType.
type ActionOnNSinstanceJSONRequestBody = NSinstanceActionRequest

// HealNSinstanceJSONRequestBody defines body for HealNSinstance for application/json ContentType.
type HealNSinstanceJSONRequestBody = HealNsRequest

// InstantiateNSinstanceJSONRequestBody defines body for InstantiateNSinstance for application/json ContentType.
type InstantiateNSinstanceJSONRequestBody = InstantiateNsRequest

// MigrateNSinstanceJSONRequestBody defines body for MigrateNSinstance for application/json ContentType.
type MigrateNSinstanceJSONRequestBody = NSinstanceMigrateRequest

// ScaleNSinstanceJSONRequestBody defines body for ScaleNSinstance for application/json ContentType.
type ScaleNSinstanceJSONRequestBody = ScaleNsRequest

// TerminateNSinstanceJSONRequestBody defines body for TerminateNSinstance for application/json ContentType.
type TerminateNSinstanceJSONRequestBody = TerminateNsRequest

// UpdateNSinstanceJSONRequestBody defines body for UpdateNSinstance for application/json ContentType.
type UpdateNSinstanceJSONRequestBody = UpdateNsRequest

// CreateNSinstanceContentJSONRequestBody defines body for CreateNSinstanceContent for application/json ContentType.
type CreateNSinstanceContentJSONRequestBody = InstantiateNsRequest

// MultiNsTerminateRequestJSONRequestBody defines body for MultiNsTerminateRequest for application/json ContentType.
type MultiNsTerminateRequestJSONRequestBody = MultiNsTerminateRequest

// CancelNSLCMOpOccJSONRequestBody defines body for CancelNSLCMOpOcc for application/json ContentType.
type CancelNSLCMOpOccJSONRequestBody = CancelNSLCMOpOccRequest

// AddNsSubcriptionsJSONRequestBody defines body for AddNsSubcriptions for application/json ContentType.
type AddNsSubcriptionsJSONRequestBody = NslcmSubscriptionRequest

// AddNSTJSONRequestBody defines body for AddNST for application/json ContentType.
type AddNSTJSONRequestBody = CreateNstInfoRequest

// UpdateNstIdContentJSONRequestBody defines body for UpdateNstIdContent for application/json ContentType.
type UpdateNstIdContentJSONRequestBody = NstInfoModifications

// CreatePDUJSONRequestBody defines body for CreatePDU for application/json ContentType.
type CreatePDUJSONRequestBody = CreatePduRequest

// EditPDUJSONRequestBody defines body for EditPDU for application/json ContentType.
type EditPDUJSONRequestBody = EditPduRequest

// AddVnfPkgJSONRequestBody defines body for AddVnfPkg for application/json ContentType.
type AddVnfPkgJSONRequestBody = CreateVnfPkgInfoRequest

// UpdateVnfPkgJSONRequestBody defines body for UpdateVnfPkg for application/json ContentType.
type UpdateVnfPkgJSONRequestBody = VnfPkgInfoModifications

// UpdateVnfPkgsIdContentJSONRequestBody defines body for UpdateVnfPkgsIdContent for application/json ContentType.
type UpdateVnfPkgsIdContentJSONRequestBody = VnfPkgInfoModifications

// Getter for additional properties for InstantiateNsRequest_Vnf_InternalVld_ProviderNetwork_SdnPorts_Item. Returns the specified
// element and whether it was found
func (a InstantiateNsRequest_Vnf_InternalVld_ProviderNetwork_SdnPorts_Item) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InstantiateNsRequest_Vnf_InternalVld_ProviderNetwork_SdnPorts_Item
func (a *InstantiateNsRequest_Vnf_InternalVld_ProviderNetwork_SdnPorts_Item) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InstantiateNsRequest_Vnf_InternalVld_ProviderNetwork_SdnPorts_Item to handle AdditionalProperties
func (a *InstantiateNsRequest_Vnf_InternalVld_ProviderNetwork_SdnPorts_Item) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["mac_address"]; found {
		err = json.Unmarshal(raw, &a.MacAddress)
		if err != nil {
			return fmt.Errorf("error reading 'mac_address': %w", err)
		}
		delete(object, "mac_address")
	}

	if raw, found := object["switch_id"]; found {
		err = json.Unmarshal(raw, &a.SwitchId)
		if err != nil {
			return fmt.Errorf("error reading 'switch_id': %w", err)
		}
		delete(object, "switch_id")
	}

	if raw, found := object["switch_port"]; found {
		err = json.Unmarshal(raw, &a.SwitchPort)
		if err != nil {
			return fmt.Errorf("error reading 'switch_port': %w", err)
		}
		delete(object, "switch_port")
	}

	if raw, found := object["vlan"]; found {
		err = json.Unmarshal(raw, &a.Vlan)
		if err != nil {
			return fmt.Errorf("error reading 'vlan': %w", err)
		}
		delete(object, "vlan")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InstantiateNsRequest_Vnf_InternalVld_ProviderNetwork_SdnPorts_Item to handle AdditionalProperties
func (a InstantiateNsRequest_Vnf_InternalVld_ProviderNetwork_SdnPorts_Item) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MacAddress != nil {
		object["mac_address"], err = json.Marshal(a.MacAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mac_address': %w", err)
		}
	}

	object["switch_id"], err = json.Marshal(a.SwitchId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'switch_id': %w", err)
	}

	object["switch_port"], err = json.Marshal(a.SwitchPort)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'switch_port': %w", err)
	}

	if a.Vlan != nil {
		object["vlan"], err = json.Marshal(a.Vlan)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vlan': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProblemDetails. Returns the specified
// element and whether it was found
func (a ProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetails
func (a *ProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a *ProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a ProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["detail"], err = json.Marshal(a.Detail)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'detail': %w", err)
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsShortNameList returns the union data inside the EditUserRequest_Projects as a ShortNameList
func (t EditUserRequest_Projects) AsShortNameList() (ShortNameList, error) {
	var body ShortNameList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromShortNameList overwrites any union data inside the EditUserRequest_Projects as the provided ShortNameList
func (t *EditUserRequest_Projects) FromShortNameList(v ShortNameList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeShortNameList performs a merge with any union data inside the EditUserRequest_Projects, using the provided ShortNameList
func (t *EditUserRequest_Projects) MergeShortNameList(v ShortNameList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArrayEditionSchema returns the union data inside the EditUserRequest_Projects as a ArrayEditionSchema
func (t EditUserRequest_Projects) AsArrayEditionSchema() (ArrayEditionSchema, error) {
	var body ArrayEditionSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArrayEditionSchema overwrites any union data inside the EditUserRequest_Projects as the provided ArrayEditionSchema
func (t *EditUserRequest_Projects) FromArrayEditionSchema(v ArrayEditionSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArrayEditionSchema performs a merge with any union data inside the EditUserRequest_Projects, using the provided ArrayEditionSchema
func (t *EditUserRequest_Projects) MergeArrayEditionSchema(v ArrayEditionSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EditUserRequest_Projects) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EditUserRequest_Projects) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInstantiateNsRequestVldVimNetworkId0 returns the union data inside the InstantiateNsRequest_Vld_VimNetworkId as a InstantiateNsRequestVldVimNetworkId0
func (t InstantiateNsRequest_Vld_VimNetworkId) AsInstantiateNsRequestVldVimNetworkId0() (InstantiateNsRequestVldVimNetworkId0, error) {
	var body InstantiateNsRequestVldVimNetworkId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsRequestVldVimNetworkId0 overwrites any union data inside the InstantiateNsRequest_Vld_VimNetworkId as the provided InstantiateNsRequestVldVimNetworkId0
func (t *InstantiateNsRequest_Vld_VimNetworkId) FromInstantiateNsRequestVldVimNetworkId0(v InstantiateNsRequestVldVimNetworkId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsRequestVldVimNetworkId0 performs a merge with any union data inside the InstantiateNsRequest_Vld_VimNetworkId, using the provided InstantiateNsRequestVldVimNetworkId0
func (t *InstantiateNsRequest_Vld_VimNetworkId) MergeInstantiateNsRequestVldVimNetworkId0(v InstantiateNsRequestVldVimNetworkId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstantiateNsRequestVldVimNetworkId1 returns the union data inside the InstantiateNsRequest_Vld_VimNetworkId as a InstantiateNsRequestVldVimNetworkId1
func (t InstantiateNsRequest_Vld_VimNetworkId) AsInstantiateNsRequestVldVimNetworkId1() (InstantiateNsRequestVldVimNetworkId1, error) {
	var body InstantiateNsRequestVldVimNetworkId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsRequestVldVimNetworkId1 overwrites any union data inside the InstantiateNsRequest_Vld_VimNetworkId as the provided InstantiateNsRequestVldVimNetworkId1
func (t *InstantiateNsRequest_Vld_VimNetworkId) FromInstantiateNsRequestVldVimNetworkId1(v InstantiateNsRequestVldVimNetworkId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsRequestVldVimNetworkId1 performs a merge with any union data inside the InstantiateNsRequest_Vld_VimNetworkId, using the provided InstantiateNsRequestVldVimNetworkId1
func (t *InstantiateNsRequest_Vld_VimNetworkId) MergeInstantiateNsRequestVldVimNetworkId1(v InstantiateNsRequestVldVimNetworkId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstantiateNsRequest_Vld_VimNetworkId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstantiateNsRequest_Vld_VimNetworkId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInstantiateNsRequestVldVimNetworkName0 returns the union data inside the InstantiateNsRequest_Vld_VimNetworkName as a InstantiateNsRequestVldVimNetworkName0
func (t InstantiateNsRequest_Vld_VimNetworkName) AsInstantiateNsRequestVldVimNetworkName0() (InstantiateNsRequestVldVimNetworkName0, error) {
	var body InstantiateNsRequestVldVimNetworkName0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsRequestVldVimNetworkName0 overwrites any union data inside the InstantiateNsRequest_Vld_VimNetworkName as the provided InstantiateNsRequestVldVimNetworkName0
func (t *InstantiateNsRequest_Vld_VimNetworkName) FromInstantiateNsRequestVldVimNetworkName0(v InstantiateNsRequestVldVimNetworkName0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsRequestVldVimNetworkName0 performs a merge with any union data inside the InstantiateNsRequest_Vld_VimNetworkName, using the provided InstantiateNsRequestVldVimNetworkName0
func (t *InstantiateNsRequest_Vld_VimNetworkName) MergeInstantiateNsRequestVldVimNetworkName0(v InstantiateNsRequestVldVimNetworkName0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstantiateNsRequestVldVimNetworkName1 returns the union data inside the InstantiateNsRequest_Vld_VimNetworkName as a InstantiateNsRequestVldVimNetworkName1
func (t InstantiateNsRequest_Vld_VimNetworkName) AsInstantiateNsRequestVldVimNetworkName1() (InstantiateNsRequestVldVimNetworkName1, error) {
	var body InstantiateNsRequestVldVimNetworkName1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsRequestVldVimNetworkName1 overwrites any union data inside the InstantiateNsRequest_Vld_VimNetworkName as the provided InstantiateNsRequestVldVimNetworkName1
func (t *InstantiateNsRequest_Vld_VimNetworkName) FromInstantiateNsRequestVldVimNetworkName1(v InstantiateNsRequestVldVimNetworkName1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsRequestVldVimNetworkName1 performs a merge with any union data inside the InstantiateNsRequest_Vld_VimNetworkName, using the provided InstantiateNsRequestVldVimNetworkName1
func (t *InstantiateNsRequest_Vld_VimNetworkName) MergeInstantiateNsRequestVldVimNetworkName1(v InstantiateNsRequestVldVimNetworkName1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstantiateNsRequest_Vld_VimNetworkName) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstantiateNsRequest_Vld_VimNetworkName) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInstantiateNsRequestVldWimAccountId0 returns the union data inside the InstantiateNsRequest_Vld_WimAccountId as a InstantiateNsRequestVldWimAccountId0
func (t InstantiateNsRequest_Vld_WimAccountId) AsInstantiateNsRequestVldWimAccountId0() (InstantiateNsRequestVldWimAccountId0, error) {
	var body InstantiateNsRequestVldWimAccountId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsRequestVldWimAccountId0 overwrites any union data inside the InstantiateNsRequest_Vld_WimAccountId as the provided InstantiateNsRequestVldWimAccountId0
func (t *InstantiateNsRequest_Vld_WimAccountId) FromInstantiateNsRequestVldWimAccountId0(v InstantiateNsRequestVldWimAccountId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsRequestVldWimAccountId0 performs a merge with any union data inside the InstantiateNsRequest_Vld_WimAccountId, using the provided InstantiateNsRequestVldWimAccountId0
func (t *InstantiateNsRequest_Vld_WimAccountId) MergeInstantiateNsRequestVldWimAccountId0(v InstantiateNsRequestVldWimAccountId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstantiateNsRequestVldWimAccountId1 returns the union data inside the InstantiateNsRequest_Vld_WimAccountId as a InstantiateNsRequestVldWimAccountId1
func (t InstantiateNsRequest_Vld_WimAccountId) AsInstantiateNsRequestVldWimAccountId1() (InstantiateNsRequestVldWimAccountId1, error) {
	var body InstantiateNsRequestVldWimAccountId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsRequestVldWimAccountId1 overwrites any union data inside the InstantiateNsRequest_Vld_WimAccountId as the provided InstantiateNsRequestVldWimAccountId1
func (t *InstantiateNsRequest_Vld_WimAccountId) FromInstantiateNsRequestVldWimAccountId1(v InstantiateNsRequestVldWimAccountId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsRequestVldWimAccountId1 performs a merge with any union data inside the InstantiateNsRequest_Vld_WimAccountId, using the provided InstantiateNsRequestVldWimAccountId1
func (t *InstantiateNsRequest_Vld_WimAccountId) MergeInstantiateNsRequestVldWimAccountId1(v InstantiateNsRequestVldWimAccountId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstantiateNsRequest_Vld_WimAccountId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstantiateNsRequest_Vld_WimAccountId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInstantiateNsRequestWimAccountId0 returns the union data inside the InstantiateNsRequest_WimAccountId as a InstantiateNsRequestWimAccountId0
func (t InstantiateNsRequest_WimAccountId) AsInstantiateNsRequestWimAccountId0() (InstantiateNsRequestWimAccountId0, error) {
	var body InstantiateNsRequestWimAccountId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsRequestWimAccountId0 overwrites any union data inside the InstantiateNsRequest_WimAccountId as the provided InstantiateNsRequestWimAccountId0
func (t *InstantiateNsRequest_WimAccountId) FromInstantiateNsRequestWimAccountId0(v InstantiateNsRequestWimAccountId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsRequestWimAccountId0 performs a merge with any union data inside the InstantiateNsRequest_WimAccountId, using the provided InstantiateNsRequestWimAccountId0
func (t *InstantiateNsRequest_WimAccountId) MergeInstantiateNsRequestWimAccountId0(v InstantiateNsRequestWimAccountId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstantiateNsRequestWimAccountId1 returns the union data inside the InstantiateNsRequest_WimAccountId as a InstantiateNsRequestWimAccountId1
func (t InstantiateNsRequest_WimAccountId) AsInstantiateNsRequestWimAccountId1() (InstantiateNsRequestWimAccountId1, error) {
	var body InstantiateNsRequestWimAccountId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsRequestWimAccountId1 overwrites any union data inside the InstantiateNsRequest_WimAccountId as the provided InstantiateNsRequestWimAccountId1
func (t *InstantiateNsRequest_WimAccountId) FromInstantiateNsRequestWimAccountId1(v InstantiateNsRequestWimAccountId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsRequestWimAccountId1 performs a merge with any union data inside the InstantiateNsRequest_WimAccountId, using the provided InstantiateNsRequestWimAccountId1
func (t *InstantiateNsRequest_WimAccountId) MergeInstantiateNsRequestWimAccountId1(v InstantiateNsRequestWimAccountId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstantiateNsRequest_WimAccountId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstantiateNsRequest_WimAccountId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInstantiateNsiRequestNetsliceSubnetVldVimNetworkId0 returns the union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId as a InstantiateNsiRequestNetsliceSubnetVldVimNetworkId0
func (t InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId) AsInstantiateNsiRequestNetsliceSubnetVldVimNetworkId0() (InstantiateNsiRequestNetsliceSubnetVldVimNetworkId0, error) {
	var body InstantiateNsiRequestNetsliceSubnetVldVimNetworkId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceSubnetVldVimNetworkId0 overwrites any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId as the provided InstantiateNsiRequestNetsliceSubnetVldVimNetworkId0
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId) FromInstantiateNsiRequestNetsliceSubnetVldVimNetworkId0(v InstantiateNsiRequestNetsliceSubnetVldVimNetworkId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceSubnetVldVimNetworkId0 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId, using the provided InstantiateNsiRequestNetsliceSubnetVldVimNetworkId0
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId) MergeInstantiateNsiRequestNetsliceSubnetVldVimNetworkId0(v InstantiateNsiRequestNetsliceSubnetVldVimNetworkId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstantiateNsiRequestNetsliceSubnetVldVimNetworkId1 returns the union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId as a InstantiateNsiRequestNetsliceSubnetVldVimNetworkId1
func (t InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId) AsInstantiateNsiRequestNetsliceSubnetVldVimNetworkId1() (InstantiateNsiRequestNetsliceSubnetVldVimNetworkId1, error) {
	var body InstantiateNsiRequestNetsliceSubnetVldVimNetworkId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceSubnetVldVimNetworkId1 overwrites any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId as the provided InstantiateNsiRequestNetsliceSubnetVldVimNetworkId1
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId) FromInstantiateNsiRequestNetsliceSubnetVldVimNetworkId1(v InstantiateNsiRequestNetsliceSubnetVldVimNetworkId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceSubnetVldVimNetworkId1 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId, using the provided InstantiateNsiRequestNetsliceSubnetVldVimNetworkId1
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId) MergeInstantiateNsiRequestNetsliceSubnetVldVimNetworkId1(v InstantiateNsiRequestNetsliceSubnetVldVimNetworkId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInstantiateNsiRequestNetsliceSubnetVldVimNetworkName0 returns the union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName as a InstantiateNsiRequestNetsliceSubnetVldVimNetworkName0
func (t InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName) AsInstantiateNsiRequestNetsliceSubnetVldVimNetworkName0() (InstantiateNsiRequestNetsliceSubnetVldVimNetworkName0, error) {
	var body InstantiateNsiRequestNetsliceSubnetVldVimNetworkName0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceSubnetVldVimNetworkName0 overwrites any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName as the provided InstantiateNsiRequestNetsliceSubnetVldVimNetworkName0
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName) FromInstantiateNsiRequestNetsliceSubnetVldVimNetworkName0(v InstantiateNsiRequestNetsliceSubnetVldVimNetworkName0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceSubnetVldVimNetworkName0 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName, using the provided InstantiateNsiRequestNetsliceSubnetVldVimNetworkName0
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName) MergeInstantiateNsiRequestNetsliceSubnetVldVimNetworkName0(v InstantiateNsiRequestNetsliceSubnetVldVimNetworkName0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstantiateNsiRequestNetsliceSubnetVldVimNetworkName1 returns the union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName as a InstantiateNsiRequestNetsliceSubnetVldVimNetworkName1
func (t InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName) AsInstantiateNsiRequestNetsliceSubnetVldVimNetworkName1() (InstantiateNsiRequestNetsliceSubnetVldVimNetworkName1, error) {
	var body InstantiateNsiRequestNetsliceSubnetVldVimNetworkName1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceSubnetVldVimNetworkName1 overwrites any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName as the provided InstantiateNsiRequestNetsliceSubnetVldVimNetworkName1
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName) FromInstantiateNsiRequestNetsliceSubnetVldVimNetworkName1(v InstantiateNsiRequestNetsliceSubnetVldVimNetworkName1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceSubnetVldVimNetworkName1 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName, using the provided InstantiateNsiRequestNetsliceSubnetVldVimNetworkName1
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName) MergeInstantiateNsiRequestNetsliceSubnetVldVimNetworkName1(v InstantiateNsiRequestNetsliceSubnetVldVimNetworkName1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_VimNetworkName) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInstantiateNsiRequestNetsliceSubnetVldWimAccountId0 returns the union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId as a InstantiateNsiRequestNetsliceSubnetVldWimAccountId0
func (t InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId) AsInstantiateNsiRequestNetsliceSubnetVldWimAccountId0() (InstantiateNsiRequestNetsliceSubnetVldWimAccountId0, error) {
	var body InstantiateNsiRequestNetsliceSubnetVldWimAccountId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceSubnetVldWimAccountId0 overwrites any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId as the provided InstantiateNsiRequestNetsliceSubnetVldWimAccountId0
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId) FromInstantiateNsiRequestNetsliceSubnetVldWimAccountId0(v InstantiateNsiRequestNetsliceSubnetVldWimAccountId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceSubnetVldWimAccountId0 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId, using the provided InstantiateNsiRequestNetsliceSubnetVldWimAccountId0
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId) MergeInstantiateNsiRequestNetsliceSubnetVldWimAccountId0(v InstantiateNsiRequestNetsliceSubnetVldWimAccountId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstantiateNsiRequestNetsliceSubnetVldWimAccountId1 returns the union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId as a InstantiateNsiRequestNetsliceSubnetVldWimAccountId1
func (t InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId) AsInstantiateNsiRequestNetsliceSubnetVldWimAccountId1() (InstantiateNsiRequestNetsliceSubnetVldWimAccountId1, error) {
	var body InstantiateNsiRequestNetsliceSubnetVldWimAccountId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceSubnetVldWimAccountId1 overwrites any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId as the provided InstantiateNsiRequestNetsliceSubnetVldWimAccountId1
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId) FromInstantiateNsiRequestNetsliceSubnetVldWimAccountId1(v InstantiateNsiRequestNetsliceSubnetVldWimAccountId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceSubnetVldWimAccountId1 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId, using the provided InstantiateNsiRequestNetsliceSubnetVldWimAccountId1
func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId) MergeInstantiateNsiRequestNetsliceSubnetVldWimAccountId1(v InstantiateNsiRequestNetsliceSubnetVldWimAccountId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstantiateNsiRequest_NetsliceSubnet_Vld_WimAccountId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInstantiateNsiRequestNetsliceSubnetWimAccountId0 returns the union data inside the InstantiateNsiRequest_NetsliceSubnet_WimAccountId as a InstantiateNsiRequestNetsliceSubnetWimAccountId0
func (t InstantiateNsiRequest_NetsliceSubnet_WimAccountId) AsInstantiateNsiRequestNetsliceSubnetWimAccountId0() (InstantiateNsiRequestNetsliceSubnetWimAccountId0, error) {
	var body InstantiateNsiRequestNetsliceSubnetWimAccountId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceSubnetWimAccountId0 overwrites any union data inside the InstantiateNsiRequest_NetsliceSubnet_WimAccountId as the provided InstantiateNsiRequestNetsliceSubnetWimAccountId0
func (t *InstantiateNsiRequest_NetsliceSubnet_WimAccountId) FromInstantiateNsiRequestNetsliceSubnetWimAccountId0(v InstantiateNsiRequestNetsliceSubnetWimAccountId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceSubnetWimAccountId0 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceSubnet_WimAccountId, using the provided InstantiateNsiRequestNetsliceSubnetWimAccountId0
func (t *InstantiateNsiRequest_NetsliceSubnet_WimAccountId) MergeInstantiateNsiRequestNetsliceSubnetWimAccountId0(v InstantiateNsiRequestNetsliceSubnetWimAccountId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstantiateNsiRequestNetsliceSubnetWimAccountId1 returns the union data inside the InstantiateNsiRequest_NetsliceSubnet_WimAccountId as a InstantiateNsiRequestNetsliceSubnetWimAccountId1
func (t InstantiateNsiRequest_NetsliceSubnet_WimAccountId) AsInstantiateNsiRequestNetsliceSubnetWimAccountId1() (InstantiateNsiRequestNetsliceSubnetWimAccountId1, error) {
	var body InstantiateNsiRequestNetsliceSubnetWimAccountId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceSubnetWimAccountId1 overwrites any union data inside the InstantiateNsiRequest_NetsliceSubnet_WimAccountId as the provided InstantiateNsiRequestNetsliceSubnetWimAccountId1
func (t *InstantiateNsiRequest_NetsliceSubnet_WimAccountId) FromInstantiateNsiRequestNetsliceSubnetWimAccountId1(v InstantiateNsiRequestNetsliceSubnetWimAccountId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceSubnetWimAccountId1 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceSubnet_WimAccountId, using the provided InstantiateNsiRequestNetsliceSubnetWimAccountId1
func (t *InstantiateNsiRequest_NetsliceSubnet_WimAccountId) MergeInstantiateNsiRequestNetsliceSubnetWimAccountId1(v InstantiateNsiRequestNetsliceSubnetWimAccountId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstantiateNsiRequest_NetsliceSubnet_WimAccountId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstantiateNsiRequest_NetsliceSubnet_WimAccountId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInstantiateNsiRequestNetsliceVldVimNetworkId0 returns the union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkId as a InstantiateNsiRequestNetsliceVldVimNetworkId0
func (t InstantiateNsiRequest_NetsliceVld_VimNetworkId) AsInstantiateNsiRequestNetsliceVldVimNetworkId0() (InstantiateNsiRequestNetsliceVldVimNetworkId0, error) {
	var body InstantiateNsiRequestNetsliceVldVimNetworkId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceVldVimNetworkId0 overwrites any union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkId as the provided InstantiateNsiRequestNetsliceVldVimNetworkId0
func (t *InstantiateNsiRequest_NetsliceVld_VimNetworkId) FromInstantiateNsiRequestNetsliceVldVimNetworkId0(v InstantiateNsiRequestNetsliceVldVimNetworkId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceVldVimNetworkId0 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkId, using the provided InstantiateNsiRequestNetsliceVldVimNetworkId0
func (t *InstantiateNsiRequest_NetsliceVld_VimNetworkId) MergeInstantiateNsiRequestNetsliceVldVimNetworkId0(v InstantiateNsiRequestNetsliceVldVimNetworkId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstantiateNsiRequestNetsliceVldVimNetworkId1 returns the union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkId as a InstantiateNsiRequestNetsliceVldVimNetworkId1
func (t InstantiateNsiRequest_NetsliceVld_VimNetworkId) AsInstantiateNsiRequestNetsliceVldVimNetworkId1() (InstantiateNsiRequestNetsliceVldVimNetworkId1, error) {
	var body InstantiateNsiRequestNetsliceVldVimNetworkId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceVldVimNetworkId1 overwrites any union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkId as the provided InstantiateNsiRequestNetsliceVldVimNetworkId1
func (t *InstantiateNsiRequest_NetsliceVld_VimNetworkId) FromInstantiateNsiRequestNetsliceVldVimNetworkId1(v InstantiateNsiRequestNetsliceVldVimNetworkId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceVldVimNetworkId1 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkId, using the provided InstantiateNsiRequestNetsliceVldVimNetworkId1
func (t *InstantiateNsiRequest_NetsliceVld_VimNetworkId) MergeInstantiateNsiRequestNetsliceVldVimNetworkId1(v InstantiateNsiRequestNetsliceVldVimNetworkId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstantiateNsiRequest_NetsliceVld_VimNetworkId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstantiateNsiRequest_NetsliceVld_VimNetworkId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInstantiateNsiRequestNetsliceVldVimNetworkName0 returns the union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkName as a InstantiateNsiRequestNetsliceVldVimNetworkName0
func (t InstantiateNsiRequest_NetsliceVld_VimNetworkName) AsInstantiateNsiRequestNetsliceVldVimNetworkName0() (InstantiateNsiRequestNetsliceVldVimNetworkName0, error) {
	var body InstantiateNsiRequestNetsliceVldVimNetworkName0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceVldVimNetworkName0 overwrites any union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkName as the provided InstantiateNsiRequestNetsliceVldVimNetworkName0
func (t *InstantiateNsiRequest_NetsliceVld_VimNetworkName) FromInstantiateNsiRequestNetsliceVldVimNetworkName0(v InstantiateNsiRequestNetsliceVldVimNetworkName0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceVldVimNetworkName0 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkName, using the provided InstantiateNsiRequestNetsliceVldVimNetworkName0
func (t *InstantiateNsiRequest_NetsliceVld_VimNetworkName) MergeInstantiateNsiRequestNetsliceVldVimNetworkName0(v InstantiateNsiRequestNetsliceVldVimNetworkName0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstantiateNsiRequestNetsliceVldVimNetworkName1 returns the union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkName as a InstantiateNsiRequestNetsliceVldVimNetworkName1
func (t InstantiateNsiRequest_NetsliceVld_VimNetworkName) AsInstantiateNsiRequestNetsliceVldVimNetworkName1() (InstantiateNsiRequestNetsliceVldVimNetworkName1, error) {
	var body InstantiateNsiRequestNetsliceVldVimNetworkName1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantiateNsiRequestNetsliceVldVimNetworkName1 overwrites any union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkName as the provided InstantiateNsiRequestNetsliceVldVimNetworkName1
func (t *InstantiateNsiRequest_NetsliceVld_VimNetworkName) FromInstantiateNsiRequestNetsliceVldVimNetworkName1(v InstantiateNsiRequestNetsliceVldVimNetworkName1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantiateNsiRequestNetsliceVldVimNetworkName1 performs a merge with any union data inside the InstantiateNsiRequest_NetsliceVld_VimNetworkName, using the provided InstantiateNsiRequestNetsliceVldVimNetworkName1
func (t *InstantiateNsiRequest_NetsliceVld_VimNetworkName) MergeInstantiateNsiRequestNetsliceVldVimNetworkName1(v InstantiateNsiRequestNetsliceVldVimNetworkName1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstantiateNsiRequest_NetsliceVld_VimNetworkName) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstantiateNsiRequest_NetsliceVld_VimNetworkName) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNsdIds returns the union data inside the NsInstanceSubscriptionFilter as a NsdIds
func (t NsInstanceSubscriptionFilter) AsNsdIds() (NsdIds, error) {
	var body NsdIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNsdIds overwrites any union data inside the NsInstanceSubscriptionFilter as the provided NsdIds
func (t *NsInstanceSubscriptionFilter) FromNsdIds(v NsdIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNsdIds performs a merge with any union data inside the NsInstanceSubscriptionFilter, using the provided NsdIds
func (t *NsInstanceSubscriptionFilter) MergeNsdIds(v NsdIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVnfdIds returns the union data inside the NsInstanceSubscriptionFilter as a VnfdIds
func (t NsInstanceSubscriptionFilter) AsVnfdIds() (VnfdIds, error) {
	var body VnfdIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVnfdIds overwrites any union data inside the NsInstanceSubscriptionFilter as the provided VnfdIds
func (t *NsInstanceSubscriptionFilter) FromVnfdIds(v VnfdIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVnfdIds performs a merge with any union data inside the NsInstanceSubscriptionFilter, using the provided VnfdIds
func (t *NsInstanceSubscriptionFilter) MergeVnfdIds(v VnfdIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPnfdIds returns the union data inside the NsInstanceSubscriptionFilter as a PnfdIds
func (t NsInstanceSubscriptionFilter) AsPnfdIds() (PnfdIds, error) {
	var body PnfdIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPnfdIds overwrites any union data inside the NsInstanceSubscriptionFilter as the provided PnfdIds
func (t *NsInstanceSubscriptionFilter) FromPnfdIds(v PnfdIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePnfdIds performs a merge with any union data inside the NsInstanceSubscriptionFilter, using the provided PnfdIds
func (t *NsInstanceSubscriptionFilter) MergePnfdIds(v PnfdIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNsInstanceIds returns the union data inside the NsInstanceSubscriptionFilter as a NsInstanceIds
func (t NsInstanceSubscriptionFilter) AsNsInstanceIds() (NsInstanceIds, error) {
	var body NsInstanceIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNsInstanceIds overwrites any union data inside the NsInstanceSubscriptionFilter as the provided NsInstanceIds
func (t *NsInstanceSubscriptionFilter) FromNsInstanceIds(v NsInstanceIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNsInstanceIds performs a merge with any union data inside the NsInstanceSubscriptionFilter, using the provided NsInstanceIds
func (t *NsInstanceSubscriptionFilter) MergeNsInstanceIds(v NsInstanceIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNsInstanceNames returns the union data inside the NsInstanceSubscriptionFilter as a NsInstanceNames
func (t NsInstanceSubscriptionFilter) AsNsInstanceNames() (NsInstanceNames, error) {
	var body NsInstanceNames
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNsInstanceNames overwrites any union data inside the NsInstanceSubscriptionFilter as the provided NsInstanceNames
func (t *NsInstanceSubscriptionFilter) FromNsInstanceNames(v NsInstanceNames) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNsInstanceNames performs a merge with any union data inside the NsInstanceSubscriptionFilter, using the provided NsInstanceNames
func (t *NsInstanceSubscriptionFilter) MergeNsInstanceNames(v NsInstanceNames) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NsInstanceSubscriptionFilter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NsInstanceSubscriptionFilter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetK8sClusters request
	GetK8sClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateK8sClusterWithBody request with any body
	CreateK8sClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateK8sCluster(ctx context.Context, body CreateK8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteK8sCluster request
	DeleteK8sCluster(ctx context.Context, k8sClusterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetK8sCluster request
	GetK8sCluster(ctx context.Context, k8sClusterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditK8sClusterWithBody request with any body
	EditK8sClusterWithBody(ctx context.Context, k8sClusterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditK8sCluster(ctx context.Context, k8sClusterId openapi_types.UUID, body EditK8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetK8sRepos request
	GetK8sRepos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateK8sRepoWithBody request with any body
	CreateK8sRepoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateK8sRepo(ctx context.Context, body CreateK8sRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteK8sRepo request
	DeleteK8sRepo(ctx context.Context, k8sRepoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetK8sRepo request
	GetK8sRepo(ctx context.Context, k8sRepoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectWithBody request with any body
	CreateProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProject(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProject request
	DeleteProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProject request
	GetProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditProjectWithBody request with any body
	EditProjectWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditProject(ctx context.Context, projectId string, body EditProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoles request
	GetRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleWithBody request with any body
	CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRole request
	DeleteRole(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRole request
	GetRole(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditRoleWithBody request with any body
	EditRoleWithBody(ctx context.Context, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditRole(ctx context.Context, roleId string, body EditRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSDNs request
	GetSDNs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSDNWithBody request with any body
	CreateSDNWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSDN(ctx context.Context, body CreateSDNJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSDN request
	DeleteSDN(ctx context.Context, sdnId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSDN request
	GetSDN(ctx context.Context, sdnId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditSDNWithBody request with any body
	EditSDNWithBody(ctx context.Context, sdnId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditSDN(ctx context.Context, sdnId openapi_types.UUID, body EditSDNJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthToken request
	DeleteAuthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokens request
	GetTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTokenWithBody request with any body
	CreateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateToken(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteToken request
	DeleteToken(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetToken request
	GetToken(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserWithBody request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditUserWithBody request with any body
	EditUserWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditUser(ctx context.Context, userId string, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVcas request
	GetVcas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVcaWithBody request with any body
	CreateVcaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVca(ctx context.Context, body CreateVcaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVca request
	DeleteVca(ctx context.Context, vcaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVca request
	GetVca(ctx context.Context, vcaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditVcaWithBody request with any body
	EditVcaWithBody(ctx context.Context, vcaId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditVca(ctx context.Context, vcaId openapi_types.UUID, body EditVcaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVimAccounts request
	GetVimAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVimAccountWithBody request with any body
	CreateVimAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVimAccount(ctx context.Context, body CreateVimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVimAccount request
	DeleteVimAccount(ctx context.Context, vimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVimAccount request
	GetVimAccount(ctx context.Context, vimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditVimAccountWithBody request with any body
	EditVimAccountWithBody(ctx context.Context, vimAccountId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditVimAccount(ctx context.Context, vimAccountId openapi_types.UUID, body EditVimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVIMs request
	GetVIMs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVIMWithBody request with any body
	CreateVIMWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVIM(ctx context.Context, body CreateVIMJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVIM request
	DeleteVIM(ctx context.Context, vimId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVIM request
	GetVIM(ctx context.Context, vimId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditVIMWithBody request with any body
	EditVIMWithBody(ctx context.Context, vimId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditVIM(ctx context.Context, vimId openapi_types.UUID, body EditVIMJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWimAccounts request
	GetWimAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWimAccountWithBody request with any body
	CreateWimAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWimAccount(ctx context.Context, body CreateWimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWimAccount request
	DeleteWimAccount(ctx context.Context, wimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWimAccount request
	GetWimAccount(ctx context.Context, wimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditWimAccountWithBody request with any body
	EditWimAccountWithBody(ctx context.Context, wimAccountId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditWimAccount(ctx context.Context, wimAccountId openapi_types.UUID, body EditWimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAppProfile request
	ListAppProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAppProfileWithBody request with any body
	CreateAppProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAppProfile(ctx context.Context, body CreateAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAppProfile request
	DeleteAppProfile(ctx context.Context, appProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadAppProfile request
	ReadAppProfile(ctx context.Context, appProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAppProfileWithBody request with any body
	PatchAppProfileWithBody(ctx context.Context, appProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAppProfile(ctx context.Context, appProfileId string, body PatchAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Listk8sCluster request
	Listk8sCluster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Createk8sClusterWithBody request with any body
	Createk8sClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Createk8sCluster(ctx context.Context, body Createk8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletek8sCluster request
	Deletek8sCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Readk8sCluster request
	Readk8sCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppProfile request
	GetAppProfile(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRemoveAppProfileWithBody request with any body
	AddRemoveAppProfileWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRemoveAppProfile(ctx context.Context, clusterId string, body AddRemoveAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreds request
	GetCreds(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInfraConfigProfile request
	GetInfraConfigProfile(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddremoveInfraConfigProfileWithBody request with any body
	AddremoveInfraConfigProfileWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddremoveInfraConfigProfile(ctx context.Context, clusterId string, body AddremoveInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInfraControllerProfile request
	GetInfraControllerProfile(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddremoveInfraControllerProfileWithBody request with any body
	AddremoveInfraControllerProfileWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddremoveInfraControllerProfile(ctx context.Context, clusterId string, body AddremoveInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceProfile request
	GetResourceProfile(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddremoveResourceProfileWithBody request with any body
	AddremoveResourceProfileWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddremoveResourceProfile(ctx context.Context, clusterId string, body AddremoveResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeScalingWithBody request with any body
	NodeScalingWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeScaling(ctx context.Context, clusterId string, body NodeScalingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpgradeClusterWithBody request with any body
	UpgradeClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpgradeCluster(ctx context.Context, clusterId string, body UpgradeClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInfraConfigProfile request
	ListInfraConfigProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInfraConfigProfileWithBody request with any body
	CreateInfraConfigProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInfraConfigProfile(ctx context.Context, body CreateInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInfraConfigProfile request
	DeleteInfraConfigProfile(ctx context.Context, infraConfigProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadInfraConfigProfile request
	ReadInfraConfigProfile(ctx context.Context, infraConfigProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchInfraConfigProfileWithBody request with any body
	PatchInfraConfigProfileWithBody(ctx context.Context, infraConfigProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchInfraConfigProfile(ctx context.Context, infraConfigProfileId string, body PatchInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInfraControllerProfile request
	ListInfraControllerProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInfraControllerProfileWithBody request with any body
	CreateInfraControllerProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInfraControllerProfile(ctx context.Context, body CreateInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInfraControllerProfile request
	DeleteInfraControllerProfile(ctx context.Context, infraControllerProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadInfraControllerProfile request
	ReadInfraControllerProfile(ctx context.Context, infraControllerProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchInfraControllerProfileWithBody request with any body
	PatchInfraControllerProfileWithBody(ctx context.Context, infraControllerProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchInfraControllerProfile(ctx context.Context, infraControllerProfileId string, body PatchInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListResourceProfile request
	ListResourceProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResourceProfileWithBody request with any body
	CreateResourceProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResourceProfile(ctx context.Context, body CreateResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResourceProfile request
	DeleteResourceProfile(ctx context.Context, resourceProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadResourceProfile request
	ReadResourceProfile(ctx context.Context, resourceProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchResourceProfileWithBody request with any body
	PatchResourceProfileWithBody(ctx context.Context, resourceProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchResourceProfile(ctx context.Context, resourceProfileId string, body PatchResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKSU request
	GetKSU(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddKSUWithBody request with any body
	AddKSUWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddKSU(ctx context.Context, body AddKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMultipleKSUWithBody request with any body
	DeleteMultipleKSUWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteMultipleKSU(ctx context.Context, body DeleteMultipleKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMultipleKSUWithBody request with any body
	UpdateMultipleKSUWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMultipleKSU(ctx context.Context, body UpdateMultipleKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKSU request
	DeleteKSU(ctx context.Context, ksuId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadKSU request
	ReadKSU(ctx context.Context, ksuId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateKSUWithBody request with any body
	UpdateKSUWithBody(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateKSU(ctx context.Context, ksuId string, body UpdateKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloneKSUWithBody request with any body
	CloneKSUWithBody(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CloneKSU(ctx context.Context, ksuId string, body CloneKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveKSUWithBody request with any body
	MoveKSUWithBody(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoveKSU(ctx context.Context, ksuId string, body MoveKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNsconfigtemplates request
	GetNsconfigtemplates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddNsconfigtemplateWithBody request with any body
	AddNsconfigtemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddNsconfigtemplate(ctx context.Context, body AddNsconfigtemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNsconfigtemplate request
	DeleteNsconfigtemplate(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNsconfigtemplate request
	GetNsconfigtemplate(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTemplatecontent request
	GetTemplatecontent(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTemplatecontentWithBody request with any body
	UpdateTemplatecontentWithBody(ctx context.Context, nsconfigTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTemplatecontent(ctx context.Context, nsconfigTemplateId string, body UpdateTemplatecontentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSDs request
	GetNSDs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddNSDWithBody request with any body
	AddNSDWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddNSD(ctx context.Context, body AddNSDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNSD request
	DeleteNSD(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSD request
	GetNSD(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNSDWithBody request with any body
	UpdateNSDWithBody(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNSD(ctx context.Context, nsdInfoId string, body UpdateNSDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNsPkgArtifact request
	GetNsPkgArtifact(ctx context.Context, nsdInfoId string, artifactPath string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNsPkgNsd request
	GetNsPkgNsd(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSDcontent request
	GetNSDcontent(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNSDcontentWithBody request with any body
	UpdateNSDcontentWithBody(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNsPkgsContent request
	GetNsPkgsContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadNsPkgsContentWithBody request with any body
	UploadNsPkgsContentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNSPkgsIdContent request
	DeleteNSPkgsIdContent(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNsPkgsIdContent request
	GetNsPkgsIdContent(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNsPkgsIdContentWithBody request with any body
	UpdateNsPkgsIdContentWithBody(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNsPkgsIdContent(ctx context.Context, nsdInfoId string, body UpdateNsPkgsIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlarms request
	GetAlarms(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlarm request
	GetAlarm(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAlarmWithBody request with any body
	UpdateAlarmWithBody(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAlarm(ctx context.Context, uuid string, body UpdateAlarmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSIs request
	GetNSIs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddNSIWithBody request with any body
	AddNSIWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddNSI(ctx context.Context, body AddNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNSI request
	DeleteNSI(ctx context.Context, netsliceInstanceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSI request
	GetNSI(ctx context.Context, netsliceInstanceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionOnNSIWithBody request with any body
	ActionOnNSIWithBody(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionOnNSI(ctx context.Context, netsliceInstanceId string, body ActionOnNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstantiateNSIWithBody request with any body
	InstantiateNSIWithBody(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstantiateNSI(ctx context.Context, netsliceInstanceId string, body InstantiateNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TerminateNSIWithBody request with any body
	TerminateNSIWithBody(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TerminateNSI(ctx context.Context, netsliceInstanceId string, body TerminateNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSIsContent request
	GetNSIsContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNSIContentWithBody request with any body
	CreateNSIContentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNSIContent(ctx context.Context, body CreateNSIContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNSIContent request
	DeleteNSIContent(ctx context.Context, netsliceInstanceContentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSIContent request
	GetNSIContent(ctx context.Context, netsliceInstanceContentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNsiLcmOpOccs request
	GetNsiLcmOpOccs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNsiLcmOpOcc request
	GetNsiLcmOpOcc(ctx context.Context, nsiLcmOpOccId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSinstances request
	GetNSinstances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddNSinstanceWithBody request with any body
	AddNSinstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddNSinstance(ctx context.Context, body AddNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNSinstance request
	DeleteNSinstance(ctx context.Context, nsInstanceId string, params *DeleteNSinstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSinstance request
	GetNSinstance(ctx context.Context, nsInstanceId string, params *GetNSinstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionOnNSinstanceWithBody request with any body
	ActionOnNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionOnNSinstance(ctx context.Context, nsInstanceId string, body ActionOnNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealNSinstanceWithBody request with any body
	HealNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HealNSinstance(ctx context.Context, nsInstanceId string, body HealNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstantiateNSinstanceWithBody request with any body
	InstantiateNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstantiateNSinstance(ctx context.Context, nsInstanceId string, body InstantiateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MigrateNSinstanceWithBody request with any body
	MigrateNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MigrateNSinstance(ctx context.Context, nsInstanceId string, body MigrateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScaleNSinstanceWithBody request with any body
	ScaleNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScaleNSinstance(ctx context.Context, nsInstanceId string, body ScaleNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TerminateNSinstanceWithBody request with any body
	TerminateNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TerminateNSinstance(ctx context.Context, nsInstanceId string, body TerminateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNSinstanceWithBody request with any body
	UpdateNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNSinstance(ctx context.Context, nsInstanceId string, body UpdateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSinstancesContent request
	GetNSinstancesContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNSinstanceContentWithBody request with any body
	CreateNSinstanceContentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNSinstanceContent(ctx context.Context, body CreateNSinstanceContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNSinstanceContent request
	DeleteNSinstanceContent(ctx context.Context, nsInstanceContentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSinstanceContent request
	GetNSinstanceContent(ctx context.Context, nsInstanceContentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MultiNsTerminateRequestWithBody request with any body
	MultiNsTerminateRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MultiNsTerminateRequest(ctx context.Context, body MultiNsTerminateRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSLCMOpOccs request
	GetNSLCMOpOccs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSLCMOpOcc request
	GetNSLCMOpOcc(ctx context.Context, nsLcmOpOccId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelNSLCMOpOccWithBody request with any body
	CancelNSLCMOpOccWithBody(ctx context.Context, nsLcmOpOccId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelNSLCMOpOcc(ctx context.Context, nsLcmOpOccId string, body CancelNSLCMOpOccJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNsSubcriptions request
	GetNsSubcriptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddNsSubcriptionsWithBody request with any body
	AddNsSubcriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddNsSubcriptions(ctx context.Context, body AddNsSubcriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNsSubcriptionId request
	DeleteNsSubcriptionId(ctx context.Context, nsSubscriptionsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNsSubcriptionId request
	GetNsSubcriptionId(ctx context.Context, nsSubscriptionsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVnfInstances request
	GetVnfInstances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVnfInstance request
	GetVnfInstance(ctx context.Context, vnfInstanceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNsPmJobReport request
	GetNsPmJobReport(ctx context.Context, pmJobId string, nsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSTs request
	GetNSTs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddNSTWithBody request with any body
	AddNSTWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddNST(ctx context.Context, body AddNSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNST request
	DeleteNST(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNST request
	GetNST(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNstArtifact request
	GetNstArtifact(ctx context.Context, netsliceTemplateId string, artifactPath string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNstNst request
	GetNstNst(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSTcontent request
	GetNSTcontent(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNSTcontentWithBody request with any body
	UpdateNSTcontentWithBody(ctx context.Context, netsliceTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNstContent request
	GetNstContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadNstContentWithBody request with any body
	UploadNstContentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNstIdContent request
	DeleteNstIdContent(ctx context.Context, netsliceTemplateContentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNstIdContent request
	GetNstIdContent(ctx context.Context, netsliceTemplateContentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNstIdContentWithBody request with any body
	UpdateNstIdContentWithBody(ctx context.Context, netsliceTemplateContentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNstIdContent(ctx context.Context, netsliceTemplateContentId string, body UpdateNstIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOKAPackage request
	GetOKAPackage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddOKAPackageWithBody request with any body
	AddOKAPackageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOKAPackage request
	DeleteOKAPackage(ctx context.Context, okaPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadOKAPackage request
	ReadOKAPackage(ctx context.Context, okaPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOKAPackageWithBody request with any body
	UpdateOKAPackageWithBody(ctx context.Context, okaPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPDUs request
	GetPDUs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePDUWithBody request with any body
	CreatePDUWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePDU(ctx context.Context, body CreatePDUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePDU request
	DeletePDU(ctx context.Context, pduDescriptorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPDU request
	GetPDU(ctx context.Context, pduDescriptorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditPDUWithBody request with any body
	EditPDUWithBody(ctx context.Context, pduDescriptorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditPDU(ctx context.Context, pduDescriptorId string, body EditPDUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVnfPkgs request
	GetVnfPkgs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddVnfPkgWithBody request with any body
	AddVnfPkgWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddVnfPkg(ctx context.Context, body AddVnfPkgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVnfPkg request
	DeleteVnfPkg(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVnfPkg request
	GetVnfPkg(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVnfPkgWithBody request with any body
	UpdateVnfPkgWithBody(ctx context.Context, vnfPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVnfPkg(ctx context.Context, vnfPkgId string, body UpdateVnfPkgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVnfPkgArtifact request
	GetVnfPkgArtifact(ctx context.Context, vnfPkgId string, artifactPath string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVnfPkgContent request
	GetVnfPkgContent(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadVnfPkgContentWithBody request with any body
	UploadVnfPkgContentWithBody(ctx context.Context, vnfPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVnfPkgVnfd request
	GetVnfPkgVnfd(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVnfPkgsContent request
	GetVnfPkgsContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadVnfPkgsContentWithBody request with any body
	UploadVnfPkgsContentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVnfPkgsIdContent request
	DeleteVnfPkgsIdContent(ctx context.Context, packageContentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVnfPkgsIdContent request
	GetVnfPkgsIdContent(ctx context.Context, packageContentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVnfPkgsIdContentWithBody request with any body
	UpdateVnfPkgsIdContentWithBody(ctx context.Context, packageContentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVnfPkgsIdContent(ctx context.Context, packageContentId string, body UpdateVnfPkgsIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetK8sClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetK8sClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateK8sClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateK8sClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateK8sCluster(ctx context.Context, body CreateK8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateK8sClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteK8sCluster(ctx context.Context, k8sClusterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteK8sClusterRequest(c.Server, k8sClusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetK8sCluster(ctx context.Context, k8sClusterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetK8sClusterRequest(c.Server, k8sClusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditK8sClusterWithBody(ctx context.Context, k8sClusterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditK8sClusterRequestWithBody(c.Server, k8sClusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditK8sCluster(ctx context.Context, k8sClusterId openapi_types.UUID, body EditK8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditK8sClusterRequest(c.Server, k8sClusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetK8sRepos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetK8sReposRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateK8sRepoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateK8sRepoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateK8sRepo(ctx context.Context, body CreateK8sRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateK8sRepoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteK8sRepo(ctx context.Context, k8sRepoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteK8sRepoRequest(c.Server, k8sRepoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetK8sRepo(ctx context.Context, k8sRepoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetK8sRepoRequest(c.Server, k8sRepoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProject(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditProjectWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditProjectRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditProject(ctx context.Context, projectId string, body EditProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditProjectRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRole(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequest(c.Server, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRole(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleRequest(c.Server, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditRoleWithBody(ctx context.Context, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditRoleRequestWithBody(c.Server, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditRole(ctx context.Context, roleId string, body EditRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditRoleRequest(c.Server, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSDNs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSDNsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSDNWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSDNRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSDN(ctx context.Context, body CreateSDNJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSDNRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSDN(ctx context.Context, sdnId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSDNRequest(c.Server, sdnId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSDN(ctx context.Context, sdnId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSDNRequest(c.Server, sdnId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditSDNWithBody(ctx context.Context, sdnId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditSDNRequestWithBody(c.Server, sdnId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditSDN(ctx context.Context, sdnId openapi_types.UUID, body EditSDNJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditSDNRequest(c.Server, sdnId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateToken(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteToken(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTokenRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetToken(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditUserRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditUser(ctx context.Context, userId string, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditUserRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVcas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVcasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVcaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVcaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVca(ctx context.Context, body CreateVcaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVcaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVca(ctx context.Context, vcaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVcaRequest(c.Server, vcaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVca(ctx context.Context, vcaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVcaRequest(c.Server, vcaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditVcaWithBody(ctx context.Context, vcaId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditVcaRequestWithBody(c.Server, vcaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditVca(ctx context.Context, vcaId openapi_types.UUID, body EditVcaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditVcaRequest(c.Server, vcaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVimAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVimAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVimAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVimAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVimAccount(ctx context.Context, body CreateVimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVimAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVimAccount(ctx context.Context, vimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVimAccountRequest(c.Server, vimAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVimAccount(ctx context.Context, vimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVimAccountRequest(c.Server, vimAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditVimAccountWithBody(ctx context.Context, vimAccountId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditVimAccountRequestWithBody(c.Server, vimAccountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditVimAccount(ctx context.Context, vimAccountId openapi_types.UUID, body EditVimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditVimAccountRequest(c.Server, vimAccountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVIMs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVIMsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVIMWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVIMRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVIM(ctx context.Context, body CreateVIMJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVIMRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVIM(ctx context.Context, vimId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVIMRequest(c.Server, vimId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVIM(ctx context.Context, vimId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVIMRequest(c.Server, vimId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditVIMWithBody(ctx context.Context, vimId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditVIMRequestWithBody(c.Server, vimId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditVIM(ctx context.Context, vimId openapi_types.UUID, body EditVIMJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditVIMRequest(c.Server, vimId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWimAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWimAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWimAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWimAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWimAccount(ctx context.Context, body CreateWimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWimAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWimAccount(ctx context.Context, wimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWimAccountRequest(c.Server, wimAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWimAccount(ctx context.Context, wimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWimAccountRequest(c.Server, wimAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditWimAccountWithBody(ctx context.Context, wimAccountId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditWimAccountRequestWithBody(c.Server, wimAccountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditWimAccount(ctx context.Context, wimAccountId openapi_types.UUID, body EditWimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditWimAccountRequest(c.Server, wimAccountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAppProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAppProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAppProfile(ctx context.Context, body CreateAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAppProfile(ctx context.Context, appProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppProfileRequest(c.Server, appProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadAppProfile(ctx context.Context, appProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadAppProfileRequest(c.Server, appProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAppProfileWithBody(ctx context.Context, appProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAppProfileRequestWithBody(c.Server, appProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAppProfile(ctx context.Context, appProfileId string, body PatchAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAppProfileRequest(c.Server, appProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Listk8sCluster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListk8sClusterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Createk8sClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatek8sClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Createk8sCluster(ctx context.Context, body Createk8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatek8sClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletek8sCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletek8sClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Readk8sCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadk8sClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppProfile(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppProfileRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRemoveAppProfileWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRemoveAppProfileRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRemoveAppProfile(ctx context.Context, clusterId string, body AddRemoveAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRemoveAppProfileRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreds(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCredsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInfraConfigProfile(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInfraConfigProfileRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddremoveInfraConfigProfileWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddremoveInfraConfigProfileRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddremoveInfraConfigProfile(ctx context.Context, clusterId string, body AddremoveInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddremoveInfraConfigProfileRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInfraControllerProfile(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInfraControllerProfileRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddremoveInfraControllerProfileWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddremoveInfraControllerProfileRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddremoveInfraControllerProfile(ctx context.Context, clusterId string, body AddremoveInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddremoveInfraControllerProfileRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceProfile(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceProfileRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddremoveResourceProfileWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddremoveResourceProfileRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddremoveResourceProfile(ctx context.Context, clusterId string, body AddremoveResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddremoveResourceProfileRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeScalingWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeScalingRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeScaling(ctx context.Context, clusterId string, body NodeScalingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeScalingRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpgradeClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpgradeClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpgradeCluster(ctx context.Context, clusterId string, body UpgradeClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpgradeClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInfraConfigProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInfraConfigProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInfraConfigProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInfraConfigProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInfraConfigProfile(ctx context.Context, body CreateInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInfraConfigProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInfraConfigProfile(ctx context.Context, infraConfigProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInfraConfigProfileRequest(c.Server, infraConfigProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadInfraConfigProfile(ctx context.Context, infraConfigProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadInfraConfigProfileRequest(c.Server, infraConfigProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInfraConfigProfileWithBody(ctx context.Context, infraConfigProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInfraConfigProfileRequestWithBody(c.Server, infraConfigProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInfraConfigProfile(ctx context.Context, infraConfigProfileId string, body PatchInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInfraConfigProfileRequest(c.Server, infraConfigProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInfraControllerProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInfraControllerProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInfraControllerProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInfraControllerProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInfraControllerProfile(ctx context.Context, body CreateInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInfraControllerProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInfraControllerProfile(ctx context.Context, infraControllerProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInfraControllerProfileRequest(c.Server, infraControllerProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadInfraControllerProfile(ctx context.Context, infraControllerProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadInfraControllerProfileRequest(c.Server, infraControllerProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInfraControllerProfileWithBody(ctx context.Context, infraControllerProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInfraControllerProfileRequestWithBody(c.Server, infraControllerProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInfraControllerProfile(ctx context.Context, infraControllerProfileId string, body PatchInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInfraControllerProfileRequest(c.Server, infraControllerProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListResourceProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListResourceProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceProfile(ctx context.Context, body CreateResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResourceProfile(ctx context.Context, resourceProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceProfileRequest(c.Server, resourceProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadResourceProfile(ctx context.Context, resourceProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadResourceProfileRequest(c.Server, resourceProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchResourceProfileWithBody(ctx context.Context, resourceProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchResourceProfileRequestWithBody(c.Server, resourceProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchResourceProfile(ctx context.Context, resourceProfileId string, body PatchResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchResourceProfileRequest(c.Server, resourceProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKSU(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKSURequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddKSUWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddKSURequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddKSU(ctx context.Context, body AddKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddKSURequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMultipleKSUWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMultipleKSURequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMultipleKSU(ctx context.Context, body DeleteMultipleKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMultipleKSURequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMultipleKSUWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMultipleKSURequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMultipleKSU(ctx context.Context, body UpdateMultipleKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMultipleKSURequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKSU(ctx context.Context, ksuId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKSURequest(c.Server, ksuId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadKSU(ctx context.Context, ksuId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadKSURequest(c.Server, ksuId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateKSUWithBody(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateKSURequestWithBody(c.Server, ksuId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateKSU(ctx context.Context, ksuId string, body UpdateKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateKSURequest(c.Server, ksuId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneKSUWithBody(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneKSURequestWithBody(c.Server, ksuId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneKSU(ctx context.Context, ksuId string, body CloneKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneKSURequest(c.Server, ksuId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveKSUWithBody(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveKSURequestWithBody(c.Server, ksuId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveKSU(ctx context.Context, ksuId string, body MoveKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveKSURequest(c.Server, ksuId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNsconfigtemplates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNsconfigtemplatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNsconfigtemplateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNsconfigtemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNsconfigtemplate(ctx context.Context, body AddNsconfigtemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNsconfigtemplateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNsconfigtemplate(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNsconfigtemplateRequest(c.Server, nsconfigTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNsconfigtemplate(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNsconfigtemplateRequest(c.Server, nsconfigTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTemplatecontent(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTemplatecontentRequest(c.Server, nsconfigTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTemplatecontentWithBody(ctx context.Context, nsconfigTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTemplatecontentRequestWithBody(c.Server, nsconfigTemplateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTemplatecontent(ctx context.Context, nsconfigTemplateId string, body UpdateTemplatecontentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTemplatecontentRequest(c.Server, nsconfigTemplateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSDs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSDsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNSDWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNSDRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNSD(ctx context.Context, body AddNSDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNSDRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNSD(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNSDRequest(c.Server, nsdInfoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSD(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSDRequest(c.Server, nsdInfoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNSDWithBody(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNSDRequestWithBody(c.Server, nsdInfoId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNSD(ctx context.Context, nsdInfoId string, body UpdateNSDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNSDRequest(c.Server, nsdInfoId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNsPkgArtifact(ctx context.Context, nsdInfoId string, artifactPath string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNsPkgArtifactRequest(c.Server, nsdInfoId, artifactPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNsPkgNsd(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNsPkgNsdRequest(c.Server, nsdInfoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSDcontent(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSDcontentRequest(c.Server, nsdInfoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNSDcontentWithBody(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNSDcontentRequestWithBody(c.Server, nsdInfoId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNsPkgsContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNsPkgsContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadNsPkgsContentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadNsPkgsContentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNSPkgsIdContent(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNSPkgsIdContentRequest(c.Server, nsdInfoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNsPkgsIdContent(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNsPkgsIdContentRequest(c.Server, nsdInfoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNsPkgsIdContentWithBody(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNsPkgsIdContentRequestWithBody(c.Server, nsdInfoId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNsPkgsIdContent(ctx context.Context, nsdInfoId string, body UpdateNsPkgsIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNsPkgsIdContentRequest(c.Server, nsdInfoId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlarms(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlarmsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlarm(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlarmRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlarmWithBody(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlarmRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAlarm(ctx context.Context, uuid string, body UpdateAlarmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAlarmRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSIs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSIsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNSIWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNSIRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNSI(ctx context.Context, body AddNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNSIRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNSI(ctx context.Context, netsliceInstanceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNSIRequest(c.Server, netsliceInstanceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSI(ctx context.Context, netsliceInstanceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSIRequest(c.Server, netsliceInstanceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionOnNSIWithBody(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionOnNSIRequestWithBody(c.Server, netsliceInstanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionOnNSI(ctx context.Context, netsliceInstanceId string, body ActionOnNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionOnNSIRequest(c.Server, netsliceInstanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstantiateNSIWithBody(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstantiateNSIRequestWithBody(c.Server, netsliceInstanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstantiateNSI(ctx context.Context, netsliceInstanceId string, body InstantiateNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstantiateNSIRequest(c.Server, netsliceInstanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TerminateNSIWithBody(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTerminateNSIRequestWithBody(c.Server, netsliceInstanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TerminateNSI(ctx context.Context, netsliceInstanceId string, body TerminateNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTerminateNSIRequest(c.Server, netsliceInstanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSIsContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSIsContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNSIContentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNSIContentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNSIContent(ctx context.Context, body CreateNSIContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNSIContentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNSIContent(ctx context.Context, netsliceInstanceContentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNSIContentRequest(c.Server, netsliceInstanceContentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSIContent(ctx context.Context, netsliceInstanceContentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSIContentRequest(c.Server, netsliceInstanceContentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNsiLcmOpOccs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNsiLcmOpOccsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNsiLcmOpOcc(ctx context.Context, nsiLcmOpOccId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNsiLcmOpOccRequest(c.Server, nsiLcmOpOccId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSinstances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSinstancesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNSinstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNSinstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNSinstance(ctx context.Context, body AddNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNSinstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNSinstance(ctx context.Context, nsInstanceId string, params *DeleteNSinstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNSinstanceRequest(c.Server, nsInstanceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSinstance(ctx context.Context, nsInstanceId string, params *GetNSinstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSinstanceRequest(c.Server, nsInstanceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionOnNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionOnNSinstanceRequestWithBody(c.Server, nsInstanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionOnNSinstance(ctx context.Context, nsInstanceId string, body ActionOnNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionOnNSinstanceRequest(c.Server, nsInstanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealNSinstanceRequestWithBody(c.Server, nsInstanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealNSinstance(ctx context.Context, nsInstanceId string, body HealNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealNSinstanceRequest(c.Server, nsInstanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstantiateNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstantiateNSinstanceRequestWithBody(c.Server, nsInstanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstantiateNSinstance(ctx context.Context, nsInstanceId string, body InstantiateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstantiateNSinstanceRequest(c.Server, nsInstanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrateNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrateNSinstanceRequestWithBody(c.Server, nsInstanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrateNSinstance(ctx context.Context, nsInstanceId string, body MigrateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrateNSinstanceRequest(c.Server, nsInstanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScaleNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScaleNSinstanceRequestWithBody(c.Server, nsInstanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScaleNSinstance(ctx context.Context, nsInstanceId string, body ScaleNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScaleNSinstanceRequest(c.Server, nsInstanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TerminateNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTerminateNSinstanceRequestWithBody(c.Server, nsInstanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TerminateNSinstance(ctx context.Context, nsInstanceId string, body TerminateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTerminateNSinstanceRequest(c.Server, nsInstanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNSinstanceWithBody(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNSinstanceRequestWithBody(c.Server, nsInstanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNSinstance(ctx context.Context, nsInstanceId string, body UpdateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNSinstanceRequest(c.Server, nsInstanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSinstancesContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSinstancesContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNSinstanceContentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNSinstanceContentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNSinstanceContent(ctx context.Context, body CreateNSinstanceContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNSinstanceContentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNSinstanceContent(ctx context.Context, nsInstanceContentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNSinstanceContentRequest(c.Server, nsInstanceContentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSinstanceContent(ctx context.Context, nsInstanceContentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSinstanceContentRequest(c.Server, nsInstanceContentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MultiNsTerminateRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMultiNsTerminateRequestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MultiNsTerminateRequest(ctx context.Context, body MultiNsTerminateRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMultiNsTerminateRequestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSLCMOpOccs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSLCMOpOccsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSLCMOpOcc(ctx context.Context, nsLcmOpOccId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSLCMOpOccRequest(c.Server, nsLcmOpOccId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelNSLCMOpOccWithBody(ctx context.Context, nsLcmOpOccId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelNSLCMOpOccRequestWithBody(c.Server, nsLcmOpOccId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelNSLCMOpOcc(ctx context.Context, nsLcmOpOccId string, body CancelNSLCMOpOccJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelNSLCMOpOccRequest(c.Server, nsLcmOpOccId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNsSubcriptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNsSubcriptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNsSubcriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNsSubcriptionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNsSubcriptions(ctx context.Context, body AddNsSubcriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNsSubcriptionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNsSubcriptionId(ctx context.Context, nsSubscriptionsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNsSubcriptionIdRequest(c.Server, nsSubscriptionsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNsSubcriptionId(ctx context.Context, nsSubscriptionsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNsSubcriptionIdRequest(c.Server, nsSubscriptionsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVnfInstances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVnfInstancesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVnfInstance(ctx context.Context, vnfInstanceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVnfInstanceRequest(c.Server, vnfInstanceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNsPmJobReport(ctx context.Context, pmJobId string, nsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNsPmJobReportRequest(c.Server, pmJobId, nsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSTs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSTsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNSTWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNSTRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNST(ctx context.Context, body AddNSTJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNSTRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNST(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNSTRequest(c.Server, netsliceTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNST(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSTRequest(c.Server, netsliceTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNstArtifact(ctx context.Context, netsliceTemplateId string, artifactPath string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNstArtifactRequest(c.Server, netsliceTemplateId, artifactPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNstNst(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNstNstRequest(c.Server, netsliceTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSTcontent(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSTcontentRequest(c.Server, netsliceTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNSTcontentWithBody(ctx context.Context, netsliceTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNSTcontentRequestWithBody(c.Server, netsliceTemplateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNstContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNstContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadNstContentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadNstContentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNstIdContent(ctx context.Context, netsliceTemplateContentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNstIdContentRequest(c.Server, netsliceTemplateContentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNstIdContent(ctx context.Context, netsliceTemplateContentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNstIdContentRequest(c.Server, netsliceTemplateContentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNstIdContentWithBody(ctx context.Context, netsliceTemplateContentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNstIdContentRequestWithBody(c.Server, netsliceTemplateContentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNstIdContent(ctx context.Context, netsliceTemplateContentId string, body UpdateNstIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNstIdContentRequest(c.Server, netsliceTemplateContentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOKAPackage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOKAPackageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOKAPackageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOKAPackageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOKAPackage(ctx context.Context, okaPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOKAPackageRequest(c.Server, okaPkgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadOKAPackage(ctx context.Context, okaPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadOKAPackageRequest(c.Server, okaPkgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOKAPackageWithBody(ctx context.Context, okaPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOKAPackageRequestWithBody(c.Server, okaPkgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPDUs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPDUsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePDUWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePDURequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePDU(ctx context.Context, body CreatePDUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePDURequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePDU(ctx context.Context, pduDescriptorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePDURequest(c.Server, pduDescriptorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPDU(ctx context.Context, pduDescriptorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPDURequest(c.Server, pduDescriptorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditPDUWithBody(ctx context.Context, pduDescriptorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditPDURequestWithBody(c.Server, pduDescriptorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditPDU(ctx context.Context, pduDescriptorId string, body EditPDUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditPDURequest(c.Server, pduDescriptorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVnfPkgs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVnfPkgsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVnfPkgWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVnfPkgRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVnfPkg(ctx context.Context, body AddVnfPkgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVnfPkgRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVnfPkg(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVnfPkgRequest(c.Server, vnfPkgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVnfPkg(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVnfPkgRequest(c.Server, vnfPkgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVnfPkgWithBody(ctx context.Context, vnfPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVnfPkgRequestWithBody(c.Server, vnfPkgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVnfPkg(ctx context.Context, vnfPkgId string, body UpdateVnfPkgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVnfPkgRequest(c.Server, vnfPkgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVnfPkgArtifact(ctx context.Context, vnfPkgId string, artifactPath string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVnfPkgArtifactRequest(c.Server, vnfPkgId, artifactPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVnfPkgContent(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVnfPkgContentRequest(c.Server, vnfPkgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadVnfPkgContentWithBody(ctx context.Context, vnfPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadVnfPkgContentRequestWithBody(c.Server, vnfPkgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVnfPkgVnfd(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVnfPkgVnfdRequest(c.Server, vnfPkgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVnfPkgsContent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVnfPkgsContentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadVnfPkgsContentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadVnfPkgsContentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVnfPkgsIdContent(ctx context.Context, packageContentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVnfPkgsIdContentRequest(c.Server, packageContentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVnfPkgsIdContent(ctx context.Context, packageContentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVnfPkgsIdContentRequest(c.Server, packageContentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVnfPkgsIdContentWithBody(ctx context.Context, packageContentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVnfPkgsIdContentRequestWithBody(c.Server, packageContentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVnfPkgsIdContent(ctx context.Context, packageContentId string, body UpdateVnfPkgsIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVnfPkgsIdContentRequest(c.Server, packageContentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetK8sClustersRequest generates requests for GetK8sClusters
func NewGetK8sClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/k8sclusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateK8sClusterRequest calls the generic CreateK8sCluster builder with application/json body
func NewCreateK8sClusterRequest(server string, body CreateK8sClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateK8sClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateK8sClusterRequestWithBody generates requests for CreateK8sCluster with any type of body
func NewCreateK8sClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/k8sclusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteK8sClusterRequest generates requests for DeleteK8sCluster
func NewDeleteK8sClusterRequest(server string, k8sClusterId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "k8sClusterId", runtime.ParamLocationPath, k8sClusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/k8sclusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetK8sClusterRequest generates requests for GetK8sCluster
func NewGetK8sClusterRequest(server string, k8sClusterId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "k8sClusterId", runtime.ParamLocationPath, k8sClusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/k8sclusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditK8sClusterRequest calls the generic EditK8sCluster builder with application/json body
func NewEditK8sClusterRequest(server string, k8sClusterId openapi_types.UUID, body EditK8sClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditK8sClusterRequestWithBody(server, k8sClusterId, "application/json", bodyReader)
}

// NewEditK8sClusterRequestWithBody generates requests for EditK8sCluster with any type of body
func NewEditK8sClusterRequestWithBody(server string, k8sClusterId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "k8sClusterId", runtime.ParamLocationPath, k8sClusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/k8sclusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetK8sReposRequest generates requests for GetK8sRepos
func NewGetK8sReposRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/k8srepos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateK8sRepoRequest calls the generic CreateK8sRepo builder with application/json body
func NewCreateK8sRepoRequest(server string, body CreateK8sRepoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateK8sRepoRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateK8sRepoRequestWithBody generates requests for CreateK8sRepo with any type of body
func NewCreateK8sRepoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/k8srepos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteK8sRepoRequest generates requests for DeleteK8sRepo
func NewDeleteK8sRepoRequest(server string, k8sRepoId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "k8sRepoId", runtime.ParamLocationPath, k8sRepoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/k8srepos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetK8sRepoRequest generates requests for GetK8sRepo
func NewGetK8sRepoRequest(server string, k8sRepoId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "k8sRepoId", runtime.ParamLocationPath, k8sRepoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/k8srepos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectRequest calls the generic CreateProject builder with application/json body
func NewCreateProjectRequest(server string, body CreateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProjectRequestWithBody generates requests for CreateProject with any type of body
func NewCreateProjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectRequest generates requests for DeleteProject
func NewDeleteProjectRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectRequest generates requests for GetProject
func NewGetProjectRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditProjectRequest calls the generic EditProject builder with application/json body
func NewEditProjectRequest(server string, projectId string, body EditProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditProjectRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewEditProjectRequestWithBody generates requests for EditProject with any type of body
func NewEditProjectRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRolesRequest generates requests for GetRoles
func NewGetRolesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleRequest calls the generic CreateRole builder with application/json body
func NewCreateRoleRequest(server string, body CreateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest generates requests for DeleteRole
func NewDeleteRoleRequest(server string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roleId", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleRequest generates requests for GetRole
func NewGetRoleRequest(server string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roleId", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditRoleRequest calls the generic EditRole builder with application/json body
func NewEditRoleRequest(server string, roleId string, body EditRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditRoleRequestWithBody(server, roleId, "application/json", bodyReader)
}

// NewEditRoleRequestWithBody generates requests for EditRole with any type of body
func NewEditRoleRequestWithBody(server string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roleId", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSDNsRequest generates requests for GetSDNs
func NewGetSDNsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/sdns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSDNRequest calls the generic CreateSDN builder with application/json body
func NewCreateSDNRequest(server string, body CreateSDNJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSDNRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSDNRequestWithBody generates requests for CreateSDN with any type of body
func NewCreateSDNRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/sdns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSDNRequest generates requests for DeleteSDN
func NewDeleteSDNRequest(server string, sdnId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sdnId", runtime.ParamLocationPath, sdnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/sdns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSDNRequest generates requests for GetSDN
func NewGetSDNRequest(server string, sdnId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sdnId", runtime.ParamLocationPath, sdnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/sdns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditSDNRequest calls the generic EditSDN builder with application/json body
func NewEditSDNRequest(server string, sdnId openapi_types.UUID, body EditSDNJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditSDNRequestWithBody(server, sdnId, "application/json", bodyReader)
}

// NewEditSDNRequestWithBody generates requests for EditSDN with any type of body
func NewEditSDNRequestWithBody(server string, sdnId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sdnId", runtime.ParamLocationPath, sdnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/sdns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthTokenRequest generates requests for DeleteAuthToken
func NewDeleteAuthTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokensRequest generates requests for GetTokens
func NewGetTokensRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTokenRequest calls the generic CreateToken builder with application/json body
func NewCreateTokenRequest(server string, body CreateTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTokenRequestWithBody generates requests for CreateToken with any type of body
func NewCreateTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTokenRequest generates requests for DeleteToken
func NewDeleteTokenRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokenRequest generates requests for GetToken
func NewGetTokenRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditUserRequest calls the generic EditUser builder with application/json body
func NewEditUserRequest(server string, userId string, body EditUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditUserRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewEditUserRequestWithBody generates requests for EditUser with any type of body
func NewEditUserRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVcasRequest generates requests for GetVcas
func NewGetVcasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vca")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateVcaRequest calls the generic CreateVca builder with application/json body
func NewCreateVcaRequest(server string, body CreateVcaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVcaRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVcaRequestWithBody generates requests for CreateVca with any type of body
func NewCreateVcaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vca")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVcaRequest generates requests for DeleteVca
func NewDeleteVcaRequest(server string, vcaId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vcaId", runtime.ParamLocationPath, vcaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vca/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVcaRequest generates requests for GetVca
func NewGetVcaRequest(server string, vcaId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vcaId", runtime.ParamLocationPath, vcaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vca/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditVcaRequest calls the generic EditVca builder with application/json body
func NewEditVcaRequest(server string, vcaId openapi_types.UUID, body EditVcaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditVcaRequestWithBody(server, vcaId, "application/json", bodyReader)
}

// NewEditVcaRequestWithBody generates requests for EditVca with any type of body
func NewEditVcaRequestWithBody(server string, vcaId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vcaId", runtime.ParamLocationPath, vcaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vca/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVimAccountsRequest generates requests for GetVimAccounts
func NewGetVimAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vim_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateVimAccountRequest calls the generic CreateVimAccount builder with application/json body
func NewCreateVimAccountRequest(server string, body CreateVimAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVimAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVimAccountRequestWithBody generates requests for CreateVimAccount with any type of body
func NewCreateVimAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vim_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVimAccountRequest generates requests for DeleteVimAccount
func NewDeleteVimAccountRequest(server string, vimAccountId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vimAccountId", runtime.ParamLocationPath, vimAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vim_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVimAccountRequest generates requests for GetVimAccount
func NewGetVimAccountRequest(server string, vimAccountId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vimAccountId", runtime.ParamLocationPath, vimAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vim_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditVimAccountRequest calls the generic EditVimAccount builder with application/json body
func NewEditVimAccountRequest(server string, vimAccountId openapi_types.UUID, body EditVimAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditVimAccountRequestWithBody(server, vimAccountId, "application/json", bodyReader)
}

// NewEditVimAccountRequestWithBody generates requests for EditVimAccount with any type of body
func NewEditVimAccountRequestWithBody(server string, vimAccountId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vimAccountId", runtime.ParamLocationPath, vimAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vim_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVIMsRequest generates requests for GetVIMs
func NewGetVIMsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vims")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateVIMRequest calls the generic CreateVIM builder with application/json body
func NewCreateVIMRequest(server string, body CreateVIMJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVIMRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVIMRequestWithBody generates requests for CreateVIM with any type of body
func NewCreateVIMRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vims")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVIMRequest generates requests for DeleteVIM
func NewDeleteVIMRequest(server string, vimId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vimId", runtime.ParamLocationPath, vimId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vims/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVIMRequest generates requests for GetVIM
func NewGetVIMRequest(server string, vimId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vimId", runtime.ParamLocationPath, vimId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vims/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditVIMRequest calls the generic EditVIM builder with application/json body
func NewEditVIMRequest(server string, vimId openapi_types.UUID, body EditVIMJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditVIMRequestWithBody(server, vimId, "application/json", bodyReader)
}

// NewEditVIMRequestWithBody generates requests for EditVIM with any type of body
func NewEditVIMRequestWithBody(server string, vimId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vimId", runtime.ParamLocationPath, vimId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/vims/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWimAccountsRequest generates requests for GetWimAccounts
func NewGetWimAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/wim_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWimAccountRequest calls the generic CreateWimAccount builder with application/json body
func NewCreateWimAccountRequest(server string, body CreateWimAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWimAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWimAccountRequestWithBody generates requests for CreateWimAccount with any type of body
func NewCreateWimAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/wim_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWimAccountRequest generates requests for DeleteWimAccount
func NewDeleteWimAccountRequest(server string, wimAccountId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wimAccountId", runtime.ParamLocationPath, wimAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/wim_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWimAccountRequest generates requests for GetWimAccount
func NewGetWimAccountRequest(server string, wimAccountId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wimAccountId", runtime.ParamLocationPath, wimAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/wim_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditWimAccountRequest calls the generic EditWimAccount builder with application/json body
func NewEditWimAccountRequest(server string, wimAccountId openapi_types.UUID, body EditWimAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditWimAccountRequestWithBody(server, wimAccountId, "application/json", bodyReader)
}

// NewEditWimAccountRequestWithBody generates requests for EditWimAccount with any type of body
func NewEditWimAccountRequestWithBody(server string, wimAccountId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wimAccountId", runtime.ParamLocationPath, wimAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/v1/wim_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAppProfileRequest generates requests for ListAppProfile
func NewListAppProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/app_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAppProfileRequest calls the generic CreateAppProfile builder with application/json body
func NewCreateAppProfileRequest(server string, body CreateAppProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAppProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAppProfileRequestWithBody generates requests for CreateAppProfile with any type of body
func NewCreateAppProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/app_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAppProfileRequest generates requests for DeleteAppProfile
func NewDeleteAppProfileRequest(server string, appProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_profile_id", runtime.ParamLocationPath, appProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/app_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadAppProfileRequest generates requests for ReadAppProfile
func NewReadAppProfileRequest(server string, appProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_profile_id", runtime.ParamLocationPath, appProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/app_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAppProfileRequest calls the generic PatchAppProfile builder with application/json body
func NewPatchAppProfileRequest(server string, appProfileId string, body PatchAppProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAppProfileRequestWithBody(server, appProfileId, "application/json", bodyReader)
}

// NewPatchAppProfileRequestWithBody generates requests for PatchAppProfile with any type of body
func NewPatchAppProfileRequestWithBody(server string, appProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_profile_id", runtime.ParamLocationPath, appProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/app_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListk8sClusterRequest generates requests for Listk8sCluster
func NewListk8sClusterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatek8sClusterRequest calls the generic Createk8sCluster builder with application/json body
func NewCreatek8sClusterRequest(server string, body Createk8sClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatek8sClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatek8sClusterRequestWithBody generates requests for Createk8sCluster with any type of body
func NewCreatek8sClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletek8sClusterRequest generates requests for Deletek8sCluster
func NewDeletek8sClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadk8sClusterRequest generates requests for Readk8sCluster
func NewReadk8sClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppProfileRequest generates requests for GetAppProfile
func NewGetAppProfileRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s/app_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRemoveAppProfileRequest calls the generic AddRemoveAppProfile builder with application/json body
func NewAddRemoveAppProfileRequest(server string, clusterId string, body AddRemoveAppProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRemoveAppProfileRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewAddRemoveAppProfileRequestWithBody generates requests for AddRemoveAppProfile with any type of body
func NewAddRemoveAppProfileRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s/app_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCredsRequest generates requests for GetCreds
func NewGetCredsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s/get_creds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInfraConfigProfileRequest generates requests for GetInfraConfigProfile
func NewGetInfraConfigProfileRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s/infra_config_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddremoveInfraConfigProfileRequest calls the generic AddremoveInfraConfigProfile builder with application/json body
func NewAddremoveInfraConfigProfileRequest(server string, clusterId string, body AddremoveInfraConfigProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddremoveInfraConfigProfileRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewAddremoveInfraConfigProfileRequestWithBody generates requests for AddremoveInfraConfigProfile with any type of body
func NewAddremoveInfraConfigProfileRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s/infra_config_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInfraControllerProfileRequest generates requests for GetInfraControllerProfile
func NewGetInfraControllerProfileRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s/infra_controller_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddremoveInfraControllerProfileRequest calls the generic AddremoveInfraControllerProfile builder with application/json body
func NewAddremoveInfraControllerProfileRequest(server string, clusterId string, body AddremoveInfraControllerProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddremoveInfraControllerProfileRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewAddremoveInfraControllerProfileRequestWithBody generates requests for AddremoveInfraControllerProfile with any type of body
func NewAddremoveInfraControllerProfileRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s/infra_controller_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetResourceProfileRequest generates requests for GetResourceProfile
func NewGetResourceProfileRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s/resource_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddremoveResourceProfileRequest calls the generic AddremoveResourceProfile builder with application/json body
func NewAddremoveResourceProfileRequest(server string, clusterId string, body AddremoveResourceProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddremoveResourceProfileRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewAddremoveResourceProfileRequestWithBody generates requests for AddremoveResourceProfile with any type of body
func NewAddremoveResourceProfileRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s/resource_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeScalingRequest calls the generic NodeScaling builder with application/json body
func NewNodeScalingRequest(server string, clusterId string, body NodeScalingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeScalingRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewNodeScalingRequestWithBody generates requests for NodeScaling with any type of body
func NewNodeScalingRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s/scale", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpgradeClusterRequest calls the generic UpgradeCluster builder with application/json body
func NewUpgradeClusterRequest(server string, clusterId string, body UpgradeClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpgradeClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewUpgradeClusterRequestWithBody generates requests for UpgradeCluster with any type of body
func NewUpgradeClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/clusters/%s/upgrade", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListInfraConfigProfileRequest generates requests for ListInfraConfigProfile
func NewListInfraConfigProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/infra_config_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInfraConfigProfileRequest calls the generic CreateInfraConfigProfile builder with application/json body
func NewCreateInfraConfigProfileRequest(server string, body CreateInfraConfigProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInfraConfigProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInfraConfigProfileRequestWithBody generates requests for CreateInfraConfigProfile with any type of body
func NewCreateInfraConfigProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/infra_config_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInfraConfigProfileRequest generates requests for DeleteInfraConfigProfile
func NewDeleteInfraConfigProfileRequest(server string, infraConfigProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "infra_config_profile_id", runtime.ParamLocationPath, infraConfigProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/infra_config_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadInfraConfigProfileRequest generates requests for ReadInfraConfigProfile
func NewReadInfraConfigProfileRequest(server string, infraConfigProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "infra_config_profile_id", runtime.ParamLocationPath, infraConfigProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/infra_config_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchInfraConfigProfileRequest calls the generic PatchInfraConfigProfile builder with application/json body
func NewPatchInfraConfigProfileRequest(server string, infraConfigProfileId string, body PatchInfraConfigProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchInfraConfigProfileRequestWithBody(server, infraConfigProfileId, "application/json", bodyReader)
}

// NewPatchInfraConfigProfileRequestWithBody generates requests for PatchInfraConfigProfile with any type of body
func NewPatchInfraConfigProfileRequestWithBody(server string, infraConfigProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "infra_config_profile_id", runtime.ParamLocationPath, infraConfigProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/infra_config_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListInfraControllerProfileRequest generates requests for ListInfraControllerProfile
func NewListInfraControllerProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/infra_controller_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInfraControllerProfileRequest calls the generic CreateInfraControllerProfile builder with application/json body
func NewCreateInfraControllerProfileRequest(server string, body CreateInfraControllerProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInfraControllerProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInfraControllerProfileRequestWithBody generates requests for CreateInfraControllerProfile with any type of body
func NewCreateInfraControllerProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/infra_controller_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInfraControllerProfileRequest generates requests for DeleteInfraControllerProfile
func NewDeleteInfraControllerProfileRequest(server string, infraControllerProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "infra_controller_profile_id", runtime.ParamLocationPath, infraControllerProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/infra_controller_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadInfraControllerProfileRequest generates requests for ReadInfraControllerProfile
func NewReadInfraControllerProfileRequest(server string, infraControllerProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "infra_controller_profile_id", runtime.ParamLocationPath, infraControllerProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/infra_controller_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchInfraControllerProfileRequest calls the generic PatchInfraControllerProfile builder with application/json body
func NewPatchInfraControllerProfileRequest(server string, infraControllerProfileId string, body PatchInfraControllerProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchInfraControllerProfileRequestWithBody(server, infraControllerProfileId, "application/json", bodyReader)
}

// NewPatchInfraControllerProfileRequestWithBody generates requests for PatchInfraControllerProfile with any type of body
func NewPatchInfraControllerProfileRequestWithBody(server string, infraControllerProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "infra_controller_profile_id", runtime.ParamLocationPath, infraControllerProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/infra_controller_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListResourceProfileRequest generates requests for ListResourceProfile
func NewListResourceProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/resource_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateResourceProfileRequest calls the generic CreateResourceProfile builder with application/json body
func NewCreateResourceProfileRequest(server string, body CreateResourceProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResourceProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateResourceProfileRequestWithBody generates requests for CreateResourceProfile with any type of body
func NewCreateResourceProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/resource_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteResourceProfileRequest generates requests for DeleteResourceProfile
func NewDeleteResourceProfileRequest(server string, resourceProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_profile_id", runtime.ParamLocationPath, resourceProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/resource_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadResourceProfileRequest generates requests for ReadResourceProfile
func NewReadResourceProfileRequest(server string, resourceProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_profile_id", runtime.ParamLocationPath, resourceProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/resource_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchResourceProfileRequest calls the generic PatchResourceProfile builder with application/json body
func NewPatchResourceProfileRequest(server string, resourceProfileId string, body PatchResourceProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchResourceProfileRequestWithBody(server, resourceProfileId, "application/json", bodyReader)
}

// NewPatchResourceProfileRequestWithBody generates requests for PatchResourceProfile with any type of body
func NewPatchResourceProfileRequestWithBody(server string, resourceProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_profile_id", runtime.ParamLocationPath, resourceProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/k8scluster/v1/resource_profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKSURequest generates requests for GetKSU
func NewGetKSURequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ksu/v1/ksus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddKSURequest calls the generic AddKSU builder with application/json body
func NewAddKSURequest(server string, body AddKSUJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddKSURequestWithBody(server, "application/json", bodyReader)
}

// NewAddKSURequestWithBody generates requests for AddKSU with any type of body
func NewAddKSURequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ksu/v1/ksus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMultipleKSURequest calls the generic DeleteMultipleKSU builder with application/json body
func NewDeleteMultipleKSURequest(server string, body DeleteMultipleKSUJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteMultipleKSURequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteMultipleKSURequestWithBody generates requests for DeleteMultipleKSU with any type of body
func NewDeleteMultipleKSURequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ksu/v1/ksus/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateMultipleKSURequest calls the generic UpdateMultipleKSU builder with application/json body
func NewUpdateMultipleKSURequest(server string, body UpdateMultipleKSUJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMultipleKSURequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateMultipleKSURequestWithBody generates requests for UpdateMultipleKSU with any type of body
func NewUpdateMultipleKSURequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ksu/v1/ksus/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKSURequest generates requests for DeleteKSU
func NewDeleteKSURequest(server string, ksuId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ksu_id", runtime.ParamLocationPath, ksuId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ksu/v1/ksus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadKSURequest generates requests for ReadKSU
func NewReadKSURequest(server string, ksuId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ksu_id", runtime.ParamLocationPath, ksuId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ksu/v1/ksus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateKSURequest calls the generic UpdateKSU builder with application/json body
func NewUpdateKSURequest(server string, ksuId string, body UpdateKSUJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateKSURequestWithBody(server, ksuId, "application/json", bodyReader)
}

// NewUpdateKSURequestWithBody generates requests for UpdateKSU with any type of body
func NewUpdateKSURequestWithBody(server string, ksuId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ksu_id", runtime.ParamLocationPath, ksuId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ksu/v1/ksus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCloneKSURequest calls the generic CloneKSU builder with application/json body
func NewCloneKSURequest(server string, ksuId string, body CloneKSUJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCloneKSURequestWithBody(server, ksuId, "application/json", bodyReader)
}

// NewCloneKSURequestWithBody generates requests for CloneKSU with any type of body
func NewCloneKSURequestWithBody(server string, ksuId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ksu_id", runtime.ParamLocationPath, ksuId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ksu/v1/ksus/%s/clone", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoveKSURequest calls the generic MoveKSU builder with application/json body
func NewMoveKSURequest(server string, ksuId string, body MoveKSUJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoveKSURequestWithBody(server, ksuId, "application/json", bodyReader)
}

// NewMoveKSURequestWithBody generates requests for MoveKSU with any type of body
func NewMoveKSURequestWithBody(server string, ksuId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ksu_id", runtime.ParamLocationPath, ksuId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ksu/v1/ksus/%s/move", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNsconfigtemplatesRequest generates requests for GetNsconfigtemplates
func NewGetNsconfigtemplatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_config_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddNsconfigtemplateRequest calls the generic AddNsconfigtemplate builder with application/json body
func NewAddNsconfigtemplateRequest(server string, body AddNsconfigtemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddNsconfigtemplateRequestWithBody(server, "application/json", bodyReader)
}

// NewAddNsconfigtemplateRequestWithBody generates requests for AddNsconfigtemplate with any type of body
func NewAddNsconfigtemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_config_template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNsconfigtemplateRequest generates requests for DeleteNsconfigtemplate
func NewDeleteNsconfigtemplateRequest(server string, nsconfigTemplateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsconfigTemplateId", runtime.ParamLocationPath, nsconfigTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_config_template/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNsconfigtemplateRequest generates requests for GetNsconfigtemplate
func NewGetNsconfigtemplateRequest(server string, nsconfigTemplateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsconfigTemplateId", runtime.ParamLocationPath, nsconfigTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_config_template/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTemplatecontentRequest generates requests for GetTemplatecontent
func NewGetTemplatecontentRequest(server string, nsconfigTemplateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsconfigTemplateId", runtime.ParamLocationPath, nsconfigTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_config_template/%s/template_content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTemplatecontentRequest calls the generic UpdateTemplatecontent builder with application/json body
func NewUpdateTemplatecontentRequest(server string, nsconfigTemplateId string, body UpdateTemplatecontentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTemplatecontentRequestWithBody(server, nsconfigTemplateId, "application/json", bodyReader)
}

// NewUpdateTemplatecontentRequestWithBody generates requests for UpdateTemplatecontent with any type of body
func NewUpdateTemplatecontentRequestWithBody(server string, nsconfigTemplateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsconfigTemplateId", runtime.ParamLocationPath, nsconfigTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_config_template/%s/template_content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNSDsRequest generates requests for GetNSDs
func NewGetNSDsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddNSDRequest calls the generic AddNSD builder with application/json body
func NewAddNSDRequest(server string, body AddNSDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddNSDRequestWithBody(server, "application/json", bodyReader)
}

// NewAddNSDRequestWithBody generates requests for AddNSD with any type of body
func NewAddNSDRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNSDRequest generates requests for DeleteNSD
func NewDeleteNSDRequest(server string, nsdInfoId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsdInfoId", runtime.ParamLocationPath, nsdInfoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNSDRequest generates requests for GetNSD
func NewGetNSDRequest(server string, nsdInfoId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsdInfoId", runtime.ParamLocationPath, nsdInfoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNSDRequest calls the generic UpdateNSD builder with application/json body
func NewUpdateNSDRequest(server string, nsdInfoId string, body UpdateNSDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNSDRequestWithBody(server, nsdInfoId, "application/json", bodyReader)
}

// NewUpdateNSDRequestWithBody generates requests for UpdateNSD with any type of body
func NewUpdateNSDRequestWithBody(server string, nsdInfoId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsdInfoId", runtime.ParamLocationPath, nsdInfoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNsPkgArtifactRequest generates requests for GetNsPkgArtifact
func NewGetNsPkgArtifactRequest(server string, nsdInfoId string, artifactPath string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsdInfoId", runtime.ParamLocationPath, nsdInfoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifactPath", runtime.ParamLocationPath, artifactPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors/%s/artifacts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNsPkgNsdRequest generates requests for GetNsPkgNsd
func NewGetNsPkgNsdRequest(server string, nsdInfoId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsdInfoId", runtime.ParamLocationPath, nsdInfoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors/%s/nsd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNSDcontentRequest generates requests for GetNSDcontent
func NewGetNSDcontentRequest(server string, nsdInfoId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsdInfoId", runtime.ParamLocationPath, nsdInfoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors/%s/nsd_content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNSDcontentRequestWithBody generates requests for UpdateNSDcontent with any type of body
func NewUpdateNSDcontentRequestWithBody(server string, nsdInfoId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsdInfoId", runtime.ParamLocationPath, nsdInfoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors/%s/nsd_content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNsPkgsContentRequest generates requests for GetNsPkgsContent
func NewGetNsPkgsContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors_content")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadNsPkgsContentRequestWithBody generates requests for UploadNsPkgsContent with any type of body
func NewUploadNsPkgsContentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors_content")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNSPkgsIdContentRequest generates requests for DeleteNSPkgsIdContent
func NewDeleteNSPkgsIdContentRequest(server string, nsdInfoId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsdInfoId", runtime.ParamLocationPath, nsdInfoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNsPkgsIdContentRequest generates requests for GetNsPkgsIdContent
func NewGetNsPkgsIdContentRequest(server string, nsdInfoId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsdInfoId", runtime.ParamLocationPath, nsdInfoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNsPkgsIdContentRequest calls the generic UpdateNsPkgsIdContent builder with application/json body
func NewUpdateNsPkgsIdContentRequest(server string, nsdInfoId string, body UpdateNsPkgsIdContentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNsPkgsIdContentRequestWithBody(server, nsdInfoId, "application/json", bodyReader)
}

// NewUpdateNsPkgsIdContentRequestWithBody generates requests for UpdateNsPkgsIdContent with any type of body
func NewUpdateNsPkgsIdContentRequestWithBody(server string, nsdInfoId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsdInfoId", runtime.ParamLocationPath, nsdInfoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsd/v1/ns_descriptors_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlarmsRequest generates requests for GetAlarms
func NewGetAlarmsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsfm/v1/alarms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlarmRequest generates requests for GetAlarm
func NewGetAlarmRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsfm/v1/alarms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAlarmRequest calls the generic UpdateAlarm builder with application/json body
func NewUpdateAlarmRequest(server string, uuid string, body UpdateAlarmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAlarmRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewUpdateAlarmRequestWithBody generates requests for UpdateAlarm with any type of body
func NewUpdateAlarmRequestWithBody(server string, uuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsfm/v1/alarms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNSIsRequest generates requests for GetNSIs
func NewGetNSIsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/netslice_instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddNSIRequest calls the generic AddNSI builder with application/json body
func NewAddNSIRequest(server string, body AddNSIJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddNSIRequestWithBody(server, "application/json", bodyReader)
}

// NewAddNSIRequestWithBody generates requests for AddNSI with any type of body
func NewAddNSIRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/netslice_instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNSIRequest generates requests for DeleteNSI
func NewDeleteNSIRequest(server string, netsliceInstanceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceInstanceId", runtime.ParamLocationPath, netsliceInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/netslice_instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNSIRequest generates requests for GetNSI
func NewGetNSIRequest(server string, netsliceInstanceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceInstanceId", runtime.ParamLocationPath, netsliceInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/netslice_instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionOnNSIRequest calls the generic ActionOnNSI builder with application/json body
func NewActionOnNSIRequest(server string, netsliceInstanceId string, body ActionOnNSIJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionOnNSIRequestWithBody(server, netsliceInstanceId, "application/json", bodyReader)
}

// NewActionOnNSIRequestWithBody generates requests for ActionOnNSI with any type of body
func NewActionOnNSIRequestWithBody(server string, netsliceInstanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceInstanceId", runtime.ParamLocationPath, netsliceInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/netslice_instances/%s/action", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstantiateNSIRequest calls the generic InstantiateNSI builder with application/json body
func NewInstantiateNSIRequest(server string, netsliceInstanceId string, body InstantiateNSIJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstantiateNSIRequestWithBody(server, netsliceInstanceId, "application/json", bodyReader)
}

// NewInstantiateNSIRequestWithBody generates requests for InstantiateNSI with any type of body
func NewInstantiateNSIRequestWithBody(server string, netsliceInstanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceInstanceId", runtime.ParamLocationPath, netsliceInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/netslice_instances/%s/instantiate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTerminateNSIRequest calls the generic TerminateNSI builder with application/json body
func NewTerminateNSIRequest(server string, netsliceInstanceId string, body TerminateNSIJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTerminateNSIRequestWithBody(server, netsliceInstanceId, "application/json", bodyReader)
}

// NewTerminateNSIRequestWithBody generates requests for TerminateNSI with any type of body
func NewTerminateNSIRequestWithBody(server string, netsliceInstanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceInstanceId", runtime.ParamLocationPath, netsliceInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/netslice_instances/%s/terminate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNSIsContentRequest generates requests for GetNSIsContent
func NewGetNSIsContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/netslice_instances_content")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNSIContentRequest calls the generic CreateNSIContent builder with application/json body
func NewCreateNSIContentRequest(server string, body CreateNSIContentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNSIContentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNSIContentRequestWithBody generates requests for CreateNSIContent with any type of body
func NewCreateNSIContentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/netslice_instances_content")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNSIContentRequest generates requests for DeleteNSIContent
func NewDeleteNSIContentRequest(server string, netsliceInstanceContentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceInstanceContentId", runtime.ParamLocationPath, netsliceInstanceContentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/netslice_instances_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNSIContentRequest generates requests for GetNSIContent
func NewGetNSIContentRequest(server string, netsliceInstanceContentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceInstanceContentId", runtime.ParamLocationPath, netsliceInstanceContentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/netslice_instances_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNsiLcmOpOccsRequest generates requests for GetNsiLcmOpOccs
func NewGetNsiLcmOpOccsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/nsi_lcm_op_occs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNsiLcmOpOccRequest generates requests for GetNsiLcmOpOcc
func NewGetNsiLcmOpOccRequest(server string, nsiLcmOpOccId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsiLcmOpOccId", runtime.ParamLocationPath, nsiLcmOpOccId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nsilcm/v1/nsi_lcm_op_occs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNSinstancesRequest generates requests for GetNSinstances
func NewGetNSinstancesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddNSinstanceRequest calls the generic AddNSinstance builder with application/json body
func NewAddNSinstanceRequest(server string, body AddNSinstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddNSinstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAddNSinstanceRequestWithBody generates requests for AddNSinstance with any type of body
func NewAddNSinstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNSinstanceRequest generates requests for DeleteNSinstance
func NewDeleteNSinstanceRequest(server string, nsInstanceId string, params *DeleteNSinstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsInstanceId", runtime.ParamLocationPath, nsInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.VcaStatusRefresh != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vcaStatusRefresh", runtime.ParamLocationQuery, *params.VcaStatusRefresh); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNSinstanceRequest generates requests for GetNSinstance
func NewGetNSinstanceRequest(server string, nsInstanceId string, params *GetNSinstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsInstanceId", runtime.ParamLocationPath, nsInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.VcaStatusRefresh != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vcaStatusRefresh", runtime.ParamLocationQuery, *params.VcaStatusRefresh); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionOnNSinstanceRequest calls the generic ActionOnNSinstance builder with application/json body
func NewActionOnNSinstanceRequest(server string, nsInstanceId string, body ActionOnNSinstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionOnNSinstanceRequestWithBody(server, nsInstanceId, "application/json", bodyReader)
}

// NewActionOnNSinstanceRequestWithBody generates requests for ActionOnNSinstance with any type of body
func NewActionOnNSinstanceRequestWithBody(server string, nsInstanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsInstanceId", runtime.ParamLocationPath, nsInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances/%s/action", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHealNSinstanceRequest calls the generic HealNSinstance builder with application/json body
func NewHealNSinstanceRequest(server string, nsInstanceId string, body HealNSinstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHealNSinstanceRequestWithBody(server, nsInstanceId, "application/json", bodyReader)
}

// NewHealNSinstanceRequestWithBody generates requests for HealNSinstance with any type of body
func NewHealNSinstanceRequestWithBody(server string, nsInstanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsInstanceId", runtime.ParamLocationPath, nsInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances/%s/heal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstantiateNSinstanceRequest calls the generic InstantiateNSinstance builder with application/json body
func NewInstantiateNSinstanceRequest(server string, nsInstanceId string, body InstantiateNSinstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstantiateNSinstanceRequestWithBody(server, nsInstanceId, "application/json", bodyReader)
}

// NewInstantiateNSinstanceRequestWithBody generates requests for InstantiateNSinstance with any type of body
func NewInstantiateNSinstanceRequestWithBody(server string, nsInstanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsInstanceId", runtime.ParamLocationPath, nsInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances/%s/instantiate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMigrateNSinstanceRequest calls the generic MigrateNSinstance builder with application/json body
func NewMigrateNSinstanceRequest(server string, nsInstanceId string, body MigrateNSinstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMigrateNSinstanceRequestWithBody(server, nsInstanceId, "application/json", bodyReader)
}

// NewMigrateNSinstanceRequestWithBody generates requests for MigrateNSinstance with any type of body
func NewMigrateNSinstanceRequestWithBody(server string, nsInstanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsInstanceId", runtime.ParamLocationPath, nsInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances/%s/migrate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScaleNSinstanceRequest calls the generic ScaleNSinstance builder with application/json body
func NewScaleNSinstanceRequest(server string, nsInstanceId string, body ScaleNSinstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScaleNSinstanceRequestWithBody(server, nsInstanceId, "application/json", bodyReader)
}

// NewScaleNSinstanceRequestWithBody generates requests for ScaleNSinstance with any type of body
func NewScaleNSinstanceRequestWithBody(server string, nsInstanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsInstanceId", runtime.ParamLocationPath, nsInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances/%s/scale", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTerminateNSinstanceRequest calls the generic TerminateNSinstance builder with application/json body
func NewTerminateNSinstanceRequest(server string, nsInstanceId string, body TerminateNSinstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTerminateNSinstanceRequestWithBody(server, nsInstanceId, "application/json", bodyReader)
}

// NewTerminateNSinstanceRequestWithBody generates requests for TerminateNSinstance with any type of body
func NewTerminateNSinstanceRequestWithBody(server string, nsInstanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsInstanceId", runtime.ParamLocationPath, nsInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances/%s/terminate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNSinstanceRequest calls the generic UpdateNSinstance builder with application/json body
func NewUpdateNSinstanceRequest(server string, nsInstanceId string, body UpdateNSinstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNSinstanceRequestWithBody(server, nsInstanceId, "application/json", bodyReader)
}

// NewUpdateNSinstanceRequestWithBody generates requests for UpdateNSinstance with any type of body
func NewUpdateNSinstanceRequestWithBody(server string, nsInstanceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsInstanceId", runtime.ParamLocationPath, nsInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances/%s/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNSinstancesContentRequest generates requests for GetNSinstancesContent
func NewGetNSinstancesContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances_content")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNSinstanceContentRequest calls the generic CreateNSinstanceContent builder with application/json body
func NewCreateNSinstanceContentRequest(server string, body CreateNSinstanceContentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNSinstanceContentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNSinstanceContentRequestWithBody generates requests for CreateNSinstanceContent with any type of body
func NewCreateNSinstanceContentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances_content")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNSinstanceContentRequest generates requests for DeleteNSinstanceContent
func NewDeleteNSinstanceContentRequest(server string, nsInstanceContentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsInstanceContentId", runtime.ParamLocationPath, nsInstanceContentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNSinstanceContentRequest generates requests for GetNSinstanceContent
func NewGetNSinstanceContentRequest(server string, nsInstanceContentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsInstanceContentId", runtime.ParamLocationPath, nsInstanceContentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMultiNsTerminateRequestRequest calls the generic MultiNsTerminateRequest builder with application/json body
func NewMultiNsTerminateRequestRequest(server string, body MultiNsTerminateRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMultiNsTerminateRequestRequestWithBody(server, "application/json", bodyReader)
}

// NewMultiNsTerminateRequestRequestWithBody generates requests for MultiNsTerminateRequest with any type of body
func NewMultiNsTerminateRequestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_instances_terminate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNSLCMOpOccsRequest generates requests for GetNSLCMOpOccs
func NewGetNSLCMOpOccsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_lcm_op_occs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNSLCMOpOccRequest generates requests for GetNSLCMOpOcc
func NewGetNSLCMOpOccRequest(server string, nsLcmOpOccId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsLcmOpOccId", runtime.ParamLocationPath, nsLcmOpOccId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_lcm_op_occs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelNSLCMOpOccRequest calls the generic CancelNSLCMOpOcc builder with application/json body
func NewCancelNSLCMOpOccRequest(server string, nsLcmOpOccId string, body CancelNSLCMOpOccJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelNSLCMOpOccRequestWithBody(server, nsLcmOpOccId, "application/json", bodyReader)
}

// NewCancelNSLCMOpOccRequestWithBody generates requests for CancelNSLCMOpOcc with any type of body
func NewCancelNSLCMOpOccRequestWithBody(server string, nsLcmOpOccId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsLcmOpOccId", runtime.ParamLocationPath, nsLcmOpOccId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/ns_lcm_op_occs/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNsSubcriptionsRequest generates requests for GetNsSubcriptions
func NewGetNsSubcriptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddNsSubcriptionsRequest calls the generic AddNsSubcriptions builder with application/json body
func NewAddNsSubcriptionsRequest(server string, body AddNsSubcriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddNsSubcriptionsRequestWithBody(server, "application/json", bodyReader)
}

// NewAddNsSubcriptionsRequestWithBody generates requests for AddNsSubcriptions with any type of body
func NewAddNsSubcriptionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNsSubcriptionIdRequest generates requests for DeleteNsSubcriptionId
func NewDeleteNsSubcriptionIdRequest(server string, nsSubscriptionsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsSubscriptionsId", runtime.ParamLocationPath, nsSubscriptionsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNsSubcriptionIdRequest generates requests for GetNsSubcriptionId
func NewGetNsSubcriptionIdRequest(server string, nsSubscriptionsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsSubscriptionsId", runtime.ParamLocationPath, nsSubscriptionsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVnfInstancesRequest generates requests for GetVnfInstances
func NewGetVnfInstancesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/vnf_instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVnfInstanceRequest generates requests for GetVnfInstance
func NewGetVnfInstanceRequest(server string, vnfInstanceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vnfInstanceId", runtime.ParamLocationPath, vnfInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nslcm/v1/vnf_instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNsPmJobReportRequest generates requests for GetNsPmJobReport
func NewGetNsPmJobReportRequest(server string, pmJobId string, nsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pmJobId", runtime.ParamLocationPath, pmJobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nsId", runtime.ParamLocationPath, nsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nspm/v1/pm_jobs/%s/reports/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNSTsRequest generates requests for GetNSTs
func NewGetNSTsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddNSTRequest calls the generic AddNST builder with application/json body
func NewAddNSTRequest(server string, body AddNSTJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddNSTRequestWithBody(server, "application/json", bodyReader)
}

// NewAddNSTRequestWithBody generates requests for AddNST with any type of body
func NewAddNSTRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNSTRequest generates requests for DeleteNST
func NewDeleteNSTRequest(server string, netsliceTemplateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceTemplateId", runtime.ParamLocationPath, netsliceTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNSTRequest generates requests for GetNST
func NewGetNSTRequest(server string, netsliceTemplateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceTemplateId", runtime.ParamLocationPath, netsliceTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNstArtifactRequest generates requests for GetNstArtifact
func NewGetNstArtifactRequest(server string, netsliceTemplateId string, artifactPath string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceTemplateId", runtime.ParamLocationPath, netsliceTemplateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifactPath", runtime.ParamLocationPath, artifactPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates/%s/artifacts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNstNstRequest generates requests for GetNstNst
func NewGetNstNstRequest(server string, netsliceTemplateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceTemplateId", runtime.ParamLocationPath, netsliceTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates/%s/nst", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNSTcontentRequest generates requests for GetNSTcontent
func NewGetNSTcontentRequest(server string, netsliceTemplateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceTemplateId", runtime.ParamLocationPath, netsliceTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates/%s/nst_content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNSTcontentRequestWithBody generates requests for UpdateNSTcontent with any type of body
func NewUpdateNSTcontentRequestWithBody(server string, netsliceTemplateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceTemplateId", runtime.ParamLocationPath, netsliceTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates/%s/nst_content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNstContentRequest generates requests for GetNstContent
func NewGetNstContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates_content")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadNstContentRequestWithBody generates requests for UploadNstContent with any type of body
func NewUploadNstContentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates_content")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNstIdContentRequest generates requests for DeleteNstIdContent
func NewDeleteNstIdContentRequest(server string, netsliceTemplateContentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceTemplateContentId", runtime.ParamLocationPath, netsliceTemplateContentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNstIdContentRequest generates requests for GetNstIdContent
func NewGetNstIdContentRequest(server string, netsliceTemplateContentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceTemplateContentId", runtime.ParamLocationPath, netsliceTemplateContentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNstIdContentRequest calls the generic UpdateNstIdContent builder with application/json body
func NewUpdateNstIdContentRequest(server string, netsliceTemplateContentId string, body UpdateNstIdContentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNstIdContentRequestWithBody(server, netsliceTemplateContentId, "application/json", bodyReader)
}

// NewUpdateNstIdContentRequestWithBody generates requests for UpdateNstIdContent with any type of body
func NewUpdateNstIdContentRequestWithBody(server string, netsliceTemplateContentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "netsliceTemplateContentId", runtime.ParamLocationPath, netsliceTemplateContentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nst/v1/netslice_templates_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOKAPackageRequest generates requests for GetOKAPackage
func NewGetOKAPackageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oka/v1/oka_packages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddOKAPackageRequestWithBody generates requests for AddOKAPackage with any type of body
func NewAddOKAPackageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oka/v1/oka_packages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOKAPackageRequest generates requests for DeleteOKAPackage
func NewDeleteOKAPackageRequest(server string, okaPkgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "oka_pkg_id", runtime.ParamLocationPath, okaPkgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oka/v1/oka_packages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadOKAPackageRequest generates requests for ReadOKAPackage
func NewReadOKAPackageRequest(server string, okaPkgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "oka_pkg_id", runtime.ParamLocationPath, okaPkgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oka/v1/oka_packages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOKAPackageRequestWithBody generates requests for UpdateOKAPackage with any type of body
func NewUpdateOKAPackageRequestWithBody(server string, okaPkgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "oka_pkg_id", runtime.ParamLocationPath, okaPkgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oka/v1/oka_packages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPDUsRequest generates requests for GetPDUs
func NewGetPDUsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu/v1/pdu_descriptors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePDURequest calls the generic CreatePDU builder with application/json body
func NewCreatePDURequest(server string, body CreatePDUJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePDURequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePDURequestWithBody generates requests for CreatePDU with any type of body
func NewCreatePDURequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu/v1/pdu_descriptors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePDURequest generates requests for DeletePDU
func NewDeletePDURequest(server string, pduDescriptorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pduDescriptorId", runtime.ParamLocationPath, pduDescriptorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu/v1/pdu_descriptors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPDURequest generates requests for GetPDU
func NewGetPDURequest(server string, pduDescriptorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pduDescriptorId", runtime.ParamLocationPath, pduDescriptorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu/v1/pdu_descriptors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditPDURequest calls the generic EditPDU builder with application/json body
func NewEditPDURequest(server string, pduDescriptorId string, body EditPDUJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditPDURequestWithBody(server, pduDescriptorId, "application/json", bodyReader)
}

// NewEditPDURequestWithBody generates requests for EditPDU with any type of body
func NewEditPDURequestWithBody(server string, pduDescriptorId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pduDescriptorId", runtime.ParamLocationPath, pduDescriptorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu/v1/pdu_descriptors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVnfPkgsRequest generates requests for GetVnfPkgs
func NewGetVnfPkgsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddVnfPkgRequest calls the generic AddVnfPkg builder with application/json body
func NewAddVnfPkgRequest(server string, body AddVnfPkgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddVnfPkgRequestWithBody(server, "application/json", bodyReader)
}

// NewAddVnfPkgRequestWithBody generates requests for AddVnfPkg with any type of body
func NewAddVnfPkgRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVnfPkgRequest generates requests for DeleteVnfPkg
func NewDeleteVnfPkgRequest(server string, vnfPkgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vnfPkgId", runtime.ParamLocationPath, vnfPkgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVnfPkgRequest generates requests for GetVnfPkg
func NewGetVnfPkgRequest(server string, vnfPkgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vnfPkgId", runtime.ParamLocationPath, vnfPkgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateVnfPkgRequest calls the generic UpdateVnfPkg builder with application/json body
func NewUpdateVnfPkgRequest(server string, vnfPkgId string, body UpdateVnfPkgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVnfPkgRequestWithBody(server, vnfPkgId, "application/json", bodyReader)
}

// NewUpdateVnfPkgRequestWithBody generates requests for UpdateVnfPkg with any type of body
func NewUpdateVnfPkgRequestWithBody(server string, vnfPkgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vnfPkgId", runtime.ParamLocationPath, vnfPkgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVnfPkgArtifactRequest generates requests for GetVnfPkgArtifact
func NewGetVnfPkgArtifactRequest(server string, vnfPkgId string, artifactPath string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vnfPkgId", runtime.ParamLocationPath, vnfPkgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifactPath", runtime.ParamLocationPath, artifactPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages/%s/artifacts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVnfPkgContentRequest generates requests for GetVnfPkgContent
func NewGetVnfPkgContentRequest(server string, vnfPkgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vnfPkgId", runtime.ParamLocationPath, vnfPkgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages/%s/package_content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadVnfPkgContentRequestWithBody generates requests for UploadVnfPkgContent with any type of body
func NewUploadVnfPkgContentRequestWithBody(server string, vnfPkgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vnfPkgId", runtime.ParamLocationPath, vnfPkgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages/%s/package_content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVnfPkgVnfdRequest generates requests for GetVnfPkgVnfd
func NewGetVnfPkgVnfdRequest(server string, vnfPkgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vnfPkgId", runtime.ParamLocationPath, vnfPkgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages/%s/vnfd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVnfPkgsContentRequest generates requests for GetVnfPkgsContent
func NewGetVnfPkgsContentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages_content")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadVnfPkgsContentRequestWithBody generates requests for UploadVnfPkgsContent with any type of body
func NewUploadVnfPkgsContentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages_content")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVnfPkgsIdContentRequest generates requests for DeleteVnfPkgsIdContent
func NewDeleteVnfPkgsIdContentRequest(server string, packageContentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageContentId", runtime.ParamLocationPath, packageContentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVnfPkgsIdContentRequest generates requests for GetVnfPkgsIdContent
func NewGetVnfPkgsIdContentRequest(server string, packageContentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageContentId", runtime.ParamLocationPath, packageContentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateVnfPkgsIdContentRequest calls the generic UpdateVnfPkgsIdContent builder with application/json body
func NewUpdateVnfPkgsIdContentRequest(server string, packageContentId string, body UpdateVnfPkgsIdContentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVnfPkgsIdContentRequestWithBody(server, packageContentId, "application/json", bodyReader)
}

// NewUpdateVnfPkgsIdContentRequestWithBody generates requests for UpdateVnfPkgsIdContent with any type of body
func NewUpdateVnfPkgsIdContentRequestWithBody(server string, packageContentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "packageContentId", runtime.ParamLocationPath, packageContentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vnfpkgm/v1/vnf_packages_content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetK8sClustersWithResponse request
	GetK8sClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetK8sClustersResponse, error)

	// CreateK8sClusterWithBodyWithResponse request with any body
	CreateK8sClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateK8sClusterResponse, error)

	CreateK8sClusterWithResponse(ctx context.Context, body CreateK8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateK8sClusterResponse, error)

	// DeleteK8sClusterWithResponse request
	DeleteK8sClusterWithResponse(ctx context.Context, k8sClusterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteK8sClusterResponse, error)

	// GetK8sClusterWithResponse request
	GetK8sClusterWithResponse(ctx context.Context, k8sClusterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetK8sClusterResponse, error)

	// EditK8sClusterWithBodyWithResponse request with any body
	EditK8sClusterWithBodyWithResponse(ctx context.Context, k8sClusterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditK8sClusterResponse, error)

	EditK8sClusterWithResponse(ctx context.Context, k8sClusterId openapi_types.UUID, body EditK8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*EditK8sClusterResponse, error)

	// GetK8sReposWithResponse request
	GetK8sReposWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetK8sReposResponse, error)

	// CreateK8sRepoWithBodyWithResponse request with any body
	CreateK8sRepoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateK8sRepoResponse, error)

	CreateK8sRepoWithResponse(ctx context.Context, body CreateK8sRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateK8sRepoResponse, error)

	// DeleteK8sRepoWithResponse request
	DeleteK8sRepoWithResponse(ctx context.Context, k8sRepoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteK8sRepoResponse, error)

	// GetK8sRepoWithResponse request
	GetK8sRepoWithResponse(ctx context.Context, k8sRepoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetK8sRepoResponse, error)

	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// CreateProjectWithBodyWithResponse request with any body
	CreateProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	CreateProjectWithResponse(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	// DeleteProjectWithResponse request
	DeleteProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error)

	// GetProjectWithResponse request
	GetProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectResponse, error)

	// EditProjectWithBodyWithResponse request with any body
	EditProjectWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditProjectResponse, error)

	EditProjectWithResponse(ctx context.Context, projectId string, body EditProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*EditProjectResponse, error)

	// GetRolesWithResponse request
	GetRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRolesResponse, error)

	// CreateRoleWithBodyWithResponse request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	// DeleteRoleWithResponse request
	DeleteRoleWithResponse(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error)

	// GetRoleWithResponse request
	GetRoleWithResponse(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*GetRoleResponse, error)

	// EditRoleWithBodyWithResponse request with any body
	EditRoleWithBodyWithResponse(ctx context.Context, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditRoleResponse, error)

	EditRoleWithResponse(ctx context.Context, roleId string, body EditRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*EditRoleResponse, error)

	// GetSDNsWithResponse request
	GetSDNsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSDNsResponse, error)

	// CreateSDNWithBodyWithResponse request with any body
	CreateSDNWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSDNResponse, error)

	CreateSDNWithResponse(ctx context.Context, body CreateSDNJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSDNResponse, error)

	// DeleteSDNWithResponse request
	DeleteSDNWithResponse(ctx context.Context, sdnId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteSDNResponse, error)

	// GetSDNWithResponse request
	GetSDNWithResponse(ctx context.Context, sdnId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSDNResponse, error)

	// EditSDNWithBodyWithResponse request with any body
	EditSDNWithBodyWithResponse(ctx context.Context, sdnId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditSDNResponse, error)

	EditSDNWithResponse(ctx context.Context, sdnId openapi_types.UUID, body EditSDNJSONRequestBody, reqEditors ...RequestEditorFn) (*EditSDNResponse, error)

	// DeleteAuthTokenWithResponse request
	DeleteAuthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAuthTokenResponse, error)

	// GetTokensWithResponse request
	GetTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokensResponse, error)

	// CreateTokenWithBodyWithResponse request with any body
	CreateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenResponse, error)

	CreateTokenWithResponse(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenResponse, error)

	// DeleteTokenWithResponse request
	DeleteTokenWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*DeleteTokenResponse, error)

	// GetTokenWithResponse request
	GetTokenWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*GetTokenResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// CreateUserWithBodyWithResponse request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// DeleteUserWithResponse request
	DeleteUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// EditUserWithBodyWithResponse request with any body
	EditUserWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditUserResponse, error)

	EditUserWithResponse(ctx context.Context, userId string, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*EditUserResponse, error)

	// GetVcasWithResponse request
	GetVcasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVcasResponse, error)

	// CreateVcaWithBodyWithResponse request with any body
	CreateVcaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVcaResponse, error)

	CreateVcaWithResponse(ctx context.Context, body CreateVcaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVcaResponse, error)

	// DeleteVcaWithResponse request
	DeleteVcaWithResponse(ctx context.Context, vcaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteVcaResponse, error)

	// GetVcaWithResponse request
	GetVcaWithResponse(ctx context.Context, vcaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetVcaResponse, error)

	// EditVcaWithBodyWithResponse request with any body
	EditVcaWithBodyWithResponse(ctx context.Context, vcaId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditVcaResponse, error)

	EditVcaWithResponse(ctx context.Context, vcaId openapi_types.UUID, body EditVcaJSONRequestBody, reqEditors ...RequestEditorFn) (*EditVcaResponse, error)

	// GetVimAccountsWithResponse request
	GetVimAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVimAccountsResponse, error)

	// CreateVimAccountWithBodyWithResponse request with any body
	CreateVimAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVimAccountResponse, error)

	CreateVimAccountWithResponse(ctx context.Context, body CreateVimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVimAccountResponse, error)

	// DeleteVimAccountWithResponse request
	DeleteVimAccountWithResponse(ctx context.Context, vimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteVimAccountResponse, error)

	// GetVimAccountWithResponse request
	GetVimAccountWithResponse(ctx context.Context, vimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetVimAccountResponse, error)

	// EditVimAccountWithBodyWithResponse request with any body
	EditVimAccountWithBodyWithResponse(ctx context.Context, vimAccountId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditVimAccountResponse, error)

	EditVimAccountWithResponse(ctx context.Context, vimAccountId openapi_types.UUID, body EditVimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*EditVimAccountResponse, error)

	// GetVIMsWithResponse request
	GetVIMsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVIMsResponse, error)

	// CreateVIMWithBodyWithResponse request with any body
	CreateVIMWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVIMResponse, error)

	CreateVIMWithResponse(ctx context.Context, body CreateVIMJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVIMResponse, error)

	// DeleteVIMWithResponse request
	DeleteVIMWithResponse(ctx context.Context, vimId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteVIMResponse, error)

	// GetVIMWithResponse request
	GetVIMWithResponse(ctx context.Context, vimId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetVIMResponse, error)

	// EditVIMWithBodyWithResponse request with any body
	EditVIMWithBodyWithResponse(ctx context.Context, vimId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditVIMResponse, error)

	EditVIMWithResponse(ctx context.Context, vimId openapi_types.UUID, body EditVIMJSONRequestBody, reqEditors ...RequestEditorFn) (*EditVIMResponse, error)

	// GetWimAccountsWithResponse request
	GetWimAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWimAccountsResponse, error)

	// CreateWimAccountWithBodyWithResponse request with any body
	CreateWimAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWimAccountResponse, error)

	CreateWimAccountWithResponse(ctx context.Context, body CreateWimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWimAccountResponse, error)

	// DeleteWimAccountWithResponse request
	DeleteWimAccountWithResponse(ctx context.Context, wimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteWimAccountResponse, error)

	// GetWimAccountWithResponse request
	GetWimAccountWithResponse(ctx context.Context, wimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetWimAccountResponse, error)

	// EditWimAccountWithBodyWithResponse request with any body
	EditWimAccountWithBodyWithResponse(ctx context.Context, wimAccountId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditWimAccountResponse, error)

	EditWimAccountWithResponse(ctx context.Context, wimAccountId openapi_types.UUID, body EditWimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*EditWimAccountResponse, error)

	// ListAppProfileWithResponse request
	ListAppProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAppProfileResponse, error)

	// CreateAppProfileWithBodyWithResponse request with any body
	CreateAppProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppProfileResponse, error)

	CreateAppProfileWithResponse(ctx context.Context, body CreateAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppProfileResponse, error)

	// DeleteAppProfileWithResponse request
	DeleteAppProfileWithResponse(ctx context.Context, appProfileId string, reqEditors ...RequestEditorFn) (*DeleteAppProfileResponse, error)

	// ReadAppProfileWithResponse request
	ReadAppProfileWithResponse(ctx context.Context, appProfileId string, reqEditors ...RequestEditorFn) (*ReadAppProfileResponse, error)

	// PatchAppProfileWithBodyWithResponse request with any body
	PatchAppProfileWithBodyWithResponse(ctx context.Context, appProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAppProfileResponse, error)

	PatchAppProfileWithResponse(ctx context.Context, appProfileId string, body PatchAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAppProfileResponse, error)

	// Listk8sClusterWithResponse request
	Listk8sClusterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Listk8sClusterResponse, error)

	// Createk8sClusterWithBodyWithResponse request with any body
	Createk8sClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Createk8sClusterResponse, error)

	Createk8sClusterWithResponse(ctx context.Context, body Createk8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*Createk8sClusterResponse, error)

	// Deletek8sClusterWithResponse request
	Deletek8sClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*Deletek8sClusterResponse, error)

	// Readk8sClusterWithResponse request
	Readk8sClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*Readk8sClusterResponse, error)

	// GetAppProfileWithResponse request
	GetAppProfileWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAppProfileResponse, error)

	// AddRemoveAppProfileWithBodyWithResponse request with any body
	AddRemoveAppProfileWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRemoveAppProfileResponse, error)

	AddRemoveAppProfileWithResponse(ctx context.Context, clusterId string, body AddRemoveAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRemoveAppProfileResponse, error)

	// GetCredsWithResponse request
	GetCredsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetCredsResponse, error)

	// GetInfraConfigProfileWithResponse request
	GetInfraConfigProfileWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetInfraConfigProfileResponse, error)

	// AddremoveInfraConfigProfileWithBodyWithResponse request with any body
	AddremoveInfraConfigProfileWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddremoveInfraConfigProfileResponse, error)

	AddremoveInfraConfigProfileWithResponse(ctx context.Context, clusterId string, body AddremoveInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*AddremoveInfraConfigProfileResponse, error)

	// GetInfraControllerProfileWithResponse request
	GetInfraControllerProfileWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetInfraControllerProfileResponse, error)

	// AddremoveInfraControllerProfileWithBodyWithResponse request with any body
	AddremoveInfraControllerProfileWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddremoveInfraControllerProfileResponse, error)

	AddremoveInfraControllerProfileWithResponse(ctx context.Context, clusterId string, body AddremoveInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*AddremoveInfraControllerProfileResponse, error)

	// GetResourceProfileWithResponse request
	GetResourceProfileWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetResourceProfileResponse, error)

	// AddremoveResourceProfileWithBodyWithResponse request with any body
	AddremoveResourceProfileWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddremoveResourceProfileResponse, error)

	AddremoveResourceProfileWithResponse(ctx context.Context, clusterId string, body AddremoveResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*AddremoveResourceProfileResponse, error)

	// NodeScalingWithBodyWithResponse request with any body
	NodeScalingWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeScalingResponse, error)

	NodeScalingWithResponse(ctx context.Context, clusterId string, body NodeScalingJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeScalingResponse, error)

	// UpgradeClusterWithBodyWithResponse request with any body
	UpgradeClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpgradeClusterResponse, error)

	UpgradeClusterWithResponse(ctx context.Context, clusterId string, body UpgradeClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpgradeClusterResponse, error)

	// ListInfraConfigProfileWithResponse request
	ListInfraConfigProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListInfraConfigProfileResponse, error)

	// CreateInfraConfigProfileWithBodyWithResponse request with any body
	CreateInfraConfigProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInfraConfigProfileResponse, error)

	CreateInfraConfigProfileWithResponse(ctx context.Context, body CreateInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInfraConfigProfileResponse, error)

	// DeleteInfraConfigProfileWithResponse request
	DeleteInfraConfigProfileWithResponse(ctx context.Context, infraConfigProfileId string, reqEditors ...RequestEditorFn) (*DeleteInfraConfigProfileResponse, error)

	// ReadInfraConfigProfileWithResponse request
	ReadInfraConfigProfileWithResponse(ctx context.Context, infraConfigProfileId string, reqEditors ...RequestEditorFn) (*ReadInfraConfigProfileResponse, error)

	// PatchInfraConfigProfileWithBodyWithResponse request with any body
	PatchInfraConfigProfileWithBodyWithResponse(ctx context.Context, infraConfigProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInfraConfigProfileResponse, error)

	PatchInfraConfigProfileWithResponse(ctx context.Context, infraConfigProfileId string, body PatchInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInfraConfigProfileResponse, error)

	// ListInfraControllerProfileWithResponse request
	ListInfraControllerProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListInfraControllerProfileResponse, error)

	// CreateInfraControllerProfileWithBodyWithResponse request with any body
	CreateInfraControllerProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInfraControllerProfileResponse, error)

	CreateInfraControllerProfileWithResponse(ctx context.Context, body CreateInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInfraControllerProfileResponse, error)

	// DeleteInfraControllerProfileWithResponse request
	DeleteInfraControllerProfileWithResponse(ctx context.Context, infraControllerProfileId string, reqEditors ...RequestEditorFn) (*DeleteInfraControllerProfileResponse, error)

	// ReadInfraControllerProfileWithResponse request
	ReadInfraControllerProfileWithResponse(ctx context.Context, infraControllerProfileId string, reqEditors ...RequestEditorFn) (*ReadInfraControllerProfileResponse, error)

	// PatchInfraControllerProfileWithBodyWithResponse request with any body
	PatchInfraControllerProfileWithBodyWithResponse(ctx context.Context, infraControllerProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInfraControllerProfileResponse, error)

	PatchInfraControllerProfileWithResponse(ctx context.Context, infraControllerProfileId string, body PatchInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInfraControllerProfileResponse, error)

	// ListResourceProfileWithResponse request
	ListResourceProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListResourceProfileResponse, error)

	// CreateResourceProfileWithBodyWithResponse request with any body
	CreateResourceProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceProfileResponse, error)

	CreateResourceProfileWithResponse(ctx context.Context, body CreateResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceProfileResponse, error)

	// DeleteResourceProfileWithResponse request
	DeleteResourceProfileWithResponse(ctx context.Context, resourceProfileId string, reqEditors ...RequestEditorFn) (*DeleteResourceProfileResponse, error)

	// ReadResourceProfileWithResponse request
	ReadResourceProfileWithResponse(ctx context.Context, resourceProfileId string, reqEditors ...RequestEditorFn) (*ReadResourceProfileResponse, error)

	// PatchResourceProfileWithBodyWithResponse request with any body
	PatchResourceProfileWithBodyWithResponse(ctx context.Context, resourceProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchResourceProfileResponse, error)

	PatchResourceProfileWithResponse(ctx context.Context, resourceProfileId string, body PatchResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchResourceProfileResponse, error)

	// GetKSUWithResponse request
	GetKSUWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKSUResponse, error)

	// AddKSUWithBodyWithResponse request with any body
	AddKSUWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddKSUResponse, error)

	AddKSUWithResponse(ctx context.Context, body AddKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*AddKSUResponse, error)

	// DeleteMultipleKSUWithBodyWithResponse request with any body
	DeleteMultipleKSUWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMultipleKSUResponse, error)

	DeleteMultipleKSUWithResponse(ctx context.Context, body DeleteMultipleKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMultipleKSUResponse, error)

	// UpdateMultipleKSUWithBodyWithResponse request with any body
	UpdateMultipleKSUWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMultipleKSUResponse, error)

	UpdateMultipleKSUWithResponse(ctx context.Context, body UpdateMultipleKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMultipleKSUResponse, error)

	// DeleteKSUWithResponse request
	DeleteKSUWithResponse(ctx context.Context, ksuId string, reqEditors ...RequestEditorFn) (*DeleteKSUResponse, error)

	// ReadKSUWithResponse request
	ReadKSUWithResponse(ctx context.Context, ksuId string, reqEditors ...RequestEditorFn) (*ReadKSUResponse, error)

	// UpdateKSUWithBodyWithResponse request with any body
	UpdateKSUWithBodyWithResponse(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKSUResponse, error)

	UpdateKSUWithResponse(ctx context.Context, ksuId string, body UpdateKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateKSUResponse, error)

	// CloneKSUWithBodyWithResponse request with any body
	CloneKSUWithBodyWithResponse(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneKSUResponse, error)

	CloneKSUWithResponse(ctx context.Context, ksuId string, body CloneKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneKSUResponse, error)

	// MoveKSUWithBodyWithResponse request with any body
	MoveKSUWithBodyWithResponse(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveKSUResponse, error)

	MoveKSUWithResponse(ctx context.Context, ksuId string, body MoveKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveKSUResponse, error)

	// GetNsconfigtemplatesWithResponse request
	GetNsconfigtemplatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNsconfigtemplatesResponse, error)

	// AddNsconfigtemplateWithBodyWithResponse request with any body
	AddNsconfigtemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNsconfigtemplateResponse, error)

	AddNsconfigtemplateWithResponse(ctx context.Context, body AddNsconfigtemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNsconfigtemplateResponse, error)

	// DeleteNsconfigtemplateWithResponse request
	DeleteNsconfigtemplateWithResponse(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*DeleteNsconfigtemplateResponse, error)

	// GetNsconfigtemplateWithResponse request
	GetNsconfigtemplateWithResponse(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*GetNsconfigtemplateResponse, error)

	// GetTemplatecontentWithResponse request
	GetTemplatecontentWithResponse(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*GetTemplatecontentResponse, error)

	// UpdateTemplatecontentWithBodyWithResponse request with any body
	UpdateTemplatecontentWithBodyWithResponse(ctx context.Context, nsconfigTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTemplatecontentResponse, error)

	UpdateTemplatecontentWithResponse(ctx context.Context, nsconfigTemplateId string, body UpdateTemplatecontentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTemplatecontentResponse, error)

	// GetNSDsWithResponse request
	GetNSDsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSDsResponse, error)

	// AddNSDWithBodyWithResponse request with any body
	AddNSDWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNSDResponse, error)

	AddNSDWithResponse(ctx context.Context, body AddNSDJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNSDResponse, error)

	// DeleteNSDWithResponse request
	DeleteNSDWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*DeleteNSDResponse, error)

	// GetNSDWithResponse request
	GetNSDWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*GetNSDResponse, error)

	// UpdateNSDWithBodyWithResponse request with any body
	UpdateNSDWithBodyWithResponse(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNSDResponse, error)

	UpdateNSDWithResponse(ctx context.Context, nsdInfoId string, body UpdateNSDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNSDResponse, error)

	// GetNsPkgArtifactWithResponse request
	GetNsPkgArtifactWithResponse(ctx context.Context, nsdInfoId string, artifactPath string, reqEditors ...RequestEditorFn) (*GetNsPkgArtifactResponse, error)

	// GetNsPkgNsdWithResponse request
	GetNsPkgNsdWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*GetNsPkgNsdResponse, error)

	// GetNSDcontentWithResponse request
	GetNSDcontentWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*GetNSDcontentResponse, error)

	// UpdateNSDcontentWithBodyWithResponse request with any body
	UpdateNSDcontentWithBodyWithResponse(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNSDcontentResponse, error)

	// GetNsPkgsContentWithResponse request
	GetNsPkgsContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNsPkgsContentResponse, error)

	// UploadNsPkgsContentWithBodyWithResponse request with any body
	UploadNsPkgsContentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadNsPkgsContentResponse, error)

	// DeleteNSPkgsIdContentWithResponse request
	DeleteNSPkgsIdContentWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*DeleteNSPkgsIdContentResponse, error)

	// GetNsPkgsIdContentWithResponse request
	GetNsPkgsIdContentWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*GetNsPkgsIdContentResponse, error)

	// UpdateNsPkgsIdContentWithBodyWithResponse request with any body
	UpdateNsPkgsIdContentWithBodyWithResponse(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNsPkgsIdContentResponse, error)

	UpdateNsPkgsIdContentWithResponse(ctx context.Context, nsdInfoId string, body UpdateNsPkgsIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNsPkgsIdContentResponse, error)

	// GetAlarmsWithResponse request
	GetAlarmsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlarmsResponse, error)

	// GetAlarmWithResponse request
	GetAlarmWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetAlarmResponse, error)

	// UpdateAlarmWithBodyWithResponse request with any body
	UpdateAlarmWithBodyWithResponse(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlarmResponse, error)

	UpdateAlarmWithResponse(ctx context.Context, uuid string, body UpdateAlarmJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlarmResponse, error)

	// GetNSIsWithResponse request
	GetNSIsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSIsResponse, error)

	// AddNSIWithBodyWithResponse request with any body
	AddNSIWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNSIResponse, error)

	AddNSIWithResponse(ctx context.Context, body AddNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNSIResponse, error)

	// DeleteNSIWithResponse request
	DeleteNSIWithResponse(ctx context.Context, netsliceInstanceId string, reqEditors ...RequestEditorFn) (*DeleteNSIResponse, error)

	// GetNSIWithResponse request
	GetNSIWithResponse(ctx context.Context, netsliceInstanceId string, reqEditors ...RequestEditorFn) (*GetNSIResponse, error)

	// ActionOnNSIWithBodyWithResponse request with any body
	ActionOnNSIWithBodyWithResponse(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionOnNSIResponse, error)

	ActionOnNSIWithResponse(ctx context.Context, netsliceInstanceId string, body ActionOnNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionOnNSIResponse, error)

	// InstantiateNSIWithBodyWithResponse request with any body
	InstantiateNSIWithBodyWithResponse(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstantiateNSIResponse, error)

	InstantiateNSIWithResponse(ctx context.Context, netsliceInstanceId string, body InstantiateNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*InstantiateNSIResponse, error)

	// TerminateNSIWithBodyWithResponse request with any body
	TerminateNSIWithBodyWithResponse(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TerminateNSIResponse, error)

	TerminateNSIWithResponse(ctx context.Context, netsliceInstanceId string, body TerminateNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*TerminateNSIResponse, error)

	// GetNSIsContentWithResponse request
	GetNSIsContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSIsContentResponse, error)

	// CreateNSIContentWithBodyWithResponse request with any body
	CreateNSIContentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNSIContentResponse, error)

	CreateNSIContentWithResponse(ctx context.Context, body CreateNSIContentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNSIContentResponse, error)

	// DeleteNSIContentWithResponse request
	DeleteNSIContentWithResponse(ctx context.Context, netsliceInstanceContentId string, reqEditors ...RequestEditorFn) (*DeleteNSIContentResponse, error)

	// GetNSIContentWithResponse request
	GetNSIContentWithResponse(ctx context.Context, netsliceInstanceContentId string, reqEditors ...RequestEditorFn) (*GetNSIContentResponse, error)

	// GetNsiLcmOpOccsWithResponse request
	GetNsiLcmOpOccsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNsiLcmOpOccsResponse, error)

	// GetNsiLcmOpOccWithResponse request
	GetNsiLcmOpOccWithResponse(ctx context.Context, nsiLcmOpOccId string, reqEditors ...RequestEditorFn) (*GetNsiLcmOpOccResponse, error)

	// GetNSinstancesWithResponse request
	GetNSinstancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSinstancesResponse, error)

	// AddNSinstanceWithBodyWithResponse request with any body
	AddNSinstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNSinstanceResponse, error)

	AddNSinstanceWithResponse(ctx context.Context, body AddNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNSinstanceResponse, error)

	// DeleteNSinstanceWithResponse request
	DeleteNSinstanceWithResponse(ctx context.Context, nsInstanceId string, params *DeleteNSinstanceParams, reqEditors ...RequestEditorFn) (*DeleteNSinstanceResponse, error)

	// GetNSinstanceWithResponse request
	GetNSinstanceWithResponse(ctx context.Context, nsInstanceId string, params *GetNSinstanceParams, reqEditors ...RequestEditorFn) (*GetNSinstanceResponse, error)

	// ActionOnNSinstanceWithBodyWithResponse request with any body
	ActionOnNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionOnNSinstanceResponse, error)

	ActionOnNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body ActionOnNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionOnNSinstanceResponse, error)

	// HealNSinstanceWithBodyWithResponse request with any body
	HealNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HealNSinstanceResponse, error)

	HealNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body HealNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*HealNSinstanceResponse, error)

	// InstantiateNSinstanceWithBodyWithResponse request with any body
	InstantiateNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstantiateNSinstanceResponse, error)

	InstantiateNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body InstantiateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*InstantiateNSinstanceResponse, error)

	// MigrateNSinstanceWithBodyWithResponse request with any body
	MigrateNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigrateNSinstanceResponse, error)

	MigrateNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body MigrateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*MigrateNSinstanceResponse, error)

	// ScaleNSinstanceWithBodyWithResponse request with any body
	ScaleNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScaleNSinstanceResponse, error)

	ScaleNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body ScaleNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ScaleNSinstanceResponse, error)

	// TerminateNSinstanceWithBodyWithResponse request with any body
	TerminateNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TerminateNSinstanceResponse, error)

	TerminateNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body TerminateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*TerminateNSinstanceResponse, error)

	// UpdateNSinstanceWithBodyWithResponse request with any body
	UpdateNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNSinstanceResponse, error)

	UpdateNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body UpdateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNSinstanceResponse, error)

	// GetNSinstancesContentWithResponse request
	GetNSinstancesContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSinstancesContentResponse, error)

	// CreateNSinstanceContentWithBodyWithResponse request with any body
	CreateNSinstanceContentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNSinstanceContentResponse, error)

	CreateNSinstanceContentWithResponse(ctx context.Context, body CreateNSinstanceContentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNSinstanceContentResponse, error)

	// DeleteNSinstanceContentWithResponse request
	DeleteNSinstanceContentWithResponse(ctx context.Context, nsInstanceContentId string, reqEditors ...RequestEditorFn) (*DeleteNSinstanceContentResponse, error)

	// GetNSinstanceContentWithResponse request
	GetNSinstanceContentWithResponse(ctx context.Context, nsInstanceContentId string, reqEditors ...RequestEditorFn) (*GetNSinstanceContentResponse, error)

	// MultiNsTerminateRequestWithBodyWithResponse request with any body
	MultiNsTerminateRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MultiNsTerminateRequestResponse, error)

	MultiNsTerminateRequestWithResponse(ctx context.Context, body MultiNsTerminateRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*MultiNsTerminateRequestResponse, error)

	// GetNSLCMOpOccsWithResponse request
	GetNSLCMOpOccsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSLCMOpOccsResponse, error)

	// GetNSLCMOpOccWithResponse request
	GetNSLCMOpOccWithResponse(ctx context.Context, nsLcmOpOccId string, reqEditors ...RequestEditorFn) (*GetNSLCMOpOccResponse, error)

	// CancelNSLCMOpOccWithBodyWithResponse request with any body
	CancelNSLCMOpOccWithBodyWithResponse(ctx context.Context, nsLcmOpOccId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelNSLCMOpOccResponse, error)

	CancelNSLCMOpOccWithResponse(ctx context.Context, nsLcmOpOccId string, body CancelNSLCMOpOccJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelNSLCMOpOccResponse, error)

	// GetNsSubcriptionsWithResponse request
	GetNsSubcriptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNsSubcriptionsResponse, error)

	// AddNsSubcriptionsWithBodyWithResponse request with any body
	AddNsSubcriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNsSubcriptionsResponse, error)

	AddNsSubcriptionsWithResponse(ctx context.Context, body AddNsSubcriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNsSubcriptionsResponse, error)

	// DeleteNsSubcriptionIdWithResponse request
	DeleteNsSubcriptionIdWithResponse(ctx context.Context, nsSubscriptionsId string, reqEditors ...RequestEditorFn) (*DeleteNsSubcriptionIdResponse, error)

	// GetNsSubcriptionIdWithResponse request
	GetNsSubcriptionIdWithResponse(ctx context.Context, nsSubscriptionsId string, reqEditors ...RequestEditorFn) (*GetNsSubcriptionIdResponse, error)

	// GetVnfInstancesWithResponse request
	GetVnfInstancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVnfInstancesResponse, error)

	// GetVnfInstanceWithResponse request
	GetVnfInstanceWithResponse(ctx context.Context, vnfInstanceId string, reqEditors ...RequestEditorFn) (*GetVnfInstanceResponse, error)

	// GetNsPmJobReportWithResponse request
	GetNsPmJobReportWithResponse(ctx context.Context, pmJobId string, nsId string, reqEditors ...RequestEditorFn) (*GetNsPmJobReportResponse, error)

	// GetNSTsWithResponse request
	GetNSTsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSTsResponse, error)

	// AddNSTWithBodyWithResponse request with any body
	AddNSTWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNSTResponse, error)

	AddNSTWithResponse(ctx context.Context, body AddNSTJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNSTResponse, error)

	// DeleteNSTWithResponse request
	DeleteNSTWithResponse(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*DeleteNSTResponse, error)

	// GetNSTWithResponse request
	GetNSTWithResponse(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*GetNSTResponse, error)

	// GetNstArtifactWithResponse request
	GetNstArtifactWithResponse(ctx context.Context, netsliceTemplateId string, artifactPath string, reqEditors ...RequestEditorFn) (*GetNstArtifactResponse, error)

	// GetNstNstWithResponse request
	GetNstNstWithResponse(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*GetNstNstResponse, error)

	// GetNSTcontentWithResponse request
	GetNSTcontentWithResponse(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*GetNSTcontentResponse, error)

	// UpdateNSTcontentWithBodyWithResponse request with any body
	UpdateNSTcontentWithBodyWithResponse(ctx context.Context, netsliceTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNSTcontentResponse, error)

	// GetNstContentWithResponse request
	GetNstContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNstContentResponse, error)

	// UploadNstContentWithBodyWithResponse request with any body
	UploadNstContentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadNstContentResponse, error)

	// DeleteNstIdContentWithResponse request
	DeleteNstIdContentWithResponse(ctx context.Context, netsliceTemplateContentId string, reqEditors ...RequestEditorFn) (*DeleteNstIdContentResponse, error)

	// GetNstIdContentWithResponse request
	GetNstIdContentWithResponse(ctx context.Context, netsliceTemplateContentId string, reqEditors ...RequestEditorFn) (*GetNstIdContentResponse, error)

	// UpdateNstIdContentWithBodyWithResponse request with any body
	UpdateNstIdContentWithBodyWithResponse(ctx context.Context, netsliceTemplateContentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNstIdContentResponse, error)

	UpdateNstIdContentWithResponse(ctx context.Context, netsliceTemplateContentId string, body UpdateNstIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNstIdContentResponse, error)

	// GetOKAPackageWithResponse request
	GetOKAPackageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOKAPackageResponse, error)

	// AddOKAPackageWithBodyWithResponse request with any body
	AddOKAPackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOKAPackageResponse, error)

	// DeleteOKAPackageWithResponse request
	DeleteOKAPackageWithResponse(ctx context.Context, okaPkgId string, reqEditors ...RequestEditorFn) (*DeleteOKAPackageResponse, error)

	// ReadOKAPackageWithResponse request
	ReadOKAPackageWithResponse(ctx context.Context, okaPkgId string, reqEditors ...RequestEditorFn) (*ReadOKAPackageResponse, error)

	// UpdateOKAPackageWithBodyWithResponse request with any body
	UpdateOKAPackageWithBodyWithResponse(ctx context.Context, okaPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOKAPackageResponse, error)

	// GetPDUsWithResponse request
	GetPDUsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPDUsResponse, error)

	// CreatePDUWithBodyWithResponse request with any body
	CreatePDUWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePDUResponse, error)

	CreatePDUWithResponse(ctx context.Context, body CreatePDUJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePDUResponse, error)

	// DeletePDUWithResponse request
	DeletePDUWithResponse(ctx context.Context, pduDescriptorId string, reqEditors ...RequestEditorFn) (*DeletePDUResponse, error)

	// GetPDUWithResponse request
	GetPDUWithResponse(ctx context.Context, pduDescriptorId string, reqEditors ...RequestEditorFn) (*GetPDUResponse, error)

	// EditPDUWithBodyWithResponse request with any body
	EditPDUWithBodyWithResponse(ctx context.Context, pduDescriptorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditPDUResponse, error)

	EditPDUWithResponse(ctx context.Context, pduDescriptorId string, body EditPDUJSONRequestBody, reqEditors ...RequestEditorFn) (*EditPDUResponse, error)

	// GetVnfPkgsWithResponse request
	GetVnfPkgsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVnfPkgsResponse, error)

	// AddVnfPkgWithBodyWithResponse request with any body
	AddVnfPkgWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVnfPkgResponse, error)

	AddVnfPkgWithResponse(ctx context.Context, body AddVnfPkgJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVnfPkgResponse, error)

	// DeleteVnfPkgWithResponse request
	DeleteVnfPkgWithResponse(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*DeleteVnfPkgResponse, error)

	// GetVnfPkgWithResponse request
	GetVnfPkgWithResponse(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*GetVnfPkgResponse, error)

	// UpdateVnfPkgWithBodyWithResponse request with any body
	UpdateVnfPkgWithBodyWithResponse(ctx context.Context, vnfPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVnfPkgResponse, error)

	UpdateVnfPkgWithResponse(ctx context.Context, vnfPkgId string, body UpdateVnfPkgJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVnfPkgResponse, error)

	// GetVnfPkgArtifactWithResponse request
	GetVnfPkgArtifactWithResponse(ctx context.Context, vnfPkgId string, artifactPath string, reqEditors ...RequestEditorFn) (*GetVnfPkgArtifactResponse, error)

	// GetVnfPkgContentWithResponse request
	GetVnfPkgContentWithResponse(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*GetVnfPkgContentResponse, error)

	// UploadVnfPkgContentWithBodyWithResponse request with any body
	UploadVnfPkgContentWithBodyWithResponse(ctx context.Context, vnfPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadVnfPkgContentResponse, error)

	// GetVnfPkgVnfdWithResponse request
	GetVnfPkgVnfdWithResponse(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*GetVnfPkgVnfdResponse, error)

	// GetVnfPkgsContentWithResponse request
	GetVnfPkgsContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVnfPkgsContentResponse, error)

	// UploadVnfPkgsContentWithBodyWithResponse request with any body
	UploadVnfPkgsContentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadVnfPkgsContentResponse, error)

	// DeleteVnfPkgsIdContentWithResponse request
	DeleteVnfPkgsIdContentWithResponse(ctx context.Context, packageContentId string, reqEditors ...RequestEditorFn) (*DeleteVnfPkgsIdContentResponse, error)

	// GetVnfPkgsIdContentWithResponse request
	GetVnfPkgsIdContentWithResponse(ctx context.Context, packageContentId string, reqEditors ...RequestEditorFn) (*GetVnfPkgsIdContentResponse, error)

	// UpdateVnfPkgsIdContentWithBodyWithResponse request with any body
	UpdateVnfPkgsIdContentWithBodyWithResponse(ctx context.Context, packageContentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVnfPkgsIdContentResponse, error)

	UpdateVnfPkgsIdContentWithResponse(ctx context.Context, packageContentId string, body UpdateVnfPkgsIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVnfPkgsIdContentResponse, error)
}

type GetK8sClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfK8sClusterInfo
	YAML200      *ArrayOfK8sClusterInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetK8sClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetK8sClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateK8sClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectIdPlusOpId
	YAML202      *ObjectIdPlusOpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateK8sClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateK8sClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteK8sClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteK8sClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteK8sClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetK8sClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *K8sClusterInfo
	YAML200      *K8sClusterInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetK8sClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetK8sClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditK8sClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *OpId
	YAML202      *OpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r EditK8sClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditK8sClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetK8sReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfK8sRepoInfo
	YAML200      *ArrayOfK8sRepoInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetK8sReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetK8sReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateK8sRepoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectIdPlusOpId
	YAML202      *ObjectIdPlusOpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateK8sRepoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateK8sRepoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteK8sRepoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteK8sRepoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteK8sRepoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetK8sRepoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *K8sRepoInfo
	YAML200      *K8sRepoInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetK8sRepoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetK8sRepoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfProjectInfo
	YAML200      *ArrayOfProjectInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectInfo
	YAML200      *ProjectInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r EditProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfRoleInfo
	YAML200      *ArrayOfRoleInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleInfo
	YAML200      *RoleInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r EditRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSDNsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfSdnInfo
	YAML200      *ArrayOfSdnInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetSDNsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSDNsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSDNResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectIdPlusOpId
	YAML202      *ObjectIdPlusOpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateSDNResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSDNResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSDNResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteSDNResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSDNResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSDNResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SdnInfo
	YAML200      *SdnInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetSDNResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSDNResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditSDNResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *OpId
	YAML202      *OpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r EditSDNResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditSDNResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	YAML200      *string
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfTokenInfo
	YAML200      *ArrayOfTokenInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	YAML200 *struct {
		union json.RawMessage
	}
	JSON400     *BadRequest
	JSON401     *Unauthorized
	JSON403     *Forbidden
	JSON404     *NotFound
	JSON405     *MethodNotAllowed
	JSON406     *NotAcceptable
	JSON409     *Conflict
	JSON422     *UnprocessableEntity
	JSON500     *InternalServerError
	JSON503     *ServiceUnavailable
	JSON5XX     *UnexpectedError
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	YAML200      *string
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenInfo
	YAML200      *TokenInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfUserInfo
	YAML200      *ArrayOfUserInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserInfo
	YAML200      *UserInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r EditUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVcasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfVcaInfo
	YAML200      *ArrayOfVcaInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVcasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVcasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVcaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectIdPlusOpId
	YAML202      *ObjectIdPlusOpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateVcaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVcaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVcaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteVcaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVcaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVcaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VcaInfo
	YAML200      *VcaInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVcaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVcaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditVcaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *OpId
	YAML202      *OpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r EditVcaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditVcaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVimAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfVimInfo
	YAML200      *ArrayOfVimInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVimAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVimAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVimAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectIdPlusOpId
	YAML202      *ObjectIdPlusOpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateVimAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVimAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVimAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteVimAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVimAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVimAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VimInfo
	YAML200      *VimInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVimAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVimAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditVimAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *OpId
	YAML202      *OpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r EditVimAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditVimAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVIMsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfVimInfo
	YAML200      *ArrayOfVimInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVIMsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVIMsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVIMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectIdPlusOpId
	YAML202      *ObjectIdPlusOpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateVIMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVIMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVIMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteVIMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVIMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVIMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VimInfo
	YAML200      *VimInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVIMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVIMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditVIMResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *OpId
	YAML202      *OpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r EditVIMResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditVIMResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWimAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfWimInfo
	YAML200      *ArrayOfWimInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetWimAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWimAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWimAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectIdPlusOpId
	YAML202      *ObjectIdPlusOpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateWimAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWimAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWimAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteWimAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWimAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWimAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WimInfo
	YAML200      *WimInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetWimAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWimAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditWimAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *OpId
	YAML202      *OpId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r EditWimAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditWimAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAppProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ListAppProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAppProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateAppProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAppProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAppProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteAppProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAppProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadAppProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ReadAppProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadAppProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAppProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchAppProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAppProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Listk8sClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r Listk8sClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Listk8sClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Createk8sClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r Createk8sClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Createk8sClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletek8sClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r Deletek8sClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletek8sClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Readk8sClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r Readk8sClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Readk8sClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetAppProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRemoveAppProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddRemoveAppProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRemoveAppProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCredsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetCredsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCredsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInfraConfigProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetInfraConfigProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInfraConfigProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddremoveInfraConfigProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddremoveInfraConfigProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddremoveInfraConfigProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInfraControllerProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetInfraControllerProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInfraControllerProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddremoveInfraControllerProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddremoveInfraControllerProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddremoveInfraControllerProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetResourceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddremoveResourceProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddremoveResourceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddremoveResourceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NodeScalingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r NodeScalingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeScalingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpgradeClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpgradeClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpgradeClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInfraConfigProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ListInfraConfigProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInfraConfigProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInfraConfigProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateInfraConfigProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInfraConfigProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInfraConfigProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteInfraConfigProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInfraConfigProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadInfraConfigProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ReadInfraConfigProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadInfraConfigProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchInfraConfigProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchInfraConfigProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchInfraConfigProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInfraControllerProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ListInfraControllerProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInfraControllerProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInfraControllerProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateInfraControllerProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInfraControllerProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInfraControllerProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteInfraControllerProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInfraControllerProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadInfraControllerProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ReadInfraControllerProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadInfraControllerProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchInfraControllerProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchInfraControllerProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchInfraControllerProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResourceProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ListResourceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResourceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResourceProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateResourceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResourceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteResourceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadResourceProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ReadResourceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadResourceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchResourceProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchResourceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchResourceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKSUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetKSUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKSUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddKSUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddKSUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddKSUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMultipleKSUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteMultipleKSUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMultipleKSUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMultipleKSUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateMultipleKSUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMultipleKSUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKSUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteKSUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKSUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadKSUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ReadKSUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadKSUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateKSUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateKSUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateKSUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloneKSUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectId
	YAML202      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CloneKSUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloneKSUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveKSUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r MoveKSUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveKSUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNsconfigtemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNsConfigTemplateInfo
	YAML200      *ArrayOfNsConfigTemplateInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNsconfigtemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNsconfigtemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddNsconfigtemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddNsconfigtemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddNsconfigtemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNsconfigtemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteNsconfigtemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNsconfigtemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNsconfigtemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NsConfigTemplateInfo
	YAML200      *NsConfigTemplateInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNsconfigtemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNsconfigtemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTemplatecontentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NsConfigTemplateInfo
	YAML200      *NsConfigTemplateInfo
	JSON206      *NsConfigTemplateInfo
	YAML206      *NsConfigTemplateInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetTemplatecontentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTemplatecontentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTemplatecontentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateTemplatecontentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTemplatecontentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSDsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNsdInfo
	YAML200      *ArrayOfNsdInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSDsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSDsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddNSDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddNSDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddNSDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNSDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteNSDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNSDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NsdInfo
	YAML200      *NsdInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNSDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateNSDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNSDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNsPkgArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNsPkgArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNsPkgArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNsPkgNsdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNsPkgNsdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNsPkgNsdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSDcontentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSDcontentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSDcontentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNSDcontentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateNSDcontentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNSDcontentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNsPkgsContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNsdInfo
	YAML200      *ArrayOfNsdInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNsPkgsContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNsPkgsContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadNsPkgsContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UploadNsPkgsContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadNsPkgsContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNSPkgsIdContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteNSPkgsIdContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNSPkgsIdContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNsPkgsIdContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NsdInfo
	YAML200      *NsdInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNsPkgsIdContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNsPkgsIdContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNsPkgsIdContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateNsPkgsIdContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNsPkgsIdContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlarmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfAlarm
	YAML200      *ArrayOfAlarm
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetAlarmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlarmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlarmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alarm
	YAML200      *Alarm
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetAlarmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlarmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAlarmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateAlarmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAlarmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSIsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNetSliceInstance
	YAML200      *ArrayOfNetSliceInstance
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSIsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSIsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddNSIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddNSIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddNSIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNSIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteNSIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNSIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetSliceInstance
	YAML200      *NetSliceInstance
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionOnNSIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectId
	YAML202      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ActionOnNSIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionOnNSIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstantiateNSIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectId
	YAML202      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r InstantiateNSIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstantiateNSIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TerminateNSIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectId
	YAML202      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r TerminateNSIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TerminateNSIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSIsContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNetSliceInstance
	YAML200      *ArrayOfNetSliceInstance
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSIsContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSIsContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNSIContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateNsiContentResponse
	YAML201      *CreateNsiContentResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateNSIContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNSIContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNSIContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectId
	YAML202      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteNSIContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNSIContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSIContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetSliceInstance
	YAML200      *NetSliceInstance
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSIContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSIContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNsiLcmOpOccsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNsiLcmOpOcc
	YAML200      *ArrayOfNsiLcmOpOcc
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNsiLcmOpOccsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNsiLcmOpOccsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNsiLcmOpOccResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NsiLcmOpOcc
	YAML200      *NsiLcmOpOcc
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNsiLcmOpOccResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNsiLcmOpOccResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSinstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNsInstance
	YAML200      *ArrayOfNsInstance
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSinstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSinstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddNSinstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddNSinstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddNSinstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNSinstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteNSinstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNSinstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSinstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NsInstance
	YAML200      *NsInstance
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSinstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSinstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionOnNSinstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectId
	YAML202      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ActionOnNSinstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionOnNSinstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealNSinstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r HealNSinstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealNSinstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstantiateNSinstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectId
	YAML202      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r InstantiateNSinstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstantiateNSinstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MigrateNSinstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r MigrateNSinstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MigrateNSinstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScaleNSinstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ScaleNSinstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScaleNSinstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TerminateNSinstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectId
	YAML202      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r TerminateNSinstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TerminateNSinstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNSinstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateNSinstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNSinstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSinstancesContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNsInstance
	YAML200      *ArrayOfNsInstance
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSinstancesContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSinstancesContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNSinstanceContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateNSinstanceContentResp
	YAML201      *CreateNSinstanceContentResp
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateNSinstanceContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNSinstanceContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNSinstanceContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectId
	YAML202      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteNSinstanceContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNSinstanceContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSinstanceContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NsInstance
	YAML200      *NsInstance
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSinstanceContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSinstanceContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MultiNsTerminateRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ObjectIdList
	YAML202      *ObjectIdList
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r MultiNsTerminateRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MultiNsTerminateRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSLCMOpOccsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNsLcmOpOcc
	YAML200      *ArrayOfNsLcmOpOcc
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSLCMOpOccsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSLCMOpOccsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSLCMOpOccResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NsLcmOpOcc
	YAML200      *NsLcmOpOcc
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSLCMOpOccResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSLCMOpOccResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelNSLCMOpOccResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CancelNSLCMOpOccResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelNSLCMOpOccResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNsSubcriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNslcmSubscriptionInfo
	YAML200      *ArrayOfNslcmSubscriptionInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNsSubcriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNsSubcriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddNsSubcriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NslcmSubscriptionResponse
	YAML201      *NslcmSubscriptionResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddNsSubcriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddNsSubcriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNsSubcriptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteNsSubcriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNsSubcriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNsSubcriptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NslcmSubscriptionInfo
	YAML200      *NslcmSubscriptionInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNsSubcriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNsSubcriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVnfInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfVnfInstanceInfo
	YAML200      *ArrayOfVnfInstanceInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVnfInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVnfInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVnfInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VnfInstanceInfo
	YAML200      *VnfInstanceInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVnfInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVnfInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNsPmJobReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NsPmJobReportInfo
	YAML200      *NsPmJobReportInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNsPmJobReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNsPmJobReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSTsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNstInfo
	YAML200      *ArrayOfNstInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSTsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSTsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddNSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddNSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddNSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteNSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NstInfo
	YAML200      *NstInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNstArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNstArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNstArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNstNstResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNstNstResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNstNstResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSTcontentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNSTcontentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSTcontentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNSTcontentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateNSTcontentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNSTcontentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNstContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfNstInfo
	YAML200      *ArrayOfNstInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNstContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNstContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadNstContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UploadNstContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadNstContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNstIdContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteNstIdContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNstIdContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNstIdContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NstInfo
	YAML200      *NstInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetNstIdContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNstIdContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNstIdContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateNstIdContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNstIdContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOKAPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetOKAPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOKAPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddOKAPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddOKAPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddOKAPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOKAPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteOKAPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOKAPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadOKAPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ReadOKAPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadOKAPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOKAPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateOKAPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOKAPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPDUsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfPduInfo
	YAML200      *ArrayOfPduInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetPDUsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPDUsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePDUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectId
	YAML200      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreatePDUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePDUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePDUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeletePDUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePDUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPDUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PduInfo
	YAML200      *PduInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetPDUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPDUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditPDUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r EditPDUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditPDUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVnfPkgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfVnfPkgInfo
	YAML200      *ArrayOfVnfPkgInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVnfPkgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVnfPkgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddVnfPkgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r AddVnfPkgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddVnfPkgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVnfPkgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteVnfPkgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVnfPkgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVnfPkgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VnfPkgInfo
	YAML200      *VnfPkgInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVnfPkgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVnfPkgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVnfPkgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateVnfPkgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVnfPkgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVnfPkgArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVnfPkgArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVnfPkgArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVnfPkgContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVnfPkgContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVnfPkgContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadVnfPkgContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UploadVnfPkgContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadVnfPkgContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVnfPkgVnfdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVnfPkgVnfdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVnfPkgVnfdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVnfPkgsContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfVnfPkgInfo
	YAML200      *ArrayOfVnfPkgInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVnfPkgsContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVnfPkgsContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadVnfPkgsContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectId
	YAML201      *ObjectId
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UploadVnfPkgsContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadVnfPkgsContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVnfPkgsIdContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteVnfPkgsIdContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVnfPkgsIdContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVnfPkgsIdContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VnfPkgInfo
	YAML200      *VnfPkgInfo
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetVnfPkgsIdContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVnfPkgsIdContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVnfPkgsIdContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON405      *MethodNotAllowed
	JSON406      *NotAcceptable
	JSON409      *Conflict
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
	JSON503      *ServiceUnavailable
	JSON5XX      *UnexpectedError
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateVnfPkgsIdContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVnfPkgsIdContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetK8sClustersWithResponse request returning *GetK8sClustersResponse
func (c *ClientWithResponses) GetK8sClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetK8sClustersResponse, error) {
	rsp, err := c.GetK8sClusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetK8sClustersResponse(rsp)
}

// CreateK8sClusterWithBodyWithResponse request with arbitrary body returning *CreateK8sClusterResponse
func (c *ClientWithResponses) CreateK8sClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateK8sClusterResponse, error) {
	rsp, err := c.CreateK8sClusterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateK8sClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateK8sClusterWithResponse(ctx context.Context, body CreateK8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateK8sClusterResponse, error) {
	rsp, err := c.CreateK8sCluster(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateK8sClusterResponse(rsp)
}

// DeleteK8sClusterWithResponse request returning *DeleteK8sClusterResponse
func (c *ClientWithResponses) DeleteK8sClusterWithResponse(ctx context.Context, k8sClusterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteK8sClusterResponse, error) {
	rsp, err := c.DeleteK8sCluster(ctx, k8sClusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteK8sClusterResponse(rsp)
}

// GetK8sClusterWithResponse request returning *GetK8sClusterResponse
func (c *ClientWithResponses) GetK8sClusterWithResponse(ctx context.Context, k8sClusterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetK8sClusterResponse, error) {
	rsp, err := c.GetK8sCluster(ctx, k8sClusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetK8sClusterResponse(rsp)
}

// EditK8sClusterWithBodyWithResponse request with arbitrary body returning *EditK8sClusterResponse
func (c *ClientWithResponses) EditK8sClusterWithBodyWithResponse(ctx context.Context, k8sClusterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditK8sClusterResponse, error) {
	rsp, err := c.EditK8sClusterWithBody(ctx, k8sClusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditK8sClusterResponse(rsp)
}

func (c *ClientWithResponses) EditK8sClusterWithResponse(ctx context.Context, k8sClusterId openapi_types.UUID, body EditK8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*EditK8sClusterResponse, error) {
	rsp, err := c.EditK8sCluster(ctx, k8sClusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditK8sClusterResponse(rsp)
}

// GetK8sReposWithResponse request returning *GetK8sReposResponse
func (c *ClientWithResponses) GetK8sReposWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetK8sReposResponse, error) {
	rsp, err := c.GetK8sRepos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetK8sReposResponse(rsp)
}

// CreateK8sRepoWithBodyWithResponse request with arbitrary body returning *CreateK8sRepoResponse
func (c *ClientWithResponses) CreateK8sRepoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateK8sRepoResponse, error) {
	rsp, err := c.CreateK8sRepoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateK8sRepoResponse(rsp)
}

func (c *ClientWithResponses) CreateK8sRepoWithResponse(ctx context.Context, body CreateK8sRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateK8sRepoResponse, error) {
	rsp, err := c.CreateK8sRepo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateK8sRepoResponse(rsp)
}

// DeleteK8sRepoWithResponse request returning *DeleteK8sRepoResponse
func (c *ClientWithResponses) DeleteK8sRepoWithResponse(ctx context.Context, k8sRepoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteK8sRepoResponse, error) {
	rsp, err := c.DeleteK8sRepo(ctx, k8sRepoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteK8sRepoResponse(rsp)
}

// GetK8sRepoWithResponse request returning *GetK8sRepoResponse
func (c *ClientWithResponses) GetK8sRepoWithResponse(ctx context.Context, k8sRepoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetK8sRepoResponse, error) {
	rsp, err := c.GetK8sRepo(ctx, k8sRepoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetK8sRepoResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// CreateProjectWithBodyWithResponse request with arbitrary body returning *CreateProjectResponse
func (c *ClientWithResponses) CreateProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectWithResponse(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

// DeleteProjectWithResponse request returning *DeleteProjectResponse
func (c *ClientWithResponses) DeleteProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error) {
	rsp, err := c.DeleteProject(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectResponse(rsp)
}

// GetProjectWithResponse request returning *GetProjectResponse
func (c *ClientWithResponses) GetProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectResponse, error) {
	rsp, err := c.GetProject(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectResponse(rsp)
}

// EditProjectWithBodyWithResponse request with arbitrary body returning *EditProjectResponse
func (c *ClientWithResponses) EditProjectWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditProjectResponse, error) {
	rsp, err := c.EditProjectWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditProjectResponse(rsp)
}

func (c *ClientWithResponses) EditProjectWithResponse(ctx context.Context, projectId string, body EditProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*EditProjectResponse, error) {
	rsp, err := c.EditProject(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditProjectResponse(rsp)
}

// GetRolesWithResponse request returning *GetRolesResponse
func (c *ClientWithResponses) GetRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRolesResponse, error) {
	rsp, err := c.GetRoles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolesResponse(rsp)
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResponse
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

// DeleteRoleWithResponse request returning *DeleteRoleResponse
func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error) {
	rsp, err := c.DeleteRole(ctx, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResponse(rsp)
}

// GetRoleWithResponse request returning *GetRoleResponse
func (c *ClientWithResponses) GetRoleWithResponse(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*GetRoleResponse, error) {
	rsp, err := c.GetRole(ctx, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleResponse(rsp)
}

// EditRoleWithBodyWithResponse request with arbitrary body returning *EditRoleResponse
func (c *ClientWithResponses) EditRoleWithBodyWithResponse(ctx context.Context, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditRoleResponse, error) {
	rsp, err := c.EditRoleWithBody(ctx, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditRoleResponse(rsp)
}

func (c *ClientWithResponses) EditRoleWithResponse(ctx context.Context, roleId string, body EditRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*EditRoleResponse, error) {
	rsp, err := c.EditRole(ctx, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditRoleResponse(rsp)
}

// GetSDNsWithResponse request returning *GetSDNsResponse
func (c *ClientWithResponses) GetSDNsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSDNsResponse, error) {
	rsp, err := c.GetSDNs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSDNsResponse(rsp)
}

// CreateSDNWithBodyWithResponse request with arbitrary body returning *CreateSDNResponse
func (c *ClientWithResponses) CreateSDNWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSDNResponse, error) {
	rsp, err := c.CreateSDNWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSDNResponse(rsp)
}

func (c *ClientWithResponses) CreateSDNWithResponse(ctx context.Context, body CreateSDNJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSDNResponse, error) {
	rsp, err := c.CreateSDN(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSDNResponse(rsp)
}

// DeleteSDNWithResponse request returning *DeleteSDNResponse
func (c *ClientWithResponses) DeleteSDNWithResponse(ctx context.Context, sdnId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteSDNResponse, error) {
	rsp, err := c.DeleteSDN(ctx, sdnId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSDNResponse(rsp)
}

// GetSDNWithResponse request returning *GetSDNResponse
func (c *ClientWithResponses) GetSDNWithResponse(ctx context.Context, sdnId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSDNResponse, error) {
	rsp, err := c.GetSDN(ctx, sdnId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSDNResponse(rsp)
}

// EditSDNWithBodyWithResponse request with arbitrary body returning *EditSDNResponse
func (c *ClientWithResponses) EditSDNWithBodyWithResponse(ctx context.Context, sdnId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditSDNResponse, error) {
	rsp, err := c.EditSDNWithBody(ctx, sdnId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditSDNResponse(rsp)
}

func (c *ClientWithResponses) EditSDNWithResponse(ctx context.Context, sdnId openapi_types.UUID, body EditSDNJSONRequestBody, reqEditors ...RequestEditorFn) (*EditSDNResponse, error) {
	rsp, err := c.EditSDN(ctx, sdnId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditSDNResponse(rsp)
}

// DeleteAuthTokenWithResponse request returning *DeleteAuthTokenResponse
func (c *ClientWithResponses) DeleteAuthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAuthTokenResponse, error) {
	rsp, err := c.DeleteAuthToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthTokenResponse(rsp)
}

// GetTokensWithResponse request returning *GetTokensResponse
func (c *ClientWithResponses) GetTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokensResponse, error) {
	rsp, err := c.GetTokens(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokensResponse(rsp)
}

// CreateTokenWithBodyWithResponse request with arbitrary body returning *CreateTokenResponse
func (c *ClientWithResponses) CreateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenResponse, error) {
	rsp, err := c.CreateTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateTokenWithResponse(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenResponse, error) {
	rsp, err := c.CreateToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenResponse(rsp)
}

// DeleteTokenWithResponse request returning *DeleteTokenResponse
func (c *ClientWithResponses) DeleteTokenWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*DeleteTokenResponse, error) {
	rsp, err := c.DeleteToken(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTokenResponse(rsp)
}

// GetTokenWithResponse request returning *GetTokenResponse
func (c *ClientWithResponses) GetTokenWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*GetTokenResponse, error) {
	rsp, err := c.GetToken(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// EditUserWithBodyWithResponse request with arbitrary body returning *EditUserResponse
func (c *ClientWithResponses) EditUserWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditUserResponse, error) {
	rsp, err := c.EditUserWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditUserResponse(rsp)
}

func (c *ClientWithResponses) EditUserWithResponse(ctx context.Context, userId string, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*EditUserResponse, error) {
	rsp, err := c.EditUser(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditUserResponse(rsp)
}

// GetVcasWithResponse request returning *GetVcasResponse
func (c *ClientWithResponses) GetVcasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVcasResponse, error) {
	rsp, err := c.GetVcas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVcasResponse(rsp)
}

// CreateVcaWithBodyWithResponse request with arbitrary body returning *CreateVcaResponse
func (c *ClientWithResponses) CreateVcaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVcaResponse, error) {
	rsp, err := c.CreateVcaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVcaResponse(rsp)
}

func (c *ClientWithResponses) CreateVcaWithResponse(ctx context.Context, body CreateVcaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVcaResponse, error) {
	rsp, err := c.CreateVca(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVcaResponse(rsp)
}

// DeleteVcaWithResponse request returning *DeleteVcaResponse
func (c *ClientWithResponses) DeleteVcaWithResponse(ctx context.Context, vcaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteVcaResponse, error) {
	rsp, err := c.DeleteVca(ctx, vcaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVcaResponse(rsp)
}

// GetVcaWithResponse request returning *GetVcaResponse
func (c *ClientWithResponses) GetVcaWithResponse(ctx context.Context, vcaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetVcaResponse, error) {
	rsp, err := c.GetVca(ctx, vcaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVcaResponse(rsp)
}

// EditVcaWithBodyWithResponse request with arbitrary body returning *EditVcaResponse
func (c *ClientWithResponses) EditVcaWithBodyWithResponse(ctx context.Context, vcaId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditVcaResponse, error) {
	rsp, err := c.EditVcaWithBody(ctx, vcaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditVcaResponse(rsp)
}

func (c *ClientWithResponses) EditVcaWithResponse(ctx context.Context, vcaId openapi_types.UUID, body EditVcaJSONRequestBody, reqEditors ...RequestEditorFn) (*EditVcaResponse, error) {
	rsp, err := c.EditVca(ctx, vcaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditVcaResponse(rsp)
}

// GetVimAccountsWithResponse request returning *GetVimAccountsResponse
func (c *ClientWithResponses) GetVimAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVimAccountsResponse, error) {
	rsp, err := c.GetVimAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVimAccountsResponse(rsp)
}

// CreateVimAccountWithBodyWithResponse request with arbitrary body returning *CreateVimAccountResponse
func (c *ClientWithResponses) CreateVimAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVimAccountResponse, error) {
	rsp, err := c.CreateVimAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVimAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateVimAccountWithResponse(ctx context.Context, body CreateVimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVimAccountResponse, error) {
	rsp, err := c.CreateVimAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVimAccountResponse(rsp)
}

// DeleteVimAccountWithResponse request returning *DeleteVimAccountResponse
func (c *ClientWithResponses) DeleteVimAccountWithResponse(ctx context.Context, vimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteVimAccountResponse, error) {
	rsp, err := c.DeleteVimAccount(ctx, vimAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVimAccountResponse(rsp)
}

// GetVimAccountWithResponse request returning *GetVimAccountResponse
func (c *ClientWithResponses) GetVimAccountWithResponse(ctx context.Context, vimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetVimAccountResponse, error) {
	rsp, err := c.GetVimAccount(ctx, vimAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVimAccountResponse(rsp)
}

// EditVimAccountWithBodyWithResponse request with arbitrary body returning *EditVimAccountResponse
func (c *ClientWithResponses) EditVimAccountWithBodyWithResponse(ctx context.Context, vimAccountId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditVimAccountResponse, error) {
	rsp, err := c.EditVimAccountWithBody(ctx, vimAccountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditVimAccountResponse(rsp)
}

func (c *ClientWithResponses) EditVimAccountWithResponse(ctx context.Context, vimAccountId openapi_types.UUID, body EditVimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*EditVimAccountResponse, error) {
	rsp, err := c.EditVimAccount(ctx, vimAccountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditVimAccountResponse(rsp)
}

// GetVIMsWithResponse request returning *GetVIMsResponse
func (c *ClientWithResponses) GetVIMsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVIMsResponse, error) {
	rsp, err := c.GetVIMs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVIMsResponse(rsp)
}

// CreateVIMWithBodyWithResponse request with arbitrary body returning *CreateVIMResponse
func (c *ClientWithResponses) CreateVIMWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVIMResponse, error) {
	rsp, err := c.CreateVIMWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVIMResponse(rsp)
}

func (c *ClientWithResponses) CreateVIMWithResponse(ctx context.Context, body CreateVIMJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVIMResponse, error) {
	rsp, err := c.CreateVIM(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVIMResponse(rsp)
}

// DeleteVIMWithResponse request returning *DeleteVIMResponse
func (c *ClientWithResponses) DeleteVIMWithResponse(ctx context.Context, vimId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteVIMResponse, error) {
	rsp, err := c.DeleteVIM(ctx, vimId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVIMResponse(rsp)
}

// GetVIMWithResponse request returning *GetVIMResponse
func (c *ClientWithResponses) GetVIMWithResponse(ctx context.Context, vimId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetVIMResponse, error) {
	rsp, err := c.GetVIM(ctx, vimId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVIMResponse(rsp)
}

// EditVIMWithBodyWithResponse request with arbitrary body returning *EditVIMResponse
func (c *ClientWithResponses) EditVIMWithBodyWithResponse(ctx context.Context, vimId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditVIMResponse, error) {
	rsp, err := c.EditVIMWithBody(ctx, vimId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditVIMResponse(rsp)
}

func (c *ClientWithResponses) EditVIMWithResponse(ctx context.Context, vimId openapi_types.UUID, body EditVIMJSONRequestBody, reqEditors ...RequestEditorFn) (*EditVIMResponse, error) {
	rsp, err := c.EditVIM(ctx, vimId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditVIMResponse(rsp)
}

// GetWimAccountsWithResponse request returning *GetWimAccountsResponse
func (c *ClientWithResponses) GetWimAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWimAccountsResponse, error) {
	rsp, err := c.GetWimAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWimAccountsResponse(rsp)
}

// CreateWimAccountWithBodyWithResponse request with arbitrary body returning *CreateWimAccountResponse
func (c *ClientWithResponses) CreateWimAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWimAccountResponse, error) {
	rsp, err := c.CreateWimAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWimAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateWimAccountWithResponse(ctx context.Context, body CreateWimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWimAccountResponse, error) {
	rsp, err := c.CreateWimAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWimAccountResponse(rsp)
}

// DeleteWimAccountWithResponse request returning *DeleteWimAccountResponse
func (c *ClientWithResponses) DeleteWimAccountWithResponse(ctx context.Context, wimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteWimAccountResponse, error) {
	rsp, err := c.DeleteWimAccount(ctx, wimAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWimAccountResponse(rsp)
}

// GetWimAccountWithResponse request returning *GetWimAccountResponse
func (c *ClientWithResponses) GetWimAccountWithResponse(ctx context.Context, wimAccountId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetWimAccountResponse, error) {
	rsp, err := c.GetWimAccount(ctx, wimAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWimAccountResponse(rsp)
}

// EditWimAccountWithBodyWithResponse request with arbitrary body returning *EditWimAccountResponse
func (c *ClientWithResponses) EditWimAccountWithBodyWithResponse(ctx context.Context, wimAccountId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditWimAccountResponse, error) {
	rsp, err := c.EditWimAccountWithBody(ctx, wimAccountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditWimAccountResponse(rsp)
}

func (c *ClientWithResponses) EditWimAccountWithResponse(ctx context.Context, wimAccountId openapi_types.UUID, body EditWimAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*EditWimAccountResponse, error) {
	rsp, err := c.EditWimAccount(ctx, wimAccountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditWimAccountResponse(rsp)
}

// ListAppProfileWithResponse request returning *ListAppProfileResponse
func (c *ClientWithResponses) ListAppProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAppProfileResponse, error) {
	rsp, err := c.ListAppProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppProfileResponse(rsp)
}

// CreateAppProfileWithBodyWithResponse request with arbitrary body returning *CreateAppProfileResponse
func (c *ClientWithResponses) CreateAppProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppProfileResponse, error) {
	rsp, err := c.CreateAppProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateAppProfileWithResponse(ctx context.Context, body CreateAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppProfileResponse, error) {
	rsp, err := c.CreateAppProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppProfileResponse(rsp)
}

// DeleteAppProfileWithResponse request returning *DeleteAppProfileResponse
func (c *ClientWithResponses) DeleteAppProfileWithResponse(ctx context.Context, appProfileId string, reqEditors ...RequestEditorFn) (*DeleteAppProfileResponse, error) {
	rsp, err := c.DeleteAppProfile(ctx, appProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppProfileResponse(rsp)
}

// ReadAppProfileWithResponse request returning *ReadAppProfileResponse
func (c *ClientWithResponses) ReadAppProfileWithResponse(ctx context.Context, appProfileId string, reqEditors ...RequestEditorFn) (*ReadAppProfileResponse, error) {
	rsp, err := c.ReadAppProfile(ctx, appProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadAppProfileResponse(rsp)
}

// PatchAppProfileWithBodyWithResponse request with arbitrary body returning *PatchAppProfileResponse
func (c *ClientWithResponses) PatchAppProfileWithBodyWithResponse(ctx context.Context, appProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAppProfileResponse, error) {
	rsp, err := c.PatchAppProfileWithBody(ctx, appProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAppProfileResponse(rsp)
}

func (c *ClientWithResponses) PatchAppProfileWithResponse(ctx context.Context, appProfileId string, body PatchAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAppProfileResponse, error) {
	rsp, err := c.PatchAppProfile(ctx, appProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAppProfileResponse(rsp)
}

// Listk8sClusterWithResponse request returning *Listk8sClusterResponse
func (c *ClientWithResponses) Listk8sClusterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Listk8sClusterResponse, error) {
	rsp, err := c.Listk8sCluster(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListk8sClusterResponse(rsp)
}

// Createk8sClusterWithBodyWithResponse request with arbitrary body returning *Createk8sClusterResponse
func (c *ClientWithResponses) Createk8sClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Createk8sClusterResponse, error) {
	rsp, err := c.Createk8sClusterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatek8sClusterResponse(rsp)
}

func (c *ClientWithResponses) Createk8sClusterWithResponse(ctx context.Context, body Createk8sClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*Createk8sClusterResponse, error) {
	rsp, err := c.Createk8sCluster(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatek8sClusterResponse(rsp)
}

// Deletek8sClusterWithResponse request returning *Deletek8sClusterResponse
func (c *ClientWithResponses) Deletek8sClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*Deletek8sClusterResponse, error) {
	rsp, err := c.Deletek8sCluster(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletek8sClusterResponse(rsp)
}

// Readk8sClusterWithResponse request returning *Readk8sClusterResponse
func (c *ClientWithResponses) Readk8sClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*Readk8sClusterResponse, error) {
	rsp, err := c.Readk8sCluster(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadk8sClusterResponse(rsp)
}

// GetAppProfileWithResponse request returning *GetAppProfileResponse
func (c *ClientWithResponses) GetAppProfileWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAppProfileResponse, error) {
	rsp, err := c.GetAppProfile(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppProfileResponse(rsp)
}

// AddRemoveAppProfileWithBodyWithResponse request with arbitrary body returning *AddRemoveAppProfileResponse
func (c *ClientWithResponses) AddRemoveAppProfileWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRemoveAppProfileResponse, error) {
	rsp, err := c.AddRemoveAppProfileWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRemoveAppProfileResponse(rsp)
}

func (c *ClientWithResponses) AddRemoveAppProfileWithResponse(ctx context.Context, clusterId string, body AddRemoveAppProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRemoveAppProfileResponse, error) {
	rsp, err := c.AddRemoveAppProfile(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRemoveAppProfileResponse(rsp)
}

// GetCredsWithResponse request returning *GetCredsResponse
func (c *ClientWithResponses) GetCredsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetCredsResponse, error) {
	rsp, err := c.GetCreds(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCredsResponse(rsp)
}

// GetInfraConfigProfileWithResponse request returning *GetInfraConfigProfileResponse
func (c *ClientWithResponses) GetInfraConfigProfileWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetInfraConfigProfileResponse, error) {
	rsp, err := c.GetInfraConfigProfile(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInfraConfigProfileResponse(rsp)
}

// AddremoveInfraConfigProfileWithBodyWithResponse request with arbitrary body returning *AddremoveInfraConfigProfileResponse
func (c *ClientWithResponses) AddremoveInfraConfigProfileWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddremoveInfraConfigProfileResponse, error) {
	rsp, err := c.AddremoveInfraConfigProfileWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddremoveInfraConfigProfileResponse(rsp)
}

func (c *ClientWithResponses) AddremoveInfraConfigProfileWithResponse(ctx context.Context, clusterId string, body AddremoveInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*AddremoveInfraConfigProfileResponse, error) {
	rsp, err := c.AddremoveInfraConfigProfile(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddremoveInfraConfigProfileResponse(rsp)
}

// GetInfraControllerProfileWithResponse request returning *GetInfraControllerProfileResponse
func (c *ClientWithResponses) GetInfraControllerProfileWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetInfraControllerProfileResponse, error) {
	rsp, err := c.GetInfraControllerProfile(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInfraControllerProfileResponse(rsp)
}

// AddremoveInfraControllerProfileWithBodyWithResponse request with arbitrary body returning *AddremoveInfraControllerProfileResponse
func (c *ClientWithResponses) AddremoveInfraControllerProfileWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddremoveInfraControllerProfileResponse, error) {
	rsp, err := c.AddremoveInfraControllerProfileWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddremoveInfraControllerProfileResponse(rsp)
}

func (c *ClientWithResponses) AddremoveInfraControllerProfileWithResponse(ctx context.Context, clusterId string, body AddremoveInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*AddremoveInfraControllerProfileResponse, error) {
	rsp, err := c.AddremoveInfraControllerProfile(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddremoveInfraControllerProfileResponse(rsp)
}

// GetResourceProfileWithResponse request returning *GetResourceProfileResponse
func (c *ClientWithResponses) GetResourceProfileWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetResourceProfileResponse, error) {
	rsp, err := c.GetResourceProfile(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceProfileResponse(rsp)
}

// AddremoveResourceProfileWithBodyWithResponse request with arbitrary body returning *AddremoveResourceProfileResponse
func (c *ClientWithResponses) AddremoveResourceProfileWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddremoveResourceProfileResponse, error) {
	rsp, err := c.AddremoveResourceProfileWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddremoveResourceProfileResponse(rsp)
}

func (c *ClientWithResponses) AddremoveResourceProfileWithResponse(ctx context.Context, clusterId string, body AddremoveResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*AddremoveResourceProfileResponse, error) {
	rsp, err := c.AddremoveResourceProfile(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddremoveResourceProfileResponse(rsp)
}

// NodeScalingWithBodyWithResponse request with arbitrary body returning *NodeScalingResponse
func (c *ClientWithResponses) NodeScalingWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NodeScalingResponse, error) {
	rsp, err := c.NodeScalingWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeScalingResponse(rsp)
}

func (c *ClientWithResponses) NodeScalingWithResponse(ctx context.Context, clusterId string, body NodeScalingJSONRequestBody, reqEditors ...RequestEditorFn) (*NodeScalingResponse, error) {
	rsp, err := c.NodeScaling(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNodeScalingResponse(rsp)
}

// UpgradeClusterWithBodyWithResponse request with arbitrary body returning *UpgradeClusterResponse
func (c *ClientWithResponses) UpgradeClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpgradeClusterResponse, error) {
	rsp, err := c.UpgradeClusterWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpgradeClusterResponse(rsp)
}

func (c *ClientWithResponses) UpgradeClusterWithResponse(ctx context.Context, clusterId string, body UpgradeClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpgradeClusterResponse, error) {
	rsp, err := c.UpgradeCluster(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpgradeClusterResponse(rsp)
}

// ListInfraConfigProfileWithResponse request returning *ListInfraConfigProfileResponse
func (c *ClientWithResponses) ListInfraConfigProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListInfraConfigProfileResponse, error) {
	rsp, err := c.ListInfraConfigProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInfraConfigProfileResponse(rsp)
}

// CreateInfraConfigProfileWithBodyWithResponse request with arbitrary body returning *CreateInfraConfigProfileResponse
func (c *ClientWithResponses) CreateInfraConfigProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInfraConfigProfileResponse, error) {
	rsp, err := c.CreateInfraConfigProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInfraConfigProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateInfraConfigProfileWithResponse(ctx context.Context, body CreateInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInfraConfigProfileResponse, error) {
	rsp, err := c.CreateInfraConfigProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInfraConfigProfileResponse(rsp)
}

// DeleteInfraConfigProfileWithResponse request returning *DeleteInfraConfigProfileResponse
func (c *ClientWithResponses) DeleteInfraConfigProfileWithResponse(ctx context.Context, infraConfigProfileId string, reqEditors ...RequestEditorFn) (*DeleteInfraConfigProfileResponse, error) {
	rsp, err := c.DeleteInfraConfigProfile(ctx, infraConfigProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInfraConfigProfileResponse(rsp)
}

// ReadInfraConfigProfileWithResponse request returning *ReadInfraConfigProfileResponse
func (c *ClientWithResponses) ReadInfraConfigProfileWithResponse(ctx context.Context, infraConfigProfileId string, reqEditors ...RequestEditorFn) (*ReadInfraConfigProfileResponse, error) {
	rsp, err := c.ReadInfraConfigProfile(ctx, infraConfigProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadInfraConfigProfileResponse(rsp)
}

// PatchInfraConfigProfileWithBodyWithResponse request with arbitrary body returning *PatchInfraConfigProfileResponse
func (c *ClientWithResponses) PatchInfraConfigProfileWithBodyWithResponse(ctx context.Context, infraConfigProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInfraConfigProfileResponse, error) {
	rsp, err := c.PatchInfraConfigProfileWithBody(ctx, infraConfigProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInfraConfigProfileResponse(rsp)
}

func (c *ClientWithResponses) PatchInfraConfigProfileWithResponse(ctx context.Context, infraConfigProfileId string, body PatchInfraConfigProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInfraConfigProfileResponse, error) {
	rsp, err := c.PatchInfraConfigProfile(ctx, infraConfigProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInfraConfigProfileResponse(rsp)
}

// ListInfraControllerProfileWithResponse request returning *ListInfraControllerProfileResponse
func (c *ClientWithResponses) ListInfraControllerProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListInfraControllerProfileResponse, error) {
	rsp, err := c.ListInfraControllerProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInfraControllerProfileResponse(rsp)
}

// CreateInfraControllerProfileWithBodyWithResponse request with arbitrary body returning *CreateInfraControllerProfileResponse
func (c *ClientWithResponses) CreateInfraControllerProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInfraControllerProfileResponse, error) {
	rsp, err := c.CreateInfraControllerProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInfraControllerProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateInfraControllerProfileWithResponse(ctx context.Context, body CreateInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInfraControllerProfileResponse, error) {
	rsp, err := c.CreateInfraControllerProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInfraControllerProfileResponse(rsp)
}

// DeleteInfraControllerProfileWithResponse request returning *DeleteInfraControllerProfileResponse
func (c *ClientWithResponses) DeleteInfraControllerProfileWithResponse(ctx context.Context, infraControllerProfileId string, reqEditors ...RequestEditorFn) (*DeleteInfraControllerProfileResponse, error) {
	rsp, err := c.DeleteInfraControllerProfile(ctx, infraControllerProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInfraControllerProfileResponse(rsp)
}

// ReadInfraControllerProfileWithResponse request returning *ReadInfraControllerProfileResponse
func (c *ClientWithResponses) ReadInfraControllerProfileWithResponse(ctx context.Context, infraControllerProfileId string, reqEditors ...RequestEditorFn) (*ReadInfraControllerProfileResponse, error) {
	rsp, err := c.ReadInfraControllerProfile(ctx, infraControllerProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadInfraControllerProfileResponse(rsp)
}

// PatchInfraControllerProfileWithBodyWithResponse request with arbitrary body returning *PatchInfraControllerProfileResponse
func (c *ClientWithResponses) PatchInfraControllerProfileWithBodyWithResponse(ctx context.Context, infraControllerProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInfraControllerProfileResponse, error) {
	rsp, err := c.PatchInfraControllerProfileWithBody(ctx, infraControllerProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInfraControllerProfileResponse(rsp)
}

func (c *ClientWithResponses) PatchInfraControllerProfileWithResponse(ctx context.Context, infraControllerProfileId string, body PatchInfraControllerProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInfraControllerProfileResponse, error) {
	rsp, err := c.PatchInfraControllerProfile(ctx, infraControllerProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInfraControllerProfileResponse(rsp)
}

// ListResourceProfileWithResponse request returning *ListResourceProfileResponse
func (c *ClientWithResponses) ListResourceProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListResourceProfileResponse, error) {
	rsp, err := c.ListResourceProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResourceProfileResponse(rsp)
}

// CreateResourceProfileWithBodyWithResponse request with arbitrary body returning *CreateResourceProfileResponse
func (c *ClientWithResponses) CreateResourceProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceProfileResponse, error) {
	rsp, err := c.CreateResourceProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateResourceProfileWithResponse(ctx context.Context, body CreateResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceProfileResponse, error) {
	rsp, err := c.CreateResourceProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceProfileResponse(rsp)
}

// DeleteResourceProfileWithResponse request returning *DeleteResourceProfileResponse
func (c *ClientWithResponses) DeleteResourceProfileWithResponse(ctx context.Context, resourceProfileId string, reqEditors ...RequestEditorFn) (*DeleteResourceProfileResponse, error) {
	rsp, err := c.DeleteResourceProfile(ctx, resourceProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceProfileResponse(rsp)
}

// ReadResourceProfileWithResponse request returning *ReadResourceProfileResponse
func (c *ClientWithResponses) ReadResourceProfileWithResponse(ctx context.Context, resourceProfileId string, reqEditors ...RequestEditorFn) (*ReadResourceProfileResponse, error) {
	rsp, err := c.ReadResourceProfile(ctx, resourceProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadResourceProfileResponse(rsp)
}

// PatchResourceProfileWithBodyWithResponse request with arbitrary body returning *PatchResourceProfileResponse
func (c *ClientWithResponses) PatchResourceProfileWithBodyWithResponse(ctx context.Context, resourceProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchResourceProfileResponse, error) {
	rsp, err := c.PatchResourceProfileWithBody(ctx, resourceProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchResourceProfileResponse(rsp)
}

func (c *ClientWithResponses) PatchResourceProfileWithResponse(ctx context.Context, resourceProfileId string, body PatchResourceProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchResourceProfileResponse, error) {
	rsp, err := c.PatchResourceProfile(ctx, resourceProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchResourceProfileResponse(rsp)
}

// GetKSUWithResponse request returning *GetKSUResponse
func (c *ClientWithResponses) GetKSUWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKSUResponse, error) {
	rsp, err := c.GetKSU(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKSUResponse(rsp)
}

// AddKSUWithBodyWithResponse request with arbitrary body returning *AddKSUResponse
func (c *ClientWithResponses) AddKSUWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddKSUResponse, error) {
	rsp, err := c.AddKSUWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddKSUResponse(rsp)
}

func (c *ClientWithResponses) AddKSUWithResponse(ctx context.Context, body AddKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*AddKSUResponse, error) {
	rsp, err := c.AddKSU(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddKSUResponse(rsp)
}

// DeleteMultipleKSUWithBodyWithResponse request with arbitrary body returning *DeleteMultipleKSUResponse
func (c *ClientWithResponses) DeleteMultipleKSUWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMultipleKSUResponse, error) {
	rsp, err := c.DeleteMultipleKSUWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMultipleKSUResponse(rsp)
}

func (c *ClientWithResponses) DeleteMultipleKSUWithResponse(ctx context.Context, body DeleteMultipleKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMultipleKSUResponse, error) {
	rsp, err := c.DeleteMultipleKSU(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMultipleKSUResponse(rsp)
}

// UpdateMultipleKSUWithBodyWithResponse request with arbitrary body returning *UpdateMultipleKSUResponse
func (c *ClientWithResponses) UpdateMultipleKSUWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMultipleKSUResponse, error) {
	rsp, err := c.UpdateMultipleKSUWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMultipleKSUResponse(rsp)
}

func (c *ClientWithResponses) UpdateMultipleKSUWithResponse(ctx context.Context, body UpdateMultipleKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMultipleKSUResponse, error) {
	rsp, err := c.UpdateMultipleKSU(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMultipleKSUResponse(rsp)
}

// DeleteKSUWithResponse request returning *DeleteKSUResponse
func (c *ClientWithResponses) DeleteKSUWithResponse(ctx context.Context, ksuId string, reqEditors ...RequestEditorFn) (*DeleteKSUResponse, error) {
	rsp, err := c.DeleteKSU(ctx, ksuId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKSUResponse(rsp)
}

// ReadKSUWithResponse request returning *ReadKSUResponse
func (c *ClientWithResponses) ReadKSUWithResponse(ctx context.Context, ksuId string, reqEditors ...RequestEditorFn) (*ReadKSUResponse, error) {
	rsp, err := c.ReadKSU(ctx, ksuId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadKSUResponse(rsp)
}

// UpdateKSUWithBodyWithResponse request with arbitrary body returning *UpdateKSUResponse
func (c *ClientWithResponses) UpdateKSUWithBodyWithResponse(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKSUResponse, error) {
	rsp, err := c.UpdateKSUWithBody(ctx, ksuId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKSUResponse(rsp)
}

func (c *ClientWithResponses) UpdateKSUWithResponse(ctx context.Context, ksuId string, body UpdateKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateKSUResponse, error) {
	rsp, err := c.UpdateKSU(ctx, ksuId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKSUResponse(rsp)
}

// CloneKSUWithBodyWithResponse request with arbitrary body returning *CloneKSUResponse
func (c *ClientWithResponses) CloneKSUWithBodyWithResponse(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneKSUResponse, error) {
	rsp, err := c.CloneKSUWithBody(ctx, ksuId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneKSUResponse(rsp)
}

func (c *ClientWithResponses) CloneKSUWithResponse(ctx context.Context, ksuId string, body CloneKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneKSUResponse, error) {
	rsp, err := c.CloneKSU(ctx, ksuId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneKSUResponse(rsp)
}

// MoveKSUWithBodyWithResponse request with arbitrary body returning *MoveKSUResponse
func (c *ClientWithResponses) MoveKSUWithBodyWithResponse(ctx context.Context, ksuId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveKSUResponse, error) {
	rsp, err := c.MoveKSUWithBody(ctx, ksuId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveKSUResponse(rsp)
}

func (c *ClientWithResponses) MoveKSUWithResponse(ctx context.Context, ksuId string, body MoveKSUJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveKSUResponse, error) {
	rsp, err := c.MoveKSU(ctx, ksuId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveKSUResponse(rsp)
}

// GetNsconfigtemplatesWithResponse request returning *GetNsconfigtemplatesResponse
func (c *ClientWithResponses) GetNsconfigtemplatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNsconfigtemplatesResponse, error) {
	rsp, err := c.GetNsconfigtemplates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNsconfigtemplatesResponse(rsp)
}

// AddNsconfigtemplateWithBodyWithResponse request with arbitrary body returning *AddNsconfigtemplateResponse
func (c *ClientWithResponses) AddNsconfigtemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNsconfigtemplateResponse, error) {
	rsp, err := c.AddNsconfigtemplateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNsconfigtemplateResponse(rsp)
}

func (c *ClientWithResponses) AddNsconfigtemplateWithResponse(ctx context.Context, body AddNsconfigtemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNsconfigtemplateResponse, error) {
	rsp, err := c.AddNsconfigtemplate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNsconfigtemplateResponse(rsp)
}

// DeleteNsconfigtemplateWithResponse request returning *DeleteNsconfigtemplateResponse
func (c *ClientWithResponses) DeleteNsconfigtemplateWithResponse(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*DeleteNsconfigtemplateResponse, error) {
	rsp, err := c.DeleteNsconfigtemplate(ctx, nsconfigTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNsconfigtemplateResponse(rsp)
}

// GetNsconfigtemplateWithResponse request returning *GetNsconfigtemplateResponse
func (c *ClientWithResponses) GetNsconfigtemplateWithResponse(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*GetNsconfigtemplateResponse, error) {
	rsp, err := c.GetNsconfigtemplate(ctx, nsconfigTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNsconfigtemplateResponse(rsp)
}

// GetTemplatecontentWithResponse request returning *GetTemplatecontentResponse
func (c *ClientWithResponses) GetTemplatecontentWithResponse(ctx context.Context, nsconfigTemplateId string, reqEditors ...RequestEditorFn) (*GetTemplatecontentResponse, error) {
	rsp, err := c.GetTemplatecontent(ctx, nsconfigTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTemplatecontentResponse(rsp)
}

// UpdateTemplatecontentWithBodyWithResponse request with arbitrary body returning *UpdateTemplatecontentResponse
func (c *ClientWithResponses) UpdateTemplatecontentWithBodyWithResponse(ctx context.Context, nsconfigTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTemplatecontentResponse, error) {
	rsp, err := c.UpdateTemplatecontentWithBody(ctx, nsconfigTemplateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTemplatecontentResponse(rsp)
}

func (c *ClientWithResponses) UpdateTemplatecontentWithResponse(ctx context.Context, nsconfigTemplateId string, body UpdateTemplatecontentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTemplatecontentResponse, error) {
	rsp, err := c.UpdateTemplatecontent(ctx, nsconfigTemplateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTemplatecontentResponse(rsp)
}

// GetNSDsWithResponse request returning *GetNSDsResponse
func (c *ClientWithResponses) GetNSDsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSDsResponse, error) {
	rsp, err := c.GetNSDs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSDsResponse(rsp)
}

// AddNSDWithBodyWithResponse request with arbitrary body returning *AddNSDResponse
func (c *ClientWithResponses) AddNSDWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNSDResponse, error) {
	rsp, err := c.AddNSDWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNSDResponse(rsp)
}

func (c *ClientWithResponses) AddNSDWithResponse(ctx context.Context, body AddNSDJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNSDResponse, error) {
	rsp, err := c.AddNSD(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNSDResponse(rsp)
}

// DeleteNSDWithResponse request returning *DeleteNSDResponse
func (c *ClientWithResponses) DeleteNSDWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*DeleteNSDResponse, error) {
	rsp, err := c.DeleteNSD(ctx, nsdInfoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNSDResponse(rsp)
}

// GetNSDWithResponse request returning *GetNSDResponse
func (c *ClientWithResponses) GetNSDWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*GetNSDResponse, error) {
	rsp, err := c.GetNSD(ctx, nsdInfoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSDResponse(rsp)
}

// UpdateNSDWithBodyWithResponse request with arbitrary body returning *UpdateNSDResponse
func (c *ClientWithResponses) UpdateNSDWithBodyWithResponse(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNSDResponse, error) {
	rsp, err := c.UpdateNSDWithBody(ctx, nsdInfoId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNSDResponse(rsp)
}

func (c *ClientWithResponses) UpdateNSDWithResponse(ctx context.Context, nsdInfoId string, body UpdateNSDJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNSDResponse, error) {
	rsp, err := c.UpdateNSD(ctx, nsdInfoId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNSDResponse(rsp)
}

// GetNsPkgArtifactWithResponse request returning *GetNsPkgArtifactResponse
func (c *ClientWithResponses) GetNsPkgArtifactWithResponse(ctx context.Context, nsdInfoId string, artifactPath string, reqEditors ...RequestEditorFn) (*GetNsPkgArtifactResponse, error) {
	rsp, err := c.GetNsPkgArtifact(ctx, nsdInfoId, artifactPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNsPkgArtifactResponse(rsp)
}

// GetNsPkgNsdWithResponse request returning *GetNsPkgNsdResponse
func (c *ClientWithResponses) GetNsPkgNsdWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*GetNsPkgNsdResponse, error) {
	rsp, err := c.GetNsPkgNsd(ctx, nsdInfoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNsPkgNsdResponse(rsp)
}

// GetNSDcontentWithResponse request returning *GetNSDcontentResponse
func (c *ClientWithResponses) GetNSDcontentWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*GetNSDcontentResponse, error) {
	rsp, err := c.GetNSDcontent(ctx, nsdInfoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSDcontentResponse(rsp)
}

// UpdateNSDcontentWithBodyWithResponse request with arbitrary body returning *UpdateNSDcontentResponse
func (c *ClientWithResponses) UpdateNSDcontentWithBodyWithResponse(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNSDcontentResponse, error) {
	rsp, err := c.UpdateNSDcontentWithBody(ctx, nsdInfoId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNSDcontentResponse(rsp)
}

// GetNsPkgsContentWithResponse request returning *GetNsPkgsContentResponse
func (c *ClientWithResponses) GetNsPkgsContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNsPkgsContentResponse, error) {
	rsp, err := c.GetNsPkgsContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNsPkgsContentResponse(rsp)
}

// UploadNsPkgsContentWithBodyWithResponse request with arbitrary body returning *UploadNsPkgsContentResponse
func (c *ClientWithResponses) UploadNsPkgsContentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadNsPkgsContentResponse, error) {
	rsp, err := c.UploadNsPkgsContentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadNsPkgsContentResponse(rsp)
}

// DeleteNSPkgsIdContentWithResponse request returning *DeleteNSPkgsIdContentResponse
func (c *ClientWithResponses) DeleteNSPkgsIdContentWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*DeleteNSPkgsIdContentResponse, error) {
	rsp, err := c.DeleteNSPkgsIdContent(ctx, nsdInfoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNSPkgsIdContentResponse(rsp)
}

// GetNsPkgsIdContentWithResponse request returning *GetNsPkgsIdContentResponse
func (c *ClientWithResponses) GetNsPkgsIdContentWithResponse(ctx context.Context, nsdInfoId string, reqEditors ...RequestEditorFn) (*GetNsPkgsIdContentResponse, error) {
	rsp, err := c.GetNsPkgsIdContent(ctx, nsdInfoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNsPkgsIdContentResponse(rsp)
}

// UpdateNsPkgsIdContentWithBodyWithResponse request with arbitrary body returning *UpdateNsPkgsIdContentResponse
func (c *ClientWithResponses) UpdateNsPkgsIdContentWithBodyWithResponse(ctx context.Context, nsdInfoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNsPkgsIdContentResponse, error) {
	rsp, err := c.UpdateNsPkgsIdContentWithBody(ctx, nsdInfoId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNsPkgsIdContentResponse(rsp)
}

func (c *ClientWithResponses) UpdateNsPkgsIdContentWithResponse(ctx context.Context, nsdInfoId string, body UpdateNsPkgsIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNsPkgsIdContentResponse, error) {
	rsp, err := c.UpdateNsPkgsIdContent(ctx, nsdInfoId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNsPkgsIdContentResponse(rsp)
}

// GetAlarmsWithResponse request returning *GetAlarmsResponse
func (c *ClientWithResponses) GetAlarmsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlarmsResponse, error) {
	rsp, err := c.GetAlarms(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlarmsResponse(rsp)
}

// GetAlarmWithResponse request returning *GetAlarmResponse
func (c *ClientWithResponses) GetAlarmWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetAlarmResponse, error) {
	rsp, err := c.GetAlarm(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlarmResponse(rsp)
}

// UpdateAlarmWithBodyWithResponse request with arbitrary body returning *UpdateAlarmResponse
func (c *ClientWithResponses) UpdateAlarmWithBodyWithResponse(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAlarmResponse, error) {
	rsp, err := c.UpdateAlarmWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlarmResponse(rsp)
}

func (c *ClientWithResponses) UpdateAlarmWithResponse(ctx context.Context, uuid string, body UpdateAlarmJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAlarmResponse, error) {
	rsp, err := c.UpdateAlarm(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAlarmResponse(rsp)
}

// GetNSIsWithResponse request returning *GetNSIsResponse
func (c *ClientWithResponses) GetNSIsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSIsResponse, error) {
	rsp, err := c.GetNSIs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSIsResponse(rsp)
}

// AddNSIWithBodyWithResponse request with arbitrary body returning *AddNSIResponse
func (c *ClientWithResponses) AddNSIWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNSIResponse, error) {
	rsp, err := c.AddNSIWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNSIResponse(rsp)
}

func (c *ClientWithResponses) AddNSIWithResponse(ctx context.Context, body AddNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNSIResponse, error) {
	rsp, err := c.AddNSI(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNSIResponse(rsp)
}

// DeleteNSIWithResponse request returning *DeleteNSIResponse
func (c *ClientWithResponses) DeleteNSIWithResponse(ctx context.Context, netsliceInstanceId string, reqEditors ...RequestEditorFn) (*DeleteNSIResponse, error) {
	rsp, err := c.DeleteNSI(ctx, netsliceInstanceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNSIResponse(rsp)
}

// GetNSIWithResponse request returning *GetNSIResponse
func (c *ClientWithResponses) GetNSIWithResponse(ctx context.Context, netsliceInstanceId string, reqEditors ...RequestEditorFn) (*GetNSIResponse, error) {
	rsp, err := c.GetNSI(ctx, netsliceInstanceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSIResponse(rsp)
}

// ActionOnNSIWithBodyWithResponse request with arbitrary body returning *ActionOnNSIResponse
func (c *ClientWithResponses) ActionOnNSIWithBodyWithResponse(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionOnNSIResponse, error) {
	rsp, err := c.ActionOnNSIWithBody(ctx, netsliceInstanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionOnNSIResponse(rsp)
}

func (c *ClientWithResponses) ActionOnNSIWithResponse(ctx context.Context, netsliceInstanceId string, body ActionOnNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionOnNSIResponse, error) {
	rsp, err := c.ActionOnNSI(ctx, netsliceInstanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionOnNSIResponse(rsp)
}

// InstantiateNSIWithBodyWithResponse request with arbitrary body returning *InstantiateNSIResponse
func (c *ClientWithResponses) InstantiateNSIWithBodyWithResponse(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstantiateNSIResponse, error) {
	rsp, err := c.InstantiateNSIWithBody(ctx, netsliceInstanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstantiateNSIResponse(rsp)
}

func (c *ClientWithResponses) InstantiateNSIWithResponse(ctx context.Context, netsliceInstanceId string, body InstantiateNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*InstantiateNSIResponse, error) {
	rsp, err := c.InstantiateNSI(ctx, netsliceInstanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstantiateNSIResponse(rsp)
}

// TerminateNSIWithBodyWithResponse request with arbitrary body returning *TerminateNSIResponse
func (c *ClientWithResponses) TerminateNSIWithBodyWithResponse(ctx context.Context, netsliceInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TerminateNSIResponse, error) {
	rsp, err := c.TerminateNSIWithBody(ctx, netsliceInstanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTerminateNSIResponse(rsp)
}

func (c *ClientWithResponses) TerminateNSIWithResponse(ctx context.Context, netsliceInstanceId string, body TerminateNSIJSONRequestBody, reqEditors ...RequestEditorFn) (*TerminateNSIResponse, error) {
	rsp, err := c.TerminateNSI(ctx, netsliceInstanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTerminateNSIResponse(rsp)
}

// GetNSIsContentWithResponse request returning *GetNSIsContentResponse
func (c *ClientWithResponses) GetNSIsContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSIsContentResponse, error) {
	rsp, err := c.GetNSIsContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSIsContentResponse(rsp)
}

// CreateNSIContentWithBodyWithResponse request with arbitrary body returning *CreateNSIContentResponse
func (c *ClientWithResponses) CreateNSIContentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNSIContentResponse, error) {
	rsp, err := c.CreateNSIContentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNSIContentResponse(rsp)
}

func (c *ClientWithResponses) CreateNSIContentWithResponse(ctx context.Context, body CreateNSIContentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNSIContentResponse, error) {
	rsp, err := c.CreateNSIContent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNSIContentResponse(rsp)
}

// DeleteNSIContentWithResponse request returning *DeleteNSIContentResponse
func (c *ClientWithResponses) DeleteNSIContentWithResponse(ctx context.Context, netsliceInstanceContentId string, reqEditors ...RequestEditorFn) (*DeleteNSIContentResponse, error) {
	rsp, err := c.DeleteNSIContent(ctx, netsliceInstanceContentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNSIContentResponse(rsp)
}

// GetNSIContentWithResponse request returning *GetNSIContentResponse
func (c *ClientWithResponses) GetNSIContentWithResponse(ctx context.Context, netsliceInstanceContentId string, reqEditors ...RequestEditorFn) (*GetNSIContentResponse, error) {
	rsp, err := c.GetNSIContent(ctx, netsliceInstanceContentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSIContentResponse(rsp)
}

// GetNsiLcmOpOccsWithResponse request returning *GetNsiLcmOpOccsResponse
func (c *ClientWithResponses) GetNsiLcmOpOccsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNsiLcmOpOccsResponse, error) {
	rsp, err := c.GetNsiLcmOpOccs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNsiLcmOpOccsResponse(rsp)
}

// GetNsiLcmOpOccWithResponse request returning *GetNsiLcmOpOccResponse
func (c *ClientWithResponses) GetNsiLcmOpOccWithResponse(ctx context.Context, nsiLcmOpOccId string, reqEditors ...RequestEditorFn) (*GetNsiLcmOpOccResponse, error) {
	rsp, err := c.GetNsiLcmOpOcc(ctx, nsiLcmOpOccId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNsiLcmOpOccResponse(rsp)
}

// GetNSinstancesWithResponse request returning *GetNSinstancesResponse
func (c *ClientWithResponses) GetNSinstancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSinstancesResponse, error) {
	rsp, err := c.GetNSinstances(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSinstancesResponse(rsp)
}

// AddNSinstanceWithBodyWithResponse request with arbitrary body returning *AddNSinstanceResponse
func (c *ClientWithResponses) AddNSinstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNSinstanceResponse, error) {
	rsp, err := c.AddNSinstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNSinstanceResponse(rsp)
}

func (c *ClientWithResponses) AddNSinstanceWithResponse(ctx context.Context, body AddNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNSinstanceResponse, error) {
	rsp, err := c.AddNSinstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNSinstanceResponse(rsp)
}

// DeleteNSinstanceWithResponse request returning *DeleteNSinstanceResponse
func (c *ClientWithResponses) DeleteNSinstanceWithResponse(ctx context.Context, nsInstanceId string, params *DeleteNSinstanceParams, reqEditors ...RequestEditorFn) (*DeleteNSinstanceResponse, error) {
	rsp, err := c.DeleteNSinstance(ctx, nsInstanceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNSinstanceResponse(rsp)
}

// GetNSinstanceWithResponse request returning *GetNSinstanceResponse
func (c *ClientWithResponses) GetNSinstanceWithResponse(ctx context.Context, nsInstanceId string, params *GetNSinstanceParams, reqEditors ...RequestEditorFn) (*GetNSinstanceResponse, error) {
	rsp, err := c.GetNSinstance(ctx, nsInstanceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSinstanceResponse(rsp)
}

// ActionOnNSinstanceWithBodyWithResponse request with arbitrary body returning *ActionOnNSinstanceResponse
func (c *ClientWithResponses) ActionOnNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionOnNSinstanceResponse, error) {
	rsp, err := c.ActionOnNSinstanceWithBody(ctx, nsInstanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionOnNSinstanceResponse(rsp)
}

func (c *ClientWithResponses) ActionOnNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body ActionOnNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionOnNSinstanceResponse, error) {
	rsp, err := c.ActionOnNSinstance(ctx, nsInstanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionOnNSinstanceResponse(rsp)
}

// HealNSinstanceWithBodyWithResponse request with arbitrary body returning *HealNSinstanceResponse
func (c *ClientWithResponses) HealNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HealNSinstanceResponse, error) {
	rsp, err := c.HealNSinstanceWithBody(ctx, nsInstanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealNSinstanceResponse(rsp)
}

func (c *ClientWithResponses) HealNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body HealNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*HealNSinstanceResponse, error) {
	rsp, err := c.HealNSinstance(ctx, nsInstanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealNSinstanceResponse(rsp)
}

// InstantiateNSinstanceWithBodyWithResponse request with arbitrary body returning *InstantiateNSinstanceResponse
func (c *ClientWithResponses) InstantiateNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstantiateNSinstanceResponse, error) {
	rsp, err := c.InstantiateNSinstanceWithBody(ctx, nsInstanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstantiateNSinstanceResponse(rsp)
}

func (c *ClientWithResponses) InstantiateNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body InstantiateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*InstantiateNSinstanceResponse, error) {
	rsp, err := c.InstantiateNSinstance(ctx, nsInstanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstantiateNSinstanceResponse(rsp)
}

// MigrateNSinstanceWithBodyWithResponse request with arbitrary body returning *MigrateNSinstanceResponse
func (c *ClientWithResponses) MigrateNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigrateNSinstanceResponse, error) {
	rsp, err := c.MigrateNSinstanceWithBody(ctx, nsInstanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrateNSinstanceResponse(rsp)
}

func (c *ClientWithResponses) MigrateNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body MigrateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*MigrateNSinstanceResponse, error) {
	rsp, err := c.MigrateNSinstance(ctx, nsInstanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrateNSinstanceResponse(rsp)
}

// ScaleNSinstanceWithBodyWithResponse request with arbitrary body returning *ScaleNSinstanceResponse
func (c *ClientWithResponses) ScaleNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScaleNSinstanceResponse, error) {
	rsp, err := c.ScaleNSinstanceWithBody(ctx, nsInstanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScaleNSinstanceResponse(rsp)
}

func (c *ClientWithResponses) ScaleNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body ScaleNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ScaleNSinstanceResponse, error) {
	rsp, err := c.ScaleNSinstance(ctx, nsInstanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScaleNSinstanceResponse(rsp)
}

// TerminateNSinstanceWithBodyWithResponse request with arbitrary body returning *TerminateNSinstanceResponse
func (c *ClientWithResponses) TerminateNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TerminateNSinstanceResponse, error) {
	rsp, err := c.TerminateNSinstanceWithBody(ctx, nsInstanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTerminateNSinstanceResponse(rsp)
}

func (c *ClientWithResponses) TerminateNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body TerminateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*TerminateNSinstanceResponse, error) {
	rsp, err := c.TerminateNSinstance(ctx, nsInstanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTerminateNSinstanceResponse(rsp)
}

// UpdateNSinstanceWithBodyWithResponse request with arbitrary body returning *UpdateNSinstanceResponse
func (c *ClientWithResponses) UpdateNSinstanceWithBodyWithResponse(ctx context.Context, nsInstanceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNSinstanceResponse, error) {
	rsp, err := c.UpdateNSinstanceWithBody(ctx, nsInstanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNSinstanceResponse(rsp)
}

func (c *ClientWithResponses) UpdateNSinstanceWithResponse(ctx context.Context, nsInstanceId string, body UpdateNSinstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNSinstanceResponse, error) {
	rsp, err := c.UpdateNSinstance(ctx, nsInstanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNSinstanceResponse(rsp)
}

// GetNSinstancesContentWithResponse request returning *GetNSinstancesContentResponse
func (c *ClientWithResponses) GetNSinstancesContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSinstancesContentResponse, error) {
	rsp, err := c.GetNSinstancesContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSinstancesContentResponse(rsp)
}

// CreateNSinstanceContentWithBodyWithResponse request with arbitrary body returning *CreateNSinstanceContentResponse
func (c *ClientWithResponses) CreateNSinstanceContentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNSinstanceContentResponse, error) {
	rsp, err := c.CreateNSinstanceContentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNSinstanceContentResponse(rsp)
}

func (c *ClientWithResponses) CreateNSinstanceContentWithResponse(ctx context.Context, body CreateNSinstanceContentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNSinstanceContentResponse, error) {
	rsp, err := c.CreateNSinstanceContent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNSinstanceContentResponse(rsp)
}

// DeleteNSinstanceContentWithResponse request returning *DeleteNSinstanceContentResponse
func (c *ClientWithResponses) DeleteNSinstanceContentWithResponse(ctx context.Context, nsInstanceContentId string, reqEditors ...RequestEditorFn) (*DeleteNSinstanceContentResponse, error) {
	rsp, err := c.DeleteNSinstanceContent(ctx, nsInstanceContentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNSinstanceContentResponse(rsp)
}

// GetNSinstanceContentWithResponse request returning *GetNSinstanceContentResponse
func (c *ClientWithResponses) GetNSinstanceContentWithResponse(ctx context.Context, nsInstanceContentId string, reqEditors ...RequestEditorFn) (*GetNSinstanceContentResponse, error) {
	rsp, err := c.GetNSinstanceContent(ctx, nsInstanceContentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSinstanceContentResponse(rsp)
}

// MultiNsTerminateRequestWithBodyWithResponse request with arbitrary body returning *MultiNsTerminateRequestResponse
func (c *ClientWithResponses) MultiNsTerminateRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MultiNsTerminateRequestResponse, error) {
	rsp, err := c.MultiNsTerminateRequestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMultiNsTerminateRequestResponse(rsp)
}

func (c *ClientWithResponses) MultiNsTerminateRequestWithResponse(ctx context.Context, body MultiNsTerminateRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*MultiNsTerminateRequestResponse, error) {
	rsp, err := c.MultiNsTerminateRequest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMultiNsTerminateRequestResponse(rsp)
}

// GetNSLCMOpOccsWithResponse request returning *GetNSLCMOpOccsResponse
func (c *ClientWithResponses) GetNSLCMOpOccsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSLCMOpOccsResponse, error) {
	rsp, err := c.GetNSLCMOpOccs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSLCMOpOccsResponse(rsp)
}

// GetNSLCMOpOccWithResponse request returning *GetNSLCMOpOccResponse
func (c *ClientWithResponses) GetNSLCMOpOccWithResponse(ctx context.Context, nsLcmOpOccId string, reqEditors ...RequestEditorFn) (*GetNSLCMOpOccResponse, error) {
	rsp, err := c.GetNSLCMOpOcc(ctx, nsLcmOpOccId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSLCMOpOccResponse(rsp)
}

// CancelNSLCMOpOccWithBodyWithResponse request with arbitrary body returning *CancelNSLCMOpOccResponse
func (c *ClientWithResponses) CancelNSLCMOpOccWithBodyWithResponse(ctx context.Context, nsLcmOpOccId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelNSLCMOpOccResponse, error) {
	rsp, err := c.CancelNSLCMOpOccWithBody(ctx, nsLcmOpOccId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelNSLCMOpOccResponse(rsp)
}

func (c *ClientWithResponses) CancelNSLCMOpOccWithResponse(ctx context.Context, nsLcmOpOccId string, body CancelNSLCMOpOccJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelNSLCMOpOccResponse, error) {
	rsp, err := c.CancelNSLCMOpOcc(ctx, nsLcmOpOccId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelNSLCMOpOccResponse(rsp)
}

// GetNsSubcriptionsWithResponse request returning *GetNsSubcriptionsResponse
func (c *ClientWithResponses) GetNsSubcriptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNsSubcriptionsResponse, error) {
	rsp, err := c.GetNsSubcriptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNsSubcriptionsResponse(rsp)
}

// AddNsSubcriptionsWithBodyWithResponse request with arbitrary body returning *AddNsSubcriptionsResponse
func (c *ClientWithResponses) AddNsSubcriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNsSubcriptionsResponse, error) {
	rsp, err := c.AddNsSubcriptionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNsSubcriptionsResponse(rsp)
}

func (c *ClientWithResponses) AddNsSubcriptionsWithResponse(ctx context.Context, body AddNsSubcriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNsSubcriptionsResponse, error) {
	rsp, err := c.AddNsSubcriptions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNsSubcriptionsResponse(rsp)
}

// DeleteNsSubcriptionIdWithResponse request returning *DeleteNsSubcriptionIdResponse
func (c *ClientWithResponses) DeleteNsSubcriptionIdWithResponse(ctx context.Context, nsSubscriptionsId string, reqEditors ...RequestEditorFn) (*DeleteNsSubcriptionIdResponse, error) {
	rsp, err := c.DeleteNsSubcriptionId(ctx, nsSubscriptionsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNsSubcriptionIdResponse(rsp)
}

// GetNsSubcriptionIdWithResponse request returning *GetNsSubcriptionIdResponse
func (c *ClientWithResponses) GetNsSubcriptionIdWithResponse(ctx context.Context, nsSubscriptionsId string, reqEditors ...RequestEditorFn) (*GetNsSubcriptionIdResponse, error) {
	rsp, err := c.GetNsSubcriptionId(ctx, nsSubscriptionsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNsSubcriptionIdResponse(rsp)
}

// GetVnfInstancesWithResponse request returning *GetVnfInstancesResponse
func (c *ClientWithResponses) GetVnfInstancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVnfInstancesResponse, error) {
	rsp, err := c.GetVnfInstances(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVnfInstancesResponse(rsp)
}

// GetVnfInstanceWithResponse request returning *GetVnfInstanceResponse
func (c *ClientWithResponses) GetVnfInstanceWithResponse(ctx context.Context, vnfInstanceId string, reqEditors ...RequestEditorFn) (*GetVnfInstanceResponse, error) {
	rsp, err := c.GetVnfInstance(ctx, vnfInstanceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVnfInstanceResponse(rsp)
}

// GetNsPmJobReportWithResponse request returning *GetNsPmJobReportResponse
func (c *ClientWithResponses) GetNsPmJobReportWithResponse(ctx context.Context, pmJobId string, nsId string, reqEditors ...RequestEditorFn) (*GetNsPmJobReportResponse, error) {
	rsp, err := c.GetNsPmJobReport(ctx, pmJobId, nsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNsPmJobReportResponse(rsp)
}

// GetNSTsWithResponse request returning *GetNSTsResponse
func (c *ClientWithResponses) GetNSTsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNSTsResponse, error) {
	rsp, err := c.GetNSTs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSTsResponse(rsp)
}

// AddNSTWithBodyWithResponse request with arbitrary body returning *AddNSTResponse
func (c *ClientWithResponses) AddNSTWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNSTResponse, error) {
	rsp, err := c.AddNSTWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNSTResponse(rsp)
}

func (c *ClientWithResponses) AddNSTWithResponse(ctx context.Context, body AddNSTJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNSTResponse, error) {
	rsp, err := c.AddNST(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNSTResponse(rsp)
}

// DeleteNSTWithResponse request returning *DeleteNSTResponse
func (c *ClientWithResponses) DeleteNSTWithResponse(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*DeleteNSTResponse, error) {
	rsp, err := c.DeleteNST(ctx, netsliceTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNSTResponse(rsp)
}

// GetNSTWithResponse request returning *GetNSTResponse
func (c *ClientWithResponses) GetNSTWithResponse(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*GetNSTResponse, error) {
	rsp, err := c.GetNST(ctx, netsliceTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSTResponse(rsp)
}

// GetNstArtifactWithResponse request returning *GetNstArtifactResponse
func (c *ClientWithResponses) GetNstArtifactWithResponse(ctx context.Context, netsliceTemplateId string, artifactPath string, reqEditors ...RequestEditorFn) (*GetNstArtifactResponse, error) {
	rsp, err := c.GetNstArtifact(ctx, netsliceTemplateId, artifactPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNstArtifactResponse(rsp)
}

// GetNstNstWithResponse request returning *GetNstNstResponse
func (c *ClientWithResponses) GetNstNstWithResponse(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*GetNstNstResponse, error) {
	rsp, err := c.GetNstNst(ctx, netsliceTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNstNstResponse(rsp)
}

// GetNSTcontentWithResponse request returning *GetNSTcontentResponse
func (c *ClientWithResponses) GetNSTcontentWithResponse(ctx context.Context, netsliceTemplateId string, reqEditors ...RequestEditorFn) (*GetNSTcontentResponse, error) {
	rsp, err := c.GetNSTcontent(ctx, netsliceTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSTcontentResponse(rsp)
}

// UpdateNSTcontentWithBodyWithResponse request with arbitrary body returning *UpdateNSTcontentResponse
func (c *ClientWithResponses) UpdateNSTcontentWithBodyWithResponse(ctx context.Context, netsliceTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNSTcontentResponse, error) {
	rsp, err := c.UpdateNSTcontentWithBody(ctx, netsliceTemplateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNSTcontentResponse(rsp)
}

// GetNstContentWithResponse request returning *GetNstContentResponse
func (c *ClientWithResponses) GetNstContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNstContentResponse, error) {
	rsp, err := c.GetNstContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNstContentResponse(rsp)
}

// UploadNstContentWithBodyWithResponse request with arbitrary body returning *UploadNstContentResponse
func (c *ClientWithResponses) UploadNstContentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadNstContentResponse, error) {
	rsp, err := c.UploadNstContentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadNstContentResponse(rsp)
}

// DeleteNstIdContentWithResponse request returning *DeleteNstIdContentResponse
func (c *ClientWithResponses) DeleteNstIdContentWithResponse(ctx context.Context, netsliceTemplateContentId string, reqEditors ...RequestEditorFn) (*DeleteNstIdContentResponse, error) {
	rsp, err := c.DeleteNstIdContent(ctx, netsliceTemplateContentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNstIdContentResponse(rsp)
}

// GetNstIdContentWithResponse request returning *GetNstIdContentResponse
func (c *ClientWithResponses) GetNstIdContentWithResponse(ctx context.Context, netsliceTemplateContentId string, reqEditors ...RequestEditorFn) (*GetNstIdContentResponse, error) {
	rsp, err := c.GetNstIdContent(ctx, netsliceTemplateContentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNstIdContentResponse(rsp)
}

// UpdateNstIdContentWithBodyWithResponse request with arbitrary body returning *UpdateNstIdContentResponse
func (c *ClientWithResponses) UpdateNstIdContentWithBodyWithResponse(ctx context.Context, netsliceTemplateContentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNstIdContentResponse, error) {
	rsp, err := c.UpdateNstIdContentWithBody(ctx, netsliceTemplateContentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNstIdContentResponse(rsp)
}

func (c *ClientWithResponses) UpdateNstIdContentWithResponse(ctx context.Context, netsliceTemplateContentId string, body UpdateNstIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNstIdContentResponse, error) {
	rsp, err := c.UpdateNstIdContent(ctx, netsliceTemplateContentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNstIdContentResponse(rsp)
}

// GetOKAPackageWithResponse request returning *GetOKAPackageResponse
func (c *ClientWithResponses) GetOKAPackageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOKAPackageResponse, error) {
	rsp, err := c.GetOKAPackage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOKAPackageResponse(rsp)
}

// AddOKAPackageWithBodyWithResponse request with arbitrary body returning *AddOKAPackageResponse
func (c *ClientWithResponses) AddOKAPackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOKAPackageResponse, error) {
	rsp, err := c.AddOKAPackageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOKAPackageResponse(rsp)
}

// DeleteOKAPackageWithResponse request returning *DeleteOKAPackageResponse
func (c *ClientWithResponses) DeleteOKAPackageWithResponse(ctx context.Context, okaPkgId string, reqEditors ...RequestEditorFn) (*DeleteOKAPackageResponse, error) {
	rsp, err := c.DeleteOKAPackage(ctx, okaPkgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOKAPackageResponse(rsp)
}

// ReadOKAPackageWithResponse request returning *ReadOKAPackageResponse
func (c *ClientWithResponses) ReadOKAPackageWithResponse(ctx context.Context, okaPkgId string, reqEditors ...RequestEditorFn) (*ReadOKAPackageResponse, error) {
	rsp, err := c.ReadOKAPackage(ctx, okaPkgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadOKAPackageResponse(rsp)
}

// UpdateOKAPackageWithBodyWithResponse request with arbitrary body returning *UpdateOKAPackageResponse
func (c *ClientWithResponses) UpdateOKAPackageWithBodyWithResponse(ctx context.Context, okaPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOKAPackageResponse, error) {
	rsp, err := c.UpdateOKAPackageWithBody(ctx, okaPkgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOKAPackageResponse(rsp)
}

// GetPDUsWithResponse request returning *GetPDUsResponse
func (c *ClientWithResponses) GetPDUsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPDUsResponse, error) {
	rsp, err := c.GetPDUs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPDUsResponse(rsp)
}

// CreatePDUWithBodyWithResponse request with arbitrary body returning *CreatePDUResponse
func (c *ClientWithResponses) CreatePDUWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePDUResponse, error) {
	rsp, err := c.CreatePDUWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePDUResponse(rsp)
}

func (c *ClientWithResponses) CreatePDUWithResponse(ctx context.Context, body CreatePDUJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePDUResponse, error) {
	rsp, err := c.CreatePDU(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePDUResponse(rsp)
}

// DeletePDUWithResponse request returning *DeletePDUResponse
func (c *ClientWithResponses) DeletePDUWithResponse(ctx context.Context, pduDescriptorId string, reqEditors ...RequestEditorFn) (*DeletePDUResponse, error) {
	rsp, err := c.DeletePDU(ctx, pduDescriptorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePDUResponse(rsp)
}

// GetPDUWithResponse request returning *GetPDUResponse
func (c *ClientWithResponses) GetPDUWithResponse(ctx context.Context, pduDescriptorId string, reqEditors ...RequestEditorFn) (*GetPDUResponse, error) {
	rsp, err := c.GetPDU(ctx, pduDescriptorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPDUResponse(rsp)
}

// EditPDUWithBodyWithResponse request with arbitrary body returning *EditPDUResponse
func (c *ClientWithResponses) EditPDUWithBodyWithResponse(ctx context.Context, pduDescriptorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditPDUResponse, error) {
	rsp, err := c.EditPDUWithBody(ctx, pduDescriptorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditPDUResponse(rsp)
}

func (c *ClientWithResponses) EditPDUWithResponse(ctx context.Context, pduDescriptorId string, body EditPDUJSONRequestBody, reqEditors ...RequestEditorFn) (*EditPDUResponse, error) {
	rsp, err := c.EditPDU(ctx, pduDescriptorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditPDUResponse(rsp)
}

// GetVnfPkgsWithResponse request returning *GetVnfPkgsResponse
func (c *ClientWithResponses) GetVnfPkgsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVnfPkgsResponse, error) {
	rsp, err := c.GetVnfPkgs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVnfPkgsResponse(rsp)
}

// AddVnfPkgWithBodyWithResponse request with arbitrary body returning *AddVnfPkgResponse
func (c *ClientWithResponses) AddVnfPkgWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVnfPkgResponse, error) {
	rsp, err := c.AddVnfPkgWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVnfPkgResponse(rsp)
}

func (c *ClientWithResponses) AddVnfPkgWithResponse(ctx context.Context, body AddVnfPkgJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVnfPkgResponse, error) {
	rsp, err := c.AddVnfPkg(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVnfPkgResponse(rsp)
}

// DeleteVnfPkgWithResponse request returning *DeleteVnfPkgResponse
func (c *ClientWithResponses) DeleteVnfPkgWithResponse(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*DeleteVnfPkgResponse, error) {
	rsp, err := c.DeleteVnfPkg(ctx, vnfPkgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVnfPkgResponse(rsp)
}

// GetVnfPkgWithResponse request returning *GetVnfPkgResponse
func (c *ClientWithResponses) GetVnfPkgWithResponse(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*GetVnfPkgResponse, error) {
	rsp, err := c.GetVnfPkg(ctx, vnfPkgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVnfPkgResponse(rsp)
}

// UpdateVnfPkgWithBodyWithResponse request with arbitrary body returning *UpdateVnfPkgResponse
func (c *ClientWithResponses) UpdateVnfPkgWithBodyWithResponse(ctx context.Context, vnfPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVnfPkgResponse, error) {
	rsp, err := c.UpdateVnfPkgWithBody(ctx, vnfPkgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVnfPkgResponse(rsp)
}

func (c *ClientWithResponses) UpdateVnfPkgWithResponse(ctx context.Context, vnfPkgId string, body UpdateVnfPkgJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVnfPkgResponse, error) {
	rsp, err := c.UpdateVnfPkg(ctx, vnfPkgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVnfPkgResponse(rsp)
}

// GetVnfPkgArtifactWithResponse request returning *GetVnfPkgArtifactResponse
func (c *ClientWithResponses) GetVnfPkgArtifactWithResponse(ctx context.Context, vnfPkgId string, artifactPath string, reqEditors ...RequestEditorFn) (*GetVnfPkgArtifactResponse, error) {
	rsp, err := c.GetVnfPkgArtifact(ctx, vnfPkgId, artifactPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVnfPkgArtifactResponse(rsp)
}

// GetVnfPkgContentWithResponse request returning *GetVnfPkgContentResponse
func (c *ClientWithResponses) GetVnfPkgContentWithResponse(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*GetVnfPkgContentResponse, error) {
	rsp, err := c.GetVnfPkgContent(ctx, vnfPkgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVnfPkgContentResponse(rsp)
}

// UploadVnfPkgContentWithBodyWithResponse request with arbitrary body returning *UploadVnfPkgContentResponse
func (c *ClientWithResponses) UploadVnfPkgContentWithBodyWithResponse(ctx context.Context, vnfPkgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadVnfPkgContentResponse, error) {
	rsp, err := c.UploadVnfPkgContentWithBody(ctx, vnfPkgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadVnfPkgContentResponse(rsp)
}

// GetVnfPkgVnfdWithResponse request returning *GetVnfPkgVnfdResponse
func (c *ClientWithResponses) GetVnfPkgVnfdWithResponse(ctx context.Context, vnfPkgId string, reqEditors ...RequestEditorFn) (*GetVnfPkgVnfdResponse, error) {
	rsp, err := c.GetVnfPkgVnfd(ctx, vnfPkgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVnfPkgVnfdResponse(rsp)
}

// GetVnfPkgsContentWithResponse request returning *GetVnfPkgsContentResponse
func (c *ClientWithResponses) GetVnfPkgsContentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVnfPkgsContentResponse, error) {
	rsp, err := c.GetVnfPkgsContent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVnfPkgsContentResponse(rsp)
}

// UploadVnfPkgsContentWithBodyWithResponse request with arbitrary body returning *UploadVnfPkgsContentResponse
func (c *ClientWithResponses) UploadVnfPkgsContentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadVnfPkgsContentResponse, error) {
	rsp, err := c.UploadVnfPkgsContentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadVnfPkgsContentResponse(rsp)
}

// DeleteVnfPkgsIdContentWithResponse request returning *DeleteVnfPkgsIdContentResponse
func (c *ClientWithResponses) DeleteVnfPkgsIdContentWithResponse(ctx context.Context, packageContentId string, reqEditors ...RequestEditorFn) (*DeleteVnfPkgsIdContentResponse, error) {
	rsp, err := c.DeleteVnfPkgsIdContent(ctx, packageContentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVnfPkgsIdContentResponse(rsp)
}

// GetVnfPkgsIdContentWithResponse request returning *GetVnfPkgsIdContentResponse
func (c *ClientWithResponses) GetVnfPkgsIdContentWithResponse(ctx context.Context, packageContentId string, reqEditors ...RequestEditorFn) (*GetVnfPkgsIdContentResponse, error) {
	rsp, err := c.GetVnfPkgsIdContent(ctx, packageContentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVnfPkgsIdContentResponse(rsp)
}

// UpdateVnfPkgsIdContentWithBodyWithResponse request with arbitrary body returning *UpdateVnfPkgsIdContentResponse
func (c *ClientWithResponses) UpdateVnfPkgsIdContentWithBodyWithResponse(ctx context.Context, packageContentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVnfPkgsIdContentResponse, error) {
	rsp, err := c.UpdateVnfPkgsIdContentWithBody(ctx, packageContentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVnfPkgsIdContentResponse(rsp)
}

func (c *ClientWithResponses) UpdateVnfPkgsIdContentWithResponse(ctx context.Context, packageContentId string, body UpdateVnfPkgsIdContentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVnfPkgsIdContentResponse, error) {
	rsp, err := c.UpdateVnfPkgsIdContent(ctx, packageContentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVnfPkgsIdContentResponse(rsp)
}

// ParseGetK8sClustersResponse parses an HTTP response from a GetK8sClustersWithResponse call
func ParseGetK8sClustersResponse(rsp *http.Response) (*GetK8sClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetK8sClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfK8sClusterInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfK8sClusterInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateK8sClusterResponse parses an HTTP response from a CreateK8sClusterWithResponse call
func ParseCreateK8sClusterResponse(rsp *http.Response) (*CreateK8sClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateK8sClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseDeleteK8sClusterResponse parses an HTTP response from a DeleteK8sClusterWithResponse call
func ParseDeleteK8sClusterResponse(rsp *http.Response) (*DeleteK8sClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteK8sClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetK8sClusterResponse parses an HTTP response from a GetK8sClusterWithResponse call
func ParseGetK8sClusterResponse(rsp *http.Response) (*GetK8sClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetK8sClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest K8sClusterInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest K8sClusterInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseEditK8sClusterResponse parses an HTTP response from a EditK8sClusterWithResponse call
func ParseEditK8sClusterResponse(rsp *http.Response) (*EditK8sClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditK8sClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest OpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest OpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseGetK8sReposResponse parses an HTTP response from a GetK8sReposWithResponse call
func ParseGetK8sReposResponse(rsp *http.Response) (*GetK8sReposResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetK8sReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfK8sRepoInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfK8sRepoInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateK8sRepoResponse parses an HTTP response from a CreateK8sRepoWithResponse call
func ParseCreateK8sRepoResponse(rsp *http.Response) (*CreateK8sRepoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateK8sRepoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseDeleteK8sRepoResponse parses an HTTP response from a DeleteK8sRepoWithResponse call
func ParseDeleteK8sRepoResponse(rsp *http.Response) (*DeleteK8sRepoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteK8sRepoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetK8sRepoResponse parses an HTTP response from a GetK8sRepoWithResponse call
func ParseGetK8sRepoResponse(rsp *http.Response) (*GetK8sRepoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetK8sRepoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest K8sRepoInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest K8sRepoInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfProjectInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfProjectInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateProjectResponse parses an HTTP response from a CreateProjectWithResponse call
func ParseCreateProjectResponse(rsp *http.Response) (*CreateProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteProjectResponse parses an HTTP response from a DeleteProjectWithResponse call
func ParseDeleteProjectResponse(rsp *http.Response) (*DeleteProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetProjectResponse parses an HTTP response from a GetProjectWithResponse call
func ParseGetProjectResponse(rsp *http.Response) (*GetProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ProjectInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseEditProjectResponse parses an HTTP response from a EditProjectWithResponse call
func ParseEditProjectResponse(rsp *http.Response) (*EditProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRolesResponse parses an HTTP response from a GetRolesWithResponse call
func ParseGetRolesResponse(rsp *http.Response) (*GetRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfRoleInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfRoleInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateRoleResponse parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResponse(rsp *http.Response) (*CreateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteRoleResponse parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResponse(rsp *http.Response) (*DeleteRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRoleResponse parses an HTTP response from a GetRoleWithResponse call
func ParseGetRoleResponse(rsp *http.Response) (*GetRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest RoleInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseEditRoleResponse parses an HTTP response from a EditRoleWithResponse call
func ParseEditRoleResponse(rsp *http.Response) (*EditRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSDNsResponse parses an HTTP response from a GetSDNsWithResponse call
func ParseGetSDNsResponse(rsp *http.Response) (*GetSDNsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSDNsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfSdnInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfSdnInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateSDNResponse parses an HTTP response from a CreateSDNWithResponse call
func ParseCreateSDNResponse(rsp *http.Response) (*CreateSDNResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSDNResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseDeleteSDNResponse parses an HTTP response from a DeleteSDNWithResponse call
func ParseDeleteSDNResponse(rsp *http.Response) (*DeleteSDNResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSDNResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSDNResponse parses an HTTP response from a GetSDNWithResponse call
func ParseGetSDNResponse(rsp *http.Response) (*GetSDNResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSDNResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SdnInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest SdnInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseEditSDNResponse parses an HTTP response from a EditSDNWithResponse call
func ParseEditSDNResponse(rsp *http.Response) (*EditSDNResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditSDNResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest OpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest OpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseDeleteAuthTokenResponse parses an HTTP response from a DeleteAuthTokenWithResponse call
func ParseDeleteAuthTokenResponse(rsp *http.Response) (*DeleteAuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest string
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetTokensResponse parses an HTTP response from a GetTokensWithResponse call
func ParseGetTokensResponse(rsp *http.Response) (*GetTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfTokenInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfTokenInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateTokenResponse parses an HTTP response from a CreateTokenWithResponse call
func ParseCreateTokenResponse(rsp *http.Response) (*CreateTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseDeleteTokenResponse parses an HTTP response from a DeleteTokenWithResponse call
func ParseDeleteTokenResponse(rsp *http.Response) (*DeleteTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest string
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetTokenResponse parses an HTTP response from a GetTokenWithResponse call
func ParseGetTokenResponse(rsp *http.Response) (*GetTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest TokenInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfUserInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfUserInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest UserInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseEditUserResponse parses an HTTP response from a EditUserWithResponse call
func ParseEditUserResponse(rsp *http.Response) (*EditUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVcasResponse parses an HTTP response from a GetVcasWithResponse call
func ParseGetVcasResponse(rsp *http.Response) (*GetVcasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVcasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfVcaInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfVcaInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateVcaResponse parses an HTTP response from a CreateVcaWithResponse call
func ParseCreateVcaResponse(rsp *http.Response) (*CreateVcaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVcaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseDeleteVcaResponse parses an HTTP response from a DeleteVcaWithResponse call
func ParseDeleteVcaResponse(rsp *http.Response) (*DeleteVcaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVcaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVcaResponse parses an HTTP response from a GetVcaWithResponse call
func ParseGetVcaResponse(rsp *http.Response) (*GetVcaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVcaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VcaInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest VcaInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseEditVcaResponse parses an HTTP response from a EditVcaWithResponse call
func ParseEditVcaResponse(rsp *http.Response) (*EditVcaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditVcaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest OpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest OpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseGetVimAccountsResponse parses an HTTP response from a GetVimAccountsWithResponse call
func ParseGetVimAccountsResponse(rsp *http.Response) (*GetVimAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVimAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfVimInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfVimInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateVimAccountResponse parses an HTTP response from a CreateVimAccountWithResponse call
func ParseCreateVimAccountResponse(rsp *http.Response) (*CreateVimAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVimAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseDeleteVimAccountResponse parses an HTTP response from a DeleteVimAccountWithResponse call
func ParseDeleteVimAccountResponse(rsp *http.Response) (*DeleteVimAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVimAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVimAccountResponse parses an HTTP response from a GetVimAccountWithResponse call
func ParseGetVimAccountResponse(rsp *http.Response) (*GetVimAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVimAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VimInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest VimInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseEditVimAccountResponse parses an HTTP response from a EditVimAccountWithResponse call
func ParseEditVimAccountResponse(rsp *http.Response) (*EditVimAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditVimAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest OpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest OpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseGetVIMsResponse parses an HTTP response from a GetVIMsWithResponse call
func ParseGetVIMsResponse(rsp *http.Response) (*GetVIMsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVIMsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfVimInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfVimInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateVIMResponse parses an HTTP response from a CreateVIMWithResponse call
func ParseCreateVIMResponse(rsp *http.Response) (*CreateVIMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVIMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseDeleteVIMResponse parses an HTTP response from a DeleteVIMWithResponse call
func ParseDeleteVIMResponse(rsp *http.Response) (*DeleteVIMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVIMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVIMResponse parses an HTTP response from a GetVIMWithResponse call
func ParseGetVIMResponse(rsp *http.Response) (*GetVIMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVIMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VimInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest VimInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseEditVIMResponse parses an HTTP response from a EditVIMWithResponse call
func ParseEditVIMResponse(rsp *http.Response) (*EditVIMResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditVIMResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest OpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest OpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseGetWimAccountsResponse parses an HTTP response from a GetWimAccountsWithResponse call
func ParseGetWimAccountsResponse(rsp *http.Response) (*GetWimAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWimAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfWimInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfWimInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateWimAccountResponse parses an HTTP response from a CreateWimAccountWithResponse call
func ParseCreateWimAccountResponse(rsp *http.Response) (*CreateWimAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWimAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectIdPlusOpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseDeleteWimAccountResponse parses an HTTP response from a DeleteWimAccountWithResponse call
func ParseDeleteWimAccountResponse(rsp *http.Response) (*DeleteWimAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWimAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetWimAccountResponse parses an HTTP response from a GetWimAccountWithResponse call
func ParseGetWimAccountResponse(rsp *http.Response) (*GetWimAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWimAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WimInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest WimInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseEditWimAccountResponse parses an HTTP response from a EditWimAccountWithResponse call
func ParseEditWimAccountResponse(rsp *http.Response) (*EditWimAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditWimAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest OpId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest OpId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseListAppProfileResponse parses an HTTP response from a ListAppProfileWithResponse call
func ParseListAppProfileResponse(rsp *http.Response) (*ListAppProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAppProfileResponse parses an HTTP response from a CreateAppProfileWithResponse call
func ParseCreateAppProfileResponse(rsp *http.Response) (*CreateAppProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAppProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteAppProfileResponse parses an HTTP response from a DeleteAppProfileWithResponse call
func ParseDeleteAppProfileResponse(rsp *http.Response) (*DeleteAppProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAppProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadAppProfileResponse parses an HTTP response from a ReadAppProfileWithResponse call
func ParseReadAppProfileResponse(rsp *http.Response) (*ReadAppProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadAppProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchAppProfileResponse parses an HTTP response from a PatchAppProfileWithResponse call
func ParsePatchAppProfileResponse(rsp *http.Response) (*PatchAppProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAppProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListk8sClusterResponse parses an HTTP response from a Listk8sClusterWithResponse call
func ParseListk8sClusterResponse(rsp *http.Response) (*Listk8sClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Listk8sClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreatek8sClusterResponse parses an HTTP response from a Createk8sClusterWithResponse call
func ParseCreatek8sClusterResponse(rsp *http.Response) (*Createk8sClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Createk8sClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeletek8sClusterResponse parses an HTTP response from a Deletek8sClusterWithResponse call
func ParseDeletek8sClusterResponse(rsp *http.Response) (*Deletek8sClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletek8sClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadk8sClusterResponse parses an HTTP response from a Readk8sClusterWithResponse call
func ParseReadk8sClusterResponse(rsp *http.Response) (*Readk8sClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Readk8sClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAppProfileResponse parses an HTTP response from a GetAppProfileWithResponse call
func ParseGetAppProfileResponse(rsp *http.Response) (*GetAppProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddRemoveAppProfileResponse parses an HTTP response from a AddRemoveAppProfileWithResponse call
func ParseAddRemoveAppProfileResponse(rsp *http.Response) (*AddRemoveAppProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRemoveAppProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCredsResponse parses an HTTP response from a GetCredsWithResponse call
func ParseGetCredsResponse(rsp *http.Response) (*GetCredsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCredsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInfraConfigProfileResponse parses an HTTP response from a GetInfraConfigProfileWithResponse call
func ParseGetInfraConfigProfileResponse(rsp *http.Response) (*GetInfraConfigProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInfraConfigProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddremoveInfraConfigProfileResponse parses an HTTP response from a AddremoveInfraConfigProfileWithResponse call
func ParseAddremoveInfraConfigProfileResponse(rsp *http.Response) (*AddremoveInfraConfigProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddremoveInfraConfigProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetInfraControllerProfileResponse parses an HTTP response from a GetInfraControllerProfileWithResponse call
func ParseGetInfraControllerProfileResponse(rsp *http.Response) (*GetInfraControllerProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInfraControllerProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddremoveInfraControllerProfileResponse parses an HTTP response from a AddremoveInfraControllerProfileWithResponse call
func ParseAddremoveInfraControllerProfileResponse(rsp *http.Response) (*AddremoveInfraControllerProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddremoveInfraControllerProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetResourceProfileResponse parses an HTTP response from a GetResourceProfileWithResponse call
func ParseGetResourceProfileResponse(rsp *http.Response) (*GetResourceProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddremoveResourceProfileResponse parses an HTTP response from a AddremoveResourceProfileWithResponse call
func ParseAddremoveResourceProfileResponse(rsp *http.Response) (*AddremoveResourceProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddremoveResourceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNodeScalingResponse parses an HTTP response from a NodeScalingWithResponse call
func ParseNodeScalingResponse(rsp *http.Response) (*NodeScalingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NodeScalingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpgradeClusterResponse parses an HTTP response from a UpgradeClusterWithResponse call
func ParseUpgradeClusterResponse(rsp *http.Response) (*UpgradeClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpgradeClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListInfraConfigProfileResponse parses an HTTP response from a ListInfraConfigProfileWithResponse call
func ParseListInfraConfigProfileResponse(rsp *http.Response) (*ListInfraConfigProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInfraConfigProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateInfraConfigProfileResponse parses an HTTP response from a CreateInfraConfigProfileWithResponse call
func ParseCreateInfraConfigProfileResponse(rsp *http.Response) (*CreateInfraConfigProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInfraConfigProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteInfraConfigProfileResponse parses an HTTP response from a DeleteInfraConfigProfileWithResponse call
func ParseDeleteInfraConfigProfileResponse(rsp *http.Response) (*DeleteInfraConfigProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInfraConfigProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadInfraConfigProfileResponse parses an HTTP response from a ReadInfraConfigProfileWithResponse call
func ParseReadInfraConfigProfileResponse(rsp *http.Response) (*ReadInfraConfigProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadInfraConfigProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchInfraConfigProfileResponse parses an HTTP response from a PatchInfraConfigProfileWithResponse call
func ParsePatchInfraConfigProfileResponse(rsp *http.Response) (*PatchInfraConfigProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchInfraConfigProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListInfraControllerProfileResponse parses an HTTP response from a ListInfraControllerProfileWithResponse call
func ParseListInfraControllerProfileResponse(rsp *http.Response) (*ListInfraControllerProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInfraControllerProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateInfraControllerProfileResponse parses an HTTP response from a CreateInfraControllerProfileWithResponse call
func ParseCreateInfraControllerProfileResponse(rsp *http.Response) (*CreateInfraControllerProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInfraControllerProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteInfraControllerProfileResponse parses an HTTP response from a DeleteInfraControllerProfileWithResponse call
func ParseDeleteInfraControllerProfileResponse(rsp *http.Response) (*DeleteInfraControllerProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInfraControllerProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadInfraControllerProfileResponse parses an HTTP response from a ReadInfraControllerProfileWithResponse call
func ParseReadInfraControllerProfileResponse(rsp *http.Response) (*ReadInfraControllerProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadInfraControllerProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchInfraControllerProfileResponse parses an HTTP response from a PatchInfraControllerProfileWithResponse call
func ParsePatchInfraControllerProfileResponse(rsp *http.Response) (*PatchInfraControllerProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchInfraControllerProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListResourceProfileResponse parses an HTTP response from a ListResourceProfileWithResponse call
func ParseListResourceProfileResponse(rsp *http.Response) (*ListResourceProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResourceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateResourceProfileResponse parses an HTTP response from a CreateResourceProfileWithResponse call
func ParseCreateResourceProfileResponse(rsp *http.Response) (*CreateResourceProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResourceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteResourceProfileResponse parses an HTTP response from a DeleteResourceProfileWithResponse call
func ParseDeleteResourceProfileResponse(rsp *http.Response) (*DeleteResourceProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadResourceProfileResponse parses an HTTP response from a ReadResourceProfileWithResponse call
func ParseReadResourceProfileResponse(rsp *http.Response) (*ReadResourceProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadResourceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchResourceProfileResponse parses an HTTP response from a PatchResourceProfileWithResponse call
func ParsePatchResourceProfileResponse(rsp *http.Response) (*PatchResourceProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchResourceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetKSUResponse parses an HTTP response from a GetKSUWithResponse call
func ParseGetKSUResponse(rsp *http.Response) (*GetKSUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKSUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddKSUResponse parses an HTTP response from a AddKSUWithResponse call
func ParseAddKSUResponse(rsp *http.Response) (*AddKSUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddKSUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteMultipleKSUResponse parses an HTTP response from a DeleteMultipleKSUWithResponse call
func ParseDeleteMultipleKSUResponse(rsp *http.Response) (*DeleteMultipleKSUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMultipleKSUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateMultipleKSUResponse parses an HTTP response from a UpdateMultipleKSUWithResponse call
func ParseUpdateMultipleKSUResponse(rsp *http.Response) (*UpdateMultipleKSUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMultipleKSUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteKSUResponse parses an HTTP response from a DeleteKSUWithResponse call
func ParseDeleteKSUResponse(rsp *http.Response) (*DeleteKSUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKSUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadKSUResponse parses an HTTP response from a ReadKSUWithResponse call
func ParseReadKSUResponse(rsp *http.Response) (*ReadKSUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadKSUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateKSUResponse parses an HTTP response from a UpdateKSUWithResponse call
func ParseUpdateKSUResponse(rsp *http.Response) (*UpdateKSUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateKSUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCloneKSUResponse parses an HTTP response from a CloneKSUWithResponse call
func ParseCloneKSUResponse(rsp *http.Response) (*CloneKSUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloneKSUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseMoveKSUResponse parses an HTTP response from a MoveKSUWithResponse call
func ParseMoveKSUResponse(rsp *http.Response) (*MoveKSUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveKSUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNsconfigtemplatesResponse parses an HTTP response from a GetNsconfigtemplatesWithResponse call
func ParseGetNsconfigtemplatesResponse(rsp *http.Response) (*GetNsconfigtemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNsconfigtemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNsConfigTemplateInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNsConfigTemplateInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseAddNsconfigtemplateResponse parses an HTTP response from a AddNsconfigtemplateWithResponse call
func ParseAddNsconfigtemplateResponse(rsp *http.Response) (*AddNsconfigtemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddNsconfigtemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteNsconfigtemplateResponse parses an HTTP response from a DeleteNsconfigtemplateWithResponse call
func ParseDeleteNsconfigtemplateResponse(rsp *http.Response) (*DeleteNsconfigtemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNsconfigtemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNsconfigtemplateResponse parses an HTTP response from a GetNsconfigtemplateWithResponse call
func ParseGetNsconfigtemplateResponse(rsp *http.Response) (*GetNsconfigtemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNsconfigtemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NsConfigTemplateInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NsConfigTemplateInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetTemplatecontentResponse parses an HTTP response from a GetTemplatecontentWithResponse call
func ParseGetTemplatecontentResponse(rsp *http.Response) (*GetTemplatecontentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTemplatecontentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NsConfigTemplateInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 206:
		var dest NsConfigTemplateInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON206 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NsConfigTemplateInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 206:
		var dest NsConfigTemplateInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML206 = &dest

	}

	return response, nil
}

// ParseUpdateTemplatecontentResponse parses an HTTP response from a UpdateTemplatecontentWithResponse call
func ParseUpdateTemplatecontentResponse(rsp *http.Response) (*UpdateTemplatecontentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTemplatecontentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNSDsResponse parses an HTTP response from a GetNSDsWithResponse call
func ParseGetNSDsResponse(rsp *http.Response) (*GetNSDsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSDsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNsdInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNsdInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseAddNSDResponse parses an HTTP response from a AddNSDWithResponse call
func ParseAddNSDResponse(rsp *http.Response) (*AddNSDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddNSDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteNSDResponse parses an HTTP response from a DeleteNSDWithResponse call
func ParseDeleteNSDResponse(rsp *http.Response) (*DeleteNSDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNSDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNSDResponse parses an HTTP response from a GetNSDWithResponse call
func ParseGetNSDResponse(rsp *http.Response) (*GetNSDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NsdInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NsdInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseUpdateNSDResponse parses an HTTP response from a UpdateNSDWithResponse call
func ParseUpdateNSDResponse(rsp *http.Response) (*UpdateNSDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNSDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNsPkgArtifactResponse parses an HTTP response from a GetNsPkgArtifactWithResponse call
func ParseGetNsPkgArtifactResponse(rsp *http.Response) (*GetNsPkgArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNsPkgArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNsPkgNsdResponse parses an HTTP response from a GetNsPkgNsdWithResponse call
func ParseGetNsPkgNsdResponse(rsp *http.Response) (*GetNsPkgNsdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNsPkgNsdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNSDcontentResponse parses an HTTP response from a GetNSDcontentWithResponse call
func ParseGetNSDcontentResponse(rsp *http.Response) (*GetNSDcontentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSDcontentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateNSDcontentResponse parses an HTTP response from a UpdateNSDcontentWithResponse call
func ParseUpdateNSDcontentResponse(rsp *http.Response) (*UpdateNSDcontentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNSDcontentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNsPkgsContentResponse parses an HTTP response from a GetNsPkgsContentWithResponse call
func ParseGetNsPkgsContentResponse(rsp *http.Response) (*GetNsPkgsContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNsPkgsContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNsdInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNsdInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseUploadNsPkgsContentResponse parses an HTTP response from a UploadNsPkgsContentWithResponse call
func ParseUploadNsPkgsContentResponse(rsp *http.Response) (*UploadNsPkgsContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadNsPkgsContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteNSPkgsIdContentResponse parses an HTTP response from a DeleteNSPkgsIdContentWithResponse call
func ParseDeleteNSPkgsIdContentResponse(rsp *http.Response) (*DeleteNSPkgsIdContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNSPkgsIdContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNsPkgsIdContentResponse parses an HTTP response from a GetNsPkgsIdContentWithResponse call
func ParseGetNsPkgsIdContentResponse(rsp *http.Response) (*GetNsPkgsIdContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNsPkgsIdContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NsdInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NsdInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseUpdateNsPkgsIdContentResponse parses an HTTP response from a UpdateNsPkgsIdContentWithResponse call
func ParseUpdateNsPkgsIdContentResponse(rsp *http.Response) (*UpdateNsPkgsIdContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNsPkgsIdContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAlarmsResponse parses an HTTP response from a GetAlarmsWithResponse call
func ParseGetAlarmsResponse(rsp *http.Response) (*GetAlarmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlarmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfAlarm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfAlarm
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetAlarmResponse parses an HTTP response from a GetAlarmWithResponse call
func ParseGetAlarmResponse(rsp *http.Response) (*GetAlarmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlarmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alarm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest Alarm
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseUpdateAlarmResponse parses an HTTP response from a UpdateAlarmWithResponse call
func ParseUpdateAlarmResponse(rsp *http.Response) (*UpdateAlarmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAlarmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNSIsResponse parses an HTTP response from a GetNSIsWithResponse call
func ParseGetNSIsResponse(rsp *http.Response) (*GetNSIsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSIsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNetSliceInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNetSliceInstance
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseAddNSIResponse parses an HTTP response from a AddNSIWithResponse call
func ParseAddNSIResponse(rsp *http.Response) (*AddNSIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddNSIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteNSIResponse parses an HTTP response from a DeleteNSIWithResponse call
func ParseDeleteNSIResponse(rsp *http.Response) (*DeleteNSIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNSIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNSIResponse parses an HTTP response from a GetNSIWithResponse call
func ParseGetNSIResponse(rsp *http.Response) (*GetNSIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetSliceInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NetSliceInstance
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseActionOnNSIResponse parses an HTTP response from a ActionOnNSIWithResponse call
func ParseActionOnNSIResponse(rsp *http.Response) (*ActionOnNSIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionOnNSIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseInstantiateNSIResponse parses an HTTP response from a InstantiateNSIWithResponse call
func ParseInstantiateNSIResponse(rsp *http.Response) (*InstantiateNSIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstantiateNSIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseTerminateNSIResponse parses an HTTP response from a TerminateNSIWithResponse call
func ParseTerminateNSIResponse(rsp *http.Response) (*TerminateNSIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TerminateNSIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseGetNSIsContentResponse parses an HTTP response from a GetNSIsContentWithResponse call
func ParseGetNSIsContentResponse(rsp *http.Response) (*GetNSIsContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSIsContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNetSliceInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNetSliceInstance
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateNSIContentResponse parses an HTTP response from a CreateNSIContentWithResponse call
func ParseCreateNSIContentResponse(rsp *http.Response) (*CreateNSIContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNSIContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateNsiContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest CreateNsiContentResponse
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteNSIContentResponse parses an HTTP response from a DeleteNSIContentWithResponse call
func ParseDeleteNSIContentResponse(rsp *http.Response) (*DeleteNSIContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNSIContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseGetNSIContentResponse parses an HTTP response from a GetNSIContentWithResponse call
func ParseGetNSIContentResponse(rsp *http.Response) (*GetNSIContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSIContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetSliceInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NetSliceInstance
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetNsiLcmOpOccsResponse parses an HTTP response from a GetNsiLcmOpOccsWithResponse call
func ParseGetNsiLcmOpOccsResponse(rsp *http.Response) (*GetNsiLcmOpOccsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNsiLcmOpOccsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNsiLcmOpOcc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNsiLcmOpOcc
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetNsiLcmOpOccResponse parses an HTTP response from a GetNsiLcmOpOccWithResponse call
func ParseGetNsiLcmOpOccResponse(rsp *http.Response) (*GetNsiLcmOpOccResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNsiLcmOpOccResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NsiLcmOpOcc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NsiLcmOpOcc
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetNSinstancesResponse parses an HTTP response from a GetNSinstancesWithResponse call
func ParseGetNSinstancesResponse(rsp *http.Response) (*GetNSinstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSinstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNsInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNsInstance
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseAddNSinstanceResponse parses an HTTP response from a AddNSinstanceWithResponse call
func ParseAddNSinstanceResponse(rsp *http.Response) (*AddNSinstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddNSinstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteNSinstanceResponse parses an HTTP response from a DeleteNSinstanceWithResponse call
func ParseDeleteNSinstanceResponse(rsp *http.Response) (*DeleteNSinstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNSinstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNSinstanceResponse parses an HTTP response from a GetNSinstanceWithResponse call
func ParseGetNSinstanceResponse(rsp *http.Response) (*GetNSinstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSinstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NsInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NsInstance
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseActionOnNSinstanceResponse parses an HTTP response from a ActionOnNSinstanceWithResponse call
func ParseActionOnNSinstanceResponse(rsp *http.Response) (*ActionOnNSinstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionOnNSinstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseHealNSinstanceResponse parses an HTTP response from a HealNSinstanceWithResponse call
func ParseHealNSinstanceResponse(rsp *http.Response) (*HealNSinstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealNSinstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInstantiateNSinstanceResponse parses an HTTP response from a InstantiateNSinstanceWithResponse call
func ParseInstantiateNSinstanceResponse(rsp *http.Response) (*InstantiateNSinstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstantiateNSinstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseMigrateNSinstanceResponse parses an HTTP response from a MigrateNSinstanceWithResponse call
func ParseMigrateNSinstanceResponse(rsp *http.Response) (*MigrateNSinstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MigrateNSinstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseScaleNSinstanceResponse parses an HTTP response from a ScaleNSinstanceWithResponse call
func ParseScaleNSinstanceResponse(rsp *http.Response) (*ScaleNSinstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScaleNSinstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTerminateNSinstanceResponse parses an HTTP response from a TerminateNSinstanceWithResponse call
func ParseTerminateNSinstanceResponse(rsp *http.Response) (*TerminateNSinstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TerminateNSinstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseUpdateNSinstanceResponse parses an HTTP response from a UpdateNSinstanceWithResponse call
func ParseUpdateNSinstanceResponse(rsp *http.Response) (*UpdateNSinstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNSinstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNSinstancesContentResponse parses an HTTP response from a GetNSinstancesContentWithResponse call
func ParseGetNSinstancesContentResponse(rsp *http.Response) (*GetNSinstancesContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSinstancesContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNsInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNsInstance
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateNSinstanceContentResponse parses an HTTP response from a CreateNSinstanceContentWithResponse call
func ParseCreateNSinstanceContentResponse(rsp *http.Response) (*CreateNSinstanceContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNSinstanceContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateNSinstanceContentResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest CreateNSinstanceContentResp
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteNSinstanceContentResponse parses an HTTP response from a DeleteNSinstanceContentWithResponse call
func ParseDeleteNSinstanceContentResponse(rsp *http.Response) (*DeleteNSinstanceContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNSinstanceContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseGetNSinstanceContentResponse parses an HTTP response from a GetNSinstanceContentWithResponse call
func ParseGetNSinstanceContentResponse(rsp *http.Response) (*GetNSinstanceContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSinstanceContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NsInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NsInstance
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseMultiNsTerminateRequestResponse parses an HTTP response from a MultiNsTerminateRequestWithResponse call
func ParseMultiNsTerminateRequestResponse(rsp *http.Response) (*MultiNsTerminateRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MultiNsTerminateRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ObjectIdList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest ObjectIdList
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseGetNSLCMOpOccsResponse parses an HTTP response from a GetNSLCMOpOccsWithResponse call
func ParseGetNSLCMOpOccsResponse(rsp *http.Response) (*GetNSLCMOpOccsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSLCMOpOccsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNsLcmOpOcc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNsLcmOpOcc
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetNSLCMOpOccResponse parses an HTTP response from a GetNSLCMOpOccWithResponse call
func ParseGetNSLCMOpOccResponse(rsp *http.Response) (*GetNSLCMOpOccResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSLCMOpOccResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NsLcmOpOcc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NsLcmOpOcc
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCancelNSLCMOpOccResponse parses an HTTP response from a CancelNSLCMOpOccWithResponse call
func ParseCancelNSLCMOpOccResponse(rsp *http.Response) (*CancelNSLCMOpOccResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelNSLCMOpOccResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNsSubcriptionsResponse parses an HTTP response from a GetNsSubcriptionsWithResponse call
func ParseGetNsSubcriptionsResponse(rsp *http.Response) (*GetNsSubcriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNsSubcriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNslcmSubscriptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNslcmSubscriptionInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseAddNsSubcriptionsResponse parses an HTTP response from a AddNsSubcriptionsWithResponse call
func ParseAddNsSubcriptionsResponse(rsp *http.Response) (*AddNsSubcriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddNsSubcriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NslcmSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest NslcmSubscriptionResponse
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteNsSubcriptionIdResponse parses an HTTP response from a DeleteNsSubcriptionIdWithResponse call
func ParseDeleteNsSubcriptionIdResponse(rsp *http.Response) (*DeleteNsSubcriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNsSubcriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNsSubcriptionIdResponse parses an HTTP response from a GetNsSubcriptionIdWithResponse call
func ParseGetNsSubcriptionIdResponse(rsp *http.Response) (*GetNsSubcriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNsSubcriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NslcmSubscriptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NslcmSubscriptionInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetVnfInstancesResponse parses an HTTP response from a GetVnfInstancesWithResponse call
func ParseGetVnfInstancesResponse(rsp *http.Response) (*GetVnfInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVnfInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfVnfInstanceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfVnfInstanceInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetVnfInstanceResponse parses an HTTP response from a GetVnfInstanceWithResponse call
func ParseGetVnfInstanceResponse(rsp *http.Response) (*GetVnfInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVnfInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VnfInstanceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest VnfInstanceInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetNsPmJobReportResponse parses an HTTP response from a GetNsPmJobReportWithResponse call
func ParseGetNsPmJobReportResponse(rsp *http.Response) (*GetNsPmJobReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNsPmJobReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NsPmJobReportInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NsPmJobReportInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetNSTsResponse parses an HTTP response from a GetNSTsWithResponse call
func ParseGetNSTsResponse(rsp *http.Response) (*GetNSTsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSTsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNstInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNstInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseAddNSTResponse parses an HTTP response from a AddNSTWithResponse call
func ParseAddNSTResponse(rsp *http.Response) (*AddNSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddNSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteNSTResponse parses an HTTP response from a DeleteNSTWithResponse call
func ParseDeleteNSTResponse(rsp *http.Response) (*DeleteNSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNSTResponse parses an HTTP response from a GetNSTWithResponse call
func ParseGetNSTResponse(rsp *http.Response) (*GetNSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NstInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NstInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetNstArtifactResponse parses an HTTP response from a GetNstArtifactWithResponse call
func ParseGetNstArtifactResponse(rsp *http.Response) (*GetNstArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNstArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNstNstResponse parses an HTTP response from a GetNstNstWithResponse call
func ParseGetNstNstResponse(rsp *http.Response) (*GetNstNstResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNstNstResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNSTcontentResponse parses an HTTP response from a GetNSTcontentWithResponse call
func ParseGetNSTcontentResponse(rsp *http.Response) (*GetNSTcontentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSTcontentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateNSTcontentResponse parses an HTTP response from a UpdateNSTcontentWithResponse call
func ParseUpdateNSTcontentResponse(rsp *http.Response) (*UpdateNSTcontentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNSTcontentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNstContentResponse parses an HTTP response from a GetNstContentWithResponse call
func ParseGetNstContentResponse(rsp *http.Response) (*GetNstContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNstContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfNstInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfNstInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseUploadNstContentResponse parses an HTTP response from a UploadNstContentWithResponse call
func ParseUploadNstContentResponse(rsp *http.Response) (*UploadNstContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadNstContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteNstIdContentResponse parses an HTTP response from a DeleteNstIdContentWithResponse call
func ParseDeleteNstIdContentResponse(rsp *http.Response) (*DeleteNstIdContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNstIdContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNstIdContentResponse parses an HTTP response from a GetNstIdContentWithResponse call
func ParseGetNstIdContentResponse(rsp *http.Response) (*GetNstIdContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNstIdContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NstInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest NstInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseUpdateNstIdContentResponse parses an HTTP response from a UpdateNstIdContentWithResponse call
func ParseUpdateNstIdContentResponse(rsp *http.Response) (*UpdateNstIdContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNstIdContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOKAPackageResponse parses an HTTP response from a GetOKAPackageWithResponse call
func ParseGetOKAPackageResponse(rsp *http.Response) (*GetOKAPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOKAPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddOKAPackageResponse parses an HTTP response from a AddOKAPackageWithResponse call
func ParseAddOKAPackageResponse(rsp *http.Response) (*AddOKAPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddOKAPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteOKAPackageResponse parses an HTTP response from a DeleteOKAPackageWithResponse call
func ParseDeleteOKAPackageResponse(rsp *http.Response) (*DeleteOKAPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOKAPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReadOKAPackageResponse parses an HTTP response from a ReadOKAPackageWithResponse call
func ParseReadOKAPackageResponse(rsp *http.Response) (*ReadOKAPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadOKAPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateOKAPackageResponse parses an HTTP response from a UpdateOKAPackageWithResponse call
func ParseUpdateOKAPackageResponse(rsp *http.Response) (*UpdateOKAPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOKAPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPDUsResponse parses an HTTP response from a GetPDUsWithResponse call
func ParseGetPDUsResponse(rsp *http.Response) (*GetPDUsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPDUsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfPduInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfPduInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreatePDUResponse parses an HTTP response from a CreatePDUWithResponse call
func ParseCreatePDUResponse(rsp *http.Response) (*CreatePDUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePDUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseDeletePDUResponse parses an HTTP response from a DeletePDUWithResponse call
func ParseDeletePDUResponse(rsp *http.Response) (*DeletePDUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePDUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPDUResponse parses an HTTP response from a GetPDUWithResponse call
func ParseGetPDUResponse(rsp *http.Response) (*GetPDUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPDUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PduInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest PduInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseEditPDUResponse parses an HTTP response from a EditPDUWithResponse call
func ParseEditPDUResponse(rsp *http.Response) (*EditPDUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditPDUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVnfPkgsResponse parses an HTTP response from a GetVnfPkgsWithResponse call
func ParseGetVnfPkgsResponse(rsp *http.Response) (*GetVnfPkgsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVnfPkgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfVnfPkgInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfVnfPkgInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseAddVnfPkgResponse parses an HTTP response from a AddVnfPkgWithResponse call
func ParseAddVnfPkgResponse(rsp *http.Response) (*AddVnfPkgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddVnfPkgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteVnfPkgResponse parses an HTTP response from a DeleteVnfPkgWithResponse call
func ParseDeleteVnfPkgResponse(rsp *http.Response) (*DeleteVnfPkgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVnfPkgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVnfPkgResponse parses an HTTP response from a GetVnfPkgWithResponse call
func ParseGetVnfPkgResponse(rsp *http.Response) (*GetVnfPkgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVnfPkgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VnfPkgInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest VnfPkgInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseUpdateVnfPkgResponse parses an HTTP response from a UpdateVnfPkgWithResponse call
func ParseUpdateVnfPkgResponse(rsp *http.Response) (*UpdateVnfPkgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateVnfPkgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVnfPkgArtifactResponse parses an HTTP response from a GetVnfPkgArtifactWithResponse call
func ParseGetVnfPkgArtifactResponse(rsp *http.Response) (*GetVnfPkgArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVnfPkgArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVnfPkgContentResponse parses an HTTP response from a GetVnfPkgContentWithResponse call
func ParseGetVnfPkgContentResponse(rsp *http.Response) (*GetVnfPkgContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVnfPkgContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUploadVnfPkgContentResponse parses an HTTP response from a UploadVnfPkgContentWithResponse call
func ParseUploadVnfPkgContentResponse(rsp *http.Response) (*UploadVnfPkgContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadVnfPkgContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVnfPkgVnfdResponse parses an HTTP response from a GetVnfPkgVnfdWithResponse call
func ParseGetVnfPkgVnfdResponse(rsp *http.Response) (*GetVnfPkgVnfdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVnfPkgVnfdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVnfPkgsContentResponse parses an HTTP response from a GetVnfPkgsContentWithResponse call
func ParseGetVnfPkgsContentResponse(rsp *http.Response) (*GetVnfPkgsContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVnfPkgsContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfVnfPkgInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest ArrayOfVnfPkgInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseUploadVnfPkgsContentResponse parses an HTTP response from a UploadVnfPkgsContentWithResponse call
func ParseUploadVnfPkgsContentResponse(rsp *http.Response) (*UploadVnfPkgsContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadVnfPkgsContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest ObjectId
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteVnfPkgsIdContentResponse parses an HTTP response from a DeleteVnfPkgsIdContentWithResponse call
func ParseDeleteVnfPkgsIdContentResponse(rsp *http.Response) (*DeleteVnfPkgsIdContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVnfPkgsIdContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVnfPkgsIdContentResponse parses an HTTP response from a GetVnfPkgsIdContentWithResponse call
func ParseGetVnfPkgsIdContentResponse(rsp *http.Response) (*GetVnfPkgsIdContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVnfPkgsIdContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VnfPkgInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest VnfPkgInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseUpdateVnfPkgsIdContentResponse parses an HTTP response from a UpdateVnfPkgsIdContentWithResponse call
func ParseUpdateVnfPkgsIdContentResponse(rsp *http.Response) (*UpdateVnfPkgsIdContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateVnfPkgsIdContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest MethodNotAllowed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
