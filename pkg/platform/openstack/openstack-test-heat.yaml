
heat_template_version: 2016-10-14
description: Create a group of VMs

resources:
    subnet-test:
        type: OS::Neutron::Subnet
        properties:
            cidr: 10.101.0.0/24
            network: mex-k8s-net-1
            gateway_ip: 10.101.0.1
            enable_dhcp: no
            dns_nameservers:
                 - 1.1.1.1
                 - 1.0.0.1
            name: 
                subnet-test
    subnet-test-ipv6:
        type: OS::Neutron::Subnet
        properties:
            cidr: fc00:101:ecec:1::/64
            network: mex-k8s-net-1
            gateway_ip: fc00:101:ecec:1::1
            enable_dhcp: no
            ip_version: 6
            dns_nameservers:
                 - 2606:4700:4700::1111
                 - 2606:4700:4700::1001
            name: 
                subnet-test-ipv6
    app-vm-subnet-test-port:
        type: OS::Neutron::Port
        properties:
            name: app-vm-subnet-test-port
            network: mex-k8s-net-1
            fixed_ips:
                - subnet: { get_resource: subnet-test }
                  ip_address:  10.101.0.103
                - subnet: { get_resource: subnet-test-ipv6 }
                  ip_address:  fc00:101:ecec:1::67
            port_security_enabled: false
    master-xyz-external-network-shared-ipv6-port:
        type: OS::Neutron::Port
        properties:
            name: master-xyz-external-network-shared-ipv6-port
            network: external-network-shared-ipv6
            security_groups:
                - { get_resource: testvmgroup-sg }
                - unit-test-edgecloud-cloudlet-sg-testingID
    master-xyz-external-network-shared-port:
        type: OS::Neutron::Port
        properties:
            name: master-xyz-external-network-shared-port
            network: external-network-shared
            security_groups:
                - { get_resource: testvmgroup-sg }
                - unit-test-edgecloud-cloudlet-sg-testingID
    master-xyz-subnet-test-port:
        type: OS::Neutron::Port
        properties:
            name: master-xyz-subnet-test-port
            network: mex-k8s-net-1
            fixed_ips:
                - subnet: { get_resource: subnet-test }
                  ip_address:  10.101.0.10
                - subnet: { get_resource: subnet-test-ipv6 }
                  ip_address:  fc00:101:ecec:1::a
            port_security_enabled: false
    node1-xyz-subnet-test-port:
        type: OS::Neutron::Port
        properties:
            name: node1-xyz-subnet-test-port
            network: mex-k8s-net-1
            fixed_ips:
                - subnet: { get_resource: subnet-test }
                  ip_address:  10.101.0.101
                - subnet: { get_resource: subnet-test-ipv6 }
                  ip_address:  fc00:101:ecec:1::65
            port_security_enabled: false
    node2-xyz-subnet-test-port:
        type: OS::Neutron::Port
        properties:
            name: node2-xyz-subnet-test-port
            network: mex-k8s-net-1
            fixed_ips:
                - subnet: { get_resource: subnet-test }
                  ip_address:  10.101.0.102
                - subnet: { get_resource: subnet-test-ipv6 }
                  ip_address:  fc00:101:ecec:1::66
            port_security_enabled: false
    rootlb-xyz-external-network-shared-ipv6-port:
        type: OS::Neutron::Port
        properties:
            name: rootlb-xyz-external-network-shared-ipv6-port
            network: external-network-shared-ipv6
            security_groups:
                - { get_resource: testvmgroup-sg }
                - unit-test-edgecloud-cloudlet-sg-testingID
    rootlb-xyz-external-network-shared-port:
        type: OS::Neutron::Port
        properties:
            name: rootlb-xyz-external-network-shared-port
            network: external-network-shared
            security_groups:
                - { get_resource: testvmgroup-sg }
                - unit-test-edgecloud-cloudlet-sg-testingID
    rootlb-xyz-subnet-test-port:
        type: OS::Neutron::Port
        properties:
            name: rootlb-xyz-subnet-test-port
            network: mex-k8s-net-1
            fixed_ips:
                - subnet: { get_resource: subnet-test }
                  ip_address:  10.101.0.1
                - subnet: { get_resource: subnet-test-ipv6 }
                  ip_address:  fc00:101:ecec:1::1
            port_security_enabled: false
    testvmgroup-sg:
        type: OS::Neutron::SecurityGroup
        properties:
            name: testvmgroup-sg
            rules:
                - direction: egress
                  remote_ip_prefix: 0.0.0.0/32
                - direction: ingress
                  remote_ip_prefix: 0.0.0.0/0
                  protocol: tcp
                  port_range_min: 7777
                  port_range_max: 7777
                - direction: ingress
                  remote_ip_prefix: ::/0
                  ethertype: IPv6
                  protocol: tcp
                  port_range_min: 7777
                  port_range_max: 7777
                - direction: ingress
                  remote_ip_prefix: 0.0.0.0/0
                  protocol: udp
                  port_range_min: 8888
                  port_range_max: 8888
                - direction: ingress
                  remote_ip_prefix: ::/0
                  ethertype: IPv6
                  protocol: udp
                  port_range_min: 8888
                  port_range_max: 8888
    rootlb-xyz-volume:
        type: OS::Cinder::Volume
        properties:
            image: mobiledgex-v9.9.9
            name: rootlb-xyz-volume
            size: 100
        
    rootlb-xyz:
        type: OS::Nova::Server
        properties:
            name: rootlb-xyz
            networks:
                - port: { get_resource: rootlb-xyz-external-network-shared-ipv6-port }
                - port: { get_resource: rootlb-xyz-external-network-shared-port }
            availability_zone: nova1
            block_device_mapping:
                - device_name: vda
                  volume_id: { get_resource: rootlb-xyz-volume }
                  delete_on_termination: "false" 
            flavor: m1.medium
            config_drive: true
            user_data_format: RAW
            user_data: |
                #cloud-config
                bootcmd:
                 - echo EDGECLOUD CONFIG START
                 - echo 'APT::Periodic::Enable "0";' > /etc/apt/apt.conf.d/10cloudinit-disable
                 - apt-get -y purge update-notifier-common ubuntu-release-upgrader-core landscape-common
                 - echo "Removed APT and Ubuntu extra packages" | systemd-cat
                 - cloud-init-per once ssh-users-ca echo "TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem" >> /etc/ssh/sshd_config
                write_files:
                  - path: /etc/ssh/trusted-user-ca-keys.pem
                    content: ssh-rsa DUMMYTESTCACERT
                    append: true
                  - path:  /etc/systemd/resolved.conf
                    content: |
                       [Resolve]
                       DNS=1.1.1.1 2606:4700:4700::1111
                       FallbackDNS=1.0.0.1 2606:4700:4700::1001
                  - path: /root/configure-node.sh
                    owner: root:root
                    permissions: '0700'
                    content: |
                          #!/bin/bash
                          set -e
                          echo $( date ) Running configure node
                          cd $( dirname $0 )
                          wgetargs=(-nv "--header=cloudlet-name: unit-test" "--header=cloudlet-org: edgecloud" "--header=Authorization: Basic cm9vdGxiLXh5ejpwczEyMw==")
                          echo "Checking ansible.tar.gz checksum"
                          wget "${wgetargs[@]}" -O ansible.tar.gz.md5 http://127.0.0.1:12345/confignode/ansible.tar.gz.md5
                          cat ansible.tar.gz.md5
                          download=true
                          run_ansible=false
                          if [[ -f "ansible.tar.gz" ]]; then
                              echo "Checking md5 for ansible.tar.gz"
                              if md5sum -c ansible.tar.gz.md5; then
                                  echo "ansible.tar.gz md5 matches, skipping download"
                                  download=false
                              else
                                  echo "ansible.tar.gz md5 mismatch, will download"
                              fi
                          else
                              echo "No local ansible.tar.gz, will download"
                          fi
                          if [[ $download == true ]]; then
                              echo "Downloading ansible.tar.gz"
                              wget "${wgetargs[@]}" -O ansible.tar.gz http://127.0.0.1:12345/confignode/ansible.tar.gz
                              echo "Clean up old directory"
                              rm -Rf ./ansible
                              echo "Expanding ansible archive"
                              tar -xpf ansible.tar.gz
                              run_update=true
                          fi
                          echo "Checking vars.yaml checksum"
                          wget "${wgetargs[@]}" -O vars.yaml.md5 http://127.0.0.1:12345/confignode/vars.yaml.md5
                          cat vars.yaml.md5
                          download=true
                          if [[ -f "vars.yaml" ]]; then
                              echo "Checking md5 for vars.yaml"
                              if md5sum -c vars.yaml.md5; then
                                  echo "vars.yaml md5 matches, skipping download"
                                  download=false
                              else
                                  echo "vars.yaml md5 mismatch, will download"
                              fi
                          else
                              echo "No local vars.yaml, will download"
                          fi
                          if [[ $download == true ]]; then
                              echo "Downloading vars.yaml"
                              wget "${wgetargs[@]}" -O vars.yaml http://127.0.0.1:12345/confignode/vars.yaml
                              run_update=true
                              cp vars.yaml ansible/vars.yml
                              cat ansible/vars.yml
                          fi
                          if [[ ! -f ansible_run_ok ]]; then
                              echo "Ansible has not succeeded, will run"
                              run_update=true
                          fi
                          if [[ ${run_update} == true ]]; then
                              echo "Running update"
                              if [[ -z "${ANSIBLE_PLAYBOOK_BIN}" ]]; then
                                  ANSIBLE_PLAYBOOK_BIN=/usr/local/bin/ansible-playbook
                                  if [[ ! -f "${ANSIBLE_PLAYBOOK_BIN}" ]]; then
                                      ANSIBLE_PLAYBOOK_BIN=/usr/bin/ansible-playbook
                                  fi
                              fi
                              if ${ANSIBLE_PLAYBOOK_BIN} -e @ansible/vars.yml ./ansible/playbook.yml -v; then
                                  touch ansible_run_ok
                              else
                                  rm -f ansible_run_ok
                                  exit 1
                              fi
                          else
                              echo "No update needed"
                          fi
                          
                  - path: /etc/cron.d/configure-node
                    owner: root:root
                    permissions: '0644'
                    content: |
                      */10 * * * * root /root/configure-node.sh >> /root/configure-node.log 2>&1
                  - path: /etc/logrotate.d/configure-node
                    owner: root:root
                    permissions: '0644'
                    content: |
                      /root/configure-node.log {
                        rotate 4
                        daily
                        compress
                        missingok
                        notifempty
                        size 10M
                      }
                chpasswd: { expire: False }
                ssh_pwauth: False
                timezone: UTC
                apt:
                  sources:
                    ansible-ppa:
                      source: ppa:ansible/ansible
                packages:
                - ansible
                runcmd:
                 - systemctl restart systemd-resolved
                 - echo EDGECLOUD doing ip addr show
                 - ip addr show
                 - /root/configure-node.sh >> /root/configure-node.log 2>&1
            metadata:
                skipk8s: yes
                role: mex-agent-node
                k8smaster: 10.101.0.10
    master-xyz-volume:
        type: OS::Cinder::Volume
        properties:
            image: mobiledgex-v9.9.9
            name: master-xyz-volume
            size: 100
        
    master-xyz:
        type: OS::Nova::Server
        properties:
            name: master-xyz
            networks:
                - port: { get_resource: master-xyz-external-network-shared-ipv6-port }
                - port: { get_resource: master-xyz-external-network-shared-port }
                - port: { get_resource: master-xyz-subnet-test-port }
            availability_zone: nova1
            block_device_mapping:
                - device_name: vda
                  volume_id: { get_resource: master-xyz-volume }
                  delete_on_termination: "false" 
            flavor: m1.medium
            config_drive: true
            user_data_format: RAW
            user_data: |
                #cloud-config
                bootcmd:
                 - echo EDGECLOUD CONFIG START
                 - echo 'APT::Periodic::Enable "0";' > /etc/apt/apt.conf.d/10cloudinit-disable
                 - apt-get -y purge update-notifier-common ubuntu-release-upgrader-core landscape-common
                 - echo "Removed APT and Ubuntu extra packages" | systemd-cat
                 - cloud-init-per once ssh-users-ca echo "TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem" >> /etc/ssh/sshd_config
                write_files:
                  - path: /etc/ssh/trusted-user-ca-keys.pem
                    content: ssh-rsa DUMMYTESTCACERT
                    append: true
                  - path:  /etc/systemd/resolved.conf
                    content: |
                       [Resolve]
                       DNS=1.1.1.1 2606:4700:4700::1111
                       FallbackDNS=1.0.0.1 2606:4700:4700::1001
                  - path: /root/configure-node.sh
                    owner: root:root
                    permissions: '0700'
                    content: |
                          #!/bin/bash
                          set -e
                          echo $( date ) Running configure node
                          cd $( dirname $0 )
                          wgetargs=(-nv "--header=cloudlet-name: unit-test" "--header=cloudlet-org: edgecloud" "--header=Authorization: Basic bWFzdGVyLXh5ejpwczEyMw==")
                          echo "Checking ansible.tar.gz checksum"
                          wget "${wgetargs[@]}" -O ansible.tar.gz.md5 http://127.0.0.1:12345/confignode/ansible.tar.gz.md5
                          cat ansible.tar.gz.md5
                          download=true
                          run_ansible=false
                          if [[ -f "ansible.tar.gz" ]]; then
                              echo "Checking md5 for ansible.tar.gz"
                              if md5sum -c ansible.tar.gz.md5; then
                                  echo "ansible.tar.gz md5 matches, skipping download"
                                  download=false
                              else
                                  echo "ansible.tar.gz md5 mismatch, will download"
                              fi
                          else
                              echo "No local ansible.tar.gz, will download"
                          fi
                          if [[ $download == true ]]; then
                              echo "Downloading ansible.tar.gz"
                              wget "${wgetargs[@]}" -O ansible.tar.gz http://127.0.0.1:12345/confignode/ansible.tar.gz
                              echo "Clean up old directory"
                              rm -Rf ./ansible
                              echo "Expanding ansible archive"
                              tar -xpf ansible.tar.gz
                              run_update=true
                          fi
                          echo "Checking vars.yaml checksum"
                          wget "${wgetargs[@]}" -O vars.yaml.md5 http://127.0.0.1:12345/confignode/vars.yaml.md5
                          cat vars.yaml.md5
                          download=true
                          if [[ -f "vars.yaml" ]]; then
                              echo "Checking md5 for vars.yaml"
                              if md5sum -c vars.yaml.md5; then
                                  echo "vars.yaml md5 matches, skipping download"
                                  download=false
                              else
                                  echo "vars.yaml md5 mismatch, will download"
                              fi
                          else
                              echo "No local vars.yaml, will download"
                          fi
                          if [[ $download == true ]]; then
                              echo "Downloading vars.yaml"
                              wget "${wgetargs[@]}" -O vars.yaml http://127.0.0.1:12345/confignode/vars.yaml
                              run_update=true
                              cp vars.yaml ansible/vars.yml
                              cat ansible/vars.yml
                          fi
                          if [[ ! -f ansible_run_ok ]]; then
                              echo "Ansible has not succeeded, will run"
                              run_update=true
                          fi
                          if [[ ${run_update} == true ]]; then
                              echo "Running update"
                              if [[ -z "${ANSIBLE_PLAYBOOK_BIN}" ]]; then
                                  ANSIBLE_PLAYBOOK_BIN=/usr/local/bin/ansible-playbook
                                  if [[ ! -f "${ANSIBLE_PLAYBOOK_BIN}" ]]; then
                                      ANSIBLE_PLAYBOOK_BIN=/usr/bin/ansible-playbook
                                  fi
                              fi
                              if ${ANSIBLE_PLAYBOOK_BIN} -e @ansible/vars.yml ./ansible/playbook.yml -v; then
                                  touch ansible_run_ok
                              else
                                  rm -f ansible_run_ok
                                  exit 1
                              fi
                          else
                              echo "No update needed"
                          fi
                          
                  - path: /etc/cron.d/configure-node
                    owner: root:root
                    permissions: '0644'
                    content: |
                      */10 * * * * root /root/configure-node.sh >> /root/configure-node.log 2>&1
                  - path: /etc/logrotate.d/configure-node
                    owner: root:root
                    permissions: '0644'
                    content: |
                      /root/configure-node.log {
                        rotate 4
                        daily
                        compress
                        missingok
                        notifempty
                        size 10M
                      }
                chpasswd: { expire: False }
                ssh_pwauth: False
                timezone: UTC
                apt:
                  sources:
                    ansible-ppa:
                      source: ppa:ansible/ansible
                packages:
                - ansible
                runcmd:
                 - systemctl restart systemd-resolved
                 - echo EDGECLOUD doing ip addr show
                 - ip addr show
                 - /root/configure-node.sh >> /root/configure-node.log 2>&1
            metadata:
                skipk8s: no
                role: k8s-master
                k8smaster: 10.101.0.10
        
    node1-xyz:
        type: OS::Nova::Server
        properties:
            name: node1-xyz
            networks:
                - port: { get_resource: node1-xyz-subnet-test-port }
            availability_zone: nova1
            image: mobiledgex-v9.9.9 
            flavor: m1.medium
            config_drive: true
            user_data_format: RAW
            user_data: |
                #cloud-config
                bootcmd:
                 - echo EDGECLOUD CONFIG START
                 - echo 'APT::Periodic::Enable "0";' > /etc/apt/apt.conf.d/10cloudinit-disable
                 - apt-get -y purge update-notifier-common ubuntu-release-upgrader-core landscape-common
                 - echo "Removed APT and Ubuntu extra packages" | systemd-cat
                 - cloud-init-per once ssh-users-ca echo "TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem" >> /etc/ssh/sshd_config
                write_files:
                  - path: /etc/ssh/trusted-user-ca-keys.pem
                    content: ssh-rsa DUMMYTESTCACERT
                    append: true
                  - path:  /etc/systemd/resolved.conf
                    content: |
                       [Resolve]
                       DNS=1.1.1.1 2606:4700:4700::1111
                       FallbackDNS=1.0.0.1 2606:4700:4700::1001
                  - path: /root/configure-node.sh
                    owner: root:root
                    permissions: '0700'
                    content: |
                          #!/bin/bash
                          set -e
                          echo $( date ) Running configure node
                          cd $( dirname $0 )
                          wgetargs=(-nv "--header=cloudlet-name: unit-test" "--header=cloudlet-org: edgecloud" "--header=Authorization: Basic bm9kZTEteHl6OnBzMTIz")
                          echo "Checking ansible.tar.gz checksum"
                          wget "${wgetargs[@]}" -O ansible.tar.gz.md5 http://127.0.0.1:12345/confignode/ansible.tar.gz.md5
                          cat ansible.tar.gz.md5
                          download=true
                          run_ansible=false
                          if [[ -f "ansible.tar.gz" ]]; then
                              echo "Checking md5 for ansible.tar.gz"
                              if md5sum -c ansible.tar.gz.md5; then
                                  echo "ansible.tar.gz md5 matches, skipping download"
                                  download=false
                              else
                                  echo "ansible.tar.gz md5 mismatch, will download"
                              fi
                          else
                              echo "No local ansible.tar.gz, will download"
                          fi
                          if [[ $download == true ]]; then
                              echo "Downloading ansible.tar.gz"
                              wget "${wgetargs[@]}" -O ansible.tar.gz http://127.0.0.1:12345/confignode/ansible.tar.gz
                              echo "Clean up old directory"
                              rm -Rf ./ansible
                              echo "Expanding ansible archive"
                              tar -xpf ansible.tar.gz
                              run_update=true
                          fi
                          echo "Checking vars.yaml checksum"
                          wget "${wgetargs[@]}" -O vars.yaml.md5 http://127.0.0.1:12345/confignode/vars.yaml.md5
                          cat vars.yaml.md5
                          download=true
                          if [[ -f "vars.yaml" ]]; then
                              echo "Checking md5 for vars.yaml"
                              if md5sum -c vars.yaml.md5; then
                                  echo "vars.yaml md5 matches, skipping download"
                                  download=false
                              else
                                  echo "vars.yaml md5 mismatch, will download"
                              fi
                          else
                              echo "No local vars.yaml, will download"
                          fi
                          if [[ $download == true ]]; then
                              echo "Downloading vars.yaml"
                              wget "${wgetargs[@]}" -O vars.yaml http://127.0.0.1:12345/confignode/vars.yaml
                              run_update=true
                              cp vars.yaml ansible/vars.yml
                              cat ansible/vars.yml
                          fi
                          if [[ ! -f ansible_run_ok ]]; then
                              echo "Ansible has not succeeded, will run"
                              run_update=true
                          fi
                          if [[ ${run_update} == true ]]; then
                              echo "Running update"
                              if [[ -z "${ANSIBLE_PLAYBOOK_BIN}" ]]; then
                                  ANSIBLE_PLAYBOOK_BIN=/usr/local/bin/ansible-playbook
                                  if [[ ! -f "${ANSIBLE_PLAYBOOK_BIN}" ]]; then
                                      ANSIBLE_PLAYBOOK_BIN=/usr/bin/ansible-playbook
                                  fi
                              fi
                              if ${ANSIBLE_PLAYBOOK_BIN} -e @ansible/vars.yml ./ansible/playbook.yml -v; then
                                  touch ansible_run_ok
                              else
                                  rm -f ansible_run_ok
                                  exit 1
                              fi
                          else
                              echo "No update needed"
                          fi
                          
                  - path: /etc/cron.d/configure-node
                    owner: root:root
                    permissions: '0644'
                    content: |
                      */10 * * * * root /root/configure-node.sh >> /root/configure-node.log 2>&1
                  - path: /etc/logrotate.d/configure-node
                    owner: root:root
                    permissions: '0644'
                    content: |
                      /root/configure-node.log {
                        rotate 4
                        daily
                        compress
                        missingok
                        notifempty
                        size 10M
                      }
                chpasswd: { expire: False }
                ssh_pwauth: False
                timezone: UTC
                apt:
                  sources:
                    ansible-ppa:
                      source: ppa:ansible/ansible
                packages:
                - ansible
                runcmd:
                 - systemctl restart systemd-resolved
                 - echo EDGECLOUD doing ip addr show
                 - ip addr show
                 - /root/configure-node.sh >> /root/configure-node.log 2>&1
            metadata:
                skipk8s: no
                role: k8s-node
                k8smaster: 10.101.0.10
        
    node2-xyz:
        type: OS::Nova::Server
        properties:
            name: node2-xyz
            networks:
                - port: { get_resource: node2-xyz-subnet-test-port }
            availability_zone: nova1
            image: mobiledgex-v9.9.9 
            flavor: m1.medium
            config_drive: true
            user_data_format: RAW
            user_data: |
                #cloud-config
                bootcmd:
                 - echo EDGECLOUD CONFIG START
                 - echo 'APT::Periodic::Enable "0";' > /etc/apt/apt.conf.d/10cloudinit-disable
                 - apt-get -y purge update-notifier-common ubuntu-release-upgrader-core landscape-common
                 - echo "Removed APT and Ubuntu extra packages" | systemd-cat
                 - cloud-init-per once ssh-users-ca echo "TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem" >> /etc/ssh/sshd_config
                write_files:
                  - path: /etc/ssh/trusted-user-ca-keys.pem
                    content: ssh-rsa DUMMYTESTCACERT
                    append: true
                  - path:  /etc/systemd/resolved.conf
                    content: |
                       [Resolve]
                       DNS=1.1.1.1 2606:4700:4700::1111
                       FallbackDNS=1.0.0.1 2606:4700:4700::1001
                  - path: /root/configure-node.sh
                    owner: root:root
                    permissions: '0700'
                    content: |
                          #!/bin/bash
                          set -e
                          echo $( date ) Running configure node
                          cd $( dirname $0 )
                          wgetargs=(-nv "--header=cloudlet-name: unit-test" "--header=cloudlet-org: edgecloud" "--header=Authorization: Basic bm9kZTIteHl6OnBzMTIz")
                          echo "Checking ansible.tar.gz checksum"
                          wget "${wgetargs[@]}" -O ansible.tar.gz.md5 http://127.0.0.1:12345/confignode/ansible.tar.gz.md5
                          cat ansible.tar.gz.md5
                          download=true
                          run_ansible=false
                          if [[ -f "ansible.tar.gz" ]]; then
                              echo "Checking md5 for ansible.tar.gz"
                              if md5sum -c ansible.tar.gz.md5; then
                                  echo "ansible.tar.gz md5 matches, skipping download"
                                  download=false
                              else
                                  echo "ansible.tar.gz md5 mismatch, will download"
                              fi
                          else
                              echo "No local ansible.tar.gz, will download"
                          fi
                          if [[ $download == true ]]; then
                              echo "Downloading ansible.tar.gz"
                              wget "${wgetargs[@]}" -O ansible.tar.gz http://127.0.0.1:12345/confignode/ansible.tar.gz
                              echo "Clean up old directory"
                              rm -Rf ./ansible
                              echo "Expanding ansible archive"
                              tar -xpf ansible.tar.gz
                              run_update=true
                          fi
                          echo "Checking vars.yaml checksum"
                          wget "${wgetargs[@]}" -O vars.yaml.md5 http://127.0.0.1:12345/confignode/vars.yaml.md5
                          cat vars.yaml.md5
                          download=true
                          if [[ -f "vars.yaml" ]]; then
                              echo "Checking md5 for vars.yaml"
                              if md5sum -c vars.yaml.md5; then
                                  echo "vars.yaml md5 matches, skipping download"
                                  download=false
                              else
                                  echo "vars.yaml md5 mismatch, will download"
                              fi
                          else
                              echo "No local vars.yaml, will download"
                          fi
                          if [[ $download == true ]]; then
                              echo "Downloading vars.yaml"
                              wget "${wgetargs[@]}" -O vars.yaml http://127.0.0.1:12345/confignode/vars.yaml
                              run_update=true
                              cp vars.yaml ansible/vars.yml
                              cat ansible/vars.yml
                          fi
                          if [[ ! -f ansible_run_ok ]]; then
                              echo "Ansible has not succeeded, will run"
                              run_update=true
                          fi
                          if [[ ${run_update} == true ]]; then
                              echo "Running update"
                              if [[ -z "${ANSIBLE_PLAYBOOK_BIN}" ]]; then
                                  ANSIBLE_PLAYBOOK_BIN=/usr/local/bin/ansible-playbook
                                  if [[ ! -f "${ANSIBLE_PLAYBOOK_BIN}" ]]; then
                                      ANSIBLE_PLAYBOOK_BIN=/usr/bin/ansible-playbook
                                  fi
                              fi
                              if ${ANSIBLE_PLAYBOOK_BIN} -e @ansible/vars.yml ./ansible/playbook.yml -v; then
                                  touch ansible_run_ok
                              else
                                  rm -f ansible_run_ok
                                  exit 1
                              fi
                          else
                              echo "No update needed"
                          fi
                          
                  - path: /etc/cron.d/configure-node
                    owner: root:root
                    permissions: '0644'
                    content: |
                      */10 * * * * root /root/configure-node.sh >> /root/configure-node.log 2>&1
                  - path: /etc/logrotate.d/configure-node
                    owner: root:root
                    permissions: '0644'
                    content: |
                      /root/configure-node.log {
                        rotate 4
                        daily
                        compress
                        missingok
                        notifempty
                        size 10M
                      }
                chpasswd: { expire: False }
                ssh_pwauth: False
                timezone: UTC
                apt:
                  sources:
                    ansible-ppa:
                      source: ppa:ansible/ansible
                packages:
                - ansible
                runcmd:
                 - systemctl restart systemd-resolved
                 - echo EDGECLOUD doing ip addr show
                 - ip addr show
                 - /root/configure-node.sh >> /root/configure-node.log 2>&1
            metadata:
                skipk8s: no
                role: k8s-node
                k8smaster: 10.101.0.10
        
    app-vm:
        type: OS::Nova::Server
        properties:
            name: app-vm
            networks:
                - port: { get_resource: app-vm-subnet-test-port }
            availability_zone: nova1
            image: mobiledgex-v9.9.9 
            flavor: m1.medium
            config_drive: true
            user_data_format: RAW
            user_data: |
                #cloud-config
                bootcmd:
                 - echo EDGECLOUD CONFIG START
                 - echo 'APT::Periodic::Enable "0";' > /etc/apt/apt.conf.d/10cloudinit-disable
                 - apt-get -y purge update-notifier-common ubuntu-release-upgrader-core landscape-common
                 - echo "Removed APT and Ubuntu extra packages" | systemd-cat
                 - cloud-init-per once ssh-users-ca echo "TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem" >> /etc/ssh/sshd_config
                write_files:
                  - path: /etc/ssh/trusted-user-ca-keys.pem
                    content: ssh-rsa DUMMYTESTCACERT
                    append: true
                  - path:  /etc/systemd/resolved.conf
                    content: |
                       [Resolve]
                       DNS=1.1.1.1 2606:4700:4700::1111
                       FallbackDNS=1.0.0.1 2606:4700:4700::1001
                  - path: /root/configure-node.sh
                    owner: root:root
                    permissions: '0700'
                    content: |
                          #!/bin/bash
                          set -e
                          echo $( date ) Running configure node
                          cd $( dirname $0 )
                          wgetargs=(-nv "--header=cloudlet-name: unit-test" "--header=cloudlet-org: edgecloud" "--header=Authorization: Basic YXBwLXZtOnBzMTIz")
                          echo "Checking ansible.tar.gz checksum"
                          wget "${wgetargs[@]}" -O ansible.tar.gz.md5 http://127.0.0.1:12345/confignode/ansible.tar.gz.md5
                          cat ansible.tar.gz.md5
                          download=true
                          run_ansible=false
                          if [[ -f "ansible.tar.gz" ]]; then
                              echo "Checking md5 for ansible.tar.gz"
                              if md5sum -c ansible.tar.gz.md5; then
                                  echo "ansible.tar.gz md5 matches, skipping download"
                                  download=false
                              else
                                  echo "ansible.tar.gz md5 mismatch, will download"
                              fi
                          else
                              echo "No local ansible.tar.gz, will download"
                          fi
                          if [[ $download == true ]]; then
                              echo "Downloading ansible.tar.gz"
                              wget "${wgetargs[@]}" -O ansible.tar.gz http://127.0.0.1:12345/confignode/ansible.tar.gz
                              echo "Clean up old directory"
                              rm -Rf ./ansible
                              echo "Expanding ansible archive"
                              tar -xpf ansible.tar.gz
                              run_update=true
                          fi
                          echo "Checking vars.yaml checksum"
                          wget "${wgetargs[@]}" -O vars.yaml.md5 http://127.0.0.1:12345/confignode/vars.yaml.md5
                          cat vars.yaml.md5
                          download=true
                          if [[ -f "vars.yaml" ]]; then
                              echo "Checking md5 for vars.yaml"
                              if md5sum -c vars.yaml.md5; then
                                  echo "vars.yaml md5 matches, skipping download"
                                  download=false
                              else
                                  echo "vars.yaml md5 mismatch, will download"
                              fi
                          else
                              echo "No local vars.yaml, will download"
                          fi
                          if [[ $download == true ]]; then
                              echo "Downloading vars.yaml"
                              wget "${wgetargs[@]}" -O vars.yaml http://127.0.0.1:12345/confignode/vars.yaml
                              run_update=true
                              cp vars.yaml ansible/vars.yml
                              cat ansible/vars.yml
                          fi
                          if [[ ! -f ansible_run_ok ]]; then
                              echo "Ansible has not succeeded, will run"
                              run_update=true
                          fi
                          if [[ ${run_update} == true ]]; then
                              echo "Running update"
                              if [[ -z "${ANSIBLE_PLAYBOOK_BIN}" ]]; then
                                  ANSIBLE_PLAYBOOK_BIN=/usr/local/bin/ansible-playbook
                                  if [[ ! -f "${ANSIBLE_PLAYBOOK_BIN}" ]]; then
                                      ANSIBLE_PLAYBOOK_BIN=/usr/bin/ansible-playbook
                                  fi
                              fi
                              if ${ANSIBLE_PLAYBOOK_BIN} -e @ansible/vars.yml ./ansible/playbook.yml -v; then
                                  touch ansible_run_ok
                              else
                                  rm -f ansible_run_ok
                                  exit 1
                              fi
                          else
                              echo "No update needed"
                          fi
                          
                  - path: /etc/cron.d/configure-node
                    owner: root:root
                    permissions: '0644'
                    content: |
                      */10 * * * * root /root/configure-node.sh >> /root/configure-node.log 2>&1
                  - path: /etc/logrotate.d/configure-node
                    owner: root:root
                    permissions: '0644'
                    content: |
                      /root/configure-node.log {
                        rotate 4
                        daily
                        compress
                        missingok
                        notifempty
                        size 10M
                      }
                chpasswd: { expire: False }
                ssh_pwauth: False
                timezone: UTC
                apt:
                  sources:
                    ansible-ppa:
                      source: ppa:ansible/ansible
                packages:
                - ansible
                runcmd:
                 - systemctl restart systemd-resolved
                 - echo EDGECLOUD doing ip addr show
                 - ip addr show
                 - /root/configure-node.sh >> /root/configure-node.log 2>&1
