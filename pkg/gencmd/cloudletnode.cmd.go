// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletnode.proto

package gencmd

import (
	"context"
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/cli"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/spf13/cobra"
	"google.golang.org/grpc/status"
	"io"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var CloudletNodeApiCmd edgeproto.CloudletNodeApiClient

var CreateCloudletNodeCmd = &cli.Command{
	Use:          "CreateCloudletNode",
	RequiredArgs: strings.Join(CloudletNodeRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletNodeOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletNodeAliasArgs, " "),
	SpecialArgs:  &CloudletNodeSpecialArgs,
	Comments:     CloudletNodeComments,
	ReqData:      &edgeproto.CloudletNode{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateCloudletNode,
}

func runCreateCloudletNode(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletNode)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateCloudletNode(c, obj)
}

func CreateCloudletNode(c *cli.Command, in *edgeproto.CloudletNode) error {
	if CloudletNodeApiCmd == nil {
		return fmt.Errorf("CloudletNodeApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletNodeApiCmd.CreateCloudletNode(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateCloudletNode failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateCloudletNodes(c *cli.Command, data []edgeproto.CloudletNode, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateCloudletNode %v\n", data[ii])
		myerr := CreateCloudletNode(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateCloudletNodeCmd = &cli.Command{
	Use:          "UpdateCloudletNode",
	RequiredArgs: strings.Join(CloudletNodeRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletNodeOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletNodeAliasArgs, " "),
	SpecialArgs:  &CloudletNodeSpecialArgs,
	Comments:     CloudletNodeComments,
	ReqData:      &edgeproto.CloudletNode{},
	ReplyData:    &edgeproto.Result{},
	Run:          runUpdateCloudletNode,
}

func runUpdateCloudletNode(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletNode)
	jsonMap, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	obj.Fields = cli.GetSpecifiedFields(jsonMap, c.ReqData)
	return UpdateCloudletNode(c, obj)
}

func UpdateCloudletNode(c *cli.Command, in *edgeproto.CloudletNode) error {
	if CloudletNodeApiCmd == nil {
		return fmt.Errorf("CloudletNodeApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletNodeApiCmd.UpdateCloudletNode(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateCloudletNode failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func UpdateCloudletNodes(c *cli.Command, data []edgeproto.CloudletNode, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateCloudletNode %v\n", data[ii])
		myerr := UpdateCloudletNode(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowCloudletNodeCmd = &cli.Command{
	Use:          "ShowCloudletNode",
	OptionalArgs: strings.Join(append(CloudletNodeRequiredArgs, CloudletNodeOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletNodeAliasArgs, " "),
	SpecialArgs:  &CloudletNodeSpecialArgs,
	Comments:     CloudletNodeComments,
	ReqData:      &edgeproto.CloudletNode{},
	ReplyData:    &edgeproto.CloudletNode{},
	Run:          runShowCloudletNode,
}

func runShowCloudletNode(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletNode)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowCloudletNode(c, obj)
}

func ShowCloudletNode(c *cli.Command, in *edgeproto.CloudletNode) error {
	if CloudletNodeApiCmd == nil {
		return fmt.Errorf("CloudletNodeApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletNodeApiCmd.ShowCloudletNode(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudletNode failed: %s", errstr)
	}

	objs := make([]*edgeproto.CloudletNode, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowCloudletNode recv failed: %s", errstr)
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowCloudletNodes(c *cli.Command, data []edgeproto.CloudletNode, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudletNode %v\n", data[ii])
		myerr := ShowCloudletNode(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteCloudletNodeCmd = &cli.Command{
	Use:          "DeleteCloudletNode",
	RequiredArgs: strings.Join(CloudletNodeRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletNodeOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletNodeAliasArgs, " "),
	SpecialArgs:  &CloudletNodeSpecialArgs,
	Comments:     CloudletNodeComments,
	ReqData:      &edgeproto.CloudletNode{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteCloudletNode,
}

func runDeleteCloudletNode(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletNode)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteCloudletNode(c, obj)
}

func DeleteCloudletNode(c *cli.Command, in *edgeproto.CloudletNode) error {
	if CloudletNodeApiCmd == nil {
		return fmt.Errorf("CloudletNodeApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletNodeApiCmd.DeleteCloudletNode(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteCloudletNode failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteCloudletNodes(c *cli.Command, data []edgeproto.CloudletNode, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteCloudletNode %v\n", data[ii])
		myerr := DeleteCloudletNode(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CloudletNodeApiCmds = []*cobra.Command{
	CreateCloudletNodeCmd.GenCmd(),
	UpdateCloudletNodeCmd.GenCmd(),
	ShowCloudletNodeCmd.GenCmd(),
	DeleteCloudletNodeCmd.GenCmd(),
}

var CloudletNodeKeyRequiredArgs = []string{}
var CloudletNodeKeyOptionalArgs = []string{
	"name",
	"cloudletkey.organization",
	"cloudletkey.name",
	"cloudletkey.federatedorganization",
}
var CloudletNodeKeyAliasArgs = []string{}
var CloudletNodeKeyComments = map[string]string{
	"name":                              "Node name",
	"cloudletkey.organization":          "Organization of the cloudlet site",
	"cloudletkey.name":                  "Name of the cloudlet",
	"cloudletkey.federatedorganization": "Federated operator organization who shared this cloudlet",
}
var CloudletNodeKeySpecialArgs = map[string]string{}
var CloudletNodeRequiredArgs = []string{
	"cloudletnode",
	"cloudletorg",
	"cloudlet",
}
var CloudletNodeOptionalArgs = []string{
	"federatedorg",
	"nodetype",
	"noderole",
	"ownertags",
	"attributes",
}
var CloudletNodeAliasArgs = []string{
	"cloudletnode=key.name",
	"cloudletorg=key.cloudletkey.organization",
	"cloudlet=key.cloudletkey.name",
	"federatedorg=key.cloudletkey.federatedorganization",
}
var CloudletNodeComments = map[string]string{
	"fields":       "Fields are used for the Update API to specify which fields to apply",
	"cloudletnode": "Node name",
	"cloudletorg":  "Organization of the cloudlet site",
	"cloudlet":     "Name of the cloudlet",
	"federatedorg": "Federated operator organization who shared this cloudlet",
	"nodetype":     "Type of node",
	"noderole":     "Node role for provisioning",
	"passwordhash": "Password hash",
	"salt":         "Salt of password",
	"iter":         "Iterations of password",
	"ownertags":    "Owner (ClusterInst, etc) tags, specify ownertags:empty=true to clear",
	"attributes":   "Attributes of node set by platform, specify attributes:empty=true to clear",
}
var CloudletNodeSpecialArgs = map[string]string{
	"attributes": "StringToString",
	"fields":     "StringArray",
	"ownertags":  "StringToString",
}
