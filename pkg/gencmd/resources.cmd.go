// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resources.proto

package gencmd

import (
	fmt "fmt"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var NodeResourcesRequiredArgs = []string{}
var NodeResourcesOptionalArgs = []string{
	"vcpus",
	"ram",
	"disk",
	"optresmap",
	"infranodeflavor",
	"externalvolumesize",
}
var NodeResourcesAliasArgs = []string{}
var NodeResourcesComments = map[string]string{
	"vcpus":              "Vcpus to be allocated to the VM, must be either 1 or an even number",
	"ram":                "Total RAM in megabytes to be allocated to the VM",
	"disk":               "Total disk space in gigabytes to be allocated to the VMs root partition",
	"optresmap":          "Optional resources request, key = gpu form: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpu:nvidia-63:1",
	"infranodeflavor":    "Infrastructure specific node flavor",
	"externalvolumesize": "Size of external volume to be attached to nodes. This is for the root partition",
}
var NodeResourcesSpecialArgs = map[string]string{
	"optresmap": "StringToString",
}
var KubernetesResourcesRequiredArgs = []string{}
var KubernetesResourcesOptionalArgs = []string{
	"cpupool.totalvcpus",
	"cpupool.totalmemory",
	"cpupool.totaldisk",
	"cpupool.totaloptres",
	"cpupool.topology.minnodevcpus",
	"cpupool.topology.minnodememory",
	"cpupool.topology.minnodedisk",
	"cpupool.topology.minnodeoptres",
	"cpupool.topology.minnumberofnodes",
	"gpupool.totalvcpus",
	"gpupool.totalmemory",
	"gpupool.totaldisk",
	"gpupool.totaloptres",
	"gpupool.topology.minnodevcpus",
	"gpupool.topology.minnodememory",
	"gpupool.topology.minnodedisk",
	"gpupool.topology.minnodeoptres",
	"gpupool.topology.minnumberofnodes",
	"minkubernetesversion",
}
var KubernetesResourcesAliasArgs = []string{}
var KubernetesResourcesComments = map[string]string{
	"cpupool.totalvcpus":                "Total Vcpus to be allocated in the pool, in increments of 0.001",
	"cpupool.totalmemory":               "Total RAM in megabytes to be allocated in the pool",
	"cpupool.totaldisk":                 "Total Disk in gigabytes to be allocated in the pool",
	"cpupool.totaloptres":               "Total optional resources to be allocated in the pool, follows the NodeResources.OptResMap format.",
	"cpupool.topology.minnodevcpus":     "Minimum number of vcpus per node",
	"cpupool.topology.minnodememory":    "Minimum amount of RAM in megabytes per node",
	"cpupool.topology.minnodedisk":      "Minimum amount of root partition disk space in gigabytes per node",
	"cpupool.topology.minnodeoptres":    "Minimum number of optional resources per node",
	"cpupool.topology.minnumberofnodes": "Minimum number of nodes in pool, to satisfy HA/replication requirements",
	"gpupool.totalvcpus":                "Total Vcpus to be allocated in the pool, in increments of 0.001",
	"gpupool.totalmemory":               "Total RAM in megabytes to be allocated in the pool",
	"gpupool.totaldisk":                 "Total Disk in gigabytes to be allocated in the pool",
	"gpupool.totaloptres":               "Total optional resources to be allocated in the pool, follows the NodeResources.OptResMap format.",
	"gpupool.topology.minnodevcpus":     "Minimum number of vcpus per node",
	"gpupool.topology.minnodememory":    "Minimum amount of RAM in megabytes per node",
	"gpupool.topology.minnodedisk":      "Minimum amount of root partition disk space in gigabytes per node",
	"gpupool.topology.minnodeoptres":    "Minimum number of optional resources per node",
	"gpupool.topology.minnumberofnodes": "Minimum number of nodes in pool, to satisfy HA/replication requirements",
	"minkubernetesversion":              "Minimum Kubernetes version",
}
var KubernetesResourcesSpecialArgs = map[string]string{
	"cpupool.topology.minnodeoptres": "StringToString",
	"cpupool.totaloptres":            "StringToString",
	"gpupool.topology.minnodeoptres": "StringToString",
	"gpupool.totaloptres":            "StringToString",
}
var NodePoolResourcesRequiredArgs = []string{}
var NodePoolResourcesOptionalArgs = []string{
	"totalvcpus",
	"totalmemory",
	"totaldisk",
	"totaloptres",
	"topology.minnodevcpus",
	"topology.minnodememory",
	"topology.minnodedisk",
	"topology.minnodeoptres",
	"topology.minnumberofnodes",
}
var NodePoolResourcesAliasArgs = []string{}
var NodePoolResourcesComments = map[string]string{
	"totalvcpus":                "Total Vcpus to be allocated in the pool, in increments of 0.001",
	"totalmemory":               "Total RAM in megabytes to be allocated in the pool",
	"totaldisk":                 "Total Disk in gigabytes to be allocated in the pool",
	"totaloptres":               "Total optional resources to be allocated in the pool, follows the NodeResources.OptResMap format.",
	"topology.minnodevcpus":     "Minimum number of vcpus per node",
	"topology.minnodememory":    "Minimum amount of RAM in megabytes per node",
	"topology.minnodedisk":      "Minimum amount of root partition disk space in gigabytes per node",
	"topology.minnodeoptres":    "Minimum number of optional resources per node",
	"topology.minnumberofnodes": "Minimum number of nodes in pool, to satisfy HA/replication requirements",
}
var NodePoolResourcesSpecialArgs = map[string]string{
	"topology.minnodeoptres": "StringToString",
	"totaloptres":            "StringToString",
}
var NodePoolTopologyRequiredArgs = []string{}
var NodePoolTopologyOptionalArgs = []string{
	"minnodevcpus",
	"minnodememory",
	"minnodedisk",
	"minnodeoptres",
	"minnumberofnodes",
}
var NodePoolTopologyAliasArgs = []string{}
var NodePoolTopologyComments = map[string]string{
	"minnodevcpus":     "Minimum number of vcpus per node",
	"minnodememory":    "Minimum amount of RAM in megabytes per node",
	"minnodedisk":      "Minimum amount of root partition disk space in gigabytes per node",
	"minnodeoptres":    "Minimum number of optional resources per node",
	"minnumberofnodes": "Minimum number of nodes in pool, to satisfy HA/replication requirements",
}
var NodePoolTopologySpecialArgs = map[string]string{
	"minnodeoptres": "StringToString",
}
var NodePoolRequiredArgs = []string{}
var NodePoolOptionalArgs = []string{
	"name",
	"numnodes",
	"noderesources.vcpus",
	"noderesources.ram",
	"noderesources.disk",
	"noderesources.optresmap",
	"noderesources.infranodeflavor",
	"noderesources.externalvolumesize",
	"scalable",
}
var NodePoolAliasArgs = []string{}
var NodePoolComments = map[string]string{
	"name":                             "Node pool name",
	"numnodes":                         "Number of nodes in the pool",
	"noderesources.vcpus":              "Vcpus to be allocated to the VM, must be either 1 or an even number",
	"noderesources.ram":                "Total RAM in megabytes to be allocated to the VM",
	"noderesources.disk":               "Total disk space in gigabytes to be allocated to the VMs root partition",
	"noderesources.optresmap":          "Optional resources request, key = gpu form: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpu:nvidia-63:1",
	"noderesources.infranodeflavor":    "Infrastructure specific node flavor",
	"noderesources.externalvolumesize": "Size of external volume to be attached to nodes. This is for the root partition",
	"scalable":                         "Scalable indicates the system may scale the number of nodes",
}
var NodePoolSpecialArgs = map[string]string{
	"noderesources.optresmap": "StringToString",
}
