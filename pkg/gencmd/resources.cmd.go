// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resources.proto

package gencmd

import (
	fmt "fmt"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var GPUResourceRequiredArgs = []string{}
var GPUResourceOptionalArgs = []string{
	"modelid",
	"count",
	"vendor",
	"memory",
	"inuse",
}
var GPUResourceAliasArgs = []string{}
var GPUResourceComments = map[string]string{
	"modelid": "GPU model unique identifier",
	"count":   "Count of how many of this GPU are required/present",
	"vendor":  "GPU vendor (nvidia, amd, etc)",
	"memory":  "Memory in GB",
	"inuse":   "Read-only indication of how many GPUs are in use by tenants for usage APIs",
}
var GPUResourceSpecialArgs = map[string]string{}
var NodeResourcesRequiredArgs = []string{}
var NodeResourcesOptionalArgs = []string{
	"vcpus",
	"ram",
	"disk",
	"gpus:#.modelid",
	"gpus:#.count",
	"gpus:#.vendor",
	"gpus:#.memory",
	"gpus:#.inuse",
	"optresmap",
	"infranodeflavor",
	"externalvolumesize",
	"nodename",
}
var NodeResourcesAliasArgs = []string{}
var NodeResourcesComments = map[string]string{
	"vcpus":              "Vcpus to be allocated to the VM, must be either 1 or an even number",
	"ram":                "Total RAM in megabytes to be allocated to the VM",
	"disk":               "Total disk space in gigabytes to be allocated to the VMs root partition",
	"gpus:#.modelid":     "GPU model unique identifier",
	"gpus:#.count":       "Count of how many of this GPU are required/present",
	"gpus:#.vendor":      "GPU vendor (nvidia, amd, etc)",
	"gpus:#.memory":      "Memory in GB",
	"gpus:#.inuse":       "Read-only indication of how many GPUs are in use by tenants for usage APIs",
	"optresmap":          "Optional resources request, i.e. optresmap=restype=resname:1",
	"infranodeflavor":    "Infrastructure specific node flavor",
	"externalvolumesize": "Size of external volume to be attached to nodes. This is for the root partition",
	"nodename":           "node name if using nodes as a resource",
}
var NodeResourcesSpecialArgs = map[string]string{
	"optresmap": "StringToString",
}
var KubernetesResourcesRequiredArgs = []string{}
var KubernetesResourcesOptionalArgs = []string{
	"cpupool.totalvcpus",
	"cpupool.totalmemory",
	"cpupool.totaldisk",
	"cpupool.totalgpus:#.modelid",
	"cpupool.totalgpus:#.count",
	"cpupool.totalgpus:#.vendor",
	"cpupool.totalgpus:#.memory",
	"cpupool.totalgpus:#.inuse",
	"cpupool.totaloptres",
	"cpupool.topology.minnodevcpus",
	"cpupool.topology.minnodememory",
	"cpupool.topology.minnodedisk",
	"cpupool.topology.minnodegpus:#.modelid",
	"cpupool.topology.minnodegpus:#.count",
	"cpupool.topology.minnodegpus:#.vendor",
	"cpupool.topology.minnodegpus:#.memory",
	"cpupool.topology.minnodegpus:#.inuse",
	"cpupool.topology.minnodeoptres",
	"cpupool.topology.minnumberofnodes",
	"gpupool.totalvcpus",
	"gpupool.totalmemory",
	"gpupool.totaldisk",
	"gpupool.totalgpus:#.modelid",
	"gpupool.totalgpus:#.count",
	"gpupool.totalgpus:#.vendor",
	"gpupool.totalgpus:#.memory",
	"gpupool.totalgpus:#.inuse",
	"gpupool.totaloptres",
	"gpupool.topology.minnodevcpus",
	"gpupool.topology.minnodememory",
	"gpupool.topology.minnodedisk",
	"gpupool.topology.minnodegpus:#.modelid",
	"gpupool.topology.minnodegpus:#.count",
	"gpupool.topology.minnodegpus:#.vendor",
	"gpupool.topology.minnodegpus:#.memory",
	"gpupool.topology.minnodegpus:#.inuse",
	"gpupool.topology.minnodeoptres",
	"gpupool.topology.minnumberofnodes",
	"minkubernetesversion",
}
var KubernetesResourcesAliasArgs = []string{}
var KubernetesResourcesComments = map[string]string{
	"cpupool.totalvcpus":                     "Total Vcpus to be allocated in the pool, in increments of 0.001",
	"cpupool.totalmemory":                    "Total RAM in megabytes to be allocated in the pool",
	"cpupool.totaldisk":                      "Total Disk in gigabytes to be allocated in the pool",
	"cpupool.totalgpus:#.modelid":            "GPU model unique identifier",
	"cpupool.totalgpus:#.count":              "Count of how many of this GPU are required/present",
	"cpupool.totalgpus:#.vendor":             "GPU vendor (nvidia, amd, etc)",
	"cpupool.totalgpus:#.memory":             "Memory in GB",
	"cpupool.totalgpus:#.inuse":              "Read-only indication of how many GPUs are in use by tenants for usage APIs",
	"cpupool.totaloptres":                    "Total optional resources to be allocated in the pool, follows the NodeResources.OptResMap format.",
	"cpupool.topology.minnodevcpus":          "Minimum number of vcpus per node",
	"cpupool.topology.minnodememory":         "Minimum amount of RAM in megabytes per node",
	"cpupool.topology.minnodedisk":           "Minimum amount of root partition disk space in gigabytes per node",
	"cpupool.topology.minnodegpus:#.modelid": "GPU model unique identifier",
	"cpupool.topology.minnodegpus:#.count":   "Count of how many of this GPU are required/present",
	"cpupool.topology.minnodegpus:#.vendor":  "GPU vendor (nvidia, amd, etc)",
	"cpupool.topology.minnodegpus:#.memory":  "Memory in GB",
	"cpupool.topology.minnodegpus:#.inuse":   "Read-only indication of how many GPUs are in use by tenants for usage APIs",
	"cpupool.topology.minnodeoptres":         "Minimum number of optional resources per node",
	"cpupool.topology.minnumberofnodes":      "Minimum number of nodes in pool, to satisfy HA/replication requirements",
	"gpupool.totalvcpus":                     "Total Vcpus to be allocated in the pool, in increments of 0.001",
	"gpupool.totalmemory":                    "Total RAM in megabytes to be allocated in the pool",
	"gpupool.totaldisk":                      "Total Disk in gigabytes to be allocated in the pool",
	"gpupool.totalgpus:#.modelid":            "GPU model unique identifier",
	"gpupool.totalgpus:#.count":              "Count of how many of this GPU are required/present",
	"gpupool.totalgpus:#.vendor":             "GPU vendor (nvidia, amd, etc)",
	"gpupool.totalgpus:#.memory":             "Memory in GB",
	"gpupool.totalgpus:#.inuse":              "Read-only indication of how many GPUs are in use by tenants for usage APIs",
	"gpupool.totaloptres":                    "Total optional resources to be allocated in the pool, follows the NodeResources.OptResMap format.",
	"gpupool.topology.minnodevcpus":          "Minimum number of vcpus per node",
	"gpupool.topology.minnodememory":         "Minimum amount of RAM in megabytes per node",
	"gpupool.topology.minnodedisk":           "Minimum amount of root partition disk space in gigabytes per node",
	"gpupool.topology.minnodegpus:#.modelid": "GPU model unique identifier",
	"gpupool.topology.minnodegpus:#.count":   "Count of how many of this GPU are required/present",
	"gpupool.topology.minnodegpus:#.vendor":  "GPU vendor (nvidia, amd, etc)",
	"gpupool.topology.minnodegpus:#.memory":  "Memory in GB",
	"gpupool.topology.minnodegpus:#.inuse":   "Read-only indication of how many GPUs are in use by tenants for usage APIs",
	"gpupool.topology.minnodeoptres":         "Minimum number of optional resources per node",
	"gpupool.topology.minnumberofnodes":      "Minimum number of nodes in pool, to satisfy HA/replication requirements",
	"minkubernetesversion":                   "Minimum Kubernetes version",
}
var KubernetesResourcesSpecialArgs = map[string]string{
	"cpupool.topology.minnodeoptres": "StringToString",
	"cpupool.totaloptres":            "StringToString",
	"gpupool.topology.minnodeoptres": "StringToString",
	"gpupool.totaloptres":            "StringToString",
}
var NodePoolResourcesRequiredArgs = []string{}
var NodePoolResourcesOptionalArgs = []string{
	"totalvcpus",
	"totalmemory",
	"totaldisk",
	"totalgpus:#.modelid",
	"totalgpus:#.count",
	"totalgpus:#.vendor",
	"totalgpus:#.memory",
	"totalgpus:#.inuse",
	"totaloptres",
	"topology.minnodevcpus",
	"topology.minnodememory",
	"topology.minnodedisk",
	"topology.minnodegpus:#.modelid",
	"topology.minnodegpus:#.count",
	"topology.minnodegpus:#.vendor",
	"topology.minnodegpus:#.memory",
	"topology.minnodegpus:#.inuse",
	"topology.minnodeoptres",
	"topology.minnumberofnodes",
}
var NodePoolResourcesAliasArgs = []string{}
var NodePoolResourcesComments = map[string]string{
	"totalvcpus":                     "Total Vcpus to be allocated in the pool, in increments of 0.001",
	"totalmemory":                    "Total RAM in megabytes to be allocated in the pool",
	"totaldisk":                      "Total Disk in gigabytes to be allocated in the pool",
	"totalgpus:#.modelid":            "GPU model unique identifier",
	"totalgpus:#.count":              "Count of how many of this GPU are required/present",
	"totalgpus:#.vendor":             "GPU vendor (nvidia, amd, etc)",
	"totalgpus:#.memory":             "Memory in GB",
	"totalgpus:#.inuse":              "Read-only indication of how many GPUs are in use by tenants for usage APIs",
	"totaloptres":                    "Total optional resources to be allocated in the pool, follows the NodeResources.OptResMap format.",
	"topology.minnodevcpus":          "Minimum number of vcpus per node",
	"topology.minnodememory":         "Minimum amount of RAM in megabytes per node",
	"topology.minnodedisk":           "Minimum amount of root partition disk space in gigabytes per node",
	"topology.minnodegpus:#.modelid": "GPU model unique identifier",
	"topology.minnodegpus:#.count":   "Count of how many of this GPU are required/present",
	"topology.minnodegpus:#.vendor":  "GPU vendor (nvidia, amd, etc)",
	"topology.minnodegpus:#.memory":  "Memory in GB",
	"topology.minnodegpus:#.inuse":   "Read-only indication of how many GPUs are in use by tenants for usage APIs",
	"topology.minnodeoptres":         "Minimum number of optional resources per node",
	"topology.minnumberofnodes":      "Minimum number of nodes in pool, to satisfy HA/replication requirements",
}
var NodePoolResourcesSpecialArgs = map[string]string{
	"topology.minnodeoptres": "StringToString",
	"totaloptres":            "StringToString",
}
var NodePoolTopologyRequiredArgs = []string{}
var NodePoolTopologyOptionalArgs = []string{
	"minnodevcpus",
	"minnodememory",
	"minnodedisk",
	"minnodegpus:#.modelid",
	"minnodegpus:#.count",
	"minnodegpus:#.vendor",
	"minnodegpus:#.memory",
	"minnodegpus:#.inuse",
	"minnodeoptres",
	"minnumberofnodes",
}
var NodePoolTopologyAliasArgs = []string{}
var NodePoolTopologyComments = map[string]string{
	"minnodevcpus":          "Minimum number of vcpus per node",
	"minnodememory":         "Minimum amount of RAM in megabytes per node",
	"minnodedisk":           "Minimum amount of root partition disk space in gigabytes per node",
	"minnodegpus:#.modelid": "GPU model unique identifier",
	"minnodegpus:#.count":   "Count of how many of this GPU are required/present",
	"minnodegpus:#.vendor":  "GPU vendor (nvidia, amd, etc)",
	"minnodegpus:#.memory":  "Memory in GB",
	"minnodegpus:#.inuse":   "Read-only indication of how many GPUs are in use by tenants for usage APIs",
	"minnodeoptres":         "Minimum number of optional resources per node",
	"minnumberofnodes":      "Minimum number of nodes in pool, to satisfy HA/replication requirements",
}
var NodePoolTopologySpecialArgs = map[string]string{
	"minnodeoptres": "StringToString",
}
var NodePoolRequiredArgs = []string{}
var NodePoolOptionalArgs = []string{
	"name",
	"numnodes",
	"noderesources.vcpus",
	"noderesources.ram",
	"noderesources.disk",
	"noderesources.gpus:#.modelid",
	"noderesources.gpus:#.count",
	"noderesources.gpus:#.vendor",
	"noderesources.gpus:#.memory",
	"noderesources.gpus:#.inuse",
	"noderesources.optresmap",
	"noderesources.infranodeflavor",
	"noderesources.externalvolumesize",
	"noderesources.nodename",
	"scalable",
	"controlplane",
	"nodes",
}
var NodePoolAliasArgs = []string{}
var NodePoolComments = map[string]string{
	"name":                             "Node pool name",
	"numnodes":                         "Number of nodes in the pool",
	"noderesources.vcpus":              "Vcpus to be allocated to the VM, must be either 1 or an even number",
	"noderesources.ram":                "Total RAM in megabytes to be allocated to the VM",
	"noderesources.disk":               "Total disk space in gigabytes to be allocated to the VMs root partition",
	"noderesources.gpus:#.modelid":     "GPU model unique identifier",
	"noderesources.gpus:#.count":       "Count of how many of this GPU are required/present",
	"noderesources.gpus:#.vendor":      "GPU vendor (nvidia, amd, etc)",
	"noderesources.gpus:#.memory":      "Memory in GB",
	"noderesources.gpus:#.inuse":       "Read-only indication of how many GPUs are in use by tenants for usage APIs",
	"noderesources.optresmap":          "Optional resources request, i.e. optresmap=restype=resname:1",
	"noderesources.infranodeflavor":    "Infrastructure specific node flavor",
	"noderesources.externalvolumesize": "Size of external volume to be attached to nodes. This is for the root partition",
	"noderesources.nodename":           "node name if using nodes as a resource",
	"scalable":                         "Scalable indicates the system may scale the number of nodes",
	"controlplane":                     "Pool is the control-plane pool for a Kubernetes cluster",
	"nodes":                            "Node names in pool when using nodes",
}
var NodePoolSpecialArgs = map[string]string{
	"noderesources.optresmap": "StringToString",
	"nodes":                   "StringArray",
}
