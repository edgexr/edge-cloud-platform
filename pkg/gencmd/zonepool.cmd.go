// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zonepool.proto

package gencmd

import (
	"context"
	fmt "fmt"
	_ "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	distributed_match_engine "github.com/edgexr/edge-cloud-platform/api/distributed_match_engine"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/cli"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/spf13/cobra"
	"google.golang.org/grpc/status"
	"io"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
func ZonePoolHideTags(in *edgeproto.ZonePool) {
	if cli.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cli.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	for i0 := 0; i0 < len(in.Zones); i0++ {
	}
	if _, found := tags["timestamp"]; found {
		in.CreatedAt = distributed_match_engine.Timestamp{}
	}
	if _, found := tags["timestamp"]; found {
		in.UpdatedAt = distributed_match_engine.Timestamp{}
	}
}

var ZonePoolApiCmd edgeproto.ZonePoolApiClient

var CreateZonePoolCmd = &cli.Command{
	Use:          "CreateZonePool",
	RequiredArgs: strings.Join(ZonePoolRequiredArgs, " "),
	OptionalArgs: strings.Join(ZonePoolOptionalArgs, " "),
	AliasArgs:    strings.Join(ZonePoolAliasArgs, " "),
	SpecialArgs:  &ZonePoolSpecialArgs,
	Comments:     ZonePoolComments,
	ReqData:      &edgeproto.ZonePool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateZonePool,
}

func runCreateZonePool(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.ZonePool)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateZonePool(c, obj)
}

func CreateZonePool(c *cli.Command, in *edgeproto.ZonePool) error {
	if ZonePoolApiCmd == nil {
		return fmt.Errorf("ZonePoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := ZonePoolApiCmd.CreateZonePool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateZonePool failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateZonePools(c *cli.Command, data []edgeproto.ZonePool, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateZonePool %v\n", data[ii])
		myerr := CreateZonePool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteZonePoolCmd = &cli.Command{
	Use:          "DeleteZonePool",
	RequiredArgs: strings.Join(ZonePoolRequiredArgs, " "),
	OptionalArgs: strings.Join(ZonePoolOptionalArgs, " "),
	AliasArgs:    strings.Join(ZonePoolAliasArgs, " "),
	SpecialArgs:  &ZonePoolSpecialArgs,
	Comments:     ZonePoolComments,
	ReqData:      &edgeproto.ZonePool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteZonePool,
}

func runDeleteZonePool(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.ZonePool)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteZonePool(c, obj)
}

func DeleteZonePool(c *cli.Command, in *edgeproto.ZonePool) error {
	if ZonePoolApiCmd == nil {
		return fmt.Errorf("ZonePoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := ZonePoolApiCmd.DeleteZonePool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteZonePool failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteZonePools(c *cli.Command, data []edgeproto.ZonePool, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteZonePool %v\n", data[ii])
		myerr := DeleteZonePool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateZonePoolCmd = &cli.Command{
	Use:          "UpdateZonePool",
	RequiredArgs: strings.Join(ZonePoolRequiredArgs, " "),
	OptionalArgs: strings.Join(ZonePoolOptionalArgs, " "),
	AliasArgs:    strings.Join(ZonePoolAliasArgs, " "),
	SpecialArgs:  &ZonePoolSpecialArgs,
	Comments:     ZonePoolComments,
	ReqData:      &edgeproto.ZonePool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runUpdateZonePool,
}

func runUpdateZonePool(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.ZonePool)
	jsonMap, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	obj.Fields = cli.GetSpecifiedFields(jsonMap, c.ReqData)
	return UpdateZonePool(c, obj)
}

func UpdateZonePool(c *cli.Command, in *edgeproto.ZonePool) error {
	if ZonePoolApiCmd == nil {
		return fmt.Errorf("ZonePoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := ZonePoolApiCmd.UpdateZonePool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateZonePool failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func UpdateZonePools(c *cli.Command, data []edgeproto.ZonePool, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateZonePool %v\n", data[ii])
		myerr := UpdateZonePool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowZonePoolCmd = &cli.Command{
	Use:          "ShowZonePool",
	OptionalArgs: strings.Join(append(ZonePoolRequiredArgs, ZonePoolOptionalArgs...), " "),
	AliasArgs:    strings.Join(ZonePoolAliasArgs, " "),
	SpecialArgs:  &ZonePoolSpecialArgs,
	Comments:     ZonePoolComments,
	ReqData:      &edgeproto.ZonePool{},
	ReplyData:    &edgeproto.ZonePool{},
	Run:          runShowZonePool,
}

func runShowZonePool(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.ZonePool)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowZonePool(c, obj)
}

func ShowZonePool(c *cli.Command, in *edgeproto.ZonePool) error {
	if ZonePoolApiCmd == nil {
		return fmt.Errorf("ZonePoolApi client not initialized")
	}
	ctx := context.Background()
	stream, err := ZonePoolApiCmd.ShowZonePool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowZonePool failed: %s", errstr)
	}

	objs := make([]*edgeproto.ZonePool, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowZonePool recv failed: %s", errstr)
		}
		ZonePoolHideTags(obj)
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowZonePools(c *cli.Command, data []edgeproto.ZonePool, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowZonePool %v\n", data[ii])
		myerr := ShowZonePool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var AddZonePoolMemberCmd = &cli.Command{
	Use:          "AddZonePoolMember",
	RequiredArgs: strings.Join(AddZonePoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(AddZonePoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(ZonePoolMemberAliasArgs, " "),
	SpecialArgs:  &ZonePoolMemberSpecialArgs,
	Comments:     ZonePoolMemberComments,
	ReqData:      &edgeproto.ZonePoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runAddZonePoolMember,
}

func runAddZonePoolMember(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.ZonePoolMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return AddZonePoolMember(c, obj)
}

func AddZonePoolMember(c *cli.Command, in *edgeproto.ZonePoolMember) error {
	if ZonePoolApiCmd == nil {
		return fmt.Errorf("ZonePoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := ZonePoolApiCmd.AddZonePoolMember(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("AddZonePoolMember failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func AddZonePoolMembers(c *cli.Command, data []edgeproto.ZonePoolMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("AddZonePoolMember %v\n", data[ii])
		myerr := AddZonePoolMember(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var RemoveZonePoolMemberCmd = &cli.Command{
	Use:          "RemoveZonePoolMember",
	RequiredArgs: strings.Join(RemoveZonePoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(RemoveZonePoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(ZonePoolMemberAliasArgs, " "),
	SpecialArgs:  &ZonePoolMemberSpecialArgs,
	Comments:     ZonePoolMemberComments,
	ReqData:      &edgeproto.ZonePoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRemoveZonePoolMember,
}

func runRemoveZonePoolMember(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.ZonePoolMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return RemoveZonePoolMember(c, obj)
}

func RemoveZonePoolMember(c *cli.Command, in *edgeproto.ZonePoolMember) error {
	if ZonePoolApiCmd == nil {
		return fmt.Errorf("ZonePoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := ZonePoolApiCmd.RemoveZonePoolMember(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("RemoveZonePoolMember failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func RemoveZonePoolMembers(c *cli.Command, data []edgeproto.ZonePoolMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("RemoveZonePoolMember %v\n", data[ii])
		myerr := RemoveZonePoolMember(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ZonePoolApiCmds = []*cobra.Command{
	CreateZonePoolCmd.GenCmd(),
	DeleteZonePoolCmd.GenCmd(),
	UpdateZonePoolCmd.GenCmd(),
	ShowZonePoolCmd.GenCmd(),
	AddZonePoolMemberCmd.GenCmd(),
	RemoveZonePoolMemberCmd.GenCmd(),
}

var ZonePoolKeyRequiredArgs = []string{}
var ZonePoolKeyOptionalArgs = []string{
	"organization",
	"name",
}
var ZonePoolKeyAliasArgs = []string{}
var ZonePoolKeyComments = map[string]string{
	"organization": "Name of the organization this pool belongs to",
	"name":         "ZonePool Name",
}
var ZonePoolKeySpecialArgs = map[string]string{}
var ZonePoolRequiredArgs = []string{
	"org",
	"name",
}
var ZonePoolOptionalArgs = []string{
	"zones:empty",
	"zones:#.name",
	"zones:#.federatedorganization",
}
var ZonePoolAliasArgs = []string{
	"org=key.organization",
	"name=key.name",
}
var ZonePoolComments = map[string]string{
	"fields":                        "Fields are used for the Update API to specify which fields to apply",
	"org":                           "Name of the organization this pool belongs to",
	"name":                          "ZonePool Name",
	"zones:empty":                   "Zones part of the pool, specify zones:empty=true to clear",
	"zones:#.organization":          "Organization owner of the Zone",
	"zones:#.name":                  "Name of the Zone",
	"zones:#.federatedorganization": "Federated operator organization who shared this Zone",
	"createdat":                     "Created at time",
	"updatedat":                     "Updated at time",
	"deleteprepare":                 "Preparing to be deleted",
}
var ZonePoolSpecialArgs = map[string]string{
	"fields": "StringArray",
}
var ZonePoolMemberRequiredArgs = []string{
	"org",
	"pool",
}
var ZonePoolMemberOptionalArgs = []string{
	"zone",
	"zonefedorg",
}
var ZonePoolMemberAliasArgs = []string{
	"org=key.organization",
	"pool=key.name",
	"zoneorg=zone.organization",
	"zone=zone.name",
	"zonefedorg=zone.federatedorganization",
}
var ZonePoolMemberComments = map[string]string{
	"org":        "Name of the organization this pool belongs to",
	"pool":       "ZonePool Name",
	"zoneorg":    "Organization owner of the Zone",
	"zone":       "Name of the Zone",
	"zonefedorg": "Federated operator organization who shared this Zone",
}
var ZonePoolMemberSpecialArgs = map[string]string{}
var AddZonePoolMemberRequiredArgs = []string{
	"org",
	"pool",
	"zone",
}
var AddZonePoolMemberOptionalArgs = []string{
	"zonefedorg",
}
var RemoveZonePoolMemberRequiredArgs = []string{
	"org",
	"pool",
	"zone",
}
var RemoveZonePoolMemberOptionalArgs = []string{
	"zonefedorg",
}
