// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package gencmd

import (
	"context"
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/pkg/cli"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/spf13/cobra"
	"google.golang.org/grpc/status"
	"io"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
func NodeHideTags(in *edgeproto.Node) {
	if cli.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cli.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	for i1 := 0; i1 < len(in.NodeResources.Gpus); i1++ {
	}
	if _, found := tags["nocmp"]; found {
		in.ObjId = ""
	}
}

var NodeApiCmd edgeproto.NodeApiClient

var CreateNodeCmd = &cli.Command{
	Use:          "CreateNode",
	RequiredArgs: strings.Join(NodeRequiredArgs, " "),
	OptionalArgs: strings.Join(NodeOptionalArgs, " "),
	AliasArgs:    strings.Join(NodeAliasArgs, " "),
	SpecialArgs:  &NodeSpecialArgs,
	Comments:     NodeComments,
	ReqData:      &edgeproto.Node{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateNode,
}

func runCreateNode(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.Node)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateNode(c, obj)
}

func CreateNode(c *cli.Command, in *edgeproto.Node) error {
	if NodeApiCmd == nil {
		return fmt.Errorf("NodeApi client not initialized")
	}
	ctx := context.Background()
	obj, err := NodeApiCmd.CreateNode(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateNode failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateNodes(c *cli.Command, data []edgeproto.Node, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateNode %v\n", data[ii])
		myerr := CreateNode(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteNodeCmd = &cli.Command{
	Use:          "DeleteNode",
	RequiredArgs: strings.Join(NodeRequiredArgs, " "),
	OptionalArgs: strings.Join(NodeOptionalArgs, " "),
	AliasArgs:    strings.Join(NodeAliasArgs, " "),
	SpecialArgs:  &NodeSpecialArgs,
	Comments:     NodeComments,
	ReqData:      &edgeproto.Node{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteNode,
}

func runDeleteNode(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.Node)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteNode(c, obj)
}

func DeleteNode(c *cli.Command, in *edgeproto.Node) error {
	if NodeApiCmd == nil {
		return fmt.Errorf("NodeApi client not initialized")
	}
	ctx := context.Background()
	obj, err := NodeApiCmd.DeleteNode(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteNode failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteNodes(c *cli.Command, data []edgeproto.Node, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteNode %v\n", data[ii])
		myerr := DeleteNode(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateNodeCmd = &cli.Command{
	Use:          "UpdateNode",
	RequiredArgs: strings.Join(NodeRequiredArgs, " "),
	OptionalArgs: strings.Join(NodeOptionalArgs, " "),
	AliasArgs:    strings.Join(NodeAliasArgs, " "),
	SpecialArgs:  &NodeSpecialArgs,
	Comments:     NodeComments,
	ReqData:      &edgeproto.Node{},
	ReplyData:    &edgeproto.Result{},
	Run:          runUpdateNode,
}

func runUpdateNode(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.Node)
	jsonMap, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	obj.Fields = cli.GetSpecifiedFields(jsonMap, c.ReqData)
	return UpdateNode(c, obj)
}

func UpdateNode(c *cli.Command, in *edgeproto.Node) error {
	if NodeApiCmd == nil {
		return fmt.Errorf("NodeApi client not initialized")
	}
	ctx := context.Background()
	obj, err := NodeApiCmd.UpdateNode(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateNode failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func UpdateNodes(c *cli.Command, data []edgeproto.Node, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateNode %v\n", data[ii])
		myerr := UpdateNode(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowNodeCmd = &cli.Command{
	Use:          "ShowNode",
	OptionalArgs: strings.Join(append(NodeRequiredArgs, NodeOptionalArgs...), " "),
	AliasArgs:    strings.Join(NodeAliasArgs, " "),
	SpecialArgs:  &NodeSpecialArgs,
	Comments:     NodeComments,
	ReqData:      &edgeproto.Node{},
	ReplyData:    &edgeproto.Node{},
	Run:          runShowNode,
}

func runShowNode(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.Node)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowNode(c, obj)
}

func ShowNode(c *cli.Command, in *edgeproto.Node) error {
	if NodeApiCmd == nil {
		return fmt.Errorf("NodeApi client not initialized")
	}
	ctx := context.Background()
	stream, err := NodeApiCmd.ShowNode(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowNode failed: %s", errstr)
	}

	objs := make([]*edgeproto.Node, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowNode recv failed: %s", errstr)
		}
		NodeHideTags(obj)
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowNodes(c *cli.Command, data []edgeproto.Node, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowNode %v\n", data[ii])
		myerr := ShowNode(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var NodeApiCmds = []*cobra.Command{
	CreateNodeCmd.GenCmd(),
	DeleteNodeCmd.GenCmd(),
	UpdateNodeCmd.GenCmd(),
	ShowNodeCmd.GenCmd(),
}

var NodeKeyRequiredArgs = []string{
	"organization",
	"name",
}
var NodeKeyOptionalArgs = []string{}
var NodeKeyAliasArgs = []string{}
var NodeKeyComments = map[string]string{
	"organization": "Organization the node belongs to.",
	"name":         "Name of the node",
}
var NodeKeySpecialArgs = map[string]string{}
var NodeRequiredArgs = []string{
	"org",
	"name",
}
var NodeOptionalArgs = []string{
	"cloudletkey.organization",
	"cloudletkey.name",
	"cloudletkey.federatedorganization",
	"username",
	"publicaddr",
	"mgmtaddr",
	"sshport",
	"skipnodecheck",
}
var NodeAliasArgs = []string{
	"org=key.organization",
	"name=key.name",
}
var NodeComments = map[string]string{
	"fields":                            "Fields are used for the Update API to specify which fields to apply",
	"org":                               "Organization the node belongs to.",
	"name":                              "Name of the node",
	"cloudletkey.organization":          "Organization of the cloudlet site",
	"cloudletkey.name":                  "Name of the cloudlet",
	"cloudletkey.federatedorganization": "Federated operator organization who shared this cloudlet",
	"username":                          "Username for accessing the node",
	"publicaddr":                        "Hostname or IP address of the public interface",
	"mgmtaddr":                          "Hostname or IP address of the management interface (defaults to public address)",
	"sshport":                           "SSH port on the management interface (defaults to 22)",
	"assignment":                        "Assignment status of node",
	"health":                            "Health status of node",
	"dynamicallycreated":                "Dynamically created is set to true if the node was created on-demand.",
	"owner.name":                        "Cluster name",
	"owner.organization":                "Name of the organization that this cluster belongs to",
	"noderesources.vcpus":               "Vcpus to be allocated to the VM, must be either 1 or an even number",
	"noderesources.ram":                 "Total RAM in megabytes to be allocated to the VM",
	"noderesources.disk":                "Total disk space in gigabytes to be allocated to the VMs root partition",
	"noderesources.gpus:empty":          "GPUs, specify noderesources.gpus:empty=true to clear",
	"noderesources.gpus:#.modelid":      "GPU model unique identifier",
	"noderesources.gpus:#.count":        "Count of how many of this GPU are required/present",
	"noderesources.gpus:#.vendor":       "GPU vendor (nvidia, amd, etc)",
	"noderesources.gpus:#.memory":       "Memory in GB",
	"noderesources.gpus:#.inuse":        "Read-only indication of how many GPUs are in use by tenants for usage APIs",
	"noderesources.optresmap":           "Optional resources request, i.e. optresmap=restype=resname:1, specify noderesources.optresmap:empty=true to clear",
	"noderesources.infranodeflavor":     "Infrastructure specific node flavor",
	"noderesources.externalvolumesize":  "Size of external volume to be attached to nodes. This is for the root partition",
	"noderesources.nodename":            "node name if using nodes as a resource",
	"role":                              "Node role in the context of the owning cluster",
	"nodepool":                          "Node pool assignment if applicable",
	"flavorname":                        "Name to use when represented as a flavor",
	"skipnodecheck":                     "Use on create/update to skip node checks, avoids ssh test",
	"objid":                             "Object ID",
}
var NodeSpecialArgs = map[string]string{
	"fields":                  "StringArray",
	"noderesources.optresmap": "StringToString",
}
