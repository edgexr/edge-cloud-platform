// Package federation provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package federation

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates one direction federation with partner operator platform.
	// (POST /partner)
	CreateFederation(ctx echo.Context) error
	// Instantiates an application on a partner OP zone.
	// (POST /{federationContextId}/application/lcm)
	InstallApp(ctx echo.Context, federationContextId FederationContextId) error
	// Retrieves all application instance of partner OP
	// (GET /{federationContextId}/application/lcm/app/{appId}/appProvider/{appProviderId})
	GetAllAppInstances(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, appProviderId AppProviderId) error
	// Terminate an application instance on a partner OP zone.
	// (DELETE /{federationContextId}/application/lcm/app/{appId}/instance/{appInstanceId}/zone/{zoneId})
	RemoveApp(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier) error
	// Retrieves an application instance details from partner OP.
	// (GET /{federationContextId}/application/lcm/app/{appId}/instance/{appInstanceId}/zone/{zoneId})
	GetAppInstanceDetails(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, appInstanceId InstanceIdentifier, zoneId ZoneIdentifier) error
	// Submits an application details to a partner OP. Based on the details provided,  partner OP shall do bookkeeping, resource validation and other pre-deployment operations.
	// (POST /{federationContextId}/application/onboarding)
	OnboardApplication(ctx echo.Context, federationContextId FederationContextId) error
	// Retrieves application details from partner OP
	// (GET /{federationContextId}/application/onboarding/app/{appId})
	ViewApplication(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error
	// Updates partner OP about changes in  application compute resource requirements, QOS Profile, associated descriptor or change in associated components
	// (PATCH /{federationContextId}/application/onboarding/app/{appId})
	UpdateApplication(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error
	// Onboards an existing application to a new zone within partner OP.
	// (POST /{federationContextId}/application/onboarding/app/{appId}/additionalZones)
	OnboardExistingAppNewZones(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error
	// Deboards an application from partner OP zones
	// (DELETE /{federationContextId}/application/onboarding/app/{appId}/zone/{zoneId})
	DeboardApplication(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier, zoneId ZoneIdentifier) error
	// Forbid/allow application instantiation on a partner zone
	// (POST /{federationContextId}/application/onboarding/app/{appId}/zoneForbid)
	LockUnlockApplicationZone(ctx echo.Context, federationContextId FederationContextId, appId AppIdentifier) error
	// Uploads application artefact  on partner OP. Artefact is a zip file containing  scripts and/or packaging files like Terraform or Helm which are required to create an instance of an application.
	// (POST /{federationContextId}/artefact)
	UploadArtefact(ctx echo.Context, federationContextId FederationContextId) error
	// Removes an artefact from partner OP.
	// (DELETE /{federationContextId}/artefact/{artefactId})
	RemoveArtefact(ctx echo.Context, federationContextId FederationContextId, artefactId ArtefactId) error
	// Retrieves details about an artefact.
	// (GET /{federationContextId}/artefact/{artefactId})
	GetArtefact(ctx echo.Context, federationContextId FederationContextId, artefactId ArtefactId) error
	// Edge discovery procedures towards partner OP over E/WBI. Originating OP request partner OP to provide a list of candidate zones where an application instance can be created. Partner OP applies a set of filtering criteriaâ€™s to select candidate zones.
	// (POST /{federationContextId}/edgenodesharing/edgeDiscovery)
	GetCandidateZones(ctx echo.Context, federationContextId FederationContextId) error
	// Uploads an image file. Originating OP uses this api to onboard an application image to partner OP.
	// (POST /{federationContextId}/files)
	UploadFile(ctx echo.Context, federationContextId FederationContextId) error
	// Removes an image file from partner OP.
	// (DELETE /{federationContextId}/files/{fileId})
	RemoveFile(ctx echo.Context, federationContextId FederationContextId, fileId FileId) error
	// View an image file from partner OP.
	// (GET /{federationContextId}/files/{fileId})
	ViewFile(ctx echo.Context, federationContextId FederationContextId, fileId FileId) error
	// Retrieves the resource pool reserved by an ISV
	// (GET /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId})
	ViewISVResPool(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId) error
	// Reserves resources (compute, network and storage)  on a partner OP zone.   ISVs registered with home OP reserves resources on a partner OP zone.
	// (POST /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId})
	CreateResourcePools(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId) error
	// Deletes the resource pool reserved by an ISV
	// (DELETE /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId}/pool/{poolId})
	RemoveISVResPool(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId) error
	// Updates resources reserved for a pool by an ISV
	// (PATCH /{federationContextId}/isv/resource/zone/{zoneId}/appProvider/{appProviderId}/pool/{poolId})
	UpdateISVResPool(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier, appProviderId AppProviderId, poolId PoolId) error
	// Remove existing federation with the partner OP
	// (DELETE /{federationContextId}/partner)
	DeleteFederationDetails(ctx echo.Context, federationContextId FederationContextId) error
	// Retrieves details about the federation context with the partner OP. The response shall provide info about the zones offered by the partner, partner OP network codes, information about edge discovery and LCM service etc.
	// (GET /{federationContextId}/partner)
	GetFederationDetails(ctx echo.Context, federationContextId FederationContextId) error
	// API used by the Originating OP towards the partner OP, to update the parameters associated to the existing federation
	// (PATCH /{federationContextId}/partner)
	UpdateFederation(ctx echo.Context, federationContextId FederationContextId) error
	// Validates the authenticity of a roaming user from home OP
	// (GET /{federationContextId}/roaminguserauth/device/{deviceId}/token/{authToken})
	AuthenticateDevice(ctx echo.Context, federationContextId FederationContextId, deviceId DeviceId, authToken AuthorizationToken) error
	// Originating OP informs partner OP that it is willing to access the specified zones  and partner OP shall reserve compute and network resources for these zones.
	// (POST /{federationContextId}/zones)
	ZoneSubscribe(ctx echo.Context, federationContextId FederationContextId) error
	// Asservate usage of  a partner OP zone. Originating OP informs partner OP that it will no longer access the specified zone.
	// (DELETE /{federationContextId}/zones/{zoneId})
	ZoneUnsubscribe(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier) error
	// Retrieves details about the computation and network resources that partner OP has reserved for this zone.
	// (GET /{federationContextId}/zones/{zoneId})
	GetZoneData(ctx echo.Context, federationContextId FederationContextId, zoneId ZoneIdentifier) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateFederation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFederation(ctx echo.Context) error {
	var err error

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFederation(ctx)
	return err
}

// InstallApp converts echo context to params.
func (w *ServerInterfaceWrapper) InstallApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallApp(ctx, federationContextId)
	return err
}

// GetAllAppInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllAppInstances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "appProviderId" -------------
	var appProviderId AppProviderId

	err = runtime.BindStyledParameterWithLocation("simple", false, "appProviderId", runtime.ParamLocationPath, ctx.Param("appProviderId"), &appProviderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appProviderId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllAppInstances(ctx, federationContextId, appId, appProviderId)
	return err
}

// RemoveApp converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "appInstanceId" -------------
	var appInstanceId InstanceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "appInstanceId", runtime.ParamLocationPath, ctx.Param("appInstanceId"), &appInstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appInstanceId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveApp(ctx, federationContextId, appId, appInstanceId, zoneId)
	return err
}

// GetAppInstanceDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetAppInstanceDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "appInstanceId" -------------
	var appInstanceId InstanceIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "appInstanceId", runtime.ParamLocationPath, ctx.Param("appInstanceId"), &appInstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appInstanceId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAppInstanceDetails(ctx, federationContextId, appId, appInstanceId, zoneId)
	return err
}

// OnboardApplication converts echo context to params.
func (w *ServerInterfaceWrapper) OnboardApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OnboardApplication(ctx, federationContextId)
	return err
}

// ViewApplication converts echo context to params.
func (w *ServerInterfaceWrapper) ViewApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ViewApplication(ctx, federationContextId, appId)
	return err
}

// UpdateApplication converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateApplication(ctx, federationContextId, appId)
	return err
}

// OnboardExistingAppNewZones converts echo context to params.
func (w *ServerInterfaceWrapper) OnboardExistingAppNewZones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OnboardExistingAppNewZones(ctx, federationContextId, appId)
	return err
}

// DeboardApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeboardApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeboardApplication(ctx, federationContextId, appId, zoneId)
	return err
}

// LockUnlockApplicationZone converts echo context to params.
func (w *ServerInterfaceWrapper) LockUnlockApplicationZone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "appId" -------------
	var appId AppIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LockUnlockApplicationZone(ctx, federationContextId, appId)
	return err
}

// UploadArtefact converts echo context to params.
func (w *ServerInterfaceWrapper) UploadArtefact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadArtefact(ctx, federationContextId)
	return err
}

// RemoveArtefact converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveArtefact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "artefactId" -------------
	var artefactId ArtefactId

	err = runtime.BindStyledParameterWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, ctx.Param("artefactId"), &artefactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artefactId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveArtefact(ctx, federationContextId, artefactId)
	return err
}

// GetArtefact converts echo context to params.
func (w *ServerInterfaceWrapper) GetArtefact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "artefactId" -------------
	var artefactId ArtefactId

	err = runtime.BindStyledParameterWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, ctx.Param("artefactId"), &artefactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artefactId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArtefact(ctx, federationContextId, artefactId)
	return err
}

// GetCandidateZones converts echo context to params.
func (w *ServerInterfaceWrapper) GetCandidateZones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCandidateZones(ctx, federationContextId)
	return err
}

// UploadFile converts echo context to params.
func (w *ServerInterfaceWrapper) UploadFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadFile(ctx, federationContextId)
	return err
}

// RemoveFile converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "fileId" -------------
	var fileId FileId

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileId", runtime.ParamLocationPath, ctx.Param("fileId"), &fileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fileId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveFile(ctx, federationContextId, fileId)
	return err
}

// ViewFile converts echo context to params.
func (w *ServerInterfaceWrapper) ViewFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "fileId" -------------
	var fileId FileId

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileId", runtime.ParamLocationPath, ctx.Param("fileId"), &fileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fileId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ViewFile(ctx, federationContextId, fileId)
	return err
}

// ViewISVResPool converts echo context to params.
func (w *ServerInterfaceWrapper) ViewISVResPool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "appProviderId" -------------
	var appProviderId AppProviderId

	err = runtime.BindStyledParameterWithLocation("simple", false, "appProviderId", runtime.ParamLocationPath, ctx.Param("appProviderId"), &appProviderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appProviderId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ViewISVResPool(ctx, federationContextId, zoneId, appProviderId)
	return err
}

// CreateResourcePools converts echo context to params.
func (w *ServerInterfaceWrapper) CreateResourcePools(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "appProviderId" -------------
	var appProviderId AppProviderId

	err = runtime.BindStyledParameterWithLocation("simple", false, "appProviderId", runtime.ParamLocationPath, ctx.Param("appProviderId"), &appProviderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appProviderId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateResourcePools(ctx, federationContextId, zoneId, appProviderId)
	return err
}

// RemoveISVResPool converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveISVResPool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "appProviderId" -------------
	var appProviderId AppProviderId

	err = runtime.BindStyledParameterWithLocation("simple", false, "appProviderId", runtime.ParamLocationPath, ctx.Param("appProviderId"), &appProviderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appProviderId: %s", err))
	}

	// ------------- Path parameter "poolId" -------------
	var poolId PoolId

	err = runtime.BindStyledParameterWithLocation("simple", false, "poolId", runtime.ParamLocationPath, ctx.Param("poolId"), &poolId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter poolId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveISVResPool(ctx, federationContextId, zoneId, appProviderId, poolId)
	return err
}

// UpdateISVResPool converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateISVResPool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	// ------------- Path parameter "appProviderId" -------------
	var appProviderId AppProviderId

	err = runtime.BindStyledParameterWithLocation("simple", false, "appProviderId", runtime.ParamLocationPath, ctx.Param("appProviderId"), &appProviderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appProviderId: %s", err))
	}

	// ------------- Path parameter "poolId" -------------
	var poolId PoolId

	err = runtime.BindStyledParameterWithLocation("simple", false, "poolId", runtime.ParamLocationPath, ctx.Param("poolId"), &poolId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter poolId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateISVResPool(ctx, federationContextId, zoneId, appProviderId, poolId)
	return err
}

// DeleteFederationDetails converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFederationDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFederationDetails(ctx, federationContextId)
	return err
}

// GetFederationDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFederationDetails(ctx, federationContextId)
	return err
}

// UpdateFederation converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFederation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateFederation(ctx, federationContextId)
	return err
}

// AuthenticateDevice converts echo context to params.
func (w *ServerInterfaceWrapper) AuthenticateDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "deviceId" -------------
	var deviceId DeviceId

	err = runtime.BindStyledParameterWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, ctx.Param("deviceId"), &deviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deviceId: %s", err))
	}

	// ------------- Path parameter "authToken" -------------
	var authToken AuthorizationToken

	err = runtime.BindStyledParameterWithLocation("simple", false, "authToken", runtime.ParamLocationPath, ctx.Param("authToken"), &authToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authToken: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthenticateDevice(ctx, federationContextId, deviceId, authToken)
	return err
}

// ZoneSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) ZoneSubscribe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ZoneSubscribe(ctx, federationContextId)
	return err
}

// ZoneUnsubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) ZoneUnsubscribe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ZoneUnsubscribe(ctx, federationContextId, zoneId)
	return err
}

// GetZoneData converts echo context to params.
func (w *ServerInterfaceWrapper) GetZoneData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "federationContextId" -------------
	var federationContextId FederationContextId

	err = runtime.BindStyledParameterWithLocation("simple", false, "federationContextId", runtime.ParamLocationPath, ctx.Param("federationContextId"), &federationContextId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federationContextId: %s", err))
	}

	// ------------- Path parameter "zoneId" -------------
	var zoneId ZoneIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, ctx.Param("zoneId"), &zoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zoneId: %s", err))
	}

	ctx.Set(OAuth2ClientCredentialsScopes, []string{"fed-mgmt"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetZoneData(ctx, federationContextId, zoneId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/partner", wrapper.CreateFederation)
	router.POST(baseURL+"/:federationContextId/application/lcm", wrapper.InstallApp)
	router.GET(baseURL+"/:federationContextId/application/lcm/app/:appId/appProvider/:appProviderId", wrapper.GetAllAppInstances)
	router.DELETE(baseURL+"/:federationContextId/application/lcm/app/:appId/instance/:appInstanceId/zone/:zoneId", wrapper.RemoveApp)
	router.GET(baseURL+"/:federationContextId/application/lcm/app/:appId/instance/:appInstanceId/zone/:zoneId", wrapper.GetAppInstanceDetails)
	router.POST(baseURL+"/:federationContextId/application/onboarding", wrapper.OnboardApplication)
	router.GET(baseURL+"/:federationContextId/application/onboarding/app/:appId", wrapper.ViewApplication)
	router.PATCH(baseURL+"/:federationContextId/application/onboarding/app/:appId", wrapper.UpdateApplication)
	router.POST(baseURL+"/:federationContextId/application/onboarding/app/:appId/additionalZones", wrapper.OnboardExistingAppNewZones)
	router.DELETE(baseURL+"/:federationContextId/application/onboarding/app/:appId/zone/:zoneId", wrapper.DeboardApplication)
	router.POST(baseURL+"/:federationContextId/application/onboarding/app/:appId/zoneForbid", wrapper.LockUnlockApplicationZone)
	router.POST(baseURL+"/:federationContextId/artefact", wrapper.UploadArtefact)
	router.DELETE(baseURL+"/:federationContextId/artefact/:artefactId", wrapper.RemoveArtefact)
	router.GET(baseURL+"/:federationContextId/artefact/:artefactId", wrapper.GetArtefact)
	router.POST(baseURL+"/:federationContextId/edgenodesharing/edgeDiscovery", wrapper.GetCandidateZones)
	router.POST(baseURL+"/:federationContextId/files", wrapper.UploadFile)
	router.DELETE(baseURL+"/:federationContextId/files/:fileId", wrapper.RemoveFile)
	router.GET(baseURL+"/:federationContextId/files/:fileId", wrapper.ViewFile)
	router.GET(baseURL+"/:federationContextId/isv/resource/zone/:zoneId/appProvider/:appProviderId", wrapper.ViewISVResPool)
	router.POST(baseURL+"/:federationContextId/isv/resource/zone/:zoneId/appProvider/:appProviderId", wrapper.CreateResourcePools)
	router.DELETE(baseURL+"/:federationContextId/isv/resource/zone/:zoneId/appProvider/:appProviderId/pool/:poolId", wrapper.RemoveISVResPool)
	router.PATCH(baseURL+"/:federationContextId/isv/resource/zone/:zoneId/appProvider/:appProviderId/pool/:poolId", wrapper.UpdateISVResPool)
	router.DELETE(baseURL+"/:federationContextId/partner", wrapper.DeleteFederationDetails)
	router.GET(baseURL+"/:federationContextId/partner", wrapper.GetFederationDetails)
	router.PATCH(baseURL+"/:federationContextId/partner", wrapper.UpdateFederation)
	router.GET(baseURL+"/:federationContextId/roaminguserauth/device/:deviceId/token/:authToken", wrapper.AuthenticateDevice)
	router.POST(baseURL+"/:federationContextId/zones", wrapper.ZoneSubscribe)
	router.DELETE(baseURL+"/:federationContextId/zones/:zoneId", wrapper.ZoneUnsubscribe)
	router.GET(baseURL+"/:federationContextId/zones/:zoneId", wrapper.GetZoneData)

}
