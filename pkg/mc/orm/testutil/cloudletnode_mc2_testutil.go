// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletnode.proto

package testutil

import (
	"context"
	fmt "fmt"
	edgeproto "github.com/edgexr/edge-cloud-platform/api/edgeproto"
	"github.com/edgexr/edge-cloud-platform/api/ormapi"
	"github.com/edgexr/edge-cloud-platform/pkg/mcctl/mctestclient"
	_ "github.com/edgexr/edge-cloud-platform/tools/protogen"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

func TestCreateCloudletNode(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.CloudletNode, modFuncs ...func(*edgeproto.CloudletNode)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionCloudletNode{}
	dat.Region = region
	dat.CloudletNode = *in
	for _, fn := range modFuncs {
		fn(&dat.CloudletNode)
	}
	return mcClient.CreateCloudletNode(uri, token, dat)
}
func TestPermCreateCloudletNode(mcClient *mctestclient.Client, uri, token, region, org string, targetCloudlet *edgeproto.CloudletKey, modFuncs ...func(*edgeproto.CloudletNode)) (*edgeproto.Result, int, error) {
	in := &edgeproto.CloudletNode{}
	if targetCloudlet != nil {
		in.Key.CloudletKey = *targetCloudlet
	}
	return TestCreateCloudletNode(mcClient, uri, token, region, in, modFuncs...)
}

func TestUpdateCloudletNode(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.CloudletNode, modFuncs ...func(*edgeproto.CloudletNode)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionCloudletNode{}
	dat.Region = region
	dat.CloudletNode = *in
	for _, fn := range modFuncs {
		fn(&dat.CloudletNode)
	}
	return mcClient.UpdateCloudletNode(uri, token, dat)
}
func TestPermUpdateCloudletNode(mcClient *mctestclient.Client, uri, token, region, org string, targetCloudlet *edgeproto.CloudletKey, modFuncs ...func(*edgeproto.CloudletNode)) (*edgeproto.Result, int, error) {
	in := &edgeproto.CloudletNode{}
	if targetCloudlet != nil {
		in.Key.CloudletKey = *targetCloudlet
		in.Fields = append(in.Fields,
			edgeproto.CloudletNodeFieldKeyCloudletKeyName,
			edgeproto.CloudletNodeFieldKeyCloudletKeyOrganization,
		)
	}
	return TestUpdateCloudletNode(mcClient, uri, token, region, in, modFuncs...)
}

func TestShowCloudletNode(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.CloudletNode, modFuncs ...func(*edgeproto.CloudletNode)) ([]edgeproto.CloudletNode, int, error) {
	dat := &ormapi.RegionCloudletNode{}
	dat.Region = region
	dat.CloudletNode = *in
	for _, fn := range modFuncs {
		fn(&dat.CloudletNode)
	}
	return mcClient.ShowCloudletNode(uri, token, dat)
}
func TestPermShowCloudletNode(mcClient *mctestclient.Client, uri, token, region, org string, modFuncs ...func(*edgeproto.CloudletNode)) ([]edgeproto.CloudletNode, int, error) {
	in := &edgeproto.CloudletNode{}
	in.Key.CloudletKey.Organization = org
	return TestShowCloudletNode(mcClient, uri, token, region, in, modFuncs...)
}

func TestDeleteCloudletNode(mcClient *mctestclient.Client, uri, token, region string, in *edgeproto.CloudletNode, modFuncs ...func(*edgeproto.CloudletNode)) (*edgeproto.Result, int, error) {
	dat := &ormapi.RegionCloudletNode{}
	dat.Region = region
	dat.CloudletNode = *in
	for _, fn := range modFuncs {
		fn(&dat.CloudletNode)
	}
	return mcClient.DeleteCloudletNode(uri, token, dat)
}
func TestPermDeleteCloudletNode(mcClient *mctestclient.Client, uri, token, region, org string, targetCloudlet *edgeproto.CloudletKey, modFuncs ...func(*edgeproto.CloudletNode)) (*edgeproto.Result, int, error) {
	in := &edgeproto.CloudletNode{}
	if targetCloudlet != nil {
		in.Key.CloudletKey = *targetCloudlet
	}
	in.Key.CloudletKey.Organization = org
	return TestDeleteCloudletNode(mcClient, uri, token, region, in, modFuncs...)
}

func (s *TestClient) CreateCloudletNode(ctx context.Context, in *edgeproto.CloudletNode) (*edgeproto.Result, error) {
	inR := &ormapi.RegionCloudletNode{
		Region:       s.Region,
		CloudletNode: *in,
	}
	out, status, err := s.McClient.CreateCloudletNode(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) UpdateCloudletNode(ctx context.Context, in *edgeproto.CloudletNode) (*edgeproto.Result, error) {
	inR := &ormapi.RegionCloudletNode{
		Region:       s.Region,
		CloudletNode: *in,
	}
	out, status, err := s.McClient.UpdateCloudletNode(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) ShowCloudletNode(ctx context.Context, in *edgeproto.CloudletNode) ([]edgeproto.CloudletNode, error) {
	inR := &ormapi.RegionCloudletNode{
		Region:       s.Region,
		CloudletNode: *in,
	}
	out, status, err := s.McClient.ShowCloudletNode(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}

func (s *TestClient) DeleteCloudletNode(ctx context.Context, in *edgeproto.CloudletNode) (*edgeproto.Result, error) {
	inR := &ormapi.RegionCloudletNode{
		Region:       s.Region,
		CloudletNode: *in,
	}
	out, status, err := s.McClient.DeleteCloudletNode(s.Uri, s.Token, inR)
	if err == nil && status != 200 {
		err = fmt.Errorf("status: %d\n", status)
	}
	return out, err
}
